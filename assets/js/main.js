/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@emotion/hash/dist/hash.browser.cjs.js":
/*!*************************************************************!*\
  !*** ./node_modules/@emotion/hash/dist/hash.browser.cjs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

/* eslint-disable */
// murmurhash2 via https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js
function murmurhash2_32_gc(str) {
  var l = str.length,
      h = l ^ l,
      i = 0,
      k;

  while (l >= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    k ^= k >>> 24;
    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;
    l -= 4;
    ++i;
  }

  switch (l) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
  }

  h ^= h >>> 13;
  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
  h ^= h >>> 15;
  return (h >>> 0).toString(36);
}

exports["default"] = murmurhash2_32_gc;


/***/ }),

/***/ "./node_modules/array-unique/index.js":
/*!********************************************!*\
  !*** ./node_modules/array-unique/index.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
/*!
 * array-unique <https://github.com/jonschlinkert/array-unique>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */



module.exports = function unique(arr) {
  if (!Array.isArray(arr)) {
    throw new TypeError('array-unique expects an array.');
  }

  var len = arr.length;
  var i = -1;

  while (i++ < len) {
    var j = i + 1;

    for (; j < arr.length; ++j) {
      if (arr[i] === arr[j]) {
        arr.splice(j--, 1);
      }
    }
  }
  return arr;
};

module.exports.immutable = function uniqueImmutable(arr) {
  if (!Array.isArray(arr)) {
    throw new TypeError('array-unique expects an array.');
  }

  var arrLen = arr.length;
  var newArr = new Array(arrLen);

  for (var i = 0; i < arrLen; i++) {
    newArr[i] = arr[i];
  }

  return module.exports(newArr);
};


/***/ }),

/***/ "./node_modules/chunk/src/chunk.js":
/*!*****************************************!*\
  !*** ./node_modules/chunk/src/chunk.js ***!
  \*****************************************/
/***/ (function(module, exports) {

"use strict";


(function () {

    function chunk (collection, size) {
    
        var result = [];
        
        // default size to two item
        size = parseInt(size) || 2;
        
        // add each chunk to the result
        for (var x = 0; x < Math.ceil(collection.length / size); x++) {
            
            var start = x * size;
            var end = start + size;
            
            result.push(collection.slice(start, end));
            
        }
        
        return result;
        
    };

    // export in node or browser
    if (true) {
        if ( true && module.exports) {
            exports = module.exports = chunk;
        }
        exports.chunk = chunk;
    } else // removed by dead control flow
{}

}.call(this));


/***/ }),

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

// Save global object in a variable
var __global__ =
(typeof globalThis !== 'undefined' && globalThis) ||
(typeof self !== 'undefined' && self) ||
(typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g);
// Create an object that extends from __global__ without the fetch function
var __globalThis__ = (function () {
function F() {
this.fetch = false;
this.DOMException = __global__.DOMException
}
F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code
return new F();
})();
// Wraps whatwg-fetch with a function scope to hijack the global object
// "globalThis" that's going to be patched
(function(globalThis) {

var irrelevant = (function (exports) {

  /* eslint-disable no-prototype-builtins */
  var g =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    // eslint-disable-next-line no-undef
    (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g) ||
    {};

  var support = {
    searchParams: 'URLSearchParams' in g,
    iterable: 'Symbol' in g && 'iterator' in Symbol,
    blob:
      'FileReader' in g &&
      'Blob' in g &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in g,
    arrayBuffer: 'ArrayBuffer' in g
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
      throw new TypeError('Invalid character in header field name: "' + name + '"')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        if (header.length != 2) {
          throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)
        }
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body._noBody) return
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
    var encoding = match ? match[1] : 'utf-8';
    reader.readAsText(blob, encoding);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */
      // eslint-disable-next-line no-self-assign
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._noBody = true;
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this);
        if (isConsumed) {
          return isConsumed
        } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else if (support.blob) {
        return this.blob().then(readBlobAsArrayBuffer)
      } else {
        throw new Error('could not read as ArrayBuffer')
      }
    };

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }

    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal || (function () {
      if ('AbortController' in g) {
        var ctrl = new AbortController();
        return ctrl.signal;
      }
    }());
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);

    if (this.method === 'GET' || this.method === 'HEAD') {
      if (options.cache === 'no-store' || options.cache === 'no-cache') {
        // Search for a '_' parameter in the query string
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          // If it already exists then set the value with the current time
          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
        } else {
          // Otherwise add a new '_' parameter to the end with the current time
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
        }
      }
    }
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders
      .split('\r')
      .map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
      })
      .forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          try {
            headers.append(key, value);
          } catch (error) {
            console.warn('Response ' + error.message);
          }
        }
      });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    if (this.status < 200 || this.status > 599) {
      throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].")
    }
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 200, statusText: ''});
    response.ok = false;
    response.status = 0;
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = g.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        // This check if specifically for when a user fetches a file locally from the file system
        // Only if the status is out of a normal range
        if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
          options.status = 200;
        } else {
          options.status = xhr.status;
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };

      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError('Network request timed out'));
        }, 0);
      };

      xhr.onabort = function() {
        setTimeout(function() {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        }, 0);
      };

      function fixUrl(url) {
        try {
          return url === '' && g.location.href ? g.location.href : url
        } catch (e) {
          return url
        }
      }

      xhr.open(request.method, fixUrl(request.url), true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr) {
        if (support.blob) {
          xhr.responseType = 'blob';
        } else if (
          support.arrayBuffer
        ) {
          xhr.responseType = 'arraybuffer';
        }
      }

      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
        var names = [];
        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
          names.push(normalizeName(name));
          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
        request.headers.forEach(function(value, name) {
          if (names.indexOf(name) === -1) {
            xhr.setRequestHeader(name, value);
          }
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!g.fetch) {
    g.fetch = fetch;
    g.Headers = Headers;
    g.Request = Request;
    g.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
})(__globalThis__);
// This is a ponyfill, so...
__globalThis__.fetch.ponyfill = true;
delete __globalThis__.fetch.polyfill;
// Choose between native implementation (__global__) or custom implementation (__globalThis__)
var ctx = __global__.fetch ? __global__ : __globalThis__;
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
exports["default"] = ctx.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers
exports.Request = ctx.Request
exports.Response = ctx.Response
module.exports = exports


/***/ }),

/***/ "./node_modules/debounce/index.js":
/*!****************************************!*\
  !*** ./node_modules/debounce/index.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing. The function also has a property 'clear' 
 * that is a function which will clear the timer to prevent previously scheduled executions. 
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */
function debounce(func, wait, immediate){
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;

  function later() {
    var last = Date.now() - timestamp;

    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        context = args = null;
      }
    }
  };

  var debounced = function(){
    context = this;
    args = arguments;
    timestamp = Date.now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };

  debounced.clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };
  
  debounced.flush = function() {
    if (timeout) {
      result = func.apply(context, args);
      context = args = null;
      
      clearTimeout(timeout);
      timeout = null;
    }
  };

  return debounced;
};

// Adds compatibility for ES modules
debounce.debounce = debounce;

module.exports = debounce;


/***/ }),

/***/ "./node_modules/fast-get/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/fast-get/src/index.js ***!
  \********************************************/
/***/ ((module) => {

const regexCloseSquareBracket = /]|^\[/g
const regexOpenSquareBracket = /\.?\[/g

module.exports = function (object, path, defaultValue) {
  // Handle the case that the object is undefined or not an object
  if (!object || Object(object) !== object) {
    return defaultValue
  }

  // A) If the path is an array, we can just use that
  // B) If the path is a string, convert it into an array by migrating
  //    array-style `[foo]` accessors into object-style `.foo` accessors
  const cleanPath = Array.isArray(path)
    ? path
    : path.replace(regexCloseSquareBracket, '').replace(regexOpenSquareBracket, '.').split('.')

  return get(object, cleanPath, defaultValue)
}

function get (object, path, defaultValue) {
  let current = object

  for (const segment of path) {
    current = current[segment]

    if (current == null) {
      return defaultValue
    }
  }

  return current
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/cache/browser.js":
/*!*********************************************************!*\
  !*** ./node_modules/gw2api-client/src/cache/browser.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const debounce = __webpack_require__(/*! debounce */ "./node_modules/debounce/index.js")
const idbKeyval = __webpack_require__(/*! idb-keyval */ "./node_modules/idb-keyval/dist/idb-keyval.mjs")

module.exports = function (configuration) {
  configuration = Object.assign({
    storageKey: 'gw2api-cache',
    gcTick: 5 * 60 * 1000,
    persistDebounce: 3 * 1000,
    storageEngine: idbKeyval
  }, configuration)

  let _storage = {}
  const storageEngine = configuration.storageEngine
  const storageKey = configuration.storageKey
  const persist = debounce(_persist, configuration.persistDebounce)

  function get (key) {
    return Promise.resolve(_get(key))
  }

  function set (key, value, expiry) {
    _set(key, value, expiry)
    return Promise.resolve(true)
  }

  function mget (keys) {
    let values = keys.map(key => _get(key))
    return Promise.resolve(values)
  }

  function mset (values) {
    values.map(value => {
      _set(value[0], value[1], value[2])
    })

    return Promise.resolve(true)
  }

  function _get (key) {
    let value = _storage[key]
    let now = (new Date()).getTime()
    return value && value.expiry > now ? value.value : null
  }

  function _set (key, value, expiry) {
    _storage[key] = { value, expiry: (new Date()).getTime() + expiry * 1000 }
    persist()
  }

  function _persist () {
    storageEngine.set(storageKey, _storage)
      .catch(/* istanbul ignore next */ err => {
        console.warn('Failed persisting cache', err)
      })
  }

  function hydrate () {
    storageEngine.get(storageKey)
      .then(value => {
        if (value) {
          _storage = value
        }
      })
  }

  function flush () {
    _storage = {}
    storageEngine.delete(storageKey)
    return Promise.resolve(true)
  }

  function _getStorage () {
    return _storage
  }

  function garbageCollection () {
    const now = (new Date()).getTime()
    const keys = Object.keys(_storage)

    for (let i = 0; i !== keys.length; i++) {
      if (_storage[keys[i]].expiry < now) {
        delete _storage[keys[i]]
      }
    }

    persist()
  }

  setInterval(garbageCollection, configuration.gcTick)
  hydrate()
  garbageCollection()

  return { get, set, mget, mset, flush, _getStorage }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/cache/memory.js":
/*!********************************************************!*\
  !*** ./node_modules/gw2api-client/src/cache/memory.js ***!
  \********************************************************/
/***/ ((module) => {

module.exports = function (configuration) {
  configuration = Object.assign({
    gcTick: 5 * 60 * 1000
  }, configuration)

  // Scope the storage to the function, so multiple instances don't interfere
  let _storage = {}

  function get (key) {
    return Promise.resolve(_get(key))
  }

  function _get (key) {
    let value = _storage[key]
    let now = (new Date()).getTime()
    return value && value.expiry > now ? value.value : null
  }

  function set (key, value, expiry) {
    _set(key, value, expiry)
    return Promise.resolve(true)
  }

  function _set (key, value, expiry) {
    _storage[key] = { value, expiry: (new Date()).getTime() + expiry * 1000 }
  }

  function mget (keys) {
    let values = keys.map(key => _get(key))
    return Promise.resolve(values)
  }

  function mset (values) {
    values.map(value => {
      _set(value[0], value[1], value[2])
    })

    return Promise.resolve(true)
  }

  function flush () {
    _storage = {}
    return Promise.resolve(true)
  }

  function _getStorage () {
    return _storage
  }

  function garbageCollection () {
    const now = (new Date()).getTime()
    const keys = Object.keys(_storage)

    for (let i = 0; i !== keys.length; i++) {
      if (_storage[keys[i]].expiry < now) {
        delete _storage[keys[i]]
      }
    }
  }

  setInterval(garbageCollection, configuration.gcTick)
  garbageCollection()

  return { get, set, mget, mset, flush, _getStorage }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/cache/null.js":
/*!******************************************************!*\
  !*** ./node_modules/gw2api-client/src/cache/null.js ***!
  \******************************************************/
/***/ ((module) => {

module.exports = function () {
  return { get, set, mget, mset, flush }
}

function get () {
  return Promise.resolve(null)
}

function set () {
  return Promise.resolve(true)
}

function mget (keys) {
  const values = keys.map(x => null)
  return Promise.resolve(values)
}

function mset () {
  return Promise.resolve(true)
}

function flush () {
  return Promise.resolve(true)
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/client.js":
/*!**************************************************!*\
  !*** ./node_modules/gw2api-client/src/client.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const fetch = __webpack_require__(/*! lets-fetch */ "./node_modules/lets-fetch/src/index.js")
const nullCache = __webpack_require__(/*! ./cache/null */ "./node_modules/gw2api-client/src/cache/null.js")
const endpoints = __webpack_require__(/*! ./endpoints */ "./node_modules/gw2api-client/src/endpoints/index.js")
const flow = __webpack_require__(/*! ./flow */ "./node_modules/gw2api-client/src/flow.js")

module.exports = class Client {
  constructor () {
    this.schemaVersion = '2019-03-20T00:00:00.000Z'
    this.lang = 'en'
    this.apiKey = false
    this.fetch = fetch
    this.caches = [nullCache()]
    this.debug = false
    this.client = this
  }

  // Set the schema version
  schema (schema) {
    this.schemaVersion = schema
    this.debugMessage(`set the schema to ${schema}`)
    return this
  }

  // Set the language for locale-aware endpoints
  language (lang) {
    this.lang = lang
    this.debugMessage(`set the language to ${lang}`)
    return this
  }

  // Set the api key for authenticated endpoints
  authenticate (apiKey) {
    this.apiKey = apiKey
    this.debugMessage(`set the api key to ${apiKey}`)
    return this
  }

  // Set the caching storage method(s)
  cacheStorage (caches) {
    this.caches = [].concat(caches)
    this.debugMessage(`updated the cache storage`)
    return this
  }

  // Set the debugging flag
  debugging (flag) {
    this.debug = flag
    return this
  }

  // Print out a debug message if debugging is enabled
  debugMessage (string) {
    if (this.debug) {
      console.log(`[gw2api-client] ${string}`)
    }
  }

  // Make sure we get the new content if the game updates
  flushCacheIfGameUpdated () {
    const buildEndpoint = this.build()
    const promises = {
      cacheBuildId: () => buildEndpoint._cacheGetSingle('cacheBuildId'),
      buildId: () => buildEndpoint.live().get()
    }

    return flow.parallel(promises).then(resp => {
      let flushPromises = []

      // Flush the caches if the cached build id is set (as a safety measure)
      // and the cached build id is older than the current one
      if (resp.cacheBuildId && resp.cacheBuildId < resp.buildId) {
        this.debugMessage(`flushing the cache because of a new build`)
        flushPromises = this.caches.map(cache => () => cache.flush())
      }

      // Flush the caches (if needed) and save the current build id
      return flow.parallel(flushPromises)
        .then(() => buildEndpoint._cacheSetSingle('cacheBuildId', resp.buildId))
    })
  }

  // All the different API endpoints
  account () {
    return new endpoints.AccountEndpoint(this)
  }

  achievements () {
    return new endpoints.AchievementsEndpoint(this)
  }

  backstory () {
    return new endpoints.BackstoryEndpoint(this)
  }

  build () {
    return new endpoints.BuildEndpoint(this)
  }

  cats () {
    return new endpoints.CatsEndpoint(this)
  }

  characters (name) {
    return new endpoints.CharactersEndpoint(this, name)
  }

  colors () {
    return new endpoints.ColorsEndpoint(this)
  }

  commerce () {
    return new endpoints.CommerceEndpoint(this)
  }

  continents () {
    return new endpoints.ContinentsEndpoint(this)
  }

  currencies () {
    return new endpoints.CurrenciesEndpoint(this)
  }

  dailycrafting () {
    return new endpoints.DailycraftingEndpoint(this)
  }

  dungeons () {
    return new endpoints.DungeonsEndpoint(this)
  }

  emblem () {
    return new endpoints.EmblemEndpoint(this)
  }

  emotes () {
    return new endpoints.EmotesEndpoint(this)
  }

  events () {
    return new endpoints.EventsEndpoint(this)
  }

  files () {
    return new endpoints.FilesEndpoint(this)
  }

  finishers () {
    return new endpoints.FinishersEndpoint(this)
  }

  gliders () {
    return new endpoints.GlidersEndpoint(this)
  }

  guild (id) {
    return new endpoints.GuildEndpoint(this, id)
  }

  home () {
    return new endpoints.HomeEndpoint(this)
  }

  homestead () {
    return new endpoints.HomesteadEndpoint(this)
  }

  items () {
    return new endpoints.ItemsEndpoint(this)
  }

  itemstats () {
    return new endpoints.ItemstatsEndpoint(this)
  }

  jadebots () {
    return new endpoints.JadebotsEndpoint(this)
  }

  legendaryarmory () {
    return new endpoints.LegendaryarmoryEndpoint(this)
  }

  legends () {
    return new endpoints.LegendsEndpoint(this)
  }

  mailcarriers () {
    return new endpoints.MailcarriersEndpoint(this)
  }

  mapchests () {
    return new endpoints.MapchestsEndpoint(this)
  }

  maps () {
    return new endpoints.MapsEndpoint(this)
  }

  masteries () {
    return new endpoints.MasteriesEndpoint(this)
  }

  materials () {
    return new endpoints.MaterialsEndpoint(this)
  }

  minis () {
    return new endpoints.MinisEndpoint(this)
  }

  mounts () {
    return new endpoints.MountsEndpoint(this)
  }

  nodes () {
    return new endpoints.NodesEndpoint(this)
  }

  novelties () {
    return new endpoints.NoveltiesEndpoint(this)
  }

  outfits () {
    return new endpoints.OutfitsEndpoint(this)
  }

  pets () {
    return new endpoints.PetsEndpoint(this)
  }

  professions () {
    return new endpoints.ProfessionsEndpoint(this)
  }

  pvp () {
    return new endpoints.PvpEndpoint(this)
  }

  quaggans () {
    return new endpoints.QuaggansEndpoint(this)
  }

  quests () {
    return new endpoints.QuestsEndpoint(this)
  }

  races () {
    return new endpoints.RacesEndpoint(this)
  }

  raids () {
    return new endpoints.RaidsEndpoint(this)
  }

  recipes () {
    return new endpoints.RecipesEndpoint(this)
  }

  skiffs () {
    return new endpoints.SkiffsEndpoint(this)
  }

  skills () {
    return new endpoints.SkillsEndpoint(this)
  }

  skins () {
    return new endpoints.SkinsEndpoint(this)
  }

  specializations () {
    return new endpoints.SpecializationsEndpoint(this)
  }

  stories () {
    return new endpoints.StoriesEndpoint(this)
  }

  titles () {
    return new endpoints.TitlesEndpoint(this)
  }

  tokeninfo () {
    return new endpoints.TokeninfoEndpoint(this)
  }

  traits () {
    return new endpoints.TraitsEndpoint(this)
  }

  wizardsvault () {
    return new endpoints.WizardsvaultEndpoint(this)
  }

  worldbosses () {
    return new endpoints.WorldbossesEndpoint(this)
  }

  worlds () {
    return new endpoints.WorldsEndpoint(this)
  }

  wvw () {
    return new endpoints.WvwEndpoint(this)
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoint.js":
/*!****************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoint.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const qs = __webpack_require__(/*! querystringify */ "./node_modules/querystringify/index.js")
const unique = __webpack_require__(/*! array-unique */ "./node_modules/array-unique/index.js")
const chunk = __webpack_require__(/*! chunk */ "./node_modules/chunk/src/chunk.js")
const hashString = __webpack_require__(/*! ./hash */ "./node_modules/gw2api-client/src/hash.js")

const clone = (x) => JSON.parse(JSON.stringify(x))

module.exports = class AbstractEndpoint {
  constructor (parent) {
    this.client = parent.client
    this.schemaVersion = parent.schemaVersion || '2019-03-20T00:00:00.000Z'
    this.lang = parent.lang
    this.apiKey = parent.apiKey
    this.fetch = parent.fetch
    this.caches = parent.caches
    this.debug = parent.debug

    this.baseUrl = 'https://api.guildwars2.com'
    this.isPaginated = false
    this.maxPageSize = 200
    this.isBulk = false
    this.bulkId = 'id'
    this.supportsBulkAll = true
    this.isLocalized = false
    this.isAuthenticated = false
    this.isOptionallyAuthenticated = false
    this.credentials = false

    this._skipCache = false
  }

  // Set the schema version
  schema (schema) {
    this.schemaVersion = schema
    this.debugMessage(`set the schema to ${schema}`)
    return this
  }

  // Check if the schema version includes a specific version
  _schemaIncludes (date) {
    return this.schemaVersion >= date
  }

  // Set the language for locale-aware endpoints
  language (lang) {
    this.lang = lang
    this.debugMessage(`set the language to ${lang}`)
    return this
  }

  // Set the api key for authenticated endpoints
  authenticate (apiKey) {
    this.apiKey = apiKey
    this.debugMessage(`set the api key to ${apiKey}`)
    return this
  }

  // Set the debugging flag
  debugging (flag) {
    this.debug = flag
    return this
  }

  // Print out a debug message if debugging is enabled
  debugMessage (string) {
    if (this.debug) {
      console.log(`[gw2api-client] ${string}`)
    }
  }

  // Skip caching and get the live data
  live () {
    this._skipCache = true
    this.debugMessage(`skipping cache`)
    return this
  }

  // Get all ids
  ids () {
    this.debugMessage(`ids(${this.url}) called`)

    if (!this.isBulk) {
      return Promise.reject(new Error('"ids" is only available for bulk expanding endpoints'))
    }

    // There is no cache time set, so always use the live data
    if (!this.cacheTime) {
      return this._ids()
    }

    // Get as much as possible out of the cache
    const hash = this._cacheHash('ids')
    const handleCacheContent = (cached) => {
      if (cached) {
        this.debugMessage(`ids(${this.url}) resolving from cache`)
        return cached
      }

      return this._ids().then(content => {
        this._cacheSetSingle(hash, content)
        return content
      })
    }

    // Get the content either from the cache or API, write it into the cache and return a clone
    const contentPromise = this._skipCache
      ? Promise.resolve(false).then(handleCacheContent)
      : this._cacheGetSingle(hash).then(handleCacheContent)

    return contentPromise.then(clone)
  }

  // Get all ids from the live API
  _ids () {
    this.debugMessage(`ids(${this.url}) requesting from api`)
    return this._request(this.url)
  }

  // Get a single entry by id
  get (id, url = false) {
    this.debugMessage(`get(${this.url}) called`)

    if (!id && this.isBulk && !url) {
      return Promise.reject(new Error('"get" requires an id'))
    }

    // There is no cache time set, so always use the live data
    if (!this.cacheTime) {
      return this._get(id, url)
    }

    // Get as much as possible out of the cache
    const hash = this._cacheHash(id)
    const handleCacheContent = (cached) => {
      if (cached) {
        this.debugMessage(`get(${this.url}) resolving from cache`)
        return cached
      }

      return this._get(id, url).then(content => {
        this._cacheSetSingle(hash, content)
        return content
      })
    }

    // Get the content either from the cache or API, write it into the cache and return a clone
    const contentPromise = this._skipCache
      ? Promise.resolve(false).then(handleCacheContent)
      : this._cacheGetSingle(hash).then(handleCacheContent)

    return contentPromise.then(clone)
  }

  // Get a single entry by id from the live API
  _get (id, url) {
    this.debugMessage(`get(${this.url}) requesting from api`)

    // Request the single id if the endpoint a bulk endpoint
    if (this.isBulk && !url) {
      return this._request(`${this.url}?id=${id}`)
    }

    // We are dealing with a custom url instead
    if (url) {
      return this._request(this.url + id)
    }

    // Just request the base url
    return this._request(this.url)
  }

  // Get multiple entries by ids
  many (ids) {
    this.debugMessage(`many(${this.url}) called (${ids.length} ids)`)

    if (!this.isBulk) {
      return Promise.reject(new Error('"many" is only available for bulk expanding endpoints'))
    }

    // Exit out early if we don't request any ids
    if (ids.length === 0) {
      return Promise.resolve([])
    }

    // Always only work on unique ids, since that's how the API works
    ids = unique.immutable(ids)

    // There is no cache time set, so always use the live data
    if (!this.cacheTime) {
      return this._many(ids)
    }

    // Get as much as possible out of the cache
    const hashes = ids.map(id => this._cacheHash(id))
    const handleCacheContent = (cached) => {
      cached = cached.filter(x => x)

      if (cached.length === ids.length) {
        this.debugMessage(`many(${this.url}) resolving fully from cache`)
        return cached
      }

      this.debugMessage(`many(${this.url}) resolving partially from cache (${cached.length} ids)`)
      const missingIds = getMissingIds(ids, cached)
      return this._many(missingIds, cached.length > 0).then(content => {
        const cacheContent = content.map(value => [this._cacheHash(value[this.bulkId]), value])
        this._cacheSetMany(cacheContent)

        // Merge the new content with the cached content and guarantee element order
        content = content.concat(cached)
        return this._sortByIdList(content, ids)
      })
    }

    // Find the ids that are missing in the cached data
    const getMissingIds = (ids, cached) => {
      const cachedIds = {}
      cached.map(x => {
        cachedIds[x[this.bulkId]] = 1
      })

      return ids.filter(x => cachedIds[x] !== 1)
    }

    // Get the content either from the cache or API, write it into the cache and return a clone
    const contentPromise = this._skipCache
      ? Promise.resolve([]).then(handleCacheContent)
      : this._cacheGetMany(hashes).then(handleCacheContent)

    return contentPromise.then(clone)
  }

  // Get multiple entries by ids from the live API
  _many (ids, partialRequest = false) {
    this.debugMessage(`many(${this.url}) requesting from api (${ids.length} ids)`)

    // Chunk the requests to the max page size
    const pages = chunk(ids, this.maxPageSize)
    const requests = pages.map(page => `${this.url}?ids=${page.join(',')}`)

    // If we are partially caching and all not-cached ids are all invalid,
    // simulate the API behaviour by silently swallowing errors.
    let handleMissingIds = (err) => {
      /* istanbul ignore else */
      if (partialRequest && err.response && err.response.status === 404) {
        return Promise.resolve([])
      }

      /* istanbul ignore next */
      return Promise.reject(err)
    }

    // Work on all requests in parallel and then flatten the responses into one
    return this._requestMany(requests)
      .then(responses => responses.reduce((x, y) => x.concat(y), []))
      .catch(handleMissingIds)
  }

  // Get a single page
  page (page, size = this.maxPageSize) {
    this.debugMessage(`page(${this.url}) called`)

    if (!this.isBulk && !this.isPaginated) {
      return Promise.reject(new Error('"page" is only available for bulk expanding or paginated endpoints'))
    }

    if (size > this.maxPageSize || size <= 0) {
      return Promise.reject(new Error(`"size" has to be between 0 and ${this.maxPageSize}, was ${size}`))
    }

    if (page < 0) {
      return Promise.reject(new Error('page has to be 0 or greater'))
    }

    // There is no cache time set, so always use the live data
    if (!this.cacheTime) {
      return this._page(page, size)
    }

    // Get as much as possible out of the cache
    const hash = this._cacheHash('page-' + page + '/' + size)
    const handleCacheContent = (cached) => {
      if (cached) {
        this.debugMessage(`page(${this.url}) resolving from cache`)
        return cached
      }

      return this._page(page, size).then(content => {
        let cacheContent = [[hash, content]]

        if (this.isBulk) {
          cacheContent = cacheContent.concat(content.map(value => [this._cacheHash(value[this.bulkId]), value]))
        }

        this._cacheSetMany(cacheContent)
        return content
      })
    }

    // Get the content either from the cache or API, write it into the cache and return a clone
    const contentPromise = this._skipCache
      ? Promise.resolve(false).then(handleCacheContent)
      : this._cacheGetSingle(hash).then(handleCacheContent)

    return contentPromise.then(clone)
  }

  // Get a single page from the live API
  _page (page, size) {
    this.debugMessage(`page(${this.url}) requesting from api`)
    return this._request(`${this.url}?page=${page}&page_size=${size}`)
  }

  // Get all entries
  all () {
    this.debugMessage(`all(${this.url}) called`)

    if (!this.isBulk && !this.isPaginated) {
      return Promise.reject(new Error('"all" is only available for bulk expanding or paginated endpoints'))
    }

    // There is no cache time set, so always use the live data
    if (!this.cacheTime) {
      return this._all()
    }

    // Get as much as possible out of the cache
    const hash = this._cacheHash('all')
    const handleCacheContent = (cached) => {
      if (cached) {
        this.debugMessage(`all(${this.url}) resolving from cache`)
        return cached
      }

      return this._all().then(content => {
        let cacheContent = [[hash, content]]

        if (this.isBulk) {
          cacheContent = cacheContent.concat(content.map(value => [this._cacheHash(value[this.bulkId]), value]))
        }

        this._cacheSetMany(cacheContent)
        return content
      })
    }

    // Get the content either from the cache or API, write it into the cache and return a clone
    const contentPromise = this._skipCache
      ? Promise.resolve(false).then(handleCacheContent)
      : this._cacheGetSingle(hash).then(handleCacheContent)

    return contentPromise.then(clone)
  }

  // Get all entries from the live API
  _all () {
    this.debugMessage(`all(${this.url}) requesting from api`)

    // Use bulk expansion if the endpoint supports the "all" keyword
    if (this.isBulk && this.supportsBulkAll) {
      return this._request(`${this.url}?ids=all`)
    }

    // Get everything via all pages instead
    let totalEntries
    return this._request(`${this.url}?page=0&page_size=${this.maxPageSize}`, 'response')
      .then(firstPage => {
        // Get the total number of entries off the first page's headers
        totalEntries = firstPage.headers.get('X-Result-Total')
        return firstPage.json()
      })
      .then(result => {
        // Return early if the first page already includes all entries
        if (totalEntries <= this.maxPageSize) {
          return result
        }

        // Request all missing pages in parallel
        let requests = []
        for (let page = 1; page < Math.ceil(totalEntries / this.maxPageSize); page++) {
          requests.push(`${this.url}?page=${page}&page_size=${this.maxPageSize}`)
        }

        return this._requestMany(requests).then(responses => {
          responses = responses.reduce((x, y) => x.concat(y), [])
          return result.concat(responses)
        })
      })
  }

  // Set a single cache key in all connected cache storages
  _cacheSetSingle (key, value) {
    this.caches.map(cache => {
      cache.set(key, value, this.cacheTime).catch(error => {
        console.warn('[gw2api-client] Errored during _cacheSetSingle', { error, cache, key, value })
      })
    })
  }

  // Set multiples cache key in all connected cache storages
  _cacheSetMany (values) {
    values = values.map(value => [value[0], value[1], this.cacheTime])
    this.caches.map(cache => {
      cache.mset(values).catch(error => {
        console.warn('[gw2api-client] Errored during _cacheSetMany', { error, cache, values })
      })
    })
  }

  // Get a cached value out of the first possible connected cache storages
  _cacheGetSingle (key, index = 0) {
    return this.caches[index].get(key).then(value => {
      if (value || index === this.caches.length - 1) {
        return value
      }

      return this._cacheGetSingle(key, ++index)
    })
  }

  // Get multiple cached values out of the first possible connected cache storages
  _cacheGetMany (keys, index = 0) {
    return this.caches[index].mget(keys).then(values => {
      const cleanValues = values.filter(x => x)

      // We got all the requested keys or are through all storages
      if (cleanValues.length === keys.length || index === this.caches.length - 1) {
        return values
      }

      // Try to ask the next storage for the keys that we didn't get
      let missingKeys = values
        .map((value, i) => value ? false : keys[i])
        .filter(value => value)

      // Then merge the values of the next storage into the missing slots
      return this._cacheGetMany(missingKeys, ++index).then(missingValues => {
        let i = 0
        return values.map(value => value || missingValues[i++])
      })
    })
  }

  // Get a cache hash for an identifier
  _cacheHash (id) {
    let hash = hashString(this.baseUrl + this.url + ':' + this.schemaVersion)

    if (id) {
      hash += ':' + id
    }

    if (this.isLocalized) {
      hash += ':' + this.lang
    }

    if (this._usesApiKey()) {
      hash += ':' + hashString(this.apiKey + '')
    }

    return hash
  }

  // Execute a single request
  _request (url, type = 'json') {
    url = this._buildUrl(url)

    /* istanbul ignore next */
    const credentials = this.credentials ? 'include' : undefined

    return this.fetch.single(url, { type, credentials })
  }

  // Execute multiple requests in parallel
  _requestMany (urls, type = 'json') {
    urls = urls.map(url => this._buildUrl(url))

    /* istanbul ignore next */
    const credentials = this.credentials ? 'include' : undefined

    return this.fetch.many(urls, { type, credentials })
  }

  // Build the headers for localization and authentication
  _buildUrl (url) {
    // Add the base url
    url = this.baseUrl + url

    // Parse a possibly existing query
    const parsedUrl = url.split('?')
    let parsedQuery = qs.parse(parsedUrl[1] || '')

    let query = {}

    // Set the schema version
    query['v'] = this.schemaVersion

    // Only set the API key for authenticated endpoints,
    // when it is required or optional and set on the client
    if (this._usesApiKey()) {
      query['access_token'] = this.apiKey
    }

    // Set the language for localized endpoints
    if (this.isLocalized) {
      query['lang'] = this.lang
    }

    // Merge the parsed query parts out of the url
    query = Object.assign(query, parsedQuery)

    // Build the url with the finished query
    query = qs.stringify(query, true).replace(/%2C/g, ',')
    return parsedUrl[0] + query
  }

  // Guarantee the element order of bulk results
  _sortByIdList (entries, ids) {
    // Hash map of the indexes for better time complexity on big arrays
    let indexMap = {}
    ids.map((x, i) => {
      indexMap[x] = i
    })

    // Sort by the indexes
    entries.sort((a, b) => indexMap[a[this.bulkId]] - indexMap[b[this.bulkId]])
    return entries
  }

  _usesApiKey () {
    return this.isAuthenticated && (!this.isOptionallyAuthenticated || this.apiKey)
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/account-blob.js":
/*!******************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/account-blob.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const _get = __webpack_require__(/*! fast-get */ "./node_modules/fast-get/src/index.js")
const flow = __webpack_require__(/*! ../flow.js */ "./node_modules/gw2api-client/src/flow.js")

function blob (parent) {
  const client = parent.client

  const requests = {
    account: wrap(() => client.account().get()),
    achievements: wrap(() => client.account().achievements().get()),
    bank: wrap(() => client.account().bank().get()),
    characters: wrap(() => client.characters().all()),
    'commerce.buys': wrap(() => client.commerce().transactions().current().buys().all()),
    'commerce.delivery': wrap(() => client.commerce().delivery().get()),
    'commerce.sells': wrap(() => client.commerce().transactions().current().sells().all()),
    dungeons: wrap(() => client.account().dungeons().get()),
    dyes: wrap(() => client.account().dyes().get()),
    emotes: wrap(() => client.account().emotes().get()),
    finishers: wrap(() => client.account().finishers().get()),
    gliders: wrap(() => client.account().gliders().get()),
    guilds: wrap(() => accountGuilds(client)),
    'home.cats': wrap(() => client.account().home().cats().get()),
    'home.nodes': wrap(() => client.account().home().nodes().get()),
    'homestead.decorations': wrap(() => client.account().homestead().decorations().get()),
    'homestead.glyphs': wrap(() => client.account().homestead().glyphs().get()),
    jadebots: wrap(() => client.account().jadebots().get()),
    legendaryarmory: wrap(() => client.account().legendaryarmory().get()),
    luck: wrap(() => client.account().luck().get()),
    mailcarriers: wrap(() => client.account().mailcarriers().get()),
    masteries: wrap(() => client.account().masteries().get()),
    'mastery.points': wrap(() => client.account().mastery().points().get()),
    materials: wrap(() => client.account().materials().get()),
    minis: wrap(() => client.account().minis().get()),
    'mounts.skins': wrap(() => client.account().mounts().skins().get()),
    'mounts.types': wrap(() => client.account().mounts().types().get()),
    novelties: wrap(() => client.account().novelties().get()),
    outfits: wrap(() => client.account().outfits().get()),
    'pvp.games': wrap(() => client.account().pvp().games().all()),
    'pvp.heroes': wrap(() => client.account().pvp().heroes().get()),
    'pvp.standings': wrap(() => client.account().pvp().standings().get()),
    'pvp.stats': wrap(() => client.account().pvp().stats().get()),
    raids: wrap(() => client.account().raids().get()),
    recipes: wrap(() => client.account().recipes().get()),
    shared: wrap(() => client.account().inventory().get()),
    skiffs: wrap(() => client.account().skiffs().get()),
    skins: wrap(() => client.account().skins().get()),
    titles: wrap(() => client.account().titles().get()),
    wallet: wrap(() => client.account().wallet().get())
  }

  return flow.parallel(requests).then(data => {
    data = unflatten(data)
    data.characters = filterBetaCharacters(data.characters)
    return data
  })
}

// Get the guild data accessible for the account
function accountGuilds (client) {
  return client.account().get().then(account => {
    if (!account.guild_leader) {
      return []
    }

    let requests = account.guild_leader.map(id => wrap(() => guildData(id)))
    return flow.parallel(requests)
  })

  function guildData (id) {
    let requests = {
      data: wrap(() => client.guild().get(id)),
      members: wrap(() => client.guild(id).members().get()),
      ranks: wrap(() => client.guild(id).ranks().get()),
      stash: wrap(() => client.guild(id).stash().get()),
      teams: wrap(() => Promise.resolve(null)),
      treasury: wrap(() => client.guild(id).treasury().get()),
      upgrades: wrap(() => client.guild(id).upgrades().get())
    }

    return flow.parallel(requests)
  }
}

// Filter out beta characters from the total account blob, since they are
// technically not part of the actual live account and live on a different server
function filterBetaCharacters (characters) {
  /* istanbul ignore next */
  if (!characters) {
    return null
  }

  return characters.filter(x => !x.flags || !x.flags.includes('Beta'))
}

// Wrap a promise function so all errors that have to do with the API
// just result in an empty response instead of throwing an error
// This prevents API errors / changes breaking the entire infrastructure
function wrap (func) {
  return () => new Promise((resolve, reject) => {
    func()
      .then(x => resolve(x))
      .catch(err => {
        let status = _get(err, 'response.status')
        let text = _get(err, 'content.text')

        if (
          status ||
          text ||
          ['network', 'fetch'].some(x => err.message.toLowerCase().includes(x))
        ) {
          console.warn(`API error: ${text} (${status})`)
          return resolve(null)
        }

        reject(err)
      })
  })
}

// Unflatten an object with keys describing a nested structure
function unflatten (object) {
  let result = {}

  for (let key in object) {
    _set(result, key, object[key])
  }

  return result
}

// Set the value of an object based on a flat key ("a.b.c")
function _set (object, key, value) {
  const keyParts = key.split('.')

  let walking = object
  keyParts.forEach((key, index) => {
    // Create the nested object if it does not exist
    if (!walking[key]) {
      walking[key] = {}
    }

    // If we reached the last part, set the value and exit out
    if (index === keyParts.length - 1) {
      walking[key] = value
      return
    }

    // Set the next part of the key
    walking = walking[key]
  })
}

module.exports = blob
module.exports.wrap = wrap


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/account.js":
/*!*************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/account.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")
const CharactersEndpoint = __webpack_require__(/*! ./characters */ "./node_modules/gw2api-client/src/endpoints/characters.js")
const PvpEndpoint = __webpack_require__(/*! ./pvp */ "./node_modules/gw2api-client/src/endpoints/pvp.js")
const CommerceEndpoint = __webpack_require__(/*! ./commerce */ "./node_modules/gw2api-client/src/endpoints/commerce.js")
const WizardsvaultEndpoint = __webpack_require__(/*! ./wizardsvault */ "./node_modules/gw2api-client/src/endpoints/wizardsvault.js")
const accountBlob = __webpack_require__(/*! ./account-blob.js */ "./node_modules/gw2api-client/src/endpoints/account-blob.js")
const resetTime = __webpack_require__(/*! ../helpers/resetTime */ "./node_modules/gw2api-client/src/helpers/resetTime.js")

class AccountEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  achievements () {
    return new AchievementsEndpoint(this)
  }

  bank () {
    return new BankEndpoint(this)
  }

  characters (name) {
    return new CharactersEndpoint(this, name)
  }

  dailycrafting () {
    return new DailycraftingEndpoint(this)
  }

  delivery () {
    return new CommerceEndpoint(this).delivery()
  }

  dungeons () {
    return new DungeonsEndpoint(this)
  }

  dyes () {
    return new DyesEndpoint(this)
  }

  emotes () {
    return new EmotesEndpoint(this)
  }

  finishers () {
    return new FinishersEndpoint(this)
  }

  gliders () {
    return new GlidersEndpoint(this)
  }

  home () {
    return {
      cats: () => new HomeCatsEndpoint(this),
      nodes: () => new HomeNodesEndpoint(this)
    }
  }

  homestead () {
    return {
      decorations: () => new HomesteadDecorationsEndpoint(this),
      glyphs: () => new HomesteadGlyphsEndpoint(this)
    }
  }

  inventory () {
    return new InventoryEndpoint(this)
  }

  jadebots () {
    return new JadebotsEndpoint(this)
  }

  legendaryarmory () {
    return new LegendaryarmoryEndpoint(this)
  }

  luck () {
    return new LuckEndpoint(this)
  }

  mailcarriers () {
    return new MailcarriersEndpoint(this)
  }

  masteries () {
    return new MasteriesEndpoint(this)
  }

  mapchests () {
    return new MapchestsEndpoint(this)
  }

  mastery () {
    return {
      points: () => new MasteryPointsEndpoint(this)
    }
  }

  materials () {
    return new MaterialsEndpoint(this)
  }

  minis () {
    return new MinisEndpoint(this)
  }

  mounts () {
    return {
      skins: () => new MountSkinsEndpoint(this),
      types: () => new MountTypesEndpoint(this)
    }
  }

  novelties () {
    return new NoveltiesEndpoint(this)
  }

  outfits () {
    return new OutfitsEndpoint(this)
  }

  pvp () {
    return new PvpEndpoint(this, true)
  }

  raids () {
    return new RaidsEndpoint(this)
  }

  recipes () {
    return new RecipesEndpoint(this)
  }

  skiffs () {
    return new SkiffsEndpoint(this)
  }

  skins () {
    return new SkinsEndpoint(this)
  }

  titles () {
    return new TitlesEndpoint(this)
  }

  transactions () {
    return new CommerceEndpoint(this).transactions()
  }

  wallet () {
    return new WalletEndpoint(this)
  }

  wizardsvault () {
    return {
      listings: () => new WizardsvaultListingsEndpoint(this),
      daily: () => new WizardsvaultDailyEndpoint(this),
      weekly: () => new WizardsvaultWeeklyEndpoint(this),
      special: () => new WizardsvaultSpecialEndpoint(this)
    }
  }

  worldbosses () {
    return new WorldbossesEndpoint(this)
  }

  // All data available for the account in a single object
  blob () {
    return accountBlob(this)
  }
}

class AchievementsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/achievements'
    this.isAuthenticated = true
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 5 * 60
  }

  ids () {
    return Promise.reject(new Error('method not supported for this endpoint'))
  }

  get (id) {
    if (id) {
      return super.get(id)
    }

    // This endpoint returns all entries if the url gets requested
    // without any parameters, analogue to the other account endpoints
    return this.all()
  }

  all () {
    return super.get('', true)
  }
}

class BankEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/bank'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class DailycraftingEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/dailycrafting'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  async get () {
    return await isStaleDailyData(this) ? [] : super.get()
  }
}

class DungeonsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/dungeons'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  async get () {
    return await isStaleDailyData(this) ? [] : super.get()
  }
}

class DyesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/dyes'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class EmotesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/emotes'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class FinishersEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/finishers'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class GlidersEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/gliders'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class HomeCatsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/home/cats'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class HomeNodesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/home/nodes'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class HomesteadDecorationsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/homestead/decorations'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class HomesteadGlyphsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/homestead/glyphs'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class InventoryEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/inventory'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class JadebotsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/jadebots'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class LegendaryarmoryEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/legendaryarmory'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class LuckEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/luck'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  async get () {
    const response = await super.get()
    // [API PATCH #0] If the account does not have any luck, the API erroneously returns `[]`
    if (response.length === 0) return 0
    return response[0].value
  }
}

class MailcarriersEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/mailcarriers'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class MapchestsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/mapchests'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  async get () {
    return await isStaleDailyData(this) ? [] : super.get()
  }
}

class MasteriesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/masteries'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class MasteryPointsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/mastery/points'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class MaterialsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/materials'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class MinisEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/minis'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class MountSkinsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/mounts/skins'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class MountTypesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/mounts/types'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class NoveltiesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/novelties'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class OutfitsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/outfits'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class RaidsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/raids'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  async get () {
    return await isStaleWeeklyData(this) ? [] : super.get()
  }
}

class RecipesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/recipes'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class SkiffsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/skiffs'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class SkinsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/skins'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class TitlesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/titles'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class WalletEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/wallet'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class WorldbossesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/worldbosses'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  async get () {
    return await isStaleDailyData(this) ? [] : super.get()
  }
}

class WizardsvaultListingsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/wizardsvault/listings'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class WizardsvaultDailyEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/wizardsvault/daily'
    this.isAuthenticated = true
    this.isLocalized = true
    this.cacheTime = 5 * 60
  }

  async get () {
    const [response, isStale] = await Promise.all([
      super.get(),
      isStaleDailyData(this)
    ])

    if (isStale) {
      response.meta_progress_current = 0
      response.meta_reward_claimed = false
      response.objectives = []
    }

    return response
  }
}

class WizardsvaultWeeklyEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/wizardsvault/weekly'
    this.isAuthenticated = true
    this.isLocalized = true
    this.cacheTime = 5 * 60
  }

  async get () {
    const [response, isStale] = await Promise.all([
      super.get(),
      isStaleWeeklyData(this)
    ])

    if (isStale) {
      response.meta_progress_current = 0
      response.meta_reward_claimed = false
      response.objectives = []
    }

    return response
  }
}

class WizardsvaultSpecialEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/wizardsvault/special'
    this.isAuthenticated = true
    this.isLocalized = true
    this.cacheTime = 5 * 60
  }

  async get () {
    const season = await new WizardsvaultEndpoint(this).get()

    const [response, isStale] = await Promise.all([
      super.get(),
      isStaleData(this, new Date(season.start))
    ])

    if (isStale) {
      response.objectives = []
    }

    return response
  }
}

// Stale data can happen if the last account update was before the last daily reset
async function isStaleDailyData (endpointInstance) {
  return isStaleData(endpointInstance, resetTime.getLastDailyReset())
}

// Stale data can happen if the last account update was before the last weekly reset
async function isStaleWeeklyData (endpointInstance) {
  return isStaleData(endpointInstance, resetTime.getLastWeeklyReset())
}

async function isStaleData (endpointInstance, resetDate) {
  const account = await new AccountEndpoint(endpointInstance).schema('2019-03-26').get()
  return new Date(account.last_modified) < resetDate
}

module.exports = AccountEndpoint


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/achievements.js":
/*!******************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/achievements.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class AchievementsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/achievements'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = false
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }

  categories () {
    return new CategoriesEndpoint(this)
  }

  groups () {
    return new GroupsEndpoint(this)
  }

  daily () {
    return new DailyEndpoint(this)
  }

  dailyTomorrow () {
    return new DailyTomorrowEndpoint(this)
  }
}

class CategoriesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/achievements/categories'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class GroupsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/achievements/groups'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class DailyEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/achievements/daily'
    this.cacheTime = 60 * 60
  }
}

class DailyTomorrowEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/achievements/daily/tomorrow'
    this.cacheTime = 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/backstory.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/backstory.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class BackstoryEndpoint extends AbstractEndpoint {
  answers () {
    return new AnswersEndpoint(this)
  }

  questions () {
    return new QuestionsEndpoint(this)
  }
}

class AnswersEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/backstory/answers'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class QuestionsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/backstory/questions'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/build.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/build.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class BuildEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/build'
    this.cacheTime = 60
  }

  get () {
    return super.get().then(result => result.id)
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/cats.js":
/*!**********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/cats.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class CatsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/cats'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/characters.js":
/*!****************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/characters.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class CharactersEndpoint extends AbstractEndpoint {
  constructor (client, name) {
    super(client)
    this.name = name
    this.url = '/v2/characters'
    this.isPaginated = true
    this.isBulk = true
    this.bulkId = 'name'
    this.supportsBulkAll = false
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  backstory () {
    return new BackstoryEndpoint(this, this.name)
  }

  core () {
    return new CoreEndpoint(this, this.name)
  }

  crafting () {
    return new CraftingEndpoint(this, this.name)
  }

  equipment () {
    return new EquipmentEndpoint(this, this.name)
  }

  heropoints () {
    return new HeropointsEndpoint(this, this.name)
  }

  inventory () {
    return new InventoryEndpoint(this, this.name)
  }

  quests () {
    return new QuestsEndpoint(this, this.name)
  }

  recipes () {
    return new RecipesEndpoint(this, this.name)
  }

  sab () {
    return new SabEndpoint(this, this.name)
  }

  skills () {
    return new SkillsEndpoint(this, this.name)
  }

  specializations () {
    return new SpecializationsEndpoint(this, this.name)
  }

  training () {
    return new TrainingEndpoint(this, this.name)
  }
}

class BackstoryEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/backstory`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.backstory)
  }
}

class CoreEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/core`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class CraftingEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/crafting`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.crafting)
  }
}

class EquipmentEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/equipment`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.equipment)
  }
}

class HeropointsEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/heropoints`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class InventoryEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/inventory`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.bags)
  }
}

class QuestsEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/quests`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class RecipesEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/recipes`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.recipes)
  }
}

class SabEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/sab`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class SkillsEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/skills`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.skills)
  }
}

class SpecializationsEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/specializations`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.specializations)
  }
}

class TrainingEndpoint extends AbstractEndpoint {
  constructor (client, character) {
    super(client)
    this.url = `/v2/characters/${encodeURIComponent(character)}/training`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  get () {
    return super.get().then(result => result.training)
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/colors.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/colors.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class ColorsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/colors'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/commerce.js":
/*!**************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/commerce.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class CommerceEndpoint extends AbstractEndpoint {
  // Current things to grab in the delivery box
  delivery () {
    return new DeliveryEndpoint(this)
  }

  // Current gem/coin exchange rates
  exchange () {
    return new ExchangeEndpoint(this)
  }

  // Current tradingpost listings
  listings () {
    return new ListingsEndpoint(this)
  }

  // Current tradingpost prices
  prices () {
    return new PricesEndpoint(this)
  }

  // Current and completed transactions
  transactions () {
    return {
      current: () => ({
        buys: () => new TransactionsEndpoint(this, 'current', 'buys'),
        sells: () => new TransactionsEndpoint(this, 'current', 'sells')
      }),
      history: () => ({
        buys: () => new TransactionsEndpoint(this, 'history', 'buys'),
        sells: () => new TransactionsEndpoint(this, 'history', 'sells')
      })
    }
  }
}

class DeliveryEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = `/v2/commerce/delivery`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class ExchangeEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/commerce/exchange'
    this.cacheTime = 10 * 60
  }

  gems (quantity) {
    return super.get(`/gems?quantity=${quantity}`, true)
  }

  coins (quantity) {
    return super.get(`/coins?quantity=${quantity}`, true)
  }
}

class ListingsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/commerce/listings'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = false
    this.cacheTime = 2 * 60
  }
}

class PricesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/commerce/prices'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = false
    this.cacheTime = 60
  }
}

class TransactionsEndpoint extends AbstractEndpoint {
  constructor (client, type, list) {
    super(client)
    this.url = `/v2/commerce/transactions/${type}/${list}`
    this.isPaginated = true
    this.isAuthenticated = true
    this.cacheTime = 10 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/continents.js":
/*!****************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/continents.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class ContinentsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/continents'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }

  floors (id) {
    return new FloorsEndpoint(this, id)
  }
}

class FloorsEndpoint extends AbstractEndpoint {
  constructor (client, continentId) {
    super(client)
    this.url = `/v2/continents/${continentId}/floors`
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/currencies.js":
/*!****************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/currencies.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class CurrenciesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/currencies'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/dailycrafting.js":
/*!*******************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/dailycrafting.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class DailycraftingEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/dailycrafting'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/dungeons.js":
/*!**************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/dungeons.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class DungeonsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/dungeons'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/emblem.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/emblem.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class EmblemEndpoint extends AbstractEndpoint {
  backgrounds () {
    return new LayersEndpoint(this, 'backgrounds')
  }

  foregrounds () {
    return new LayersEndpoint(this, 'foregrounds')
  }
}

class LayersEndpoint extends AbstractEndpoint {
  constructor (client, layer) {
    super(client)
    this.url = `/v2/emblem/${layer}`
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/emotes.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/emotes.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class EmotesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/emotes'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/events.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/events.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class EventsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v1/event_details.json'
    this.cacheTime = 24 * 60 * 60
  }

  all () {
    return super.get().then(transformV1Format)
  }

  get (id) {
    return super.get(`?event_id=${id}`, true).then(json => transformV1Format(json)[0])
  }
}

function transformV1Format (json) {
  let events = json.events
  let transformed = []
  const keys = Object.keys(events)

  for (let i = 0; i !== keys.length; i++) {
    transformed.push(Object.assign({ id: keys[i] }, events[keys[i]]))
  }

  return transformed
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/files.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/files.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class FilesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/files'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/finishers.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/finishers.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class FinishersEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/finishers'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/gliders.js":
/*!*************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/gliders.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class GlidersEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/gliders'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/guild.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/guild.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class GuildEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.id = id
    this.url = '/v2/guild'
    this.isAuthenticated = true
    this.isOptionallyAuthenticated = true
    this.cacheTime = 60 * 60
  }

  get (id) {
    return super.get(`/${id}`, true)
  }

  permissions () {
    return new PermissionsEndpoint(this)
  }

  search (name) {
    return new SearchEndpoint(this, name)
  }

  upgrades () {
    if (this.id === undefined) {
      return new AllUpgradesEndpoint(this)
    }

    return new UpgradesEndpoint(this, this.id)
  }

  log () {
    return new LogEndpoint(this, this.id)
  }

  members () {
    return new MembersEndpoint(this, this.id)
  }

  ranks () {
    return new RanksEndpoint(this, this.id)
  }

  stash () {
    return new StashEndpoint(this, this.id)
  }

  storage () {
    return new StorageEndpoint(this, this.id)
  }

  teams () {
    return new TeamsEndpoint(this, this.id)
  }

  treasury () {
    return new TreasuryEndpoint(this, this.id)
  }
}

class PermissionsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/guild/permissions'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class SearchEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/guild/search'
    this.cacheTime = 60 * 60
  }

  name (name) {
    return super.get(`?name=${encodeURIComponent(name)}`, true)
      .then(result => result[0])
  }
}

class AllUpgradesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/guild/upgrades'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class LogEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/log`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }

  since (logId) {
    return super.get(`?since=${logId}`, true)
  }
}

class MembersEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/members`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class RanksEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/ranks`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class StashEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/stash`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class StorageEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/storage`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class TeamsEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/teams`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class TreasuryEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/treasury`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class UpgradesEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.url = `/v2/guild/${encodeURIComponent(id)}/upgrades`
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/home.js":
/*!**********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/home.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class HomeEndpoint extends AbstractEndpoint {
  cats () {
    return new CatsEndpoint(this)
  }

  nodes () {
    return new NodesEndpoint(this)
  }
}

class CatsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/home/cats'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}

class NodesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/home/nodes'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/homestead.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/homestead.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class HomesteadEndpoint extends AbstractEndpoint {
  decorations () {
    return new DecorationsEndpoint(this)
  }

  glyphs () {
    return new GlyphsEndpoint(this)
  }
}

class DecorationsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/homestead/decorations'
    this.isPaginated = true
    this.isLocalized = true
    this.isBulk = true
    this.supportsBulkAll = false
    this.cacheTime = 24 * 60 * 60
  }

  categories () {
    return new DecorationsCategoriesEndpoint(this)
  }
}

class GlyphsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/homestead/glyphs'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}

class DecorationsCategoriesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/homestead/decorations/categories'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  AccountEndpoint: __webpack_require__(/*! ./account */ "./node_modules/gw2api-client/src/endpoints/account.js"),
  AchievementsEndpoint: __webpack_require__(/*! ./achievements */ "./node_modules/gw2api-client/src/endpoints/achievements.js"),
  BackstoryEndpoint: __webpack_require__(/*! ./backstory */ "./node_modules/gw2api-client/src/endpoints/backstory.js"),
  BuildEndpoint: __webpack_require__(/*! ./build */ "./node_modules/gw2api-client/src/endpoints/build.js"),
  CatsEndpoint: __webpack_require__(/*! ./cats */ "./node_modules/gw2api-client/src/endpoints/cats.js"),
  CharactersEndpoint: __webpack_require__(/*! ./characters */ "./node_modules/gw2api-client/src/endpoints/characters.js"),
  ColorsEndpoint: __webpack_require__(/*! ./colors */ "./node_modules/gw2api-client/src/endpoints/colors.js"),
  CommerceEndpoint: __webpack_require__(/*! ./commerce */ "./node_modules/gw2api-client/src/endpoints/commerce.js"),
  ContinentsEndpoint: __webpack_require__(/*! ./continents */ "./node_modules/gw2api-client/src/endpoints/continents.js"),
  CurrenciesEndpoint: __webpack_require__(/*! ./currencies */ "./node_modules/gw2api-client/src/endpoints/currencies.js"),
  DailycraftingEndpoint: __webpack_require__(/*! ./dailycrafting */ "./node_modules/gw2api-client/src/endpoints/dailycrafting.js"),
  DungeonsEndpoint: __webpack_require__(/*! ./dungeons */ "./node_modules/gw2api-client/src/endpoints/dungeons.js"),
  EmblemEndpoint: __webpack_require__(/*! ./emblem */ "./node_modules/gw2api-client/src/endpoints/emblem.js"),
  EmotesEndpoint: __webpack_require__(/*! ./emotes */ "./node_modules/gw2api-client/src/endpoints/emotes.js"),
  EventsEndpoint: __webpack_require__(/*! ./events */ "./node_modules/gw2api-client/src/endpoints/events.js"),
  FilesEndpoint: __webpack_require__(/*! ./files */ "./node_modules/gw2api-client/src/endpoints/files.js"),
  FinishersEndpoint: __webpack_require__(/*! ./finishers */ "./node_modules/gw2api-client/src/endpoints/finishers.js"),
  GlidersEndpoint: __webpack_require__(/*! ./gliders */ "./node_modules/gw2api-client/src/endpoints/gliders.js"),
  GuildEndpoint: __webpack_require__(/*! ./guild */ "./node_modules/gw2api-client/src/endpoints/guild.js"),
  HomeEndpoint: __webpack_require__(/*! ./home */ "./node_modules/gw2api-client/src/endpoints/home.js"),
  HomesteadEndpoint: __webpack_require__(/*! ./homestead */ "./node_modules/gw2api-client/src/endpoints/homestead.js"),
  ItemsEndpoint: __webpack_require__(/*! ./items */ "./node_modules/gw2api-client/src/endpoints/items.js"),
  ItemstatsEndpoint: __webpack_require__(/*! ./itemstats */ "./node_modules/gw2api-client/src/endpoints/itemstats.js"),
  JadebotsEndpoint: __webpack_require__(/*! ./jadebots */ "./node_modules/gw2api-client/src/endpoints/jadebots.js"),
  LegendaryarmoryEndpoint: __webpack_require__(/*! ./legendaryarmory */ "./node_modules/gw2api-client/src/endpoints/legendaryarmory.js"),
  LegendsEndpoint: __webpack_require__(/*! ./legends */ "./node_modules/gw2api-client/src/endpoints/legends.js"),
  MailcarriersEndpoint: __webpack_require__(/*! ./mailcarriers */ "./node_modules/gw2api-client/src/endpoints/mailcarriers.js"),
  MapchestsEndpoint: __webpack_require__(/*! ./mapchests */ "./node_modules/gw2api-client/src/endpoints/mapchests.js"),
  MapsEndpoint: __webpack_require__(/*! ./maps */ "./node_modules/gw2api-client/src/endpoints/maps.js"),
  MasteriesEndpoint: __webpack_require__(/*! ./masteries */ "./node_modules/gw2api-client/src/endpoints/masteries.js"),
  MaterialsEndpoint: __webpack_require__(/*! ./materials */ "./node_modules/gw2api-client/src/endpoints/materials.js"),
  MinisEndpoint: __webpack_require__(/*! ./minis */ "./node_modules/gw2api-client/src/endpoints/minis.js"),
  MountsEndpoint: __webpack_require__(/*! ./mounts */ "./node_modules/gw2api-client/src/endpoints/mounts.js"),
  NodesEndpoint: __webpack_require__(/*! ./nodes */ "./node_modules/gw2api-client/src/endpoints/nodes.js"),
  NoveltiesEndpoint: __webpack_require__(/*! ./novelties */ "./node_modules/gw2api-client/src/endpoints/novelties.js"),
  OutfitsEndpoint: __webpack_require__(/*! ./outfits */ "./node_modules/gw2api-client/src/endpoints/outfits.js"),
  PetsEndpoint: __webpack_require__(/*! ./pets */ "./node_modules/gw2api-client/src/endpoints/pets.js"),
  ProfessionsEndpoint: __webpack_require__(/*! ./professions */ "./node_modules/gw2api-client/src/endpoints/professions.js"),
  PvpEndpoint: __webpack_require__(/*! ./pvp */ "./node_modules/gw2api-client/src/endpoints/pvp.js"),
  QuaggansEndpoint: __webpack_require__(/*! ./quaggans */ "./node_modules/gw2api-client/src/endpoints/quaggans.js"),
  QuestsEndpoint: __webpack_require__(/*! ./quests */ "./node_modules/gw2api-client/src/endpoints/quests.js"),
  RacesEndpoint: __webpack_require__(/*! ./races */ "./node_modules/gw2api-client/src/endpoints/races.js"),
  RaidsEndpoint: __webpack_require__(/*! ./raids */ "./node_modules/gw2api-client/src/endpoints/raids.js"),
  RecipesEndpoint: __webpack_require__(/*! ./recipes */ "./node_modules/gw2api-client/src/endpoints/recipes.js"),
  SkiffsEndpoint: __webpack_require__(/*! ./skiffs */ "./node_modules/gw2api-client/src/endpoints/skiffs.js"),
  SkillsEndpoint: __webpack_require__(/*! ./skills */ "./node_modules/gw2api-client/src/endpoints/skills.js"),
  SkinsEndpoint: __webpack_require__(/*! ./skins */ "./node_modules/gw2api-client/src/endpoints/skins.js"),
  SpecializationsEndpoint: __webpack_require__(/*! ./specializations */ "./node_modules/gw2api-client/src/endpoints/specializations.js"),
  StoriesEndpoint: __webpack_require__(/*! ./stories */ "./node_modules/gw2api-client/src/endpoints/stories.js"),
  TitlesEndpoint: __webpack_require__(/*! ./titles */ "./node_modules/gw2api-client/src/endpoints/titles.js"),
  TokeninfoEndpoint: __webpack_require__(/*! ./tokeninfo */ "./node_modules/gw2api-client/src/endpoints/tokeninfo.js"),
  TraitsEndpoint: __webpack_require__(/*! ./traits */ "./node_modules/gw2api-client/src/endpoints/traits.js"),
  WizardsvaultEndpoint: __webpack_require__(/*! ./wizardsvault */ "./node_modules/gw2api-client/src/endpoints/wizardsvault.js"),
  WorldbossesEndpoint: __webpack_require__(/*! ./worldbosses */ "./node_modules/gw2api-client/src/endpoints/worldbosses.js"),
  WorldsEndpoint: __webpack_require__(/*! ./worlds */ "./node_modules/gw2api-client/src/endpoints/worlds.js"),
  WvwEndpoint: __webpack_require__(/*! ./wvw */ "./node_modules/gw2api-client/src/endpoints/wvw.js")
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/items.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/items.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class ItemsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/items'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = false
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/itemstats.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/itemstats.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class ItemstatsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/itemstats'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/jadebots.js":
/*!**************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/jadebots.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class JadebotsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/jadebots'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/legendaryarmory.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/legendaryarmory.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class LegendaryarmoryEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/legendaryarmory'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/legends.js":
/*!*************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/legends.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class LegendsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/legends'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/mailcarriers.js":
/*!******************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/mailcarriers.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class MailcarriersEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/mailcarriers'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/mapchests.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/mapchests.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class MapchestsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/mapchests'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/maps.js":
/*!**********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/maps.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class MapsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/maps'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/masteries.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/masteries.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class MasteriesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/masteries'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/materials.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/materials.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class MaterialsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/materials'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/minis.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/minis.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class MinisEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/minis'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/mounts.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/mounts.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class MountsEndpoint extends AbstractEndpoint {
  skins () {
    return new SkinsEndpoint(this)
  }

  types () {
    return new TypesEndpoint(this)
  }
}

class SkinsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/mounts/skins'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class TypesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/mounts/types'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/nodes.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/nodes.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class NodesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/nodes'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/novelties.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/novelties.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class NoveltiesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/novelties'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/outfits.js":
/*!*************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/outfits.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class OutfitsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/outfits'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/pets.js":
/*!**********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/pets.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class PetsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/pets'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/professions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/professions.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class ProfessionsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/professions'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/pvp.js":
/*!*********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/pvp.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class PvpEndpoint extends AbstractEndpoint {
  constructor (client, fromAccount) {
    super(client)
    this.fromAccount = fromAccount
  }

  amulets () {
    return new AmuletsEndpoint(this)
  }

  games () {
    return new GamesEndpoint(this)
  }

  heroes () {
    if (this.fromAccount) {
      return new AccountHeroesEndpoint(this)
    }

    return new HeroesEndpoint(this)
  }

  ranks () {
    return new RanksEndpoint(this)
  }

  seasons (id) {
    return new SeasonsEndpoint(this, id)
  }

  standings () {
    return new StandingsEndpoint(this)
  }

  stats () {
    return new StatsEndpoint(this)
  }
}

class AccountHeroesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/account/pvp/heroes'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class AmuletsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/pvp/amulets'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class GamesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/pvp/games'
    this.isPaginated = true
    this.isBulk = true
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class HeroesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/pvp/heroes'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class RanksEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/pvp/ranks'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class SeasonsEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.id = id
    this.url = '/v2/pvp/seasons'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }

  leaderboards () {
    return new SeasonLeaderboardEndpoint(this, this.id)
  }
}

class SeasonLeaderboardEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.id = id
    this.url = `/v2/pvp/seasons/${id}/leaderboards`
    this.cacheTime = 24 * 60 * 60
  }

  ids () {
    return super.get('', true)
  }

  board (board, region) {
    return new SeasonLeaderboardBoardEndpoint(this, this.id, board, region)
  }
}

class SeasonLeaderboardBoardEndpoint extends AbstractEndpoint {
  constructor (client, id, board, region) {
    super(client)
    this.url = `/v2/pvp/seasons/${id}/leaderboards/${board}/${region}`
    this.isPaginated = true
    this.cacheTime = 5 * 60
  }
}

class StandingsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/pvp/standings'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}

class StatsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/pvp/stats'
    this.isAuthenticated = true
    this.cacheTime = 5 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/quaggans.js":
/*!**************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/quaggans.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class QuaggansEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/quaggans'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/quests.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/quests.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class QuestsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/quests'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/races.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/races.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class RacesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/races'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/raids.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/raids.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class RaidsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/raids'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/recipes.js":
/*!*************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/recipes.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class RecipesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/recipes'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = false
    this.cacheTime = 24 * 60 * 60
  }

  search () {
    return new SearchEndpoint(this)
  }
}

class SearchEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/recipes/search'
    this.cacheTime = 24 * 60 * 60
  }

  input (id) {
    return super.get(`?input=${id}`, true)
  }

  output (id) {
    return super.get(`?output=${id}`, true)
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/skiffs.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/skiffs.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class SkiffsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/skiffs'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/skills.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/skills.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class SkillsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/skills'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/skins.js":
/*!***********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/skins.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class SkinsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/skins'
    this.isPaginated = true
    this.isBulk = true
    this.supportsBulkAll = false
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/specializations.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/specializations.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class SpecializationsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/specializations'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/stories.js":
/*!*************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/stories.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class StoriesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/stories'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }

  seasons () {
    return new SeasonsEndpoint(this)
  }
}

class SeasonsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/stories/seasons'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/titles.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/titles.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class TitlesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/titles'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/tokeninfo.js":
/*!***************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/tokeninfo.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class TokeninfoEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/tokeninfo'
    this.isAuthenticated = true
    this.cacheTime = 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/traits.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/traits.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class TraitsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/traits'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/wizardsvault.js":
/*!******************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/wizardsvault.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class WizardsvaultEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wizardsvault'
    this.isLocalized = true
    this.cacheTime = 60 * 60
  }

  listings () {
    return new ListingsEndpoint(this)
  }

  objectives () {
    return new ObjectivesEndpoint(this)
  }
}

class ListingsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wizardsvault/listings'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = false
    this.cacheTime = 60 * 60
  }
}

class ObjectivesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wizardsvault/objectives'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/worldbosses.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/worldbosses.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class WorldbossesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/worldbosses'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/worlds.js":
/*!************************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/worlds.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class WorldsEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/worlds'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/endpoints/wvw.js":
/*!*********************************************************!*\
  !*** ./node_modules/gw2api-client/src/endpoints/wvw.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const AbstractEndpoint = __webpack_require__(/*! ../endpoint */ "./node_modules/gw2api-client/src/endpoint.js")

module.exports = class WvwEndpoint extends AbstractEndpoint {
  abilities () {
    return new AbilitiesEndpoint(this)
  }

  matches () {
    return new MatchesEndpoint(this)
  }

  objectives () {
    return new ObjectivesEndpoint(this)
  }

  upgrades () {
    return new UpgradesEndpoint(this)
  }

  ranks () {
    return new RanksEndpoint(this)
  }
}

class AbilitiesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wvw/abilities'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class MatchesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wvw/matches'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 30
  }

  world (worldId) {
    return super.get(`?world=${worldId}`, true)
  }

  overview () {
    return new MatchesOverviewEndpoint(this)
  }

  scores () {
    return new MatchesScoresEndpoint(this)
  }

  stats (id) {
    return new MatchesStatsEndpoint(this, id)
  }
}

class TeamsEndpoint extends AbstractEndpoint {
  constructor (client, id, team) {
    super(client)
    this.team = team
    this.id = id
    this.url = `/v2/wvw/matches/stats/${id}/teams`
  }

  top (which) {
    return new TopStatsEndpoint(this, this.id, this.team, which)
  }
}

class TopStatsEndpoint extends AbstractEndpoint {
  constructor (client, id, team, which) {
    super(client)
    this.which = which
    this.url = `/v2/wvw/matches/stats/${id}/teams/${team}/top/${which}`
  }
}

class MatchesOverviewEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wvw/matches/overview'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 30
  }

  world (worldId) {
    return super.get(`?world=${worldId}`, true)
  }
}

class MatchesScoresEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wvw/matches/scores'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 30
  }

  world (worldId) {
    return super.get(`?world=${worldId}`, true)
  }
}

class MatchesStatsEndpoint extends AbstractEndpoint {
  constructor (client, id) {
    super(client)
    this.id = id
    this.url = '/v2/wvw/matches/stats'
    this.isPaginated = true
    this.isBulk = true
    this.cacheTime = 30
  }

  world (worldId) {
    return super.get(`?world=${worldId}`, true)
  }

  teams (team) {
    return new TeamsEndpoint(this, this.id, team)
  }
}

class ObjectivesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wvw/objectives'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class UpgradesEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wvw/upgrades'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}

class RanksEndpoint extends AbstractEndpoint {
  constructor (client) {
    super(client)
    this.url = '/v2/wvw/ranks'
    this.isPaginated = true
    this.isBulk = true
    this.isLocalized = true
    this.cacheTime = 24 * 60 * 60
  }
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/flow.js":
/*!************************************************!*\
  !*** ./node_modules/gw2api-client/src/flow.js ***!
  \************************************************/
/***/ ((module) => {

async function parallel (promises) {
  const results = await Promise.all(
    Object.values(promises).map(func => func())
  )

  // If the initial structure was an array, just return the array of results
  if (Array.isArray(promises)) {
    return results
  }

  // If the initial structure was an object, rebuild an object with the results
  const keys = Object.keys(promises)
  return results.reduce((object, resultPart, index) => {
    object[keys[index]] = resultPart
    return object
  }, {})
}

module.exports = { parallel }


/***/ }),

/***/ "./node_modules/gw2api-client/src/hash.js":
/*!************************************************!*\
  !*** ./node_modules/gw2api-client/src/hash.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const emotionHash = (__webpack_require__(/*! @emotion/hash/dist/hash.browser.cjs.js */ "./node_modules/@emotion/hash/dist/hash.browser.cjs.js")["default"])

let cache = {}

function hash (string) {
  if (!cache[string]) {
    cache[string] = emotionHash(string)
  }

  return cache[string]
}

module.exports = hash


/***/ }),

/***/ "./node_modules/gw2api-client/src/helpers/resetTime.js":
/*!*************************************************************!*\
  !*** ./node_modules/gw2api-client/src/helpers/resetTime.js ***!
  \*************************************************************/
/***/ ((module) => {

const DAY_MS = 24 * 60 * 60 * 1000

function getDateAtTime (date, time) {
  return new Date(date.toISOString().replace(/T.*Z/, `T${time}.000Z`))
}

function getDailyReset (date) {
  date = date ? new Date(date) : new Date()

  date = new Date(date.getTime() + DAY_MS)
  return getDateAtTime(date, '00:00:00')
}

function getLastDailyReset (date) {
  return new Date(getDailyReset(date).getTime() - DAY_MS)
}

function getWeeklyReset (date) {
  date = date ? new Date(date) : new Date()

  const weekday = date.getUTCDay()
  const hours = date.getUTCHours()
  const minutes = date.getUTCMinutes()
  let dayDiff = 0

  switch (weekday) {
    case 0:
      // 0 -> 1 sunday
      dayDiff = 1
      break
    case 1:
      // 1 -> 0 monday (if before reset)
      // 1 -> 7 monday (if after reset)
      const pastReset = hours > 7 || (hours === 7 && minutes >= 30)
      dayDiff = pastReset ? 7 : 0
      break
    default:
      // 2 -> 6 tuesday
      // 3 -> 5 wednesday
      // 4 -> 4 thursday
      // 5 -> 3 friday
      // 6 -> 2 saturday
      dayDiff = 8 - weekday
      break
  }

  date = new Date(date.getTime() + dayDiff * DAY_MS)
  return getDateAtTime(date, '07:30:00')
}

function getLastWeeklyReset (date) {
  return new Date(getWeeklyReset(date).getTime() - 7 * DAY_MS)
}

module.exports = {
  getDateAtTime,
  getDailyReset,
  getLastDailyReset,
  getWeeklyReset,
  getLastWeeklyReset
}


/***/ }),

/***/ "./node_modules/gw2api-client/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/gw2api-client/src/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Client = __webpack_require__(/*! ./client */ "./node_modules/gw2api-client/src/client.js")

// Each time the api wrapper is called, we give back a new instance
module.exports = function () {
  return new Client()
}


/***/ }),

/***/ "./node_modules/idb-keyval/dist/idb-keyval.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/idb-keyval/dist/idb-keyval.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Store: () => (/* binding */ Store),
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   del: () => (/* binding */ del),
/* harmony export */   get: () => (/* binding */ get),
/* harmony export */   keys: () => (/* binding */ keys),
/* harmony export */   set: () => (/* binding */ set)
/* harmony export */ });
class Store {
    constructor(dbName = 'keyval-store', storeName = 'keyval') {
        this.storeName = storeName;
        this._dbp = new Promise((resolve, reject) => {
            const openreq = indexedDB.open(dbName, 1);
            openreq.onerror = () => reject(openreq.error);
            openreq.onsuccess = () => resolve(openreq.result);
            // First time setup: create an empty object store
            openreq.onupgradeneeded = () => {
                openreq.result.createObjectStore(storeName);
            };
        });
    }
    _withIDBStore(type, callback) {
        return this._dbp.then(db => new Promise((resolve, reject) => {
            const transaction = db.transaction(this.storeName, type);
            transaction.oncomplete = () => resolve();
            transaction.onabort = transaction.onerror = () => reject(transaction.error);
            callback(transaction.objectStore(this.storeName));
        }));
    }
}
let store;
function getDefaultStore() {
    if (!store)
        store = new Store();
    return store;
}
function get(key, store = getDefaultStore()) {
    let req;
    return store._withIDBStore('readonly', store => {
        req = store.get(key);
    }).then(() => req.result);
}
function set(key, value, store = getDefaultStore()) {
    return store._withIDBStore('readwrite', store => {
        store.put(value, key);
    });
}
function del(key, store = getDefaultStore()) {
    return store._withIDBStore('readwrite', store => {
        store.delete(key);
    });
}
function clear(store = getDefaultStore()) {
    return store._withIDBStore('readwrite', store => {
        store.clear();
    });
}
function keys(store = getDefaultStore()) {
    const keys = [];
    return store._withIDBStore('readonly', store => {
        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.
        // And openKeyCursor isn't supported by Safari.
        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {
            if (!this.result)
                return;
            keys.push(this.result.key);
            this.result.continue();
        };
    }).then(() => keys);
}




/***/ }),

/***/ "./node_modules/lets-fetch/src/flow.js":
/*!*********************************************!*\
  !*** ./node_modules/lets-fetch/src/flow.js ***!
  \*********************************************/
/***/ ((module) => {

async function series (array) {
  let results = []

  for (let i = 0; i !== array.length; i++) {
    results.push(await array[i]())
  }

  return results
}

function parallel (array) {
  return Promise.all(array.map(func => func()))
}

module.exports = {
  series,
  parallel
}


/***/ }),

/***/ "./node_modules/lets-fetch/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lets-fetch/src/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const fetch = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js")
const flow = __webpack_require__(/*! ./flow.js */ "./node_modules/lets-fetch/src/flow.js")

const defaultOptions = {
  type: 'json',
  method: 'GET',
  headers: {},
  body: undefined
}

let internalRetry = () => false
let internalRetryWait = () => false

// istanbul ignore next
let internalLogger = () => false

module.exports = { retry, retryWait, logger, single, many }

// Set a custom decider function that decides to retry
// based on the number of tries and the previous error
function retry (decider) {
  internalRetry = decider
}

// Set a custom function that sets how long we should
// sleep between each failed request
function retryWait (callback) {
  internalRetryWait = callback
}

// Set a custom function that logs out information about each request
function logger (callback) {
  internalLogger = callback
}

// Request a single url
function single (url, options = {}) {
  let tries = 1

  // Execute the request and retry if there are errors (and the
  // retry decider decided that we should try our luck again)
  const callRequest = () => {
    let start = new Date()

    return request(url, options)
      .then((data) => {
        internalLogger({ url, duration: new Date() - start, status: 200, retries: tries - 1 })

        return data
      })
      .catch(err => {
        internalLogger({ url, duration: new Date() - start, status: err && err.response && err.response.status, retries: tries - 1 })

        if (internalRetry(++tries, err)) {
          return wait(callRequest, internalRetryWait(tries))
        }

        throw err
      })
  }

  return callRequest()
}

// Send a request using the underlying fetch API
function request (url, options) {
  options = Object.assign({}, defaultOptions, options)
  let savedContent
  let savedResponse

  return new Promise((resolve, reject) => {
    fetch(url, options)
      .then(handleResponse)
      .then(handleBody)
      .catch(handleError)

    function handleResponse (response) {
      // Save the response for checking the status later
      savedResponse = response

      // Decode the response body
      switch (options.type) {
        case 'response':
          return response
        case 'json':
          return response.json()
        default:
          return response.text()
      }
    }

    function handleBody (content) {
      // Bubble an error if the response status is not okay
      if (savedResponse && savedResponse.status >= 400) {
        savedContent = content
        throw new Error(`Response status indicates error`)
      }

      // All is well!
      resolve(content)
    }

    function handleError (err) {
      // Overwrite potential decoding errors when the actual problem was the response
      if (savedResponse && savedResponse.status >= 400) {
        err = new Error(`Status ${savedResponse.status}`)
      }

      // Enrich the error message with the response and the content
      let error = new Error(err.message)
      error.response = savedResponse
      error.content = savedContent
      reject(error)
    }
  })
}

// Request multiple pages
function many (urls, options = {}) {
  let flowMethod = (options.waitTime) ? flow.series : flow.parallel

  // Call the single method while respecting the wait time in between tasks
  const callSingle = (url) => single(url, options)
    .then(content => wait(() => content, options.waitTime))

  // Map over the urls and call them using the method the user chose
  let promises = urls.map(url => () => callSingle(url))
  return flowMethod(promises)
}

// Wait a specific time before executing a callback
function wait (callback, ms) {
  return new Promise(resolve => {
    setTimeout(() => resolve(callback()), ms || 0)
  })
}


/***/ }),

/***/ "./node_modules/querystringify/index.js":
/*!**********************************************!*\
  !*** ./node_modules/querystringify/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , undef;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */
function decode(input) {
  try {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  } catch (e) {
    return null;
  }
}

/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */
function encode(input) {
  try {
    return encodeURIComponent(input);
  } catch (e) {
    return null;
  }
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?#&]+)=?([^&]*)/g
    , result = {}
    , part;

  while (part = parser.exec(query)) {
    var key = decode(part[1])
      , value = decode(part[2]);

    //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    // In the case if failed decoding, we want to omit the key/value pairs
    // from the result.
    //
    if (key === null || value === null || key in result) continue;
    result[key] = value;
  }

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = []
    , value
    , key;

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (key in obj) {
    if (has.call(obj, key)) {
      value = obj[key];

      //
      // Edge cases where we actually want to encode the value to an empty
      // string instead of the stringified value.
      //
      if (!value && (value === null || value === undef || isNaN(value))) {
        value = '';
      }

      key = encode(key);
      value = encode(value);

      //
      // If we failed to encode the strings, we should bail out as we don't
      // want to add invalid strings to the query.
      //
      if (key === null || value === null) continue;
      pairs.push(key +'='+ value);
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;


/***/ }),

/***/ "./node_modules/tabulator-tables/dist/js/tabulator_esm.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/tabulator-tables/dist/js/tabulator_esm.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AccessorModule: () => (/* binding */ Accessor),
/* harmony export */   AjaxModule: () => (/* binding */ Ajax),
/* harmony export */   CalcComponent: () => (/* binding */ CalcComponent),
/* harmony export */   CellComponent: () => (/* binding */ CellComponent),
/* harmony export */   ClipboardModule: () => (/* binding */ Clipboard),
/* harmony export */   ColumnCalcsModule: () => (/* binding */ ColumnCalcs),
/* harmony export */   ColumnComponent: () => (/* binding */ ColumnComponent),
/* harmony export */   DataTreeModule: () => (/* binding */ DataTree),
/* harmony export */   DownloadModule: () => (/* binding */ Download),
/* harmony export */   EditModule: () => (/* binding */ Edit),
/* harmony export */   ExportModule: () => (/* binding */ Export),
/* harmony export */   FilterModule: () => (/* binding */ Filter),
/* harmony export */   FormatModule: () => (/* binding */ Format),
/* harmony export */   FrozenColumnsModule: () => (/* binding */ FrozenColumns),
/* harmony export */   FrozenRowsModule: () => (/* binding */ FrozenRows),
/* harmony export */   GroupComponent: () => (/* binding */ GroupComponent),
/* harmony export */   GroupRowsModule: () => (/* binding */ GroupRows),
/* harmony export */   HistoryModule: () => (/* binding */ History),
/* harmony export */   HtmlTableImportModule: () => (/* binding */ HtmlTableImport),
/* harmony export */   ImportModule: () => (/* binding */ Import),
/* harmony export */   InteractionModule: () => (/* binding */ Interaction),
/* harmony export */   KeybindingsModule: () => (/* binding */ Keybindings),
/* harmony export */   MenuModule: () => (/* binding */ Menu),
/* harmony export */   Module: () => (/* binding */ Module),
/* harmony export */   MoveColumnsModule: () => (/* binding */ MoveColumns),
/* harmony export */   MoveRowsModule: () => (/* binding */ MoveRows),
/* harmony export */   MutatorModule: () => (/* binding */ Mutator),
/* harmony export */   PageModule: () => (/* binding */ Page),
/* harmony export */   PersistenceModule: () => (/* binding */ Persistence),
/* harmony export */   PopupModule: () => (/* binding */ Popup),
/* harmony export */   PrintModule: () => (/* binding */ Print),
/* harmony export */   PseudoRow: () => (/* binding */ PseudoRow),
/* harmony export */   RangeComponent: () => (/* binding */ RangeComponent),
/* harmony export */   ReactiveDataModule: () => (/* binding */ ReactiveData),
/* harmony export */   Renderer: () => (/* binding */ Renderer),
/* harmony export */   ResizeColumnsModule: () => (/* binding */ ResizeColumns),
/* harmony export */   ResizeRowsModule: () => (/* binding */ ResizeRows),
/* harmony export */   ResizeTableModule: () => (/* binding */ ResizeTable),
/* harmony export */   ResponsiveLayoutModule: () => (/* binding */ ResponsiveLayout),
/* harmony export */   RowComponent: () => (/* binding */ RowComponent),
/* harmony export */   SelectRangeModule: () => (/* binding */ SelectRange),
/* harmony export */   SelectRowModule: () => (/* binding */ SelectRow),
/* harmony export */   SheetComponent: () => (/* binding */ SheetComponent),
/* harmony export */   SortModule: () => (/* binding */ Sort),
/* harmony export */   SpreadsheetModule: () => (/* binding */ Spreadsheet),
/* harmony export */   Tabulator: () => (/* binding */ Tabulator$1),
/* harmony export */   TabulatorFull: () => (/* binding */ TabulatorFull$1),
/* harmony export */   TooltipModule: () => (/* binding */ Tooltip),
/* harmony export */   ValidateModule: () => (/* binding */ Validate)
/* harmony export */ });
/* Tabulator v6.3.1 (c) Oliver Folkerd 2025 */
class CoreFeature{

	constructor(table){
		this.table = table;
	}

	//////////////////////////////////////////
	/////////////// DataLoad /////////////////
	//////////////////////////////////////////

	reloadData(data, silent, columnsChanged){
		return this.table.dataLoader.load(data, undefined, undefined, undefined, silent, columnsChanged);
	}

	//////////////////////////////////////////
	///////////// Localization ///////////////
	//////////////////////////////////////////

	langText(){
		return this.table.modules.localize.getText(...arguments);
	}

	langBind(){
		return this.table.modules.localize.bind(...arguments);
	}

	langLocale(){
		return this.table.modules.localize.getLocale(...arguments);
	}


	//////////////////////////////////////////
	////////// Inter Table Comms /////////////
	//////////////////////////////////////////

	commsConnections(){
		return this.table.modules.comms.getConnections(...arguments);
	}

	commsSend(){
		return this.table.modules.comms.send(...arguments);
	}

	//////////////////////////////////////////
	//////////////// Layout  /////////////////
	//////////////////////////////////////////

	layoutMode(){
		return this.table.modules.layout.getMode();
	}

	layoutRefresh(force){
		return this.table.modules.layout.layout(force);
	}


	//////////////////////////////////////////
	/////////////// Event Bus ////////////////
	//////////////////////////////////////////

	subscribe(){
		return this.table.eventBus.subscribe(...arguments);
	}

	unsubscribe(){
		return this.table.eventBus.unsubscribe(...arguments);
	}

	subscribed(key){
		return this.table.eventBus.subscribed(key);
	}

	subscriptionChange(){
		return this.table.eventBus.subscriptionChange(...arguments);
	}

	dispatch(){
		return this.table.eventBus.dispatch(...arguments);
	}

	chain(){
		return this.table.eventBus.chain(...arguments);
	}

	confirm(){
		return this.table.eventBus.confirm(...arguments);
	}

	dispatchExternal(){
		return this.table.externalEvents.dispatch(...arguments);
	}

	subscribedExternal(key){
		return this.table.externalEvents.subscribed(key);
	}

	subscriptionChangeExternal(){
		return this.table.externalEvents.subscriptionChange(...arguments);
	}

	//////////////////////////////////////////
	//////////////// Options /////////////////
	//////////////////////////////////////////

	options(key){
		return this.table.options[key];
	}

	setOption(key, value){
		if(typeof value !== "undefined"){
			this.table.options[key] = value;
		}

		return this.table.options[key];
	}

	//////////////////////////////////////////
	/////////// Deprecation Checks ///////////
	//////////////////////////////////////////

	deprecationCheck(oldOption, newOption,  convert){
		return this.table.deprecationAdvisor.check(oldOption, newOption,  convert);
	}

	deprecationCheckMsg(oldOption, msg){
		return this.table.deprecationAdvisor.checkMsg(oldOption, msg);
	}

	deprecationMsg(msg){
		return this.table.deprecationAdvisor.msg(msg);
	}
	//////////////////////////////////////////
	//////////////// Modules /////////////////
	//////////////////////////////////////////

	module(key){
		return this.table.module(key);
	}
}

class Helpers{

	static elVisible(el){
		return !(el.offsetWidth <= 0 && el.offsetHeight <= 0);
	}

	static elOffset(el){
		var box = el.getBoundingClientRect();

		return {
			top: box.top + window.pageYOffset - document.documentElement.clientTop,
			left: box.left + window.pageXOffset - document.documentElement.clientLeft
		};
	}

	static retrieveNestedData(separator, field, data){
		var structure = separator ? field.split(separator) : [field],
		length = structure.length,
		output;

		for(let i = 0; i < length; i++){

			data = data[structure[i]];

			output = data;

			if(!data){
				break;
			}
		}

		return output;
	}

	static deepClone(obj, clone, list = []){
		var objectProto = {}.__proto__,
		arrayProto = [].__proto__;

		if (!clone){
			clone = Object.assign(Array.isArray(obj) ? [] : {}, obj);
		}

		for(var i in obj) {
			let subject = obj[i],
			match, copy;

			if(subject != null && typeof subject === "object" && (subject.__proto__ === objectProto || subject.__proto__ === arrayProto)){
				match = list.findIndex((item) => {
					return item.subject === subject;
				});

				if(match > -1){
					clone[i] = list[match].copy;
				}else {
					copy = Object.assign(Array.isArray(subject) ? [] : {}, subject);

					list.unshift({subject, copy});

					clone[i] = this.deepClone(subject, copy, list);
				}
			}
		}

		return clone;
	}
}

let Popup$1 = class Popup extends CoreFeature{
	constructor(table, element, parent){
		super(table);
		
		this.element = element;
		this.container = this._lookupContainer();
		
		this.parent = parent;
		
		this.reversedX = false;
		this.childPopup = null;
		this.blurable = false;
		this.blurCallback = null;
		this.blurEventsBound = false;
		this.renderedCallback = null;
		
		this.visible = false;
		this.hideable = true;
		
		this.element.classList.add("tabulator-popup-container");
		
		this.blurEvent = this.hide.bind(this, false);
		this.escEvent = this._escapeCheck.bind(this);
		
		this.destroyBinding = this.tableDestroyed.bind(this);
		this.destroyed = false;
	}
	
	tableDestroyed(){
		this.destroyed = true;
		this.hide(true);
	}
	
	_lookupContainer(){
		var container = this.table.options.popupContainer;
		
		if(typeof container === "string"){
			container = document.querySelector(container);
			
			if(!container){
				console.warn("Menu Error - no container element found matching selector:",  this.table.options.popupContainer , "(defaulting to document body)");
			}
		}else if (container === true){
			container = this.table.element;
		}
		
		if(container && !this._checkContainerIsParent(container)){
			container = false;
			console.warn("Menu Error - container element does not contain this table:",  this.table.options.popupContainer , "(defaulting to document body)");
		}
		
		if(!container){
			container = document.body;
		}
		
		return container;
	}
	
	_checkContainerIsParent(container, element = this.table.element){
		if(container === element){
			return true;
		}else {
			return element.parentNode ? this._checkContainerIsParent(container, element.parentNode) : false;
		}
	}
	
	renderCallback(callback){
		this.renderedCallback = callback;
	}
	
	containerEventCoords(e){
		var touch = !(e instanceof MouseEvent);
		
		var x = touch ? e.touches[0].pageX : e.pageX;
		var y = touch ? e.touches[0].pageY : e.pageY;
		
		if(this.container !== document.body){
			let parentOffset = Helpers.elOffset(this.container);
			
			x -= parentOffset.left;
			y -= parentOffset.top;
		}
		
		return {x, y};
	}
	
	elementPositionCoords(element, position = "right"){
		var offset = Helpers.elOffset(element),
		containerOffset, x, y;
		
		if(this.container !== document.body){
			containerOffset = Helpers.elOffset(this.container);
			
			offset.left -= containerOffset.left;
			offset.top -= containerOffset.top;
		}
		
		switch(position){
			case "right":
				x = offset.left + element.offsetWidth;
				y = offset.top - 1;
				break;
			
			case "bottom":
				x = offset.left;
				y = offset.top + element.offsetHeight;
				break;
			
			case "left":
				x = offset.left;
				y = offset.top - 1;
				break;
			
			case "top":
				x = offset.left;
				y = offset.top;
				break;
			
			case "center":
				x = offset.left + (element.offsetWidth / 2);
				y = offset.top + (element.offsetHeight / 2);
				break;
			
		}
		
		return {x, y, offset};
	}
	
	show(origin, position){
		var x, y, parentEl, parentOffset, coords;
		
		if(this.destroyed || this.table.destroyed){
			return this;
		}
		
		if(origin instanceof HTMLElement){
			parentEl = origin;
			coords = this.elementPositionCoords(origin, position);
			
			parentOffset = coords.offset;
			x = coords.x;
			y = coords.y;
			
		}else if(typeof origin === "number"){
			parentOffset = {top:0, left:0};
			x = origin;
			y = position;
		}else {
			coords = this.containerEventCoords(origin);
			
			x = coords.x;
			y = coords.y;
			
			this.reversedX = false;
		}
		
		this.element.style.top = y + "px";
		this.element.style.left = x + "px";
		
		this.container.appendChild(this.element);
		
		if(typeof this.renderedCallback === "function"){
			this.renderedCallback();
		}
		
		this._fitToScreen(x, y, parentEl, parentOffset, position);
		
		this.visible = true;
		
		this.subscribe("table-destroy", this.destroyBinding);
		
		this.element.addEventListener("mousedown", (e) => {
			e.stopPropagation();
		});
		
		return this;
	}
	
	_fitToScreen(x, y, parentEl, parentOffset, position){
		var scrollTop = this.container === document.body ? document.documentElement.scrollTop : this.container.scrollTop;
		
		//move menu to start on right edge if it is too close to the edge of the screen
		if((x + this.element.offsetWidth) >= this.container.offsetWidth || this.reversedX){
			this.element.style.left = "";
			
			if(parentEl){
				this.element.style.right = (this.container.offsetWidth - parentOffset.left) + "px";
			}else {
				this.element.style.right = (this.container.offsetWidth - x) + "px";
			}
			
			this.reversedX = true;
		}
		
		//move menu to start on bottom edge if it is too close to the edge of the screen
		let offsetHeight = Math.max(this.container.offsetHeight, scrollTop ? this.container.scrollHeight : 0);
		if((y + this.element.offsetHeight) > offsetHeight) {
			if(parentEl){
				switch(position){
					case "bottom":
						this.element.style.top = (parseInt(this.element.style.top) - this.element.offsetHeight - parentEl.offsetHeight - 1) + "px";
						break;
					
					default:
						this.element.style.top = (parseInt(this.element.style.top) - this.element.offsetHeight + parentEl.offsetHeight + 1) + "px";
				}
				
			}else {
				this.element.style.height = offsetHeight + "px";
			}
		}
	}
	
	isVisible(){
		return this.visible;
	}
	
	hideOnBlur(callback){
		this.blurable = true;
		
		if(this.visible){
			setTimeout(() => {
				if(this.visible){
					this.table.rowManager.element.addEventListener("scroll", this.blurEvent);
					this.subscribe("cell-editing", this.blurEvent);
					document.body.addEventListener("click", this.blurEvent);
					document.body.addEventListener("contextmenu", this.blurEvent);
					document.body.addEventListener("mousedown", this.blurEvent);
					window.addEventListener("resize", this.blurEvent);
					document.body.addEventListener("keydown", this.escEvent);

					this.blurEventsBound = true;
				}
			}, 100);
			
			this.blurCallback = callback;
		}
		
		return this;
	}
	
	_escapeCheck(e){
		if(e.keyCode == 27){
			this.hide();
		}
	}
	
	blockHide(){
		this.hideable = false;
	}
	
	restoreHide(){
		this.hideable = true;
	}
	
	hide(silent = false){
		if(this.visible && this.hideable){
			if(this.blurable && this.blurEventsBound){
				document.body.removeEventListener("keydown", this.escEvent);
				document.body.removeEventListener("click", this.blurEvent);
				document.body.removeEventListener("contextmenu", this.blurEvent);
				document.body.removeEventListener("mousedown", this.blurEvent);
				window.removeEventListener("resize", this.blurEvent);
				this.table.rowManager.element.removeEventListener("scroll", this.blurEvent);
				this.unsubscribe("cell-editing", this.blurEvent);

				this.blurEventsBound = false;
			}
			
			if(this.childPopup){
				this.childPopup.hide();
			}
			
			if(this.parent){
				this.parent.childPopup = null;
			}
			
			if(this.element.parentNode){
				this.element.parentNode.removeChild(this.element);
			}
			
			this.visible = false;
			
			if(this.blurCallback && !silent){
				this.blurCallback();
			}
			
			this.unsubscribe("table-destroy", this.destroyBinding);
		}
		
		return this;
	}
	
	child(element){
		if(this.childPopup){
			this.childPopup.hide();
		}
		
		this.childPopup = new Popup(this.table, element, this);
		
		return this.childPopup;
	}
};

class Module extends CoreFeature{
	
	constructor(table, name){
		super(table);
		
		this._handler = null;
	}
	
	initialize(){
		// setup module when table is initialized, to be overridden in module
	}
	
	
	///////////////////////////////////
	////// Options Registration ///////
	///////////////////////////////////
	
	registerTableOption(key, value){
		this.table.optionsList.register(key, value);
	}
	
	registerColumnOption(key, value){
		this.table.columnManager.optionsList.register(key, value);
	}
	
	///////////////////////////////////
	/// Public Function Registration ///
	///////////////////////////////////
	
	registerTableFunction(name, func){
		if(typeof this.table[name] === "undefined"){
			this.table[name] = (...args) => {
				this.table.initGuard(name);
				
				return func(...args);
			};
		}else {
			console.warn("Unable to bind table function, name already in use", name);
		}
	}
	
	registerComponentFunction(component, func, handler){
		return this.table.componentFunctionBinder.bind(component, func, handler);
	}
	
	///////////////////////////////////
	////////// Data Pipeline //////////
	///////////////////////////////////
	
	registerDataHandler(handler, priority){
		this.table.rowManager.registerDataPipelineHandler(handler, priority);
		this._handler = handler;
	}
	
	registerDisplayHandler(handler, priority){
		this.table.rowManager.registerDisplayPipelineHandler(handler, priority);
		this._handler = handler;
	}
	
	displayRows(adjust){
		var index = this.table.rowManager.displayRows.length - 1, 
		lookupIndex;
		
		if(this._handler){
			lookupIndex = this.table.rowManager.displayPipeline.findIndex((item) => {
				return item.handler === this._handler;
			});

			if(lookupIndex > -1){
				index = lookupIndex;
			}
		}
		
		if(adjust){
			index = index + adjust;
		}

		if(this._handler){
			if(index > -1){
				return this.table.rowManager.getDisplayRows(index);
			}else {
				return this.activeRows();
			}
		}	
	}
	
	activeRows(){
		return this.table.rowManager.activeRows;
	}
	
	refreshData(renderInPosition, handler){
		if(!handler){
			handler = this._handler;
		}
		
		if(handler){
			this.table.rowManager.refreshActiveData(handler, false, renderInPosition);
		}
	}
	
	///////////////////////////////////
	//////// Footer Management ////////
	///////////////////////////////////
	
	footerAppend(element){
		return this.table.footerManager.append(element);
	}
	
	footerPrepend(element){
		return this.table.footerManager.prepend(element);
	}
	
	footerRemove(element){
		return this.table.footerManager.remove(element);
	} 
	
	///////////////////////////////////
	//////// Popups Management ////////
	///////////////////////////////////
	
	popup(menuEl, menuContainer){
		return new Popup$1(this.table, menuEl, menuContainer);
	}
	
	///////////////////////////////////
	//////// Alert Management ////////
	///////////////////////////////////
	
	alert(content, type){
		return this.table.alertManager.alert(content, type);
	}
	
	clearAlert(){
		return this.table.alertManager.clear();
	}
	
}

var defaultAccessors = {
	rownum:function(value, data, type, params, column, row){
		return row.getPosition();
	}
};

class Accessor extends Module{
	
	static moduleName = "accessor";

	//load defaults
	static accessors = defaultAccessors;

	constructor(table){
		super(table);

		this.allowedTypes = ["", "data", "download", "clipboard", "print", "htmlOutput"]; //list of accessor types

		this.registerColumnOption("accessor");
		this.registerColumnOption("accessorParams");
		this.registerColumnOption("accessorData");
		this.registerColumnOption("accessorDataParams");
		this.registerColumnOption("accessorDownload");
		this.registerColumnOption("accessorDownloadParams");
		this.registerColumnOption("accessorClipboard");
		this.registerColumnOption("accessorClipboardParams");
		this.registerColumnOption("accessorPrint");
		this.registerColumnOption("accessorPrintParams");
		this.registerColumnOption("accessorHtmlOutput");
		this.registerColumnOption("accessorHtmlOutputParams");
	}

	initialize(){
		this.subscribe("column-layout", this.initializeColumn.bind(this));
		this.subscribe("row-data-retrieve", this.transformRow.bind(this));
	}

	//initialize column accessor
	initializeColumn(column){
		var match = false,
		config = {};

		this.allowedTypes.forEach((type) => {
			var key = "accessor" + (type.charAt(0).toUpperCase() + type.slice(1)),
			accessor;

			if(column.definition[key]){
				accessor = this.lookupAccessor(column.definition[key]);

				if(accessor){
					match = true;

					config[key] = {
						accessor:accessor,
						params: column.definition[key + "Params"] || {},
					};
				}
			}
		});

		if(match){
			column.modules.accessor = config;
		}
	}

	lookupAccessor(value){
		var accessor = false;

		//set column accessor
		switch(typeof value){
			case "string":
				if(Accessor.accessors[value]){
					accessor = Accessor.accessors[value];
				}else {
					console.warn("Accessor Error - No such accessor found, ignoring: ", value);
				}
				break;

			case "function":
				accessor = value;
				break;
		}

		return accessor;
	}

	//apply accessor to row
	transformRow(row, type){
		var key = "accessor" + (type.charAt(0).toUpperCase() + type.slice(1)),
		rowComponent = row.getComponent();

		//clone data object with deep copy to isolate internal data from returned result
		var data = Helpers.deepClone(row.data || {});

		this.table.columnManager.traverse(function(column){
			var value, accessor, params, colComponent;

			if(column.modules.accessor){

				accessor = column.modules.accessor[key] || column.modules.accessor.accessor || false;

				if(accessor){
					value = column.getFieldValue(data);

					if(value != "undefined"){
						colComponent = column.getComponent();
						params = typeof accessor.params === "function" ? accessor.params(value, data, type, colComponent, rowComponent) : accessor.params;
						column.setFieldValue(data, accessor.accessor(value, data, type, params, colComponent, rowComponent));
					}
				}
			}
		});

		return data;
	}
}

var defaultConfig = {
	method: "GET",
};

function generateParamsList$1(data, prefix){
	var output = [];

	prefix = prefix || "";

	if(Array.isArray(data)){
		data.forEach((item, i) => {
			output = output.concat(generateParamsList$1(item, prefix ? prefix + "[" + i + "]" : i));
		});
	}else if (typeof data === "object"){
		for (var key in data){
			output = output.concat(generateParamsList$1(data[key], prefix ? prefix + "[" + key + "]" : key));
		}
	}else {
		output.push({key:prefix, value:data});
	}

	return output;
}

function serializeParams(params){
	var output = generateParamsList$1(params),
	encoded = [];

	output.forEach(function(item){
		encoded.push(encodeURIComponent(item.key) + "=" + encodeURIComponent(item.value));
	});

	return encoded.join("&");
}

function urlBuilder(url, config, params){
	if(url){
		if(params && Object.keys(params).length){
			if(!config.method || config.method.toLowerCase() == "get"){
				config.method = "get";

				url += (url.includes("?") ? "&" : "?") + serializeParams(params);
			}
		}
	}

	return url;
}

function defaultLoaderPromise(url, config, params){
	var contentType;

	return new Promise((resolve, reject) => {
		//set url
		url = this.urlGenerator.call(this.table, url, config, params);

		//set body content if not GET request
		if(config.method.toUpperCase() != "GET"){
			contentType = typeof this.table.options.ajaxContentType === "object" ?  this.table.options.ajaxContentType : this.contentTypeFormatters[this.table.options.ajaxContentType];
			if(contentType){

				for(var key in contentType.headers){
					if(!config.headers){
						config.headers = {};
					}

					if(typeof config.headers[key] === "undefined"){
						config.headers[key] = contentType.headers[key];
					}
				}

				config.body = contentType.body.call(this, url, config, params);

			}else {
				console.warn("Ajax Error - Invalid ajaxContentType value:", this.table.options.ajaxContentType);
			}
		}

		if(url){
			//configure headers
			if(typeof config.headers === "undefined"){
				config.headers = {};
			}

			if(typeof config.headers.Accept === "undefined"){
				config.headers.Accept = "application/json";
			}

			if(typeof config.headers["X-Requested-With"] === "undefined"){
				config.headers["X-Requested-With"] = "XMLHttpRequest";
			}

			if(typeof config.mode === "undefined"){
				config.mode = "cors";
			}

			if(config.mode == "cors"){
				if(typeof config.headers["Origin"] === "undefined"){
					config.headers["Origin"] = window.location.origin;
				}
        
				if(typeof config.credentials === "undefined"){
					config.credentials = 'same-origin';
				}
			}else {
				if(typeof config.credentials === "undefined"){
					config.credentials = 'include';
				}
			}

			//send request
			fetch(url, config)
				.then((response)=>{
					if(response.ok) {
						response.json()
							.then((data)=>{
								resolve(data);
							}).catch((error)=>{
								reject(error);
								console.warn("Ajax Load Error - Invalid JSON returned", error);
							});
					}else {
						console.error("Ajax Load Error - Connection Error: " + response.status, response.statusText);
						reject(response);
					}
				})
				.catch((error)=>{
					console.error("Ajax Load Error - Connection Error: ", error);
					reject(error);
				});
		}else {
			console.warn("Ajax Load Error - No URL Set");
			resolve([]);
		}
	});
}

function generateParamsList(data, prefix){
	var output = [];

	prefix = prefix || "";

	if(Array.isArray(data)){
		data.forEach((item, i) => {
			output = output.concat(generateParamsList(item, prefix ? prefix + "[" + i + "]" : i));
		});
	}else if (typeof data === "object"){
		for (var key in data){
			output = output.concat(generateParamsList(data[key], prefix ? prefix + "[" + key + "]" : key));
		}
	}else {
		output.push({key:prefix, value:data});
	}

	return output;
}

var defaultContentTypeFormatters = {
	"json":{
		headers:{
			'Content-Type': 'application/json',
		},
		body:function(url, config, params){
			return JSON.stringify(params);
		},
	},
	"form":{
		headers:{
		},
		body:function(url, config, params){

			var output = generateParamsList(params),
			form = new FormData();

			output.forEach(function(item){
				form.append(item.key, item.value);
			});

			return form;
		},
	},
};

class Ajax extends Module{

	static moduleName = "ajax";

	//load defaults
	static defaultConfig = defaultConfig;
	static defaultURLGenerator = urlBuilder;
	static defaultLoaderPromise = defaultLoaderPromise;
	static contentTypeFormatters = defaultContentTypeFormatters;
	
	constructor(table){
		super(table);
		
		this.config = {}; //hold config object for ajax request
		this.url = ""; //request URL
		this.urlGenerator = false;
		this.params = false; //request parameters
		
		this.loaderPromise = false;
		
		this.registerTableOption("ajaxURL", false); //url for ajax loading
		this.registerTableOption("ajaxURLGenerator", false);
		this.registerTableOption("ajaxParams", {});  //params for ajax loading
		this.registerTableOption("ajaxConfig", "get"); //ajax request type
		this.registerTableOption("ajaxContentType", "form"); //ajax request type
		this.registerTableOption("ajaxRequestFunc", false); //promise function
		
		this.registerTableOption("ajaxRequesting", function(){});
		this.registerTableOption("ajaxResponse", false);
		
		this.contentTypeFormatters = Ajax.contentTypeFormatters;
	}
	
	//initialize setup options
	initialize(){
		this.loaderPromise = this.table.options.ajaxRequestFunc || Ajax.defaultLoaderPromise;
		this.urlGenerator = this.table.options.ajaxURLGenerator || Ajax.defaultURLGenerator;
		
		if(this.table.options.ajaxURL){
			this.setUrl(this.table.options.ajaxURL);
		}


		this.setDefaultConfig(this.table.options.ajaxConfig);
		
		this.registerTableFunction("getAjaxUrl", this.getUrl.bind(this));
		
		this.subscribe("data-loading", this.requestDataCheck.bind(this));
		this.subscribe("data-params", this.requestParams.bind(this));
		this.subscribe("data-load", this.requestData.bind(this));
	}
	
	requestParams(data, config, silent, params){
		var ajaxParams = this.table.options.ajaxParams;
		
		if(ajaxParams){
			if(typeof ajaxParams === "function"){
				ajaxParams = ajaxParams.call(this.table);
			}
			
			params = Object.assign(Object.assign({}, ajaxParams), params);
		}		
		
		return params;
	}
	
	requestDataCheck(data, params, config, silent){
		return !!((!data && this.url) || typeof data === "string");
	}
	
	requestData(url, params, config, silent, previousData){
		var ajaxConfig;
		
		if(!previousData && this.requestDataCheck(url)){
			if(url){
				this.setUrl(url);
			}
			
			ajaxConfig = this.generateConfig(config);
			
			return this.sendRequest(this.url, params, ajaxConfig);
		}else {
			return previousData;
		}
	}
	
	setDefaultConfig(config = {}){
		this.config = Object.assign({}, Ajax.defaultConfig);

		if(typeof config == "string"){
			this.config.method = config;
		}else {
			Object.assign(this.config, config);
		}
	}
	
	//load config object
	generateConfig(config = {}){
		var ajaxConfig = Object.assign({}, this.config);
		
		if(typeof config == "string"){
			ajaxConfig.method = config;
		}else {
			Object.assign(ajaxConfig, config);
		}
		
		return ajaxConfig;
	}
	
	//set request url
	setUrl(url){
		this.url = url;
	}
	
	//get request url
	getUrl(){
		return this.url;
	}
	
	//send ajax request
	sendRequest(url, params, config){
		if(this.table.options.ajaxRequesting.call(this.table, url, params) !== false){
			return this.loaderPromise(url, config, params)
				.then((data)=>{
					if(this.table.options.ajaxResponse){
						data = this.table.options.ajaxResponse.call(this.table, url, params, data);
					}
				
					return data;
				});
		}else {
			return Promise.reject();
		}
	}
}

var defaultPasteActions = {
	replace:function(data){
		return this.table.setData(data);
	},
	update:function(data){
		return this.table.updateOrAddData(data);
	},
	insert:function(data){
		return this.table.addData(data);
	},
};

var defaultPasteParsers = {
	table:function(clipboard){
		var data = [],
		headerFindSuccess = true,
		columns = this.table.columnManager.columns,
		columnMap = [],
		rows = [];
		
		//get data from clipboard into array of columns and rows.
		clipboard = clipboard.split("\n");
		
		clipboard.forEach(function(row){
			data.push(row.split("\t"));
		});
		
		if(data.length && !(data.length === 1 && data[0].length < 2)){
			
			//check if headers are present by title
			data[0].forEach(function(value){
				var column = columns.find(function(column){
					return value && column.definition.title && value.trim() && column.definition.title.trim() === value.trim();
				});
				
				if(column){
					columnMap.push(column);
				}else {
					headerFindSuccess = false;
				}
			});
			
			//check if column headers are present by field
			if(!headerFindSuccess){
				headerFindSuccess = true;
				columnMap = [];
				
				data[0].forEach(function(value){
					var column = columns.find(function(column){
						return value && column.field && value.trim() && column.field.trim() === value.trim();
					});
					
					if(column){
						columnMap.push(column);
					}else {
						headerFindSuccess = false;
					}
				});
				
				if(!headerFindSuccess){
					columnMap = this.table.columnManager.columnsByIndex;
				}
			}
			
			//remove header row if found
			if(headerFindSuccess){
				data.shift();
			}
			
			data.forEach(function(item){
				var row = {};
				
				item.forEach(function(value, i){
					if(columnMap[i]){
						row[columnMap[i].field] = value;
					}
				});
				
				rows.push(row);
			});
			
			return rows;
		}else {
			return false;
		}
	},
};

var bindings$2 = {
	copyToClipboard:["ctrl + 67", "meta + 67"],
};

var actions$2 = {
	copyToClipboard:function(e){
		if(!this.table.modules.edit.currentCell){
			if(this.table.modExists("clipboard", true)){
				this.table.modules.clipboard.copy(false, true);
			}
		}
	},
};

var extensions$4 = {
	keybindings:{
		bindings:bindings$2,
		actions:actions$2
	},
};

class Clipboard extends Module{

	static moduleName = "clipboard";
	static moduleExtensions = extensions$4;

	//load defaults
	static pasteActions = defaultPasteActions;
	static pasteParsers = defaultPasteParsers;

	constructor(table){
		super(table);

		this.mode = true;
		this.pasteParser = function(){};
		this.pasteAction = function(){};
		this.customSelection = false;
		this.rowRange = false;
		this.blocked = true; //block copy actions not originating from this command

		this.registerTableOption("clipboard", false); //enable clipboard
		this.registerTableOption("clipboardCopyStyled", true); //formatted table data
		this.registerTableOption("clipboardCopyConfig", false); //clipboard config
		this.registerTableOption("clipboardCopyFormatter", false); //DEPRECATED - REMOVE in 5.0
		this.registerTableOption("clipboardCopyRowRange", "active"); //restrict clipboard to visible rows only
		this.registerTableOption("clipboardPasteParser", "table"); //convert pasted clipboard data to rows
		this.registerTableOption("clipboardPasteAction", "insert"); //how to insert pasted data into the table

		this.registerColumnOption("clipboard");
		this.registerColumnOption("titleClipboard");
	}

	initialize(){
		this.mode = this.table.options.clipboard;

		this.rowRange = this.table.options.clipboardCopyRowRange;

		if(this.mode === true || this.mode === "copy"){
			this.table.element.addEventListener("copy", (e) => {
				var plain, html, list;

				if(!this.blocked){
					e.preventDefault();

					if(this.customSelection){
						plain = this.customSelection;

						if(this.table.options.clipboardCopyFormatter){
							plain = this.table.options.clipboardCopyFormatter("plain", plain);
						}
					}else {

						list = this.table.modules.export.generateExportList(this.table.options.clipboardCopyConfig, this.table.options.clipboardCopyStyled, this.rowRange, "clipboard");

						html = this.table.modules.export.generateHTMLTable(list);
						plain = html ? this.generatePlainContent(list) : "";

						if(this.table.options.clipboardCopyFormatter){
							plain = this.table.options.clipboardCopyFormatter("plain", plain);
							html = this.table.options.clipboardCopyFormatter("html", html);
						}
					}

					if (window.clipboardData && window.clipboardData.setData) {
						window.clipboardData.setData('Text', plain);
					} else if (e.clipboardData && e.clipboardData.setData) {
						e.clipboardData.setData('text/plain', plain);
						if(html){
							e.clipboardData.setData('text/html', html);
						}
					} else if (e.originalEvent && e.originalEvent.clipboardData.setData) {
						e.originalEvent.clipboardData.setData('text/plain', plain);
						if(html){
							e.originalEvent.clipboardData.setData('text/html', html);
						}
					}

					this.dispatchExternal("clipboardCopied", plain, html);

					this.reset();
				}
			});
		}

		if(this.mode === true || this.mode === "paste"){
			this.table.element.addEventListener("paste", (e) => {
				this.paste(e);
			});
		}

		this.setPasteParser(this.table.options.clipboardPasteParser);
		this.setPasteAction(this.table.options.clipboardPasteAction);

		this.registerTableFunction("copyToClipboard", this.copy.bind(this));
	}

	reset(){
		this.blocked = true;
		this.customSelection = false;
	}

	generatePlainContent (list) {
		var output = [];

		list.forEach((row) => {
			var rowData = [];

			row.columns.forEach((col) => {
				var value = "";

				if(col){

					if(row.type === "group"){
						col.value = col.component.getKey();
					}

					if(col.value === null){
						value = "";
					}else {
						switch(typeof col.value){
							case "object":
								value = JSON.stringify(col.value);
								break;

							case "undefined":
								value = "";
								break;

							default:
								value = col.value;
						}
					}
				}

				rowData.push(value);
			});

			output.push(rowData.join("\t"));
		});

		return output.join("\n");
	}

	copy (range, internal) {
		var sel, textRange;
		this.blocked = false;
		this.customSelection = false;
	

		if (this.mode === true || this.mode === "copy") {

			this.rowRange = range || this.table.options.clipboardCopyRowRange;

			if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
				range = document.createRange();
				range.selectNodeContents(this.table.element);
				sel = window.getSelection();

				if (sel.toString() && internal) {
					this.customSelection = sel.toString();
				}

				sel.removeAllRanges();
				sel.addRange(range);
			} else if (typeof document.selection != "undefined" && typeof document.body.createTextRange != "undefined") {
				textRange = document.body.createTextRange();
				textRange.moveToElementText(this.table.element);
				textRange.select();
			}

			document.execCommand('copy');

			if (sel) {
				sel.removeAllRanges();
			}
		}
	}

	//PASTE EVENT HANDLING
	setPasteAction(action){

		switch(typeof action){
			case "string":
				this.pasteAction = Clipboard.pasteActions[action];

				if(!this.pasteAction){
					console.warn("Clipboard Error - No such paste action found:", action);
				}
				break;

			case "function":
				this.pasteAction = action;
				break;
		}
	}

	setPasteParser(parser){
		switch(typeof parser){
			case "string":
				this.pasteParser = Clipboard.pasteParsers[parser];

				if(!this.pasteParser){
					console.warn("Clipboard Error - No such paste parser found:", parser);
				}
				break;

			case "function":
				this.pasteParser = parser;
				break;
		}
	}

	paste(e){
		var data, rowData, rows;

		if(this.checkPasteOrigin(e)){

			data = this.getPasteData(e);

			rowData = this.pasteParser.call(this, data);

			if(rowData){
				e.preventDefault();

				if(this.table.modExists("mutator")){
					rowData = this.mutateData(rowData);
				}

				rows = this.pasteAction.call(this, rowData);

				this.dispatchExternal("clipboardPasted", data, rowData, rows);
			}else {
				this.dispatchExternal("clipboardPasteError", data);
			}
		}
	}

	mutateData(data){
		var output = [];

		if(Array.isArray(data)){
			data.forEach((row) => {
				output.push(this.table.modules.mutator.transformRow(row, "clipboard"));
			});
		}else {
			output = data;
		}

		return output;
	}


	checkPasteOrigin(e){
		var valid = true;
		var blocked = this.confirm("clipboard-paste", [e]);

		if(blocked || !["DIV", "SPAN"].includes(e.target.tagName)){
			valid = false;
		}

		return valid;
	}

	getPasteData(e){
		var data;

		if (window.clipboardData && window.clipboardData.getData) {
			data = window.clipboardData.getData('Text');
		} else if (e.clipboardData && e.clipboardData.getData) {
			data = e.clipboardData.getData('text/plain');
		} else if (e.originalEvent && e.originalEvent.clipboardData.getData) {
			data = e.originalEvent.clipboardData.getData('text/plain');
		}

		return data;
	}
}

class CalcComponent{
	constructor (row){
		this._row = row;

		return new Proxy(this, {
			get: function(target, name, receiver) {
				if (typeof target[name] !== "undefined") {
					return target[name];
				}else {
					return target._row.table.componentFunctionBinder.handle("row", target._row, name);
				}
			}
		});
	}

	getData(transform){
		return this._row.getData(transform);
	}

	getElement(){
		return this._row.getElement();
	}

	getTable(){
		return this._row.table;
	}

	getCells(){
		var cells = [];

		this._row.getCells().forEach(function(cell){
			cells.push(cell.getComponent());
		});

		return cells;
	}

	getCell(column){
		var cell = this._row.getCell(column);
		return cell ? cell.getComponent() : false;
	}

	_getSelf(){
		return this._row;
	}
}

//public cell object
class CellComponent {

	constructor (cell){
		this._cell = cell;

		return new Proxy(this, {
			get: function(target, name, receiver) {
				if (typeof target[name] !== "undefined") {
					return target[name];
				}else {
					return target._cell.table.componentFunctionBinder.handle("cell", target._cell, name);
				}
			}
		});
	}

	getValue(){
		return this._cell.getValue();
	}

	getOldValue(){
		return this._cell.getOldValue();
	}

	getInitialValue(){
		return this._cell.initialValue;
	}

	getElement(){
		return this._cell.getElement();
	}

	getRow(){
		return this._cell.row.getComponent();
	}

	getData(transform){
		return this._cell.row.getData(transform);
	}
	getType(){
		return "cell";
	}
	getField(){
		return this._cell.column.getField();
	}

	getColumn(){
		return this._cell.column.getComponent();
	}

	setValue(value, mutate){
		if(typeof mutate == "undefined"){
			mutate = true;
		}

		this._cell.setValue(value, mutate);
	}

	restoreOldValue(){
		this._cell.setValueActual(this._cell.getOldValue());
	}

	restoreInitialValue(){
		this._cell.setValueActual(this._cell.initialValue);
	}

	checkHeight(){
		this._cell.checkHeight();
	}

	getTable(){
		return this._cell.table;
	}

	_getSelf(){
		return this._cell;
	}
}

class Cell extends CoreFeature{
	constructor(column, row){
		super(column.table);

		this.table = column.table;
		this.column = column;
		this.row = row;
		this.element = null;
		this.value = null;
		this.initialValue;
		this.oldValue = null;
		this.modules = {};

		this.height = null;
		this.width = null;
		this.minWidth = null;

		this.component = null;

		this.loaded = false; //track if the cell has been added to the DOM yet

		this.build();
	}

	//////////////// Setup Functions /////////////////
	//generate element
	build(){
		this.generateElement();

		this.setWidth();

		this._configureCell();

		this.setValueActual(this.column.getFieldValue(this.row.data));

		this.initialValue = this.value;
	}

	generateElement(){
		this.element = document.createElement('div');
		this.element.className = "tabulator-cell";
		this.element.setAttribute("role", "gridcell");

		if(this.column.isRowHeader){
			this.element.classList.add("tabulator-row-header");
		}
	}

	_configureCell(){
		var element = this.element,
		field = this.column.getField(),
		vertAligns = {
			top:"flex-start",
			bottom:"flex-end",
			middle:"center",
		},
		hozAligns = {
			left:"flex-start",
			right:"flex-end",
			center:"center",
		};

		//set text alignment
		element.style.textAlign = this.column.hozAlign;

		if(this.column.vertAlign){
			element.style.display = "inline-flex";

			element.style.alignItems = vertAligns[this.column.vertAlign] || "";

			if(this.column.hozAlign){
				element.style.justifyContent = hozAligns[this.column.hozAlign] || "";
			}
		}

		if(field){
			element.setAttribute("tabulator-field", field);
		}

		//add class to cell if needed
		if(this.column.definition.cssClass){
			var classNames = this.column.definition.cssClass.split(" ");
			classNames.forEach((className) => {
				element.classList.add(className);
			});
		}

		this.dispatch("cell-init", this);

		//hide cell if not visible
		if(!this.column.visible){
			this.hide();
		}
	}

	//generate cell contents
	_generateContents(){
		var val;

		val = this.chain("cell-format", this, null, () => {
			return this.element.innerHTML = this.value;
		});

		switch(typeof val){
			case "object":
				if(val instanceof Node){

					//clear previous cell contents
					while(this.element.firstChild) this.element.removeChild(this.element.firstChild);

					this.element.appendChild(val);
				}else {
					this.element.innerHTML = "";

					if(val != null){
						console.warn("Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", val);
					}
				}
				break;
			case "undefined":
				this.element.innerHTML = "";
				break;
			default:
				this.element.innerHTML = val;
		}
	}

	cellRendered(){
		this.dispatch("cell-rendered", this);
	}

	//////////////////// Getters ////////////////////
	getElement(containerOnly){
		if(!this.loaded){
			this.loaded = true;
			if(!containerOnly){
				this.layoutElement();
			}
		}

		return this.element;
	}

	getValue(){
		return this.value;
	}

	getOldValue(){
		return this.oldValue;
	}

	//////////////////// Actions ////////////////////
	setValue(value, mutate, force){
		var changed = this.setValueProcessData(value, mutate, force);

		if(changed){
			this.dispatch("cell-value-updated", this);

			this.cellRendered();

			if(this.column.definition.cellEdited){
				this.column.definition.cellEdited.call(this.table, this.getComponent());
			}

			this.dispatchExternal("cellEdited", this.getComponent());

			if(this.subscribedExternal("dataChanged")){
				this.dispatchExternal("dataChanged", this.table.rowManager.getData());
			}
		}
	}

	setValueProcessData(value, mutate, force){
		var changed = false;

		if(this.value !== value || force){

			changed = true;

			if(mutate){
				value = this.chain("cell-value-changing", [this, value], null, value);
			}
		}

		this.setValueActual(value);

		if(changed){
			this.dispatch("cell-value-changed", this);
		}

		return changed;
	}

	setValueActual(value){
		this.oldValue = this.value;

		this.value = value;

		this.dispatch("cell-value-save-before", this);

		this.column.setFieldValue(this.row.data, value);

		this.dispatch("cell-value-save-after", this);

		if(this.loaded){
			this.layoutElement();
		}
	}

	layoutElement(){
		this._generateContents();

		this.dispatch("cell-layout", this);
	}

	setWidth(){
		this.width = this.column.width;
		this.element.style.width = this.column.widthStyled;
	}

	clearWidth(){
		this.width = "";
		this.element.style.width = "";
	}

	getWidth(){
		return this.width || this.element.offsetWidth;
	}

	setMinWidth(){
		this.minWidth = this.column.minWidth;
		this.element.style.minWidth = this.column.minWidthStyled;
	}

	setMaxWidth(){
		this.maxWidth = this.column.maxWidth;
		this.element.style.maxWidth = this.column.maxWidthStyled;
	}

	checkHeight(){
		// var height = this.element.css("height");
		this.row.reinitializeHeight();
	}

	clearHeight(){
		this.element.style.height = "";
		this.height = null;

		this.dispatch("cell-height", this, "");
	}

	setHeight(){
		this.height = this.row.height;
		this.element.style.height = this.row.heightStyled;

		this.dispatch("cell-height", this, this.row.heightStyled);
	}

	getHeight(){
		return this.height || this.element.offsetHeight;
	}

	show(){
		this.element.style.display = this.column.vertAlign ? "inline-flex" : "";
	}

	hide(){
		this.element.style.display = "none";
	}

	delete(){
		this.dispatch("cell-delete", this);

		if(!this.table.rowManager.redrawBlock && this.element.parentNode){
			this.element.parentNode.removeChild(this.element);
		}

		this.element = false;
		this.column.deleteCell(this);
		this.row.deleteCell(this);
		this.calcs = {};
	}

	getIndex(){
		return this.row.getCellIndex(this);
	}

	//////////////// Object Generation /////////////////
	getComponent(){
		if(!this.component){
			this.component = new CellComponent(this);
		}

		return this.component;
	}
}

//public column object
class ColumnComponent {
	constructor (column){
		this._column = column;
		this.type = "ColumnComponent";

		return new Proxy(this, {
			get: function(target, name, receiver) {
				if (typeof target[name] !== "undefined") {
					return target[name];
				}else {
					return target._column.table.componentFunctionBinder.handle("column", target._column, name);
				}
			}
		});
	}

	getElement(){
		return this._column.getElement();
	}

	getDefinition(){
		return this._column.getDefinition();
	}

	getField(){
		return this._column.getField();
	}

	getTitleDownload() {
		return this._column.getTitleDownload();
	}

	getCells(){
		var cells = [];

		this._column.cells.forEach(function(cell){
			cells.push(cell.getComponent());
		});

		return cells;
	}

	isVisible(){
		return this._column.visible;
	}

	show(){
		if(this._column.isGroup){
			this._column.columns.forEach(function(column){
				column.show();
			});
		}else {
			this._column.show();
		}
	}

	hide(){
		if(this._column.isGroup){
			this._column.columns.forEach(function(column){
				column.hide();
			});
		}else {
			this._column.hide();
		}
	}

	toggle(){
		if(this._column.visible){
			this.hide();
		}else {
			this.show();
		}
	}

	delete(){
		return this._column.delete();
	}

	getSubColumns(){
		var output = [];

		if(this._column.columns.length){
			this._column.columns.forEach(function(column){
				output.push(column.getComponent());
			});
		}

		return output;
	}

	getParentColumn(){
		return this._column.getParentComponent();
	}

	_getSelf(){
		return this._column;
	}

	scrollTo(position, ifVisible){
		return this._column.table.columnManager.scrollToColumn(this._column, position, ifVisible);
	}

	getTable(){
		return this._column.table;
	}

	move(to, after){
		var toColumn = this._column.table.columnManager.findColumn(to);

		if(toColumn){
			this._column.table.columnManager.moveColumn(this._column, toColumn, after);
		}else {
			console.warn("Move Error - No matching column found:", toColumn);
		}
	}

	getNextColumn(){
		var nextCol = this._column.nextColumn();

		return nextCol ? nextCol.getComponent() : false;
	}

	getPrevColumn(){
		var prevCol = this._column.prevColumn();

		return prevCol ? prevCol.getComponent() : false;
	}

	updateDefinition(updates){
		return this._column.updateDefinition(updates);
	}

	getWidth(){
		return this._column.getWidth();
	}

	setWidth(width){
		var result;

		if(width === true){
			result =  this._column.reinitializeWidth(true);
		}else {
			result =  this._column.setWidth(width);
		}

		this._column.table.columnManager.rerenderColumns(true);

		return result;
	}
}

var defaultColumnOptions = {
	"title": undefined,
	"field": undefined,
	"columns": undefined,
	"visible": undefined,
	"hozAlign": undefined,
	"vertAlign": undefined,
	"width": undefined,
	"minWidth": 40,
	"maxWidth": undefined,
	"maxInitialWidth": undefined,
	"cssClass": undefined,
	"variableHeight": undefined,
	"headerVertical": undefined,
	"headerHozAlign": undefined,
	"headerWordWrap": false,
	"editableTitle": undefined,
};

class Column extends CoreFeature{
	
	static defaultOptionList = defaultColumnOptions;
	
	constructor(def, parent, rowHeader){
		super(parent.table);
		
		this.definition = def; //column definition
		this.parent = parent; //hold parent object
		this.type = "column"; //type of element
		this.columns = []; //child columns
		this.cells = []; //cells bound to this column
		this.isGroup = false;
		this.isRowHeader = rowHeader;
		this.element = this.createElement(); //column header element
		this.contentElement = false;
		this.titleHolderElement = false;
		this.titleElement = false;
		this.groupElement = this.createGroupElement(); //column group holder element
		this.hozAlign = ""; //horizontal text alignment
		this.vertAlign = ""; //vert text alignment
		
		//multi dimensional filed handling
		this.field ="";
		this.fieldStructure = "";
		this.getFieldValue = "";
		this.setFieldValue = "";
		
		this.titleDownload = null;
		this.titleFormatterRendered = false;
		
		this.mapDefinitions();
		
		this.setField(this.definition.field);
		
		this.modules = {}; //hold module variables;
		
		this.width = null; //column width
		this.widthStyled = ""; //column width pre-styled to improve render efficiency
		this.maxWidth = null; //column maximum width
		this.maxWidthStyled = ""; //column maximum pre-styled to improve render efficiency
		this.maxInitialWidth = null;
		this.minWidth = null; //column minimum width
		this.minWidthStyled = ""; //column minimum pre-styled to improve render efficiency
		this.widthFixed = false; //user has specified a width for this column
		
		this.visible = true; //default visible state
		
		this.component = null;
		
		//initialize column
		if(this.definition.columns){
			
			this.isGroup = true;
			
			this.definition.columns.forEach((def, i) => {
				var newCol = new Column(def, this);
				this.attachColumn(newCol);
			});
			
			this.checkColumnVisibility();
		}else {
			parent.registerColumnField(this);
		}
		
		this._initialize();
	}
	
	createElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-col");
		el.setAttribute("role", "columnheader");
		el.setAttribute("aria-sort", "none");

		if(this.isRowHeader){
			el.classList.add("tabulator-row-header");
		}
		
		switch(this.table.options.columnHeaderVertAlign){
			case "middle":
				el.style.justifyContent = "center";
				break;
			case "bottom":
				el.style.justifyContent = "flex-end";
				break;
		}
		
		return el;
	}
	
	createGroupElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-col-group-cols");
		
		return el;
	}
	
	mapDefinitions(){
		var defaults = this.table.options.columnDefaults;
		
		//map columnDefaults onto column definitions
		if(defaults){
			for(let key in defaults){
				if(typeof this.definition[key] === "undefined"){
					this.definition[key] = defaults[key];
				}
			}
		}
		
		this.definition = this.table.columnManager.optionsList.generate(Column.defaultOptionList, this.definition);
	}
	
	checkDefinition(){
		Object.keys(this.definition).forEach((key) => {
			if(Column.defaultOptionList.indexOf(key) === -1){
				console.warn("Invalid column definition option in '" + (this.field || this.definition.title) + "' column:", key);
			}
		});
	}

	setField(field){
		this.field = field;
		this.fieldStructure = field ? (this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator) : [field]) : [];
		this.getFieldValue = this.fieldStructure.length > 1 ? this._getNestedData : this._getFlatData;
		this.setFieldValue = this.fieldStructure.length > 1 ? this._setNestedData : this._setFlatData;
	}
	
	//register column position with column manager
	registerColumnPosition(column){
		this.parent.registerColumnPosition(column);
	}
	
	//register column position with column manager
	registerColumnField(column){
		this.parent.registerColumnField(column);
	}
	
	//trigger position registration
	reRegisterPosition(){
		if(this.isGroup){
			this.columns.forEach(function(column){
				column.reRegisterPosition();
			});
		}else {
			this.registerColumnPosition(this);
		}
	}
	
	//build header element
	_initialize(){
		var def = this.definition;
		
		while(this.element.firstChild) this.element.removeChild(this.element.firstChild);
		
		if(def.headerVertical){
			this.element.classList.add("tabulator-col-vertical");
			
			if(def.headerVertical === "flip"){
				this.element.classList.add("tabulator-col-vertical-flip");
			}
		}
		
		this.contentElement = this._buildColumnHeaderContent();
		
		this.element.appendChild(this.contentElement);
		
		if(this.isGroup){
			this._buildGroupHeader();
		}else {
			this._buildColumnHeader();
		}
		
		this.dispatch("column-init", this);
	}
	
	//build header element for header
	_buildColumnHeader(){
		var def = this.definition;
		
		this.dispatch("column-layout", this);
		
		//set column visibility
		if(typeof def.visible != "undefined"){
			if(def.visible){
				this.show(true);
			}else {
				this.hide(true);
			}
		}
		
		//assign additional css classes to column header
		if(def.cssClass){
			var classNames = def.cssClass.split(" ");
			classNames.forEach((className) => {
				this.element.classList.add(className);
			});
		}
		
		if(def.field){
			this.element.setAttribute("tabulator-field", def.field);
		}
		
		//set min width if present
		this.setMinWidth(parseInt(def.minWidth));
		
		if (def.maxInitialWidth) {
			this.maxInitialWidth = parseInt(def.maxInitialWidth);
		}
		
		if(def.maxWidth){
			this.setMaxWidth(parseInt(def.maxWidth));
		}
		
		this.reinitializeWidth();
		
		//set horizontal text alignment
		this.hozAlign = this.definition.hozAlign;
		this.vertAlign = this.definition.vertAlign;
		
		this.titleElement.style.textAlign = this.definition.headerHozAlign;
	}
	
	_buildColumnHeaderContent(){
		var contentElement = document.createElement("div");
		contentElement.classList.add("tabulator-col-content");
		
		this.titleHolderElement = document.createElement("div");
		this.titleHolderElement.classList.add("tabulator-col-title-holder");
		
		contentElement.appendChild(this.titleHolderElement);
		
		this.titleElement = this._buildColumnHeaderTitle();
		
		this.titleHolderElement.appendChild(this.titleElement);
		
		return contentElement;
	}
	
	//build title element of column
	_buildColumnHeaderTitle(){
		var def = this.definition;
		
		var titleHolderElement = document.createElement("div");
		titleHolderElement.classList.add("tabulator-col-title");
		
		if(def.headerWordWrap){
			titleHolderElement.classList.add("tabulator-col-title-wrap");
		}
		
		if(def.editableTitle){
			var titleElement = document.createElement("input");
			titleElement.classList.add("tabulator-title-editor");
			
			titleElement.addEventListener("click", (e) => {
				e.stopPropagation();
				titleElement.focus();
			});
			
			titleElement.addEventListener("mousedown", (e) => {
				e.stopPropagation();
			});
			
			titleElement.addEventListener("change", () => {
				def.title = titleElement.value;
				this.dispatchExternal("columnTitleChanged", this.getComponent());
			});
			
			titleHolderElement.appendChild(titleElement);
			
			if(def.field){
				this.langBind("columns|" + def.field, (text) => {
					titleElement.value = text || (def.title || "&nbsp;");
				});
			}else {
				titleElement.value  = def.title || "&nbsp;";
			}
			
		}else {
			if(def.field){
				this.langBind("columns|" + def.field, (text) => {
					this._formatColumnHeaderTitle(titleHolderElement, text || (def.title || "&nbsp;"));
				});
			}else {
				this._formatColumnHeaderTitle(titleHolderElement, def.title || "&nbsp;");
			}
		}
		
		return titleHolderElement;
	}
	
	_formatColumnHeaderTitle(el, title){
		var contents = this.chain("column-format", [this, title, el], null, () => {
			return title;
		});
		
		switch(typeof contents){
			case "object":
				if(contents instanceof Node){
					el.appendChild(contents);
				}else {
					el.innerHTML = "";
					console.warn("Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", contents);
				}
				break;
			case "undefined":
				el.innerHTML = "";
				break;
			default:
				el.innerHTML = contents;
		}
	}
	
	//build header element for column group
	_buildGroupHeader(){
		this.element.classList.add("tabulator-col-group");
		this.element.setAttribute("role", "columngroup");
		this.element.setAttribute("aria-title", this.definition.title);
		
		//asign additional css classes to column header
		if(this.definition.cssClass){
			var classNames = this.definition.cssClass.split(" ");
			classNames.forEach((className) => {
				this.element.classList.add(className);
			});
		}
		
		this.titleElement.style.textAlign = this.definition.headerHozAlign;
		
		this.element.appendChild(this.groupElement);
	}
	
	//flat field lookup
	_getFlatData(data){
		return data[this.field];
	}
	
	//nested field lookup
	_getNestedData(data){
		var dataObj = data,
		structure = this.fieldStructure,
		length = structure.length,
		output;
		
		for(let i = 0; i < length; i++){
			
			dataObj = dataObj[structure[i]];
			
			output = dataObj;
			
			if(!dataObj){
				break;
			}
		}
		
		return output;
	}
	
	//flat field set
	_setFlatData(data, value){
		if(this.field){
			data[this.field] = value;
		}
	}
	
	//nested field set
	_setNestedData(data, value){
		var dataObj = data,
		structure = this.fieldStructure,
		length = structure.length;
		
		for(let i = 0; i < length; i++){
			
			if(i == length -1){
				dataObj[structure[i]] = value;
			}else {
				if(!dataObj[structure[i]]){
					if(typeof value !== "undefined"){
						dataObj[structure[i]] = {};
					}else {
						break;
					}
				}
				
				dataObj = dataObj[structure[i]];
			}
		}
	}
	
	//attach column to this group
	attachColumn(column){
		if(this.groupElement){
			this.columns.push(column);
			this.groupElement.appendChild(column.getElement());
			
			column.columnRendered();
		}else {
			console.warn("Column Warning - Column being attached to another column instead of column group");
		}
	}
	
	//vertically align header in column
	verticalAlign(alignment, height){
		
		//calculate height of column header and group holder element
		var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : (height || this.parent.getHeadersElement().clientHeight);
		// var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : this.parent.getHeadersElement().clientHeight;
		
		this.element.style.height = parentHeight + "px";
		
		this.dispatch("column-height", this, this.element.style.height);
		
		if(this.isGroup){
			this.groupElement.style.minHeight = (parentHeight - this.contentElement.offsetHeight) + "px";
		}
		
		//vertically align cell contents
		// if(!this.isGroup && alignment !== "top"){
		// 	if(alignment === "bottom"){
		// 		this.element.style.paddingTop = (this.element.clientHeight - this.contentElement.offsetHeight) + "px";
		// 	}else{
		// 		this.element.style.paddingTop = ((this.element.clientHeight - this.contentElement.offsetHeight) / 2) + "px";
		// 	}
		// }
		
		this.columns.forEach(function(column){
			column.verticalAlign(alignment);
		});
	}
	
	//clear vertical alignment
	clearVerticalAlign(){
		this.element.style.paddingTop = "";
		this.element.style.height = "";
		this.element.style.minHeight = "";
		this.groupElement.style.minHeight = "";
		
		this.columns.forEach(function(column){
			column.clearVerticalAlign();
		});
		
		this.dispatch("column-height", this, "");
	}
	
	//// Retrieve Column Information ////
	//return column header element
	getElement(){
		return this.element;
	}
	
	//return column group element
	getGroupElement(){
		return this.groupElement;
	}
	
	//return field name
	getField(){
		return this.field;
	}
	
	getTitleDownload() {
		return this.titleDownload;
	}
	
	//return the first column in a group
	getFirstColumn(){
		if(!this.isGroup){
			return this;
		}else {
			if(this.columns.length){
				return this.columns[0].getFirstColumn();
			}else {
				return false;
			}
		}
	}
	
	//return the last column in a group
	getLastColumn(){
		if(!this.isGroup){
			return this;
		}else {
			if(this.columns.length){
				return this.columns[this.columns.length -1].getLastColumn();
			}else {
				return false;
			}
		}
	}
	
	//return all columns in a group
	getColumns(traverse){
		var columns = [];
		
		if(traverse){
			this.columns.forEach((column) => {
				columns.push(column);
				
				columns = columns.concat(column.getColumns(true));
			});
		}else {
			columns = this.columns;
		}
		
		return columns;
	}
	
	//return all columns in a group
	getCells(){
		return this.cells;
	}
	
	//retrieve the top column in a group of columns
	getTopColumn(){
		if(this.parent.isGroup){
			return this.parent.getTopColumn();
		}else {
			return this;
		}
	}
	
	//return column definition object
	getDefinition(updateBranches){
		var colDefs = [];
		
		if(this.isGroup && updateBranches){
			this.columns.forEach(function(column){
				colDefs.push(column.getDefinition(true));
			});
			
			this.definition.columns = colDefs;
		}
		
		return this.definition;
	}
	
	//////////////////// Actions ////////////////////
	checkColumnVisibility(){
		var visible = false;
		
		this.columns.forEach(function(column){
			if(column.visible){
				visible = true;
			}
		});
		
		if(visible){
			this.show();
			this.dispatchExternal("columnVisibilityChanged", this.getComponent(), false);
		}else {
			this.hide();
		}
	}
	
	//show column
	show(silent, responsiveToggle){
		if(!this.visible){
			this.visible = true;
			
			this.element.style.display = "";
			
			if(this.parent.isGroup){
				this.parent.checkColumnVisibility();
			}
			
			this.cells.forEach(function(cell){
				cell.show();
			});
			
			if(!this.isGroup && this.width === null){
				this.reinitializeWidth();
			}
			
			this.table.columnManager.verticalAlignHeaders();
			
			this.dispatch("column-show", this, responsiveToggle);
			
			if(!silent){
				this.dispatchExternal("columnVisibilityChanged", this.getComponent(), true);
			}
			
			if(this.parent.isGroup){
				this.parent.matchChildWidths();
			}
			
			if(!this.silent){
				this.table.columnManager.rerenderColumns();
			}
		}
	}
	
	//hide column
	hide(silent, responsiveToggle){
		if(this.visible){
			this.visible = false;
			
			this.element.style.display = "none";
			
			this.table.columnManager.verticalAlignHeaders();
			
			if(this.parent.isGroup){
				this.parent.checkColumnVisibility();
			}
			
			this.cells.forEach(function(cell){
				cell.hide();
			});
			
			this.dispatch("column-hide", this, responsiveToggle);
			
			if(!silent){
				this.dispatchExternal("columnVisibilityChanged", this.getComponent(), false);
			}
			
			if(this.parent.isGroup){
				this.parent.matchChildWidths();
			}
			
			if(!this.silent){
				this.table.columnManager.rerenderColumns();
			}
		}
	}
	
	matchChildWidths(){
		var childWidth = 0;
		
		if(this.contentElement && this.columns.length){
			this.columns.forEach(function(column){
				if(column.visible){
					childWidth += column.getWidth();
				}
			});
			
			this.contentElement.style.maxWidth = (childWidth - 1) + "px";
			if (this.table.initialized) {
				this.element.style.width = childWidth + "px";
			}
			
			if(this.parent.isGroup){
				this.parent.matchChildWidths();
			}
		}
	}
	
	removeChild(child){
		var index = this.columns.indexOf(child);
		
		if(index > -1){
			this.columns.splice(index, 1);
		}
		
		if(!this.columns.length){
			this.delete();
		}
	}
	
	setWidth(width){
		this.widthFixed = true;
		this.setWidthActual(width);
	}
	
	setWidthActual(width){
		if(isNaN(width)){
			width = Math.floor((this.table.element.clientWidth/100) * parseInt(width));
		}
		
		width = Math.max(this.minWidth, width);
		
		if(this.maxWidth){
			width = Math.min(this.maxWidth, width);
		}
		
		this.width = width;
		this.widthStyled = width ? width + "px" : "";
		
		this.element.style.width = this.widthStyled;
		
		if(!this.isGroup){
			this.cells.forEach(function(cell){
				cell.setWidth();
			});
		}
		
		if(this.parent.isGroup){
			this.parent.matchChildWidths();
		}
		
		this.dispatch("column-width", this);
		
		if(this.subscribedExternal("columnWidth")){
			this.dispatchExternal("columnWidth", this.getComponent());
		}
	}
	
	checkCellHeights(){
		var rows = [];
		
		this.cells.forEach(function(cell){
			if(cell.row.heightInitialized){
				if(cell.row.getElement().offsetParent !== null){
					rows.push(cell.row);
					cell.row.clearCellHeight();
				}else {
					cell.row.heightInitialized = false;
				}
			}
		});
		
		rows.forEach(function(row){
			row.calcHeight();
		});
		
		rows.forEach(function(row){
			row.setCellHeight();
		});
	}
	
	getWidth(){
		var width = 0;
		
		if(this.isGroup){
			this.columns.forEach(function(column){
				if(column.visible){
					width += column.getWidth();
				}
			});
		}else {
			width = this.width;
		}
		
		return width;
	}
	
	getLeftOffset(){
		var offset = this.element.offsetLeft;
		
		if(this.parent.isGroup){
			offset += this.parent.getLeftOffset();
		}
		
		return offset;
	}
	
	getHeight(){
		return Math.ceil(this.element.getBoundingClientRect().height);
	}
	
	setMinWidth(minWidth){
		if(this.maxWidth && minWidth > this.maxWidth){
			minWidth = this.maxWidth;
			
			console.warn("the minWidth ("+ minWidth + "px) for column '" + this.field + "' cannot be bigger that its maxWidth ("+ this.maxWidthStyled + ")");
		}
		
		this.minWidth = minWidth;
		this.minWidthStyled = minWidth ? minWidth + "px" : "";
		
		this.element.style.minWidth = this.minWidthStyled;
		
		this.cells.forEach(function(cell){
			cell.setMinWidth();
		});
	}
	
	setMaxWidth(maxWidth){
		if(this.minWidth && maxWidth < this.minWidth){
			maxWidth = this.minWidth;
			
			console.warn("the maxWidth ("+ maxWidth + "px) for column '" + this.field + "' cannot be smaller that its minWidth ("+ this.minWidthStyled + ")");
		}
		
		this.maxWidth = maxWidth;
		this.maxWidthStyled = maxWidth ? maxWidth + "px" : "";
		
		this.element.style.maxWidth = this.maxWidthStyled;
		
		this.cells.forEach(function(cell){
			cell.setMaxWidth();
		});
	}
	
	delete(){
		return new Promise((resolve, reject) => {
			if(this.isGroup){
				this.columns.forEach(function(column){
					column.delete();
				});
			}
			
			this.dispatch("column-delete", this);
			
			var cellCount = this.cells.length;
			
			for(let i = 0; i < cellCount; i++){
				this.cells[0].delete();
			}
			
			if(this.element.parentNode){
				this.element.parentNode.removeChild(this.element);
			}
			
			this.element = false;
			this.contentElement = false;
			this.titleElement = false;
			this.groupElement = false;
			
			if(this.parent.isGroup){
				this.parent.removeChild(this);
			}
			
			this.table.columnManager.deregisterColumn(this);
			
			this.table.columnManager.rerenderColumns(true);
			
			this.dispatch("column-deleted", this);
			
			resolve();
		});
	}
	
	columnRendered(){
		if(this.titleFormatterRendered){
			this.titleFormatterRendered();
		}
		
		this.dispatch("column-rendered", this);
	}
	
	//////////////// Cell Management /////////////////
	//generate cell for this column
	generateCell(row){
		var cell = new Cell(this, row);
		
		this.cells.push(cell);
		
		return cell;
	}
	
	nextColumn(){
		var index = this.table.columnManager.findColumnIndex(this);
		return index > -1 ? this._nextVisibleColumn(index + 1) : false;
	}
	
	_nextVisibleColumn(index){
		var column = this.table.columnManager.getColumnByIndex(index);
		return !column || column.visible ? column : this._nextVisibleColumn(index + 1);
	}
	
	prevColumn(){
		var index = this.table.columnManager.findColumnIndex(this);
		return index > -1 ? this._prevVisibleColumn(index - 1) : false;
	}
	
	_prevVisibleColumn(index){
		var column = this.table.columnManager.getColumnByIndex(index);
		return !column || column.visible ? column : this._prevVisibleColumn(index - 1);
	}
	
	reinitializeWidth(force){
		this.widthFixed = false;
		
		//set width if present
		if(typeof this.definition.width !== "undefined" && !force){
			// maxInitialWidth ignored here as width specified
			this.setWidth(this.definition.width);
		}
		
		this.dispatch("column-width-fit-before", this);
		
		this.fitToData(force);
		
		this.dispatch("column-width-fit-after", this);
	}
	
	//set column width to maximum cell width for non group columns
	fitToData(force){
		if(this.isGroup){
			return;
		}
		
		if(!this.widthFixed){
			this.element.style.width = "";
			
			this.cells.forEach((cell) => {
				cell.clearWidth();
			});
		}
		
		var maxWidth = this.element.offsetWidth;
		
		if(!this.width || !this.widthFixed){
			this.cells.forEach((cell) => {
				var width = cell.getWidth();
				
				if(width > maxWidth){
					maxWidth = width;
				}
			});
			
			if(maxWidth){
				var setTo = maxWidth + 1;
				
				if(force){
					this.setWidth(setTo);
				}else {
					if (this.maxInitialWidth && !force) {
						setTo = Math.min(setTo, this.maxInitialWidth);
					}
					this.setWidthActual(setTo);
				}
			}
		}
	}
	
	updateDefinition(updates){
		var definition;
		
		if(!this.isGroup){
			if(!this.parent.isGroup){
				definition = Object.assign({}, this.getDefinition());
				definition = Object.assign(definition, updates);
				
				return this.table.columnManager.addColumn(definition, false, this)
					.then((column) => {
					
						if(definition.field == this.field){
							this.field = false; //clear field name to prevent deletion of duplicate column from arrays
						}
					
						return this.delete()
							.then(() => {
								return column.getComponent();
							});
					
					});
			}else {
				console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns");
				return Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups");
			}
		}else {
			console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns");
			return Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups");
		}
	}
	
	deleteCell(cell){
		var index = this.cells.indexOf(cell);
		
		if(index > -1){
			this.cells.splice(index, 1);
		}
	}
	
	//////////////// Object Generation /////////////////
	getComponent(){
		if(!this.component){
			this.component = new ColumnComponent(this);
		}
		
		return this.component;
	}
	
	getPosition(){
		return this.table.columnManager.getVisibleColumnsByIndex().indexOf(this) + 1;
	}
	
	getParentComponent(){
		return this.parent instanceof Column ? this.parent.getComponent() : false;
	}
}

//public row object
class RowComponent {

	constructor (row){
		this._row = row;

		return new Proxy(this, {
			get: function(target, name, receiver) {
				if (typeof target[name] !== "undefined") {
					return target[name];
				}else {
					return target._row.table.componentFunctionBinder.handle("row", target._row, name);
				}
			}
		});
	}

	getData(transform){
		return this._row.getData(transform);
	}

	getElement(){
		return this._row.getElement();
	}

	getCells(){
		var cells = [];

		this._row.getCells().forEach(function(cell){
			cells.push(cell.getComponent());
		});

		return cells;
	}

	getCell(column){
		var cell = this._row.getCell(column);
		return cell ? cell.getComponent() : false;
	}

	getIndex(){
		return this._row.getData("data")[this._row.table.options.index];
	}

	getPosition(){
		return this._row.getPosition();
	}

	watchPosition(callback){
		return this._row.watchPosition(callback);
	}

	delete(){
		return this._row.delete();
	}

	scrollTo(position, ifVisible){
		return this._row.table.rowManager.scrollToRow(this._row, position, ifVisible);
	}

	move(to, after){
		this._row.moveToRow(to, after);
	}

	update(data){
		return this._row.updateData(data);
	}

	normalizeHeight(){
		this._row.normalizeHeight(true);
	}

	_getSelf(){
		return this._row;
	}

	reformat(){
		return this._row.reinitialize();
	}

	getTable(){
		return this._row.table;
	}

	getNextRow(){
		var row = this._row.nextRow();
		return row ? row.getComponent() : row;
	}

	getPrevRow(){
		var row = this._row.prevRow();
		return row ? row.getComponent() : row;
	}
}

class Row extends CoreFeature{
	constructor (data, parent, type = "row"){
		super(parent.table);
		
		this.parent = parent;
		this.data = {};
		this.type = type; //type of element
		this.element = false;
		this.modules = {}; //hold module variables;
		this.cells = [];
		this.height = 0; //hold element height
		this.heightStyled = ""; //hold element height pre-styled to improve render efficiency
		this.manualHeight = false; //user has manually set row height
		this.outerHeight = 0; //hold elements outer height
		this.initialized = false; //element has been rendered
		this.heightInitialized = false; //element has resized cells to fit
		this.position = 0; //store position of element in row list
		this.positionWatchers = [];
		
		this.component = null;
		
		this.created = false;
		
		this.setData(data);
	}
	
	create(){
		if(!this.created){
			this.created = true;
			this.generateElement();
		}
	}
	
	createElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-row");
		el.setAttribute("role", "row");
		
		this.element = el;
	}
	
	getElement(){
		this.create();
		return this.element;
	}
	
	detachElement(){
		if (this.element && this.element.parentNode){
			this.element.parentNode.removeChild(this.element);
		}
	}
	
	generateElement(){
		this.createElement();
		this.dispatch("row-init", this);
	}
	
	generateCells(){
		this.cells = this.table.columnManager.generateCells(this);
	}
	
	//functions to setup on first render
	initialize(force, inFragment){
		this.create();
		
		if(!this.initialized || force){
			
			this.deleteCells();
			
			while(this.element.firstChild) this.element.removeChild(this.element.firstChild);
			
			this.dispatch("row-layout-before", this);
			
			this.generateCells();
			
			this.initialized = true;
			
			this.table.columnManager.renderer.renderRowCells(this, inFragment);
			
			if(force){
				this.normalizeHeight();
			}
			
			this.dispatch("row-layout", this);
			
			if(this.table.options.rowFormatter){
				this.table.options.rowFormatter(this.getComponent());
			}
			
			this.dispatch("row-layout-after", this);
		}else {
			this.table.columnManager.renderer.rerenderRowCells(this, inFragment);
		}
	}

	rendered(){
		this.cells.forEach((cell) => {
			cell.cellRendered();
		});
	}
	
	reinitializeHeight(){
		this.heightInitialized = false;
		
		if(this.element && this.element.offsetParent !== null){
			this.normalizeHeight(true);
		}
	}

	deinitialize(){
		this.initialized = false;
	}
	
	deinitializeHeight(){
		this.heightInitialized = false;
	}
	
	reinitialize(children){
		this.initialized = false;
		this.heightInitialized = false;
		
		if(!this.manualHeight){
			this.height = 0;
			this.heightStyled = "";
		}
		
		if(this.element && this.element.offsetParent !== null){
			this.initialize(true);
		}
		
		this.dispatch("row-relayout", this);
	}
	
	//get heights when doing bulk row style calcs in virtual DOM
	calcHeight(force){
		var maxHeight = 0, minHeight  = 0;

		if(this.table.options.rowHeight){
			this.height = this.table.options.rowHeight;
		}else {
			minHeight = this.calcMinHeight();
			maxHeight = this.calcMaxHeight();
			
			if(force){
				this.height = Math.max(maxHeight, minHeight);
			}else {
				this.height = this.manualHeight ? this.height : Math.max(maxHeight, minHeight);
			}
		}
		
		this.heightStyled = this.height ? this.height + "px" : "";
		this.outerHeight = this.element.offsetHeight;
	}

	calcMinHeight(){
		return this.table.options.resizableRows ? this.element.clientHeight : 0;
	}

	calcMaxHeight(){
		var maxHeight = 0;

		this.cells.forEach(function(cell){
			var height = cell.getHeight();

			if(height > maxHeight){
				maxHeight = height;
			}
		});

		return maxHeight;
	}
	
	//set of cells
	setCellHeight(){
		this.cells.forEach(function(cell){
			cell.setHeight();
		});
		
		this.heightInitialized = true;
	}
	
	clearCellHeight(){
		this.cells.forEach(function(cell){
			cell.clearHeight();
		});
	}
	
	//normalize the height of elements in the row
	normalizeHeight(force){
		if(force && !this.table.options.rowHeight){
			this.clearCellHeight();
		}
		
		this.calcHeight(force);
		
		this.setCellHeight();
	}
	
	//set height of rows
	setHeight(height, force){
		if(this.height != height || force){
			
			this.manualHeight = true;
			
			this.height = height;
			this.heightStyled = height ? height + "px" : "";
			
			this.setCellHeight();
			
			// this.outerHeight = this.element.outerHeight();
			this.outerHeight = this.element.offsetHeight;

			if(this.subscribedExternal("rowHeight")){
				this.dispatchExternal("rowHeight", this.getComponent());
			}
		}
	}
	
	//return rows outer height
	getHeight(){
		return this.outerHeight;
	}
	
	//return rows outer Width
	getWidth(){
		return this.element.offsetWidth;
	}
	
	//////////////// Cell Management /////////////////
	deleteCell(cell){
		var index = this.cells.indexOf(cell);
		
		if(index > -1){
			this.cells.splice(index, 1);
		}
	}
	
	//////////////// Data Management /////////////////
	setData(data){
		this.data = this.chain("row-data-init-before", [this, data], undefined, data);
		
		this.dispatch("row-data-init-after", this);
	}
	
	//update the rows data
	updateData(updatedData){
		var visible = this.element && Helpers.elVisible(this.element),
		tempData = {},
		newRowData;
		
		return new Promise((resolve, reject) => {
			
			if(typeof updatedData === "string"){
				updatedData = JSON.parse(updatedData);
			}
			
			this.dispatch("row-data-save-before", this);
			
			if(this.subscribed("row-data-changing")){
				tempData = Object.assign(tempData, this.data);
				tempData = Object.assign(tempData, updatedData);
			}
			
			newRowData = this.chain("row-data-changing", [this, tempData, updatedData], null, updatedData);
			
			//set data
			for (let attrname in newRowData) {
				this.data[attrname] = newRowData[attrname];
			}
			
			this.dispatch("row-data-save-after", this);
			
			//update affected cells only
			for (let attrname in updatedData) {
				
				let columns = this.table.columnManager.getColumnsByFieldRoot(attrname);
				
				columns.forEach((column) => {
					let cell = this.getCell(column.getField());
					
					if(cell){
						let value = column.getFieldValue(newRowData);
						if(cell.getValue() !== value){
							cell.setValueProcessData(value);
							
							if(visible){
								cell.cellRendered();
							}
						}
					}
				});
			}
			
			//Partial reinitialization if visible
			if(visible){
				this.normalizeHeight(true);
				
				if(this.table.options.rowFormatter){
					this.table.options.rowFormatter(this.getComponent());
				}
			}else {
				this.initialized = false;
				this.height = 0;
				this.heightStyled = "";
			}
			
			this.dispatch("row-data-changed", this, visible, updatedData);
			
			//this.reinitialize();
			
			this.dispatchExternal("rowUpdated", this.getComponent());
			
			if(this.subscribedExternal("dataChanged")){
				this.dispatchExternal("dataChanged", this.table.rowManager.getData());
			}
			
			resolve();
		});
	}
	
	getData(transform){
		if(transform){
			return this.chain("row-data-retrieve", [this, transform], null, this.data);
		}
		
		return this.data;
	}
	
	getCell(column){
		var match = false;
		
		column = this.table.columnManager.findColumn(column);
		
		if(!this.initialized && this.cells.length === 0){
			this.generateCells();
		}
		
		match = this.cells.find(function(cell){
			return cell.column === column;
		});
		
		return match;
	}
	
	getCellIndex(findCell){
		return this.cells.findIndex(function(cell){
			return cell === findCell;
		});
	}
	
	findCell(subject){
		return this.cells.find((cell) => {
			return cell.element === subject;
		});
	}
	
	getCells(){
		if(!this.initialized && this.cells.length === 0){
			this.generateCells();
		}
		
		return this.cells;
	}
	
	nextRow(){
		var row = this.table.rowManager.nextDisplayRow(this, true);
		return row || false;
	}
	
	prevRow(){
		var row = this.table.rowManager.prevDisplayRow(this, true);
		return row || false;
	}
	
	moveToRow(to, before){
		var toRow = this.table.rowManager.findRow(to);
		
		if(toRow){
			this.table.rowManager.moveRowActual(this, toRow, !before);
			this.table.rowManager.refreshActiveData("display", false, true);
		}else {
			console.warn("Move Error - No matching row found:", to);
		}
	}
	
	///////////////////// Actions  /////////////////////
	delete(){
		this.dispatch("row-delete", this);
		
		this.deleteActual();
		
		return Promise.resolve();
	}
	
	deleteActual(blockRedraw){
		this.detachModules();
		
		this.table.rowManager.deleteRow(this, blockRedraw);
		
		this.deleteCells();
		
		this.initialized = false;
		this.heightInitialized = false;
		this.element = false;
		
		this.dispatch("row-deleted", this);
	}
	
	detachModules(){
		this.dispatch("row-deleting", this);
	}
	
	deleteCells(){
		var cellCount = this.cells.length;
		
		for(let i = 0; i < cellCount; i++){
			this.cells[0].delete();
		}
	}
	
	wipe(){
		this.detachModules();
		this.deleteCells();
		
		if(this.element){
			while(this.element.firstChild) this.element.removeChild(this.element.firstChild);
			
			if(this.element.parentNode){
				this.element.parentNode.removeChild(this.element);
			}
		}
		
		this.element = false;
		this.modules = {};
	}

	isDisplayed(){
		return this.table.rowManager.getDisplayRows().includes(this);
	}

	getPosition(){
		return this.isDisplayed() ? this.position : false;
	}

	setPosition(position){
		if(position != this.position){
			this.position = position;

			this.positionWatchers.forEach((callback) => {
				callback(this.position);
			});
		}
	}

	watchPosition(callback){
		this.positionWatchers.push(callback);

		callback(this.position);
	}
	
	getGroup(){
		return this.modules.group || false;
	}
	
	//////////////// Object Generation /////////////////
	getComponent(){
		if(!this.component){
			this.component = new RowComponent(this);
		}
		
		return this.component;
	}
}

var defaultCalculations = {
	"avg":function(values, data, calcParams){
		var output = 0,
		precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : 2;

		if(values.length){
			output = values.reduce(function(sum, value){
				return Number(sum) + Number(value);
			});

			output = output / values.length;

			output = precision !== false ? output.toFixed(precision) : output;
		}

		return parseFloat(output).toString();
	},
	"max":function(values, data, calcParams){
		var output = null,
		precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;

		values.forEach(function(value){

			value = Number(value);

			if(value > output || output === null){
				output = value;
			}
		});

		return output !== null ? (precision !== false ? output.toFixed(precision) : output) : "";
	},
	"min":function(values, data, calcParams){
		var output = null,
		precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;

		values.forEach(function(value){

			value = Number(value);

			if(value < output || output === null){
				output = value;
			}
		});

		return output !== null ? (precision !== false ? output.toFixed(precision) : output) : "";
	},
	"sum":function(values, data, calcParams){
		var output = 0,
		precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;

		if(values.length){
			values.forEach(function(value){
				value = Number(value);

				output += !isNaN(value) ? Number(value) : 0;
			});
		}

		return precision !== false ? output.toFixed(precision) : output;
	},
	"concat":function(values, data, calcParams){
		var output = 0;

		if(values.length){
			output = values.reduce(function(sum, value){
				return String(sum) + String(value);
			});
		}

		return output;
	},
	"count":function(values, data, calcParams){
		var output = 0;

		if(values.length){
			values.forEach(function(value){
				if(value){
					output ++;
				}
			});
		}

		return output;
	},
	"unique":function(values, data, calcParams){
		var unique = values.filter((value, index) => {
			return (values || value === 0) && values.indexOf(value) === index;
		});

		return unique.length;
	},
};

class ColumnCalcs extends Module{

	static moduleName = "columnCalcs";

	//load defaults
	static calculations = defaultCalculations;
	
	constructor(table){
		super(table);
		
		this.topCalcs = [];
		this.botCalcs = [];
		this.genColumn = false;
		this.topElement = this.createElement();
		this.botElement = this.createElement();
		this.topRow = false;
		this.botRow = false;
		this.topInitialized = false;
		this.botInitialized = false;
		
		this.blocked = false;
		this.recalcAfterBlock = false;
		
		this.registerTableOption("columnCalcs", true);
		
		this.registerColumnOption("topCalc");
		this.registerColumnOption("topCalcParams");
		this.registerColumnOption("topCalcFormatter");
		this.registerColumnOption("topCalcFormatterParams");
		this.registerColumnOption("bottomCalc");
		this.registerColumnOption("bottomCalcParams");
		this.registerColumnOption("bottomCalcFormatter");
		this.registerColumnOption("bottomCalcFormatterParams");
	}
	
	createElement (){
		var el = document.createElement("div");
		el.classList.add("tabulator-calcs-holder");
		return el;
	}
	
	initialize(){
		this.genColumn = new Column({field:"value"}, this);
		
		this.subscribe("cell-value-changed", this.cellValueChanged.bind(this));
		this.subscribe("column-init", this.initializeColumnCheck.bind(this));
		this.subscribe("row-deleted", this.rowsUpdated.bind(this));
		this.subscribe("scroll-horizontal", this.scrollHorizontal.bind(this));
		this.subscribe("row-added", this.rowsUpdated.bind(this));
		this.subscribe("column-moved", this.recalcActiveRows.bind(this));
		this.subscribe("column-add", this.recalcActiveRows.bind(this));
		this.subscribe("data-refreshed", this.recalcActiveRowsRefresh.bind(this));
		this.subscribe("table-redraw", this.tableRedraw.bind(this));
		this.subscribe("rows-visible", this.visibleRows.bind(this));
		this.subscribe("scrollbar-vertical", this.adjustForScrollbar.bind(this));
		
		this.subscribe("redraw-blocked", this.blockRedraw.bind(this));
		this.subscribe("redraw-restored", this.restoreRedraw.bind(this));

		this.subscribe("table-redrawing", this.resizeHolderWidth.bind(this));
		this.subscribe("column-resized", this.resizeHolderWidth.bind(this));
		this.subscribe("column-show", this.resizeHolderWidth.bind(this));
		this.subscribe("column-hide", this.resizeHolderWidth.bind(this));
		
		this.registerTableFunction("getCalcResults", this.getResults.bind(this));
		this.registerTableFunction("recalc", this.userRecalc.bind(this));


		this.resizeHolderWidth();
	}

	resizeHolderWidth(){
		this.topElement.style.minWidth = this.table.columnManager.headersElement.offsetWidth + "px";
	}

	
	tableRedraw(force){
		this.recalc(this.table.rowManager.activeRows);
		
		if(force){
			this.redraw();
		}
	}
	
	blockRedraw(){
		this.blocked = true;
		this.recalcAfterBlock = false;
	}
	
	
	restoreRedraw(){
		this.blocked = false;
		
		if(this.recalcAfterBlock){
			this.recalcAfterBlock = false;
			this.recalcActiveRowsRefresh();
		}
	}
	
	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////
	userRecalc(){
		this.recalc(this.table.rowManager.activeRows);
	}
	
	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////
	
	blockCheck(){
		if(this.blocked){
			this.recalcAfterBlock = true;
		}
		
		return this.blocked;
	}
	
	visibleRows(viewable, rows){
		if(this.topRow){
			rows.unshift(this.topRow);
		}
		
		if(this.botRow){
			rows.push(this.botRow);
		}
		
		return rows;
	}
	
	rowsUpdated(row){
		if(this.table.options.groupBy){
			this.recalcRowGroup(row);
		}else {
			this.recalcActiveRows();
		}
	}
	
	recalcActiveRowsRefresh(){
		if(this.table.options.groupBy && this.table.options.dataTreeStartExpanded && this.table.options.dataTree){
			this.recalcAll();
		}else {
			this.recalcActiveRows();
		}
	}
	
	recalcActiveRows(){
		this.recalc(this.table.rowManager.activeRows);
	}
	
	cellValueChanged(cell){
		if(cell.column.definition.topCalc || cell.column.definition.bottomCalc){
			if(this.table.options.groupBy){
				if(this.table.options.columnCalcs == "table" || this.table.options.columnCalcs == "both"){
					this.recalcActiveRows();
				}
				
				if(this.table.options.columnCalcs != "table"){
					this.recalcRowGroup(cell.row);
				}
			}else {
				this.recalcActiveRows();
			}
		}
	}
	
	initializeColumnCheck(column){
		if(column.definition.topCalc || column.definition.bottomCalc){
			this.initializeColumn(column);
		}
	}
	
	//initialize column calcs
	initializeColumn(column){
		var def = column.definition;
		
		var config = {
			topCalcParams:def.topCalcParams || {},
			botCalcParams:def.bottomCalcParams || {},
		};
		
		if(def.topCalc){
			
			switch(typeof def.topCalc){
				case "string":
					if(ColumnCalcs.calculations[def.topCalc]){
						config.topCalc = ColumnCalcs.calculations[def.topCalc];
					}else {
						console.warn("Column Calc Error - No such calculation found, ignoring: ", def.topCalc);
					}
					break;
				
				case "function":
					config.topCalc = def.topCalc;
					break;
				
			}
			
			if(config.topCalc){
				column.modules.columnCalcs = config;
				this.topCalcs.push(column);
				
				if(this.table.options.columnCalcs != "group"){
					this.initializeTopRow();
				}
			}
			
		}
		
		if(def.bottomCalc){
			switch(typeof def.bottomCalc){
				case "string":
					if(ColumnCalcs.calculations[def.bottomCalc]){
						config.botCalc = ColumnCalcs.calculations[def.bottomCalc];
					}else {
						console.warn("Column Calc Error - No such calculation found, ignoring: ", def.bottomCalc);
					}
					break;
				
				case "function":
					config.botCalc = def.bottomCalc;
					break;
				
			}
			
			if(config.botCalc){
				column.modules.columnCalcs = config;
				this.botCalcs.push(column);
				
				if(this.table.options.columnCalcs != "group"){
					this.initializeBottomRow();
				}
			}
		}
		
	}
	
	//dummy functions to handle being mock column manager
	registerColumnField(){}
	
	removeCalcs(){
		var changed = false;
		
		if(this.topInitialized){
			this.topInitialized = false;
			this.topElement.parentNode.removeChild(this.topElement);
			changed = true;
		}
		
		if(this.botInitialized){
			this.botInitialized = false;
			this.footerRemove(this.botElement);
			changed = true;
		}
		
		if(changed){
			this.table.rowManager.adjustTableSize();
		}
	}
	
	reinitializeCalcs(){
		if(this.topCalcs.length){
			this.initializeTopRow();
		}

		if(this.botCalcs.length){
			this.initializeBottomRow();
		}
	}
	
	initializeTopRow(){
		var	fragment = document.createDocumentFragment();
		
		if(!this.topInitialized){

			fragment.appendChild(document.createElement("br"));
			fragment.appendChild(this.topElement);

			this.table.columnManager.getContentsElement().insertBefore(fragment, this.table.columnManager.headersElement.nextSibling);
			this.topInitialized = true;
		}
	}
	
	initializeBottomRow(){
		if(!this.botInitialized){
			this.footerPrepend(this.botElement);
			this.botInitialized = true;
		}
	}
	
	scrollHorizontal(left){
		if(this.botInitialized && this.botRow){
			this.botElement.scrollLeft = left;
		}
	}
	
	recalc(rows){
		var data, row;
		
		if(!this.blockCheck()){
			if(this.topInitialized || this.botInitialized){
				data = this.rowsToData(rows);
				
				if(this.topInitialized){
					if(this.topRow){
						this.topRow.deleteCells();
					}
					
					row = this.generateRow("top", data);
					this.topRow = row;
					while(this.topElement.firstChild) this.topElement.removeChild(this.topElement.firstChild);
					this.topElement.appendChild(row.getElement());
					row.initialize(true);
				}
				
				if(this.botInitialized){
					if(this.botRow){
						this.botRow.deleteCells();
					}
					
					row = this.generateRow("bottom", data);
					this.botRow = row;
					while(this.botElement.firstChild) this.botElement.removeChild(this.botElement.firstChild);
					this.botElement.appendChild(row.getElement());
					row.initialize(true);
				}
				
				this.table.rowManager.adjustTableSize();
				
				//set resizable handles
				if(this.table.modExists("frozenColumns")){
					this.table.modules.frozenColumns.layout();
				}
			}
		}
	}
	
	recalcRowGroup(row){
		this.recalcGroup(this.table.modules.groupRows.getRowGroup(row));
	}
	
	recalcAll(){
		if(this.topCalcs.length || this.botCalcs.length){
			if(this.table.options.columnCalcs !== "group"){
				this.recalcActiveRows();
			}
			
			if(this.table.options.groupBy && this.table.options.columnCalcs !== "table"){
				
				var groups = this.table.modules.groupRows.getChildGroups();
				
				groups.forEach((group) => {
					this.recalcGroup(group);
				});
			}
		}
	}
	
	recalcGroup(group){
		var data, rowData;
		
		if(!this.blockCheck()){
			if(group){
				if(group.calcs){
					if(group.calcs.bottom){
						data = this.rowsToData(group.rows);
						rowData = this.generateRowData("bottom", data);
						
						group.calcs.bottom.updateData(rowData);
						group.calcs.bottom.reinitialize();
					}
					
					if(group.calcs.top){
						data = this.rowsToData(group.rows);
						rowData = this.generateRowData("top", data);
						
						group.calcs.top.updateData(rowData);
						group.calcs.top.reinitialize();
					}
				}
			}
		}
	}
	
	//generate top stats row
	generateTopRow(rows){
		return this.generateRow("top", this.rowsToData(rows));
	}
	//generate bottom stats row
	generateBottomRow(rows){
		return this.generateRow("bottom", this.rowsToData(rows));
	}
	
	rowsToData(rows){
		var data = [],
		hasDataTreeColumnCalcs = this.table.options.dataTree && this.table.options.dataTreeChildColumnCalcs,
		dataTree = this.table.modules.dataTree;

		rows.forEach((row) => {
			data.push(row.getData());

			if(hasDataTreeColumnCalcs && row.modules.dataTree?.open){
				this.rowsToData(dataTree.getFilteredTreeChildren(row)).forEach(dataRow =>{
					data.push(row);
				});
			}
		});
		return data;
	}
	
	//generate stats row
	generateRow(pos, data){
		var rowData = this.generateRowData(pos, data),
		row;
		
		if(this.table.modExists("mutator")){
			this.table.modules.mutator.disable();
		}
		
		row = new Row(rowData, this, "calc");
		
		if(this.table.modExists("mutator")){
			this.table.modules.mutator.enable();
		}
		
		row.getElement().classList.add("tabulator-calcs", "tabulator-calcs-" + pos);
		
		row.component = false;
		
		row.getComponent = () => {
			if(!row.component){
				row.component = new CalcComponent(row);
			}
			
			return row.component;
		};
		
		row.generateCells = () => {
			
			var cells = [];
			
			this.table.columnManager.columnsByIndex.forEach((column) => {
				
				//set field name of mock column
				this.genColumn.setField(column.getField());
				this.genColumn.hozAlign = column.hozAlign;
				
				if(column.definition[pos + "CalcFormatter"] && this.table.modExists("format")){
					this.genColumn.modules.format = {
						formatter: this.table.modules.format.lookupFormatter(column.definition[pos + "CalcFormatter"]),
						params: column.definition[pos + "CalcFormatterParams"] || {},
					};
				}else {
					this.genColumn.modules.format = {
						formatter: this.table.modules.format.lookupFormatter("plaintext"),
						params:{}
					};
				}
				
				//ensure css class definition is replicated to calculation cell
				this.genColumn.definition.cssClass = column.definition.cssClass;
				
				//generate cell and assign to correct column
				var cell = new Cell(this.genColumn, row);
				cell.getElement();
				cell.column = column;
				cell.setWidth();
				
				column.cells.push(cell);
				cells.push(cell);
				
				if(!column.visible){
					cell.hide();
				}
			});
			
			row.cells = cells;
		};
		
		return row;
	}
	
	//generate stats row
	generateRowData(pos, data){
		var rowData = {},
		calcs = pos == "top" ? this.topCalcs : this.botCalcs,
		type = pos == "top" ? "topCalc" : "botCalc",
		params, paramKey;
		
		calcs.forEach(function(column){
			var values = [];
			
			if(column.modules.columnCalcs && column.modules.columnCalcs[type]){
				data.forEach(function(item){
					values.push(column.getFieldValue(item));
				});
				
				paramKey = type + "Params";
				params = typeof column.modules.columnCalcs[paramKey] === "function" ? column.modules.columnCalcs[paramKey](values, data) : column.modules.columnCalcs[paramKey];
				
				column.setFieldValue(rowData, column.modules.columnCalcs[type](values, data, params));
			}
		});
		
		return rowData;
	}
	
	hasTopCalcs(){
		return	!!(this.topCalcs.length);
	}
	
	hasBottomCalcs(){
		return	!!(this.botCalcs.length);
	}
	
	//handle table redraw
	redraw(){
		if(this.topRow){
			this.topRow.normalizeHeight(true);
		}
		if(this.botRow){
			this.botRow.normalizeHeight(true);
		}
	}
	
	//return the calculated
	getResults(){
		var results = {},
		groups;
		
		if(this.table.options.groupBy && this.table.modExists("groupRows")){
			groups = this.table.modules.groupRows.getGroups(true);
			
			groups.forEach((group) => {
				results[group.getKey()] = this.getGroupResults(group);
			});
		}else {
			results = {
				top: this.topRow ? this.topRow.getData() : {},
				bottom: this.botRow ? this.botRow.getData() : {},
			};
		}
		
		return results;
	}
	
	//get results from a group
	getGroupResults(group){
		var groupObj = group._getSelf(),
		subGroups = group.getSubGroups(),
		subGroupResults = {},
		results = {};
		
		subGroups.forEach((subgroup) => {
			subGroupResults[subgroup.getKey()] = this.getGroupResults(subgroup);
		});
		
		results = {
			top: groupObj.calcs.top ? groupObj.calcs.top.getData() : {},
			bottom: groupObj.calcs.bottom ? groupObj.calcs.bottom.getData() : {},
			groups: subGroupResults,
		};
		
		return results;
	}
	
	adjustForScrollbar(width){
		if(this.botRow){
			if(this.table.rtl){
				this.botElement.style.paddingLeft = width + "px";
			}else {
				this.botElement.style.paddingRight = width + "px";
			}
		}
	}
}

class DataTree extends Module{

	static moduleName = "dataTree";

	constructor(table){
		super(table);

		this.indent = 10;
		this.field = "";
		this.collapseEl = null;
		this.expandEl = null;
		this.branchEl = null;
		this.elementField = false;

		this.startOpen = function(){};

		this.registerTableOption("dataTree", false); //enable data tree
		this.registerTableOption("dataTreeFilter", true); //filter child rows
		this.registerTableOption("dataTreeSort", true); //sort child rows
		this.registerTableOption("dataTreeElementColumn", false);
		this.registerTableOption("dataTreeBranchElement", true);//show data tree branch element
		this.registerTableOption("dataTreeChildIndent", 9); //data tree child indent in px
		this.registerTableOption("dataTreeChildField", "_children");//data tre column field to look for child rows
		this.registerTableOption("dataTreeCollapseElement", false);//data tree row collapse element
		this.registerTableOption("dataTreeExpandElement", false);//data tree row expand element
		this.registerTableOption("dataTreeStartExpanded", false);
		this.registerTableOption("dataTreeChildColumnCalcs", false);//include visible data tree rows in column calculations
		this.registerTableOption("dataTreeSelectPropagate", false);//selecting a parent row selects its children

		//register component functions
		this.registerComponentFunction("row", "treeCollapse", this.collapseRow.bind(this));
		this.registerComponentFunction("row", "treeExpand", this.expandRow.bind(this));
		this.registerComponentFunction("row", "treeToggle", this.toggleRow.bind(this));
		this.registerComponentFunction("row", "getTreeParent", this.getTreeParent.bind(this));
		this.registerComponentFunction("row", "getTreeChildren", this.getRowChildren.bind(this));
		this.registerComponentFunction("row", "addTreeChild", this.addTreeChildRow.bind(this));
		this.registerComponentFunction("row", "isTreeExpanded", this.isRowExpanded.bind(this));
	}

	initialize(){
		if(this.table.options.dataTree){
			var dummyEl = null,
			options = this.table.options;

			this.field = options.dataTreeChildField;
			this.indent = options.dataTreeChildIndent;

			if(this.options("movableRows")){
				console.warn("The movableRows option is not available with dataTree enabled, moving of child rows could result in unpredictable behavior");
			}

			if(options.dataTreeBranchElement){

				if(options.dataTreeBranchElement === true){
					this.branchEl = document.createElement("div");
					this.branchEl.classList.add("tabulator-data-tree-branch");
				}else {
					if(typeof options.dataTreeBranchElement === "string"){
						dummyEl = document.createElement("div");
						dummyEl.innerHTML = options.dataTreeBranchElement;
						this.branchEl = dummyEl.firstChild;
					}else {
						this.branchEl = options.dataTreeBranchElement;
					}
				}
			}else {
				this.branchEl = document.createElement("div");
				this.branchEl.classList.add("tabulator-data-tree-branch-empty");
			}

			if(options.dataTreeCollapseElement){
				if(typeof options.dataTreeCollapseElement === "string"){
					dummyEl = document.createElement("div");
					dummyEl.innerHTML = options.dataTreeCollapseElement;
					this.collapseEl = dummyEl.firstChild;
				}else {
					this.collapseEl = options.dataTreeCollapseElement;
				}
			}else {
				this.collapseEl = document.createElement("div");
				this.collapseEl.classList.add("tabulator-data-tree-control");
				this.collapseEl.tabIndex = 0;
				this.collapseEl.innerHTML = "<div class='tabulator-data-tree-control-collapse'></div>";
			}

			if(options.dataTreeExpandElement){
				if(typeof options.dataTreeExpandElement === "string"){
					dummyEl = document.createElement("div");
					dummyEl.innerHTML = options.dataTreeExpandElement;
					this.expandEl = dummyEl.firstChild;
				}else {
					this.expandEl = options.dataTreeExpandElement;
				}
			}else {
				this.expandEl = document.createElement("div");
				this.expandEl.classList.add("tabulator-data-tree-control");
				this.expandEl.tabIndex = 0;
				this.expandEl.innerHTML = "<div class='tabulator-data-tree-control-expand'></div>";
			}


			switch(typeof options.dataTreeStartExpanded){
				case "boolean":
					this.startOpen = function(row, index){
						return options.dataTreeStartExpanded;
					};
					break;

				case "function":
					this.startOpen = options.dataTreeStartExpanded;
					break;

				default:
					this.startOpen = function(row, index){
						return options.dataTreeStartExpanded[index];
					};
					break;
			}

			this.subscribe("row-init", this.initializeRow.bind(this));
			this.subscribe("row-layout-after", this.layoutRow.bind(this));
			this.subscribe("row-deleting", this.rowDeleting.bind(this));
			this.subscribe("row-deleted", this.rowDelete.bind(this),0);
			this.subscribe("row-data-changed", this.rowDataChanged.bind(this), 10);
			this.subscribe("cell-value-updated", this.cellValueChanged.bind(this));
			this.subscribe("edit-cancelled", this.cellValueChanged.bind(this));
			this.subscribe("column-moving-rows", this.columnMoving.bind(this));
			this.subscribe("table-built", this.initializeElementField.bind(this));
			this.subscribe("table-redrawing", this.tableRedrawing.bind(this));

			this.registerDisplayHandler(this.getRows.bind(this), 30);
		}
	}

	tableRedrawing(force){
		var rows;

		if(force){
			rows = this.table.rowManager.getRows();
			
			rows.forEach((row) => {
				this.reinitializeRowChildren(row);
			});
		}
	}

	initializeElementField(){
		var firstCol = this.table.columnManager.getFirstVisibleColumn();

		this.elementField = this.table.options.dataTreeElementColumn || (firstCol ? firstCol.field : false);
	}
	
	getRowChildren(row){
		return this.getTreeChildren(row, true);
	}

	columnMoving(){
		var rows = [];

		this.table.rowManager.rows.forEach((row) => {
			rows = rows.concat(this.getTreeChildren(row, false, true));
		});

		return rows;
	}

	rowDataChanged(row, visible, updatedData){
		if(this.redrawNeeded(updatedData)){
			this.initializeRow(row);

			if(visible){
				this.layoutRow(row);
				this.refreshData(true);
			}
		}
	}

	cellValueChanged(cell){
		var field = cell.column.getField();

		if(field === this.elementField){
			this.layoutRow(cell.row);
		}
	}

	initializeRow(row){
		var childArray = row.getData()[this.field];
		var isArray = Array.isArray(childArray);

		var children = isArray || (!isArray && typeof childArray === "object" && childArray !== null);

		if(!children && row.modules.dataTree && row.modules.dataTree.branchEl){
			row.modules.dataTree.branchEl.parentNode.removeChild(row.modules.dataTree.branchEl);
		}

		if(!children && row.modules.dataTree && row.modules.dataTree.controlEl){
			row.modules.dataTree.controlEl.parentNode.removeChild(row.modules.dataTree.controlEl);
		}

		row.modules.dataTree = {
			index: row.modules.dataTree ? row.modules.dataTree.index : 0,
			open: children ? (row.modules.dataTree ? row.modules.dataTree.open : this.startOpen(row.getComponent(), 0)) : false,
			controlEl: row.modules.dataTree && children ? row.modules.dataTree.controlEl : false,
			branchEl: row.modules.dataTree && children ? row.modules.dataTree.branchEl : false,
			parent: row.modules.dataTree ? row.modules.dataTree.parent : false,
			children:children,
		};
	}

	reinitializeRowChildren(row){
		var children = this.getTreeChildren(row, false, true);

		children.forEach(function(child){
			child.reinitialize(true);
		});
	}

	layoutRow(row){
		var cell = this.elementField ? row.getCell(this.elementField) : row.getCells()[0],
		el = cell.getElement(),
		config = row.modules.dataTree;

		if(config.branchEl){
			if(config.branchEl.parentNode){
				config.branchEl.parentNode.removeChild(config.branchEl);
			}
			config.branchEl = false;
		}

		if(config.controlEl){
			if(config.controlEl.parentNode){
				config.controlEl.parentNode.removeChild(config.controlEl);
			}
			config.controlEl = false;
		}

		this.generateControlElement(row, el);

		row.getElement().classList.add("tabulator-tree-level-" + config.index);

		if(config.index){
			if(this.branchEl){
				config.branchEl = this.branchEl.cloneNode(true);
				el.insertBefore(config.branchEl, el.firstChild);

				if(this.table.rtl){
					config.branchEl.style.marginRight = (((config.branchEl.offsetWidth + config.branchEl.style.marginLeft) * (config.index - 1)) + (config.index * this.indent)) + "px";
				}else {
					config.branchEl.style.marginLeft = (((config.branchEl.offsetWidth + config.branchEl.style.marginRight) * (config.index - 1)) + (config.index * this.indent)) + "px";
				}
			}else {

				if(this.table.rtl){
					el.style.paddingRight = parseInt(window.getComputedStyle(el, null).getPropertyValue('padding-right')) + (config.index * this.indent) + "px";
				}else {
					el.style.paddingLeft = parseInt(window.getComputedStyle(el, null).getPropertyValue('padding-left')) + (config.index * this.indent) + "px";
				}
			}
		}
	}

	generateControlElement(row, el){
		var config = row.modules.dataTree,
		oldControl = config.controlEl;

		el = el || row.getCells()[0].getElement();

		if(config.children !== false){

			if(config.open){
				config.controlEl = this.collapseEl.cloneNode(true);
				config.controlEl.addEventListener("click", (e) => {
					e.stopPropagation();
					this.collapseRow(row);
				});
			}else {
				config.controlEl = this.expandEl.cloneNode(true);
				config.controlEl.addEventListener("click", (e) => {
					e.stopPropagation();
					this.expandRow(row);
				});
			}

			config.controlEl.addEventListener("mousedown", (e) => {
				e.stopPropagation();
			});

			if(oldControl && oldControl.parentNode === el){
				oldControl.parentNode.replaceChild(config.controlEl,oldControl);
			}else {
				el.insertBefore(config.controlEl, el.firstChild);
			}
		}
	}

	getRows(rows){
		var output = [];

		rows.forEach((row, i) => {
			var config, children;

			output.push(row);

			if(row instanceof Row){

				row.create();

				config = row.modules.dataTree;

				if(!config.index && config.children !== false){
					children = this.getChildren(row, false, true);

					children.forEach((child) => {
						child.create();
						output.push(child);
					});
				}
			}
		});

		return output;
	}

	getChildren(row, allChildren, sortOnly){
		var config = row.modules.dataTree,
		children = [],
		output = [];

		if(config.children !== false && (config.open || allChildren)){
			if(!Array.isArray(config.children)){
				config.children = this.generateChildren(row);
			}

			if(this.table.modExists("filter") && this.table.options.dataTreeFilter){
				children = this.table.modules.filter.filter(config.children);
			}else {
				children = config.children;
			}

			if(this.table.modExists("sort") && this.table.options.dataTreeSort){
				this.table.modules.sort.sort(children, sortOnly);
			}

			children.forEach((child) => {
				output.push(child);

				var subChildren = this.getChildren(child, false, true);

				subChildren.forEach((sub) => {
					output.push(sub);
				});
			});
		}

		return output;
	}

	generateChildren(row){
		var children = [];

		var childArray = row.getData()[this.field];

		if(!Array.isArray(childArray)){
			childArray = [childArray];
		}

		childArray.forEach((childData) => {
			var childRow = new Row(childData || {}, this.table.rowManager);

			childRow.create();

			childRow.modules.dataTree.index = row.modules.dataTree.index + 1;
			childRow.modules.dataTree.parent = row;

			if(childRow.modules.dataTree.children){
				childRow.modules.dataTree.open = this.startOpen(childRow.getComponent(), childRow.modules.dataTree.index);
			}
			children.push(childRow);
		});

		return children;
	}

	expandRow(row, silent){
		var config = row.modules.dataTree;

		if(config.children !== false){
			config.open = true;

			row.reinitialize();

			this.refreshData(true);

			this.dispatchExternal("dataTreeRowExpanded", row.getComponent(), row.modules.dataTree.index);
		}
	}

	collapseRow(row){
		var config = row.modules.dataTree;

		if(config.children !== false){
			config.open = false;

			row.reinitialize();

			this.refreshData(true);

			this.dispatchExternal("dataTreeRowCollapsed", row.getComponent(), row.modules.dataTree.index);
		}
	}

	toggleRow(row){
		var config = row.modules.dataTree;

		if(config.children !== false){
			if(config.open){
				this.collapseRow(row);
			}else {
				this.expandRow(row);
			}
		}
	}

	isRowExpanded(row){
		return row.modules.dataTree.open;
	}

	getTreeParent(row){
		return row.modules.dataTree.parent ? row.modules.dataTree.parent.getComponent() : false;
	}

	getTreeParentRoot(row){
		return row.modules.dataTree && row.modules.dataTree.parent ? this.getTreeParentRoot(row.modules.dataTree.parent) : row;
	}

	getFilteredTreeChildren(row){
		var config = row.modules.dataTree,
		output = [], children;

		if(config.children){

			if(!Array.isArray(config.children)){
				config.children = this.generateChildren(row);
			}

			if(this.table.modExists("filter") && this.table.options.dataTreeFilter){
				children = this.table.modules.filter.filter(config.children);
			}else {
				children = config.children;
			}

			children.forEach((childRow) => {
				if(childRow instanceof Row){
					output.push(childRow);
				}
			});
		}

		return output;
	}

	rowDeleting(row){
		var config = row.modules.dataTree;

		if (config && config.children && Array.isArray(config.children)){
			config.children.forEach((childRow) => {
				if(childRow instanceof Row){
					childRow.wipe();
				}
			});
		}
	}

	rowDelete(row){
		var parent = row.modules.dataTree.parent,
		childIndex;

		if(parent){
			childIndex = this.findChildIndex(row, parent);

			if(childIndex !== false){
				parent.data[this.field].splice(childIndex, 1);
			}

			if(!parent.data[this.field].length){
				delete parent.data[this.field];
			}

			this.initializeRow(parent);
			this.layoutRow(parent);
		}

		this.refreshData(true);
	}

	addTreeChildRow(row, data, top, index){
		var childIndex = false;

		if(typeof data === "string"){
			data = JSON.parse(data);
		}

		if(!Array.isArray(row.data[this.field])){
			row.data[this.field] = [];

			row.modules.dataTree.open = this.startOpen(row.getComponent(), row.modules.dataTree.index);
		}

		if(typeof index !== "undefined"){
			childIndex = this.findChildIndex(index, row);

			if(childIndex !== false){
				row.data[this.field].splice((top ? childIndex : childIndex + 1), 0, data);
			}
		}

		if(childIndex === false){
			if(top){
				row.data[this.field].unshift(data);
			}else {
				row.data[this.field].push(data);
			}
		}

		this.initializeRow(row);
		this.layoutRow(row);

		this.refreshData(true);
	}

	findChildIndex(subject, parent){
		var match = false;

		if(typeof subject == "object"){

			if(subject instanceof Row){
				//subject is row element
				match = subject.data;
			}else if(subject instanceof RowComponent){
				//subject is public row component
				match = subject._getSelf().data;
			}else if(typeof HTMLElement !== "undefined" && subject instanceof HTMLElement){
				if(parent.modules.dataTree){
					match = parent.modules.dataTree.children.find((childRow) => {
						return childRow instanceof Row ? childRow.element === subject : false;
					});

					if(match){
						match = match.data;
					}
				}
			}else if(subject === null){
				match = false;
			}

		}else if(typeof subject == "undefined"){
			match = false;
		}else {
			//subject should be treated as the index of the row
			match = parent.data[this.field].find((row) => {
				return row.data[this.table.options.index] == subject;
			});
		}

		if(match){

			if(Array.isArray(parent.data[this.field])){
				match = parent.data[this.field].indexOf(match);
			}

			if(match == -1){
				match = false;
			}
		}

		//catch all for any other type of input

		return match;
	}

	getTreeChildren(row, component, recurse){
		var config = row.modules.dataTree,
		output = [];

		if(config && config.children){

			if(!Array.isArray(config.children)){
				config.children = this.generateChildren(row);
			}

			config.children.forEach((childRow) => {
				if(childRow instanceof Row){
					output.push(component ? childRow.getComponent() : childRow);

					if(recurse){
						this.getTreeChildren(childRow, component, recurse).forEach(child => {
							output.push(child);
						});
					}
				}
			});
		}

		return output;
	}

	getChildField(){
		return this.field;
	}

	redrawNeeded(data){
		return (this.field ? typeof data[this.field] !== "undefined" : false) || (this.elementField ? typeof data[this.elementField] !== "undefined" : false);
	}
}

function csv$1(list, options = {}, setFileContents){
	var delimiter = options.delimiter ? options.delimiter : ",",
	fileContents = [],
	headers = [];

	list.forEach((row) => {
		var item = [];

		switch(row.type){
			case "group":
				console.warn("Download Warning - CSV downloader cannot process row groups");
				break;

			case "calc":
				console.warn("Download Warning - CSV downloader cannot process column calculations");
				break;

			case "header":
				row.columns.forEach((col, i) => {
					if(col && col.depth === 1){
						headers[i] = typeof col.value == "undefined"  || col.value === null ? "" : ('"' + String(col.value).split('"').join('""') + '"');
					}
				});
				break;

			case "row":
				row.columns.forEach((col) => {

					if(col){

						switch(typeof col.value){
							case "object":
								col.value = col.value !== null ? JSON.stringify(col.value) : "";
								break;

							case "undefined":
								col.value = "";
								break;
						}

						item.push('"' + String(col.value).split('"').join('""') + '"');
					}
				});

				fileContents.push(item.join(delimiter));
				break;
		}
	});

	if(headers.length){
		fileContents.unshift(headers.join(delimiter));
	}

	fileContents = fileContents.join("\n");

	if(options.bom){
		fileContents = "\ufeff" + fileContents;
	}

	setFileContents(fileContents, "text/csv");
}

function json$2(list, options, setFileContents){
	var fileContents = [];

	list.forEach((row) => {
		var item = {};

		switch(row.type){
			case "header":
				break;

			case "group":
				console.warn("Download Warning - JSON downloader cannot process row groups");
				break;

			case "calc":
				console.warn("Download Warning - JSON downloader cannot process column calculations");
				break;

			case "row":
				row.columns.forEach((col) => {
					if(col){
						item[col.component.getTitleDownload() || col.component.getField()] = col.value;
					}
				});

				fileContents.push(item);
				break;
		}
	});

	fileContents = JSON.stringify(fileContents, null, '\t');

	setFileContents(fileContents, "application/json");
}

function pdf(list, options = {}, setFileContents){
	var header = [],
	body = [],
	autoTableParams = {},
	rowGroupStyles = options.rowGroupStyles || {
		fontStyle: "bold",
		fontSize: 12,
		cellPadding: 6,
		fillColor: 220,
	},
	rowCalcStyles = options.rowCalcStyles || {
		fontStyle: "bold",
		fontSize: 10,
		cellPadding: 4,
		fillColor: 232,
	},
	jsPDFParams = options.jsPDF || {},
	title = options.title ? options.title : "",
	jspdfLib, doc;

	if(!jsPDFParams.orientation){
		jsPDFParams.orientation = options.orientation || "landscape";
	}

	if(!jsPDFParams.unit){
		jsPDFParams.unit = "pt";
	}

	//parse row list
	list.forEach((row) => {
		switch(row.type){
			case "header":
				header.push(parseRow(row));
				break;

			case "group":
				body.push(parseRow(row, rowGroupStyles));
				break;

			case "calc":
				body.push(parseRow(row, rowCalcStyles));
				break;

			case "row":
				body.push(parseRow(row));
				break;
		}
	});

	function parseRow(row, styles){
		var rowData = [];

		row.columns.forEach((col) =>{
			var cell;

			if(col){
				switch(typeof col.value){
					case "object":
						col.value = col.value !== null ? JSON.stringify(col.value) : "";
						break;

					case "undefined":
						col.value = "";
						break;
				}

				cell = {
					content:col.value,
					colSpan:col.width,
					rowSpan:col.height,
				};

				if(styles){
					cell.styles = styles;
				}

				rowData.push(cell);
			}
		});

		return rowData;
	}


	//configure PDF
	jspdfLib = this.dependencyRegistry.lookup("jspdf", "jsPDF");
	doc = new jspdfLib(jsPDFParams); //set document to landscape, better for most tables

	if(options.autoTable){
		if(typeof options.autoTable === "function"){
			autoTableParams = options.autoTable(doc) || {};
		}else {
			autoTableParams = options.autoTable;
		}
	}

	if(title){
		autoTableParams.didDrawPage = function(data) {
			doc.text(title, 40, 30);
		};
	}

	autoTableParams.head = header;
	autoTableParams.body = body;

	doc.autoTable(autoTableParams);

	if(options.documentProcessing){
		options.documentProcessing(doc);
	}

	setFileContents(doc.output("arraybuffer"), "application/pdf");
}

function xlsx$1(list, options, setFileContents){
	var self = this,
	sheetName = options.sheetName || "Sheet1",
	XLSXLib = this.dependencyRegistry.lookup("XLSX"),
	workbook = XLSXLib.utils.book_new(),
	tableFeatures = new CoreFeature(this),
	compression =  'compress' in options ? options.compress : true,
	writeOptions = options.writeOptions || {bookType:'xlsx', bookSST:true, compression},
	output;

	writeOptions.type = 'binary';

	workbook.SheetNames = [];
	workbook.Sheets = {};

	function generateSheet(){
		var rows = [],
		merges = [],
		worksheet = {},
		range = {s: {c:0, r:0}, e: {c:(list[0] ? list[0].columns.reduce((a, b) => a + (b && b.width ? b.width : 1), 0) : 0), r:list.length }};

		//parse row list
		list.forEach((row, i) => {
			var rowData = [];

			row.columns.forEach(function(col, j){

				if(col){
					rowData.push(!(col.value instanceof Date) && typeof col.value === "object" ? JSON.stringify(col.value) : col.value);

					if(col.width > 1 || col.height > -1){
						if(col.height > 1 || col.width > 1){
							merges.push({s:{r:i,c:j},e:{r:i + col.height - 1,c:j + col.width - 1}});
						}
					}
				}else {
					rowData.push("");
				}
			});

			rows.push(rowData);
		});

		//convert rows to worksheet
		XLSXLib.utils.sheet_add_aoa(worksheet, rows);

		worksheet['!ref'] = XLSXLib.utils.encode_range(range);

		if(merges.length){
			worksheet["!merges"] = merges;
		}

		return worksheet;
	}

	if(options.sheetOnly){
		setFileContents(generateSheet());
		return;
	}

	if(options.sheets){
		for(var sheet in options.sheets){

			if(options.sheets[sheet] === true){
				workbook.SheetNames.push(sheet);
				workbook.Sheets[sheet] = generateSheet();
			}else {

				workbook.SheetNames.push(sheet);

				tableFeatures.commsSend(options.sheets[sheet], "download", "intercept",{
					type:"xlsx",
					options:{sheetOnly:true},
					active:self.active,
					intercept:function(data){
						workbook.Sheets[sheet] = data;
					}
				});
			}
		}
	}else {
		workbook.SheetNames.push(sheetName);
		workbook.Sheets[sheetName] = generateSheet();
	}

	if(options.documentProcessing){
		workbook = options.documentProcessing(workbook);
	}

	//convert workbook to binary array
	function s2ab(s) {
		var buf = new ArrayBuffer(s.length);
		var view = new Uint8Array(buf);
		for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
		return buf;
	}

	output = XLSXLib.write(workbook, writeOptions);

	setFileContents(s2ab(output), "application/octet-stream");
}

function html$1(list, options, setFileContents){
	if(this.modExists("export", true)){
		setFileContents(this.modules.export.generateHTMLTable(list), "text/html");
	}
}

function jsonLines (list, options, setFileContents) {
	const fileContents = [];

	list.forEach((row) => {
		const item = {};

		switch (row.type) {
			case "header":
				break;

			case "group":
				console.warn("Download Warning - JSON downloader cannot process row groups");
				break;

			case "calc":
				console.warn("Download Warning - JSON downloader cannot process column calculations");
				break;

			case "row":
				row.columns.forEach((col) => {
					if (col) {
						item[col.component.getTitleDownload() || col.component.getField()] = col.value;
					}
				});

				fileContents.push(JSON.stringify(item));
				break;
		}
	});

	setFileContents(fileContents.join("\n"), "application/x-ndjson");
}

var defaultDownloaders = {
	csv:csv$1,
	json:json$2,
	jsonLines:jsonLines,
	pdf:pdf,
	xlsx:xlsx$1,
	html:html$1,
};

class Download extends Module{

	static moduleName = "download";

	//load defaults
	static downloaders = defaultDownloaders;

	constructor(table){
		super(table);

		this.registerTableOption("downloadEncoder", function(data, mimeType){
			return new Blob([data],{type:mimeType});
		}); //function to manipulate download data
		this.registerTableOption("downloadConfig", {}); //download config
		this.registerTableOption("downloadRowRange", "active"); //restrict download to active rows only

		this.registerColumnOption("download");
		this.registerColumnOption("titleDownload");
	}

	initialize(){
		this.deprecatedOptionsCheck();

		this.registerTableFunction("download", this.download.bind(this));
		this.registerTableFunction("downloadToTab", this.downloadToTab.bind(this));
	}

	deprecatedOptionsCheck(){

	}	

	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////

	downloadToTab(type, filename, options, active){
		this.download(type, filename, options, active, true);
	}

	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////

	//trigger file download
	download(type, filename, options, range, interceptCallback){
		var downloadFunc = false;

		function buildLink(data, mime){
			if(interceptCallback){
				if(interceptCallback === true){
					this.triggerDownload(data, mime, type, filename, true);
				}else {
					interceptCallback(data);
				}

			}else {
				this.triggerDownload(data, mime, type, filename);
			}
		}

		if(typeof type == "function"){
			downloadFunc = type;
		}else {
			if(Download.downloaders[type]){
				downloadFunc = Download.downloaders[type];
			}else {
				console.warn("Download Error - No such download type found: ", type);
			}
		}

		if(downloadFunc){
			var list = this.generateExportList(range);

			downloadFunc.call(this.table, list , options || {}, buildLink.bind(this));
		}
	}

	generateExportList(range){
		var list = this.table.modules.export.generateExportList(this.table.options.downloadConfig, false, range || this.table.options.downloadRowRange, "download");

		//assign group header formatter
		var groupHeader = this.table.options.groupHeaderDownload;

		if(groupHeader && !Array.isArray(groupHeader)){
			groupHeader = [groupHeader];
		}

		list.forEach((row) => {
			var group;

			if(row.type === "group"){
				group = row.columns[0];

				if(groupHeader && groupHeader[row.indent]){
					group.value = groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
				}
			}
		});

		return list;
	}

	triggerDownload(data, mime, type, filename, newTab){
		var element = document.createElement('a'),
		blob = this.table.options.downloadEncoder(data, mime);

		if(blob){
			if(newTab){
				window.open(window.URL.createObjectURL(blob));
			}else {
				filename = filename || "Tabulator." + (typeof type === "function" ? "txt" : type);
				
				if(navigator.msSaveOrOpenBlob){
					navigator.msSaveOrOpenBlob(blob, filename);
				}else {
					element.setAttribute('href', window.URL.createObjectURL(blob));

					//set file title
					element.setAttribute('download', filename);

					//trigger download
					element.style.display = 'none';
					document.body.appendChild(element);
					element.click();

					//remove temporary link element
					document.body.removeChild(element);
				}
			}

			this.dispatchExternal("downloadComplete");
		}
	}

	commsReceived(table, action, data){
		switch(action){
			case "intercept":
				this.download(data.type, "", data.options, data.active, data.intercept);
				break;
		}
	}
}

function maskInput(el, options){
	var mask = options.mask,
	maskLetter = typeof options.maskLetterChar !== "undefined" ? options.maskLetterChar : "A",
	maskNumber = typeof options.maskNumberChar !== "undefined" ? options.maskNumberChar : "9",
	maskWildcard = typeof options.maskWildcardChar !== "undefined" ? options.maskWildcardChar : "*";

	function fillSymbols(index){
		var symbol = mask[index];
		if(typeof symbol !== "undefined" && symbol !== maskWildcard && symbol !== maskLetter && symbol !== maskNumber){
			el.value = el.value + "" + symbol;
			fillSymbols(index+1);
		}
	}

	el.addEventListener("keydown", (e) => {
		var index = el.value.length,
		char = e.key;

		if(e.keyCode > 46 && !e.ctrlKey && !e.metaKey){
			if(index >= mask.length){
				e.preventDefault();
				e.stopPropagation();
				return false;
			}else {
				switch(mask[index]){
					case maskLetter:
						if(char.toUpperCase() == char.toLowerCase()){
							e.preventDefault();
							e.stopPropagation();
							return false;
						}
						break;

					case maskNumber:
						if(isNaN(char)){
							e.preventDefault();
							e.stopPropagation();
							return false;
						}
						break;

					case maskWildcard:
						break;

					default:
						if(char !== mask[index]){
							e.preventDefault();
							e.stopPropagation();
							return false;
						}
				}
			}
		}

		return;
	});

	el.addEventListener("keyup", (e) => {
		if(e.keyCode > 46){
			if(options.maskAutoFill){
				fillSymbols(el.value.length);
			}
		}
	});


	if(!el.placeholder){
		el.placeholder = mask;
	}

	if(options.maskAutoFill){
		fillSymbols(el.value.length);
	}
}

//input element
function input(cell, onRendered, success, cancel, editorParams){
	//create and style input
	var cellValue = cell.getValue(),
	input = document.createElement("input");

	input.setAttribute("type", editorParams.search ? "search" : "text");

	input.style.padding = "4px";
	input.style.width = "100%";
	input.style.boxSizing = "border-box";

	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}

	input.value = typeof cellValue !== "undefined" ? cellValue : "";

	onRendered(function(){
		if(cell.getType() === "cell"){
			input.focus({preventScroll: true});
			input.style.height = "100%";

			if(editorParams.selectContents){
				input.select();
			}
		}
	});

	function onChange(e){
		if(((cellValue === null || typeof cellValue === "undefined") && input.value !== "") || input.value !== cellValue){
			if(success(input.value)){
				cellValue = input.value; //persist value if successfully validated incase editor is used as header filter
			}
		}else {
			cancel();
		}
	}

	//submit new value on blur or change
	input.addEventListener("change", onChange);
	input.addEventListener("blur", onChange);

	//submit new value on enter
	input.addEventListener("keydown", function(e){
		switch(e.keyCode){
			// case 9:
			case 13:
				onChange();
				break;

			case 27:
				cancel();
				break;

			case 35:
			case 36:
				e.stopPropagation();
				break;
		}
	});

	if(editorParams.mask){
		maskInput(input, editorParams);
	}

	return input;
}

//resizable text area element
function textarea$1(cell, onRendered, success, cancel, editorParams){
	var cellValue = cell.getValue(),
	vertNav = editorParams.verticalNavigation || "hybrid",
	value = String(cellValue !== null && typeof cellValue !== "undefined"  ? cellValue : ""),
	input = document.createElement("textarea"),
	scrollHeight = 0;

	//create and style input
	input.style.display = "block";
	input.style.padding = "2px";
	input.style.height = "100%";
	input.style.width = "100%";
	input.style.boxSizing = "border-box";
	input.style.whiteSpace = "pre-wrap";
	input.style.resize = "none";

	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}

	input.value = value;

	onRendered(function(){
		if(cell.getType() === "cell"){
			input.focus({preventScroll: true});
			input.style.height = "100%";

			input.scrollHeight;
			input.style.height = input.scrollHeight + "px";
			cell.getRow().normalizeHeight();

			if(editorParams.selectContents){
				input.select();
			}
		}
	});

	function onChange(e){

		if(((cellValue === null || typeof cellValue === "undefined") && input.value !== "") || input.value !== cellValue){

			if(success(input.value)){
				cellValue = input.value; //persist value if successfully validated incase editor is used as header filter
			}

			setTimeout(function(){
				cell.getRow().normalizeHeight();
			},300);
		}else {
			cancel();
		}
	}

	//submit new value on blur or change
	input.addEventListener("change", onChange);
	input.addEventListener("blur", onChange);

	input.addEventListener("keyup", function(){

		input.style.height = "";

		var heightNow = input.scrollHeight;

		input.style.height = heightNow + "px";

		if(heightNow != scrollHeight){
			scrollHeight = heightNow;
			cell.getRow().normalizeHeight();
		}
	});

	input.addEventListener("keydown", function(e){

		switch(e.keyCode){

			case 13:
				if(e.shiftKey && editorParams.shiftEnterSubmit){
					onChange();
				}
				break;

			case 27:
				cancel();
				break;

			case 38: //up arrow
				if(vertNav == "editor" || (vertNav == "hybrid" && input.selectionStart)){
					e.stopImmediatePropagation();
					e.stopPropagation();
				}

				break;

			case 40: //down arrow
				if(vertNav == "editor" || (vertNav == "hybrid" && input.selectionStart !== input.value.length)){
					e.stopImmediatePropagation();
					e.stopPropagation();
				}
				break;

			case 35:
			case 36:
				e.stopPropagation();
				break;
		}
	});

	if(editorParams.mask){
		maskInput(input, editorParams);
	}

	return input;
}

//input element with type of number
function number$1(cell, onRendered, success, cancel, editorParams){
	var cellValue = cell.getValue(),
	vertNav = editorParams.verticalNavigation || "editor",
	input = document.createElement("input");

	input.setAttribute("type", "number");

	if(typeof editorParams.max != "undefined"){
		input.setAttribute("max", editorParams.max);
	}

	if(typeof editorParams.min != "undefined"){
		input.setAttribute("min", editorParams.min);
	}

	if(typeof editorParams.step != "undefined"){
		input.setAttribute("step", editorParams.step);
	}

	//create and style input
	input.style.padding = "4px";
	input.style.width = "100%";
	input.style.boxSizing = "border-box";

	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}

	input.value = cellValue;

	var blurFunc = function(e){
		onChange();
	};

	onRendered(function () {
		if(cell.getType() === "cell"){
			//submit new value on blur
			input.removeEventListener("blur", blurFunc);

			input.focus({preventScroll: true});
			input.style.height = "100%";

			//submit new value on blur
			input.addEventListener("blur", blurFunc);

			if(editorParams.selectContents){
				input.select();
			}
		}
	});

	function onChange(){
		var value = input.value;

		if(!isNaN(value) && value !==""){
			value = Number(value);
		}

		if(value !== cellValue){
			if(success(value)){
				cellValue = value; //persist value if successfully validated incase editor is used as header filter
			}
		}else {
			cancel();
		}
	}

	//submit new value on enter
	input.addEventListener("keydown", function(e){
		switch(e.keyCode){
			case 13:
			// case 9:
				onChange();
				break;

			case 27:
				cancel();
				break;

			case 38: //up arrow
			case 40: //down arrow
				if(vertNav == "editor"){
					e.stopImmediatePropagation();
					e.stopPropagation();
				}
				break;

			case 35:
			case 36:
				e.stopPropagation();
				break;
		}
	});

	if(editorParams.mask){
		maskInput(input, editorParams);
	}

	return input;
}

//input element with type of number
function range(cell, onRendered, success, cancel, editorParams){
	var cellValue = cell.getValue(),
	input = document.createElement("input");
	
	input.setAttribute("type", "range");
	
	if (typeof editorParams.max != "undefined") {
		input.setAttribute("max", editorParams.max);
	}
	
	if (typeof editorParams.min != "undefined") {
		input.setAttribute("min", editorParams.min);
	}
	
	if (typeof editorParams.step != "undefined") {
		input.setAttribute("step", editorParams.step);
	}
	
	//create and style input
	input.style.padding = "4px";
	input.style.width = "100%";
	input.style.boxSizing = "border-box";
	
	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}
	
	input.value = cellValue;
	
	onRendered(function () {
		if(cell.getType() === "cell"){
			input.focus({preventScroll: true});
			input.style.height = "100%";
		}
	});
	
	function onChange(){
		var value = input.value;
		
		if(!isNaN(value) && value !==""){
			value = Number(value);
		}
		
		if(value != cellValue){
			if(success(value)){
				cellValue = value; //persist value if successfully validated incase editor is used as header filter
			}
		}else {
			cancel();
		}
	}
	
	//submit new value on blur
	input.addEventListener("blur", function(e){
		onChange();
	});
	
	//submit new value on enter
	input.addEventListener("keydown", function(e){
		switch(e.keyCode){
			case 13:
			// case 9:
				onChange();
				break;
			
			case 27:
				cancel();
				break;
		}
	});
	
	return input;
}

//input element
function date$1(cell, onRendered, success, cancel, editorParams){
	var inputFormat = editorParams.format,
	vertNav = editorParams.verticalNavigation || "editor",
	DT = inputFormat ? (window.DateTime || luxon.DateTime) : null;
	
	//create and style input
	var cellValue = cell.getValue(),
	input = document.createElement("input");
	
	function convertDate(value){
		var newDatetime;
		
		if(DT.isDateTime(value)){
			newDatetime = value;
		}else if(inputFormat === "iso"){
			newDatetime = DT.fromISO(String(value));
		}else {
			newDatetime = DT.fromFormat(String(value), inputFormat);
		}
		
		return newDatetime.toFormat("yyyy-MM-dd");
	}
	
	input.type = "date";
	input.style.padding = "4px";
	input.style.width = "100%";
	input.style.boxSizing = "border-box";

	if(editorParams.max){
		input.setAttribute("max", inputFormat ? convertDate(editorParams.max) : editorParams.max);
	}

	if(editorParams.min){
		input.setAttribute("min", inputFormat ? convertDate(editorParams.min) : editorParams.min);
	}
	
	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}
	
	cellValue = typeof cellValue !== "undefined" ? cellValue : "";
	
	if(inputFormat){
		if(DT){		
			cellValue = convertDate(cellValue);			
		}else {
			console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
		}
	}
	
	input.value = cellValue;
	
	onRendered(function(){
		if(cell.getType() === "cell"){
			input.focus({preventScroll: true});
			input.style.height = "100%";
			
			if(editorParams.selectContents){
				input.select();
			}
		}
	});
	
	function onChange(){
		var value = input.value,
		luxDate;
		
		if(((cellValue === null || typeof cellValue === "undefined") && value !== "") || value !== cellValue){
			
			if(value && inputFormat){
				luxDate = DT.fromFormat(String(value), "yyyy-MM-dd");

				switch(inputFormat){
					case true:
						value = luxDate;
						break;

					case "iso":
						value = luxDate.toISO();
						break;

					default:
						value = luxDate.toFormat(inputFormat);
				}
			}
			
			if(success(value)){
				cellValue = input.value; //persist value if successfully validated incase editor is used as header filter
			}
		}else {
			cancel();
		}
	}
	
	//submit new value on blur
	input.addEventListener("blur", function(e) {
		if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input) {
			onChange(); // only on a "true" blur; not when focusing browser's date/time picker
		}
	});
	
	//submit new value on enter
	input.addEventListener("keydown", function(e){
		switch(e.keyCode){
			// case 9:
			case 13:
				onChange();
				break;
			
			case 27:
				cancel();
				break;
			
			case 35:
			case 36:
				e.stopPropagation();
				break;
			
			case 38: //up arrow
			case 40: //down arrow
				if(vertNav == "editor"){
					e.stopImmediatePropagation();
					e.stopPropagation();
				}
				break;
		}
	});
	
	return input;
}

//input element
function time$1(cell, onRendered, success, cancel, editorParams){
	var inputFormat = editorParams.format,
	vertNav = editorParams.verticalNavigation || "editor",
	DT = inputFormat ? (window.DateTime || luxon.DateTime) : null, 
	newDatetime;
	
	//create and style input
	var cellValue = cell.getValue(),
	input = document.createElement("input");
	
	input.type = "time";
	input.style.padding = "4px";
	input.style.width = "100%";
	input.style.boxSizing = "border-box";
	
	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}
	
	cellValue = typeof cellValue !== "undefined" ? cellValue : "";
	
	if(inputFormat){
		if(DT){
			if(DT.isDateTime(cellValue)){
				newDatetime = cellValue;
			}else if(inputFormat === "iso"){
				newDatetime = DT.fromISO(String(cellValue));
			}else {
				newDatetime = DT.fromFormat(String(cellValue), inputFormat);
			}
			
			cellValue = newDatetime.toFormat("HH:mm");
			
		}else {
			console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
		}
	}
	
	input.value = cellValue;
	
	onRendered(function(){
		if(cell.getType() == "cell"){
			input.focus({preventScroll: true});
			input.style.height = "100%";
			
			if(editorParams.selectContents){
				input.select();
			}
		}
	});
	
	function onChange(){
		var value = input.value,
		luxTime;
		
		if(((cellValue === null || typeof cellValue === "undefined") && value !== "") || value !== cellValue){
			
			if(value && inputFormat){
				luxTime = DT.fromFormat(String(value), "hh:mm");

				switch(inputFormat){
					case true:
						value = luxTime;
						break;

					case "iso":
						value = luxTime.toISO();
						break;

					default:
						value = luxTime.toFormat(inputFormat);
				}
			}
			
			if(success(value)){
				cellValue = input.value; //persist value if successfully validated incase editor is used as header filter
			}
		}else {
			cancel();
		}
	}
	
	//submit new value on blur
	input.addEventListener("blur", function(e) {
		if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input) {
			onChange(); // only on a "true" blur; not when focusing browser's date/time picker
		}
	});
	
	//submit new value on enter
	input.addEventListener("keydown", function(e){
		switch(e.keyCode){
			// case 9:
			case 13:
				onChange();
				break;
			
			case 27:
				cancel();
				break;
			
			case 35:
			case 36:
				e.stopPropagation();
				break;

			case 38: //up arrow
			case 40: //down arrow
				if(vertNav == "editor"){
					e.stopImmediatePropagation();
					e.stopPropagation();
				}
				break;
		}
	});
	
	return input;
}

//input element
function datetime$2(cell, onRendered, success, cancel, editorParams){
	var inputFormat = editorParams.format,
	vertNav = editorParams.verticalNavigation || "editor",
	DT = inputFormat ? (this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime")) : null, 
	newDatetime;
	
	//create and style input
	var cellValue = cell.getValue(),
	input = document.createElement("input");
	
	input.type = "datetime-local";
	input.style.padding = "4px";
	input.style.width = "100%";
	input.style.boxSizing = "border-box";
	
	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}
	
	cellValue = typeof cellValue !== "undefined" ? cellValue : "";
	
	if(inputFormat){
		if(DT){
			if(DT.isDateTime(cellValue)){
				newDatetime = cellValue;
			}else if(inputFormat === "iso"){
				newDatetime = DT.fromISO(String(cellValue));
			}else {
				newDatetime = DT.fromFormat(String(cellValue), inputFormat);
			}
			
			cellValue = newDatetime.toFormat("yyyy-MM-dd")  + "T" + newDatetime.toFormat("HH:mm");
		}else {
			console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
		}
	}
	
	input.value = cellValue;
	
	onRendered(function(){
		if(cell.getType() === "cell"){
			input.focus({preventScroll: true});
			input.style.height = "100%";
			
			if(editorParams.selectContents){
				input.select();
			}
		}
	});
	
	function onChange(){
		var value = input.value,
		luxDateTime;
		
		if(((cellValue === null || typeof cellValue === "undefined") && value !== "") || value !== cellValue){

			if(value && inputFormat){
				luxDateTime = DT.fromISO(String(value));

				switch(inputFormat){
					case true:
						value = luxDateTime;
						break;

					case "iso":
						value = luxDateTime.toISO();
						break;

					default:
						value = luxDateTime.toFormat(inputFormat);
				}
			}
			
			if(success(value)){
				cellValue = input.value; //persist value if successfully validated incase editor is used as header filter
			}
		}else {
			cancel();
		}
	}
	
	//submit new value on blur
	input.addEventListener("blur", function(e) {
		if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input) {
			onChange(); // only on a "true" blur; not when focusing browser's date/time picker
		}
	});
	
	//submit new value on enter
	input.addEventListener("keydown", function(e){
		switch(e.keyCode){
			// case 9:
			case 13:
				onChange();
				break;
			
			case 27:
				cancel();
				break;
			
			case 35:
			case 36:
				e.stopPropagation();
				break;

			case 38: //up arrow
			case 40: //down arrow
				if(vertNav == "editor"){
					e.stopImmediatePropagation();
					e.stopPropagation();
				}
				break;
		}
	});
	
	return input;
}

let Edit$1 = class Edit{
	constructor(editor, cell, onRendered, success, cancel, editorParams){
		this.edit = editor;
		this.table = editor.table;
		this.cell = cell;
		this.params = this._initializeParams(editorParams);
		
		this.data = [];
		this.displayItems = [];
		this.currentItems = [];
		this.focusedItem = null;
		
		this.input = this._createInputElement();
		this.listEl = this._createListElement();
		
		this.initialValues = null; 
		
		this.isFilter = cell.getType() === "header";
		
		this.filterTimeout = null;
		this.filtered = false;
		this.typing = false;
		
		this.values = []; 
		this.popup = null;  
		
		this.listIteration = 0;
		
		this.lastAction="";
		this.filterTerm="";
		
		this.blurable = true;
		
		this.actions = {
			success:success,
			cancel:cancel
		};
		
		this._deprecatedOptionsCheck();
		this._initializeValue();
		
		onRendered(this._onRendered.bind(this));
	}
	
	_deprecatedOptionsCheck(){
		// if(this.params.listItemFormatter){
		// 	this.cell.getTable().deprecationAdvisor.msg("The listItemFormatter editor param has been deprecated, please see the latest editor documentation for updated options");
		// }
		
		// if(this.params.sortValuesList){
		// 	this.cell.getTable().deprecationAdvisor.msg("The sortValuesList editor param has been deprecated, please see the latest editor documentation for updated options");
		// }
		
		// if(this.params.searchFunc){
		// 	this.cell.getTable().deprecationAdvisor.msg("The searchFunc editor param has been deprecated, please see the latest editor documentation for updated options");
		// }
		
		// if(this.params.searchingPlaceholder){
		// 	this.cell.getTable().deprecationAdvisor.msg("The searchingPlaceholder editor param has been deprecated, please see the latest editor documentation for updated options");
		// }
	}
	
	_initializeValue(){
		var initialValue = this.cell.getValue();
		
		if(typeof initialValue === "undefined" && typeof this.params.defaultValue !== "undefined"){
			initialValue = this.params.defaultValue;
		}
		
		this.initialValues = this.params.multiselect ? initialValue : [initialValue];
		
		if(this.isFilter){
			this.input.value = this.initialValues ? this.initialValues.join(",") : "";
			this.headerFilterInitialListGen();            
		}
	}
	
	_onRendered(){
		var cellEl = this.cell.getElement();
		
		function clickStop(e){
			e.stopPropagation();
		}	
		
		if(!this.isFilter){
			this.input.style.height = "100%";
			this.input.focus({preventScroll: true});
		}
		
		
		cellEl.addEventListener("click", clickStop);
		
		setTimeout(() => {
			cellEl.removeEventListener("click", clickStop);
		}, 1000);
		
		this.input.addEventListener("mousedown", this._preventPopupBlur.bind(this));
	}
	
	_createListElement(){
		var listEl = document.createElement("div");
		listEl.classList.add("tabulator-edit-list");
		
		listEl.addEventListener("mousedown", this._preventBlur.bind(this));
		listEl.addEventListener("keydown", this._inputKeyDown.bind(this));
		
		return listEl;
	}
	
	_setListWidth(){
		var element = this.isFilter ? this.input : this.cell.getElement();
		
		this.listEl.style.minWidth = element.offsetWidth + "px";
		
		if(this.params.maxWidth){
			if(this.params.maxWidth === true){
				this.listEl.style.maxWidth = element.offsetWidth + "px";
			}else if(typeof this.params.maxWidth === "number"){
				this.listEl.style.maxWidth = this.params.maxWidth + "px";
			}else {
				this.listEl.style.maxWidth = this.params.maxWidth;
			}
		}
		
	}
	
	_createInputElement(){
		var attribs = this.params.elementAttributes;
		var input = document.createElement("input");
		
		input.setAttribute("type", this.params.clearable ? "search" : "text");
		
		input.style.padding = "4px";
		input.style.width = "100%";
		input.style.boxSizing = "border-box";
		
		if(!this.params.autocomplete){
			input.style.cursor = "default";
			input.style.caretColor = "transparent";
			// input.readOnly = (this.edit.currentCell != false);
		}
		
		if(attribs && typeof attribs == "object"){
			for (let key in attribs){
				if(key.charAt(0) == "+"){
					key = key.slice(1);
					input.setAttribute(key, input.getAttribute(key) + attribs["+" + key]);
				}else {
					input.setAttribute(key, attribs[key]);
				}
			}
		}
		
		if(this.params.mask){
			maskInput(input, this.params);
		}
		
		this._bindInputEvents(input);
		
		return input;
	}
	
	_initializeParams(params){
		var valueKeys = ["values", "valuesURL", "valuesLookup"],
		valueCheck;
		
		params = Object.assign({}, params);
		
		params.verticalNavigation = params.verticalNavigation || "editor";
		params.placeholderLoading = typeof params.placeholderLoading === "undefined" ? "Searching ..." : params.placeholderLoading;
		params.placeholderEmpty = typeof params.placeholderEmpty === "undefined" ? "No Results Found" : params.placeholderEmpty;
		params.filterDelay = typeof params.filterDelay === "undefined" ? 300 : params.filterDelay;
		
		params.emptyValue = Object.keys(params).includes("emptyValue") ? params.emptyValue : "";
		
		valueCheck = Object.keys(params).filter(key => valueKeys.includes(key)).length;
		
		if(!valueCheck){
			console.warn("list editor config error - either the values, valuesURL, or valuesLookup option must be set");
		}else if(valueCheck > 1){
			console.warn("list editor config error - only one of the values, valuesURL, or valuesLookup options can be set on the same editor");
		}
		
		if(params.autocomplete){
			if(params.multiselect){
				params.multiselect = false;
				console.warn("list editor config error - multiselect option is not available when autocomplete is enabled");
			}
		}else {
			if(params.freetext){
				params.freetext = false;
				console.warn("list editor config error - freetext option is only available when autocomplete is enabled");
			}
			
			if(params.filterFunc){
				params.filterFunc = false;
				console.warn("list editor config error - filterFunc option is only available when autocomplete is enabled");
			}
			
			if(params.filterRemote){
				params.filterRemote = false;
				console.warn("list editor config error - filterRemote option is only available when autocomplete is enabled");
			}
			
			if(params.mask){
				params.mask = false;
				console.warn("list editor config error - mask option is only available when autocomplete is enabled");
			}
			
			if(params.allowEmpty){
				params.allowEmpty = false;
				console.warn("list editor config error - allowEmpty option is only available when autocomplete is enabled");
			}
			
			if(params.listOnEmpty){
				params.listOnEmpty = false;
				console.warn("list editor config error - listOnEmpty option is only available when autocomplete is enabled");
			}
		}
		
		if(params.filterRemote && !(typeof params.valuesLookup === "function" || params.valuesURL)){
			params.filterRemote = false;
			console.warn("list editor config error - filterRemote option should only be used when values list is populated from a remote source");
		}
		return params;
	}
	//////////////////////////////////////
	////////// Event Handling ////////////
	//////////////////////////////////////
	
	_bindInputEvents(input){
		input.addEventListener("focus", this._inputFocus.bind(this));
		input.addEventListener("click", this._inputClick.bind(this));
		input.addEventListener("blur", this._inputBlur.bind(this));
		input.addEventListener("keydown", this._inputKeyDown.bind(this));
		input.addEventListener("search", this._inputSearch.bind(this));
		
		if(this.params.autocomplete){
			input.addEventListener("keyup", this._inputKeyUp.bind(this));
		}
	}
	
	
	_inputFocus(e){
		this.rebuildOptionsList();
	}
	
	_filter(){
		if(this.params.filterRemote){
			clearTimeout(this.filterTimeout);
			
			this.filterTimeout = setTimeout(() => {
				this.rebuildOptionsList();
			}, this.params.filterDelay);
		}else {
			this._filterList();
		}
	}
	
	_inputClick(e){
		e.stopPropagation();
	}
	
	_inputBlur(e){
		if(this.blurable){
			if(this.popup){
				this.popup.hide();
			}else {
				this._resolveValue(true);
			}
		}
	}
	
	_inputSearch(){
		this._clearChoices();
	}
	
	_inputKeyDown(e){
		switch(e.keyCode){
			
			case 38: //up arrow
				this._keyUp(e);
				break;
			
			case 40: //down arrow
				this._keyDown(e);
				break;
			
			case 37: //left arrow
			case 39: //right arrow
				this._keySide(e);
				break;
			
			case 13: //enter
				this._keyEnter();
				break;
			
			case 27: //escape
				this._keyEsc();
				break;
			
			case 36: //home
			case 35: //end
				this._keyHomeEnd(e);
				break;
			
			case 9: //tab
				this._keyTab(e);
				break;
			
			default:
				this._keySelectLetter(e);
		}
	}
	
	_inputKeyUp(e){
		switch(e.keyCode){
			case 38: //up arrow
			case 37: //left arrow
			case 39: //up arrow
			case 40: //right arrow
			case 13: //enter
			case 27: //escape
				break;
			
			default:
				this._keyAutoCompLetter(e);
		}
	}
	
	_preventPopupBlur(){
		if(this.popup){
			this.popup.blockHide();
		}
		
		setTimeout(() =>{
			if(this.popup){
				this.popup.restoreHide();
			}
		}, 10);
	}
	
	_preventBlur(){
		this.blurable = false;
		
		setTimeout(() =>{
			this.blurable = true;
		}, 10);
	}
	
	//////////////////////////////////////
	//////// Keyboard Navigation /////////
	//////////////////////////////////////
	
	_keyTab(e){
		if(this.params.autocomplete && this.lastAction === "typing"){
			this._resolveValue(true);
		}else {
			if(this.focusedItem){
				this._chooseItem(this.focusedItem, true);
			}
		}
	}
	
	_keyUp(e){
		var index = this.displayItems.indexOf(this.focusedItem);
		
		if(this.params.verticalNavigation == "editor" || (this.params.verticalNavigation == "hybrid" && index)){
			e.stopImmediatePropagation();
			e.stopPropagation();
			e.preventDefault();
			
			if(index > 0){
				this._focusItem(this.displayItems[index - 1]);
			}
		}
	}
	
	_keyDown(e){
		var index = this.displayItems.indexOf(this.focusedItem);
		
		if(this.params.verticalNavigation == "editor" || (this.params.verticalNavigation == "hybrid" && index < this.displayItems.length - 1)){
			e.stopImmediatePropagation();
			e.stopPropagation();
			e.preventDefault();
			
			if(index < this.displayItems.length - 1){
				if(index == -1){
					this._focusItem(this.displayItems[0]);
				}else {
					this._focusItem(this.displayItems[index + 1]);
				}
			}
		}
	}
	
	_keySide(e){
		if(!this.params.autocomplete){
			e.stopImmediatePropagation();
			e.stopPropagation();
			e.preventDefault();
		}
	}
	
	_keyEnter(e){
		if(this.params.autocomplete && this.lastAction === "typing"){
			this._resolveValue(true);
		}else {
			if(this.focusedItem){
				this._chooseItem(this.focusedItem);
			}
		}
	}
	
	_keyEsc(e){
		this._cancel();
	}
	
	_keyHomeEnd(e){
		if(this.params.autocomplete){
			//prevent table navigation while using input element
			e.stopImmediatePropagation();
		}
	}
	
	_keySelectLetter(e){
		if(!this.params.autocomplete){
			// if(this.edit.currentCell === false){
			e.preventDefault();
			// }
			
			if(e.keyCode >= 38 && e.keyCode <= 90){
				this._scrollToValue(e.keyCode);
			}
		}
	}
	
	_keyAutoCompLetter(e){
		this._filter();
		this.lastAction = "typing";
		this.typing = true;
	}
	
	
	_scrollToValue(char){
		clearTimeout(this.filterTimeout);
		
		var character = String.fromCharCode(char).toLowerCase();
		this.filterTerm += character.toLowerCase();
		
		var match = this.displayItems.find((item) => {
			return typeof item.label !== "undefined" && item.label.toLowerCase().startsWith(this.filterTerm);
		});
		
		if(match){
			this._focusItem(match);
		}
		
		this.filterTimeout = setTimeout(() => {
			this.filterTerm = "";
		}, 800);
	}
	
	_focusItem(item){
		this.lastAction = "focus";
		
		if(this.focusedItem && this.focusedItem.element){
			this.focusedItem.element.classList.remove("focused");
		}
		
		this.focusedItem = item;
		
		if(item && item.element){
			item.element.classList.add("focused");
			item.element.scrollIntoView({behavior: 'smooth', block: 'nearest', inline: 'start'});
		}
	}
	
	
	//////////////////////////////////////
	/////// Data List Generation /////////
	//////////////////////////////////////
	headerFilterInitialListGen(){
		this._generateOptions(true);
	}
	
	rebuildOptionsList(){
		this._generateOptions()
			.then(this._sortOptions.bind(this))
			.then(this._buildList.bind(this))
			.then(this._showList.bind(this))
			.catch((e) => {
				if(!Number.isInteger(e)){
					console.error("List generation error", e);
				}
			});
	}
	
	_filterList(){
		this._buildList(this._filterOptions());
		this._showList();
	}
	
	_generateOptions(silent){
		var values = [];
		var iteration = ++ this.listIteration;
		
		this.filtered = false;
		
		if(this.params.values){
			values = this.params.values;
		}else if (this.params.valuesURL){
			values = this._ajaxRequest(this.params.valuesURL, this.input.value);
		}else {
			if(typeof this.params.valuesLookup === "function"){
				values = this.params.valuesLookup(this.cell, this.input.value);
			}else if(this.params.valuesLookup){
				values = this._uniqueColumnValues(this.params.valuesLookupField);
			}
		}
		
		if(values instanceof Promise){
			if(!silent){
				this._addPlaceholder(this.params.placeholderLoading);
			}
			
			return values.then()
				.then((responseValues) => {
					if(this.listIteration === iteration){
						return this._parseList(responseValues);
					}else {
						return Promise.reject(iteration);
					}
				});
		}else {
			return Promise.resolve(this._parseList(values));
		}
	}
	
	_addPlaceholder(contents){
		var placeholder = document.createElement("div");
		
		if(typeof contents === "function"){
			contents = contents(this.cell.getComponent(), this.listEl);
		}
		
		if(contents){
			this._clearList();
			
			if(contents instanceof HTMLElement){
				placeholder = contents;
			}else {
				placeholder.classList.add("tabulator-edit-list-placeholder");
				placeholder.innerHTML = contents;
			}
			
			this.listEl.appendChild(placeholder);
			
			this._showList();
		}
	}
	
	_ajaxRequest(url, term){
		var params = this.params.filterRemote ? {term:term} : {};
		url = urlBuilder(url, {}, params);
		
		return fetch(url)
			.then((response)=>{
				if(response.ok) {
					return response.json()
						.catch((error)=>{
							console.warn("List Ajax Load Error - Invalid JSON returned", error);
							return Promise.reject(error);
						});
				}else {
					console.error("List Ajax Load Error - Connection Error: " + response.status, response.statusText);
					return Promise.reject(response);
				}
			})
			.catch((error)=>{
				console.error("List Ajax Load Error - Connection Error: ", error);
				return Promise.reject(error);
			});
	}
	
	_uniqueColumnValues(field){
		var output = {},
		data = this.table.getData(this.params.valuesLookup),
		column;
		
		if(field){
			column = this.table.columnManager.getColumnByField(field);
		}else {
			column = this.cell.getColumn()._getSelf();
		}
		
		if(column){
			data.forEach((row) => {
				var val = column.getFieldValue(row);
				
				if(!this._emptyValueCheck(val)){
					if(this.params.multiselect && Array.isArray(val)){
						val.forEach((item) => {
							if(!this._emptyValueCheck(item)){
								output[item] = true;
							}
						});
					}else {
						output[val] = true;
					}
					
				}
			});
		}else {
			console.warn("unable to find matching column to create select lookup list:", field);
			output = [];
		}
		
		return Object.keys(output);
	}

	_emptyValueCheck(value){
		return value === null || typeof value === "undefined" || value === "";
	}
	
	_parseList(inputValues){
		var data = [];
		
		if(!Array.isArray(inputValues)){
			inputValues = Object.entries(inputValues).map(([key, value]) => {
				return {
					label:value,
					value:key,
				};
			});
		}
		
		inputValues.forEach((value) => {
			if(typeof value !== "object"){
				value = {
					label:value,
					value:value,
				};
			}
			
			this._parseListItem(value, data, 0);
		});
		
		if(!this.currentItems.length && this.params.freetext){
			this.input.value = this.initialValues;
			this.typing = true;
			this.lastAction = "typing";
		}
		
		this.data = data;
		
		return data;    
	}
	
	_parseListItem(option, data, level){
		var item = {};
		
		if(option.options){
			item = this._parseListGroup(option, level + 1);
		}else {
			item = {
				label:option.label,
				value:option.value,
				itemParams:option.itemParams,
				elementAttributes: option.elementAttributes,
				element:false,
				selected:false,
				visible:true,
				level:level,
				original:option,
			};
			
			if(this.initialValues && this.initialValues.indexOf(option.value) > -1){
				this._chooseItem(item, true);
			}
		}
		
		data.push(item);
	}
	
	_parseListGroup(option, level){
		var item = {
			label:option.label,
			group:true,
			itemParams:option.itemParams,
			elementAttributes:option.elementAttributes,
			element:false,
			visible:true,
			level:level,
			options:[],
			original:option,
		};
		
		option.options.forEach((child) => {
			this._parseListItem(child, item.options, level);
		});
		
		return item;
	}
	
	_sortOptions(options){
		var sorter;
		
		if(this.params.sort){
			sorter = typeof this.params.sort === "function" ? this.params.sort : this._defaultSortFunction.bind(this);
			
			this._sortGroup(sorter, options);
		}
		
		return options;
	}
	
	_sortGroup(sorter, options){
		options.sort((a,b) => {
			return sorter(a.label, b.label, a.value, b.value, a.original, b.original);
		});
		
		options.forEach((option) => {
			if(option.group){
				this._sortGroup(sorter, option.options);
			}
		});
	}
	
	_defaultSortFunction(as, bs){
		var a, b, a1, b1, i= 0, L, rx = /(\d+)|(\D+)/g, rd = /\d/;
		var emptyAlign = 0;
		
		if(this.params.sort === "desc"){
			[as, bs] = [bs, as];
		}
		
		//handle empty values
		if(!as && as!== 0){
			emptyAlign =  !bs && bs!== 0 ? 0 : -1;
		}else if(!bs && bs!== 0){
			emptyAlign =  1;
		}else {
			if(isFinite(as) && isFinite(bs)) return as - bs;
			a = String(as).toLowerCase();
			b = String(bs).toLowerCase();
			if(a === b) return 0;
			if(!(rd.test(a) && rd.test(b))) return a > b ? 1 : -1;
			a = a.match(rx);
			b = b.match(rx);
			L = a.length > b.length ? b.length : a.length;
			while(i < L){
				a1= a[i];
				b1= b[i++];
				if(a1 !== b1){
					if(isFinite(a1) && isFinite(b1)){
						if(a1.charAt(0) === "0") a1 = "." + a1;
						if(b1.charAt(0) === "0") b1 = "." + b1;
						return a1 - b1;
					}
					else return a1 > b1 ? 1 : -1;
				}
			}
			
			return a.length > b.length;
		}
		
		return emptyAlign;
	}
	
	_filterOptions(){
		var filterFunc = this.params.filterFunc || this._defaultFilterFunc,
		term = this.input.value;
		
		if(term){
			this.filtered = true;
			
			this.data.forEach((item) => {
				this._filterItem(filterFunc, term, item);
			});
		}else {
			this.filtered = false;
		}
		
		return this.data;
	}
	
	_filterItem(func, term, item){
		var matches = false;
		
		if(!item.group){
			item.visible = func(term, item.label, item.value, item.original);
		}else {
			item.options.forEach((option) => {
				if(this._filterItem(func, term, option)){
					matches = true;
				}
			});
			
			item.visible = matches;
		}
		
		return item.visible;
	}
	
	_defaultFilterFunc(term, label, value, item){
		term = String(term).toLowerCase();
		
		if(label !== null && typeof label !== "undefined"){
			if(String(label).toLowerCase().indexOf(term) > -1 || String(value).toLowerCase().indexOf(term) > -1){
				return true;
			}
		}
		
		return false;
	}
	
	//////////////////////////////////////
	/////////// Display List /////////////
	//////////////////////////////////////
	
	_clearList(){
		while(this.listEl.firstChild) this.listEl.removeChild(this.listEl.firstChild);
		
		this.displayItems = [];
	}
	
	_buildList(data){
		this._clearList();
		
		data.forEach((option) => {
			this._buildItem(option);
		});
		
		if(!this.displayItems.length){
			this._addPlaceholder(this.params.placeholderEmpty);
		}  
	}
	
	_buildItem(item){
		var el = item.element,
		contents;
		
		if(!this.filtered || item.visible){
			
			if(!el){
				el = document.createElement("div");
				el.tabIndex = 0;
				
				contents = this.params.itemFormatter ? this.params.itemFormatter(item.label, item.value, item.original, el) : item.label;
				
				if(contents instanceof HTMLElement){
					el.appendChild(contents);
				}else {
					el.innerHTML = contents;
				}
				
				if(item.group){
					el.classList.add("tabulator-edit-list-group");
				}else {
					el.classList.add("tabulator-edit-list-item");
				}
				
				el.classList.add("tabulator-edit-list-group-level-" + item.level);
				
				if(item.elementAttributes && typeof item.elementAttributes == "object"){
					for (let key in item.elementAttributes){
						if(key.charAt(0) == "+"){
							key = key.slice(1);
							el.setAttribute(key, this.input.getAttribute(key) + item.elementAttributes["+" + key]);
						}else {
							el.setAttribute(key, item.elementAttributes[key]);
						}
					}
				}
				
				if(item.group){
					el.addEventListener("click", this._groupClick.bind(this, item));
				}else {
					el.addEventListener("click", this._itemClick.bind(this, item));
				}
				
				el.addEventListener("mousedown", this._preventBlur.bind(this));
				
				item.element = el;
			}
			
			this._styleItem(item);
			
			this.listEl.appendChild(el);
			
			if(item.group){
				item.options.forEach((option) => {
					this._buildItem(option);
				});
			}else {
				this.displayItems.push(item);
			}
		}
	}
	
	_showList(){
		var startVis = this.popup && this.popup.isVisible();
		
		if(this.input.parentNode){
			if(this.params.autocomplete && this.input.value === "" && !this.params.listOnEmpty){
				if(this.popup){
					this.popup.hide(true);
				}
				return;
			}
			
			this._setListWidth();
			
			if(!this.popup){
				this.popup = this.edit.popup(this.listEl);
			}
			
			this.popup.show(this.cell.getElement(), "bottom");
			
			if(!startVis){
				setTimeout(() => {
					this.popup.hideOnBlur(this._resolveValue.bind(this, true));
				}, 10);
			}
		}
	}
	
	_styleItem(item){
		if(item && item.element){
			if(item.selected){
				item.element.classList.add("active");
			}else {
				item.element.classList.remove("active");
			}
		}
	}
	
	//////////////////////////////////////
	///////// User Interaction ///////////
	//////////////////////////////////////
	
	_itemClick(item, e){
		e.stopPropagation();
		
		this._chooseItem(item);
	}
	
	_groupClick(item, e){
		e.stopPropagation();
	}
	
	
	//////////////////////////////////////
	////// Current Item Management ///////
	//////////////////////////////////////
	
	_cancel(){
		this.popup.hide(true);
		this.actions.cancel();
	}
	
	_clearChoices(){
		this.typing = true;
		
		this.currentItems.forEach((item) => {
			item.selected = false;
			this._styleItem(item);
		});
		
		this.currentItems = [];
		
		this.focusedItem = null;
	}
	
	_chooseItem(item, silent){
		var index;
		
		this.typing = false;
		
		if(this.params.multiselect){
			index = this.currentItems.indexOf(item);
			
			if(index > -1){
				this.currentItems.splice(index, 1);
				item.selected = false;
			}else {
				this.currentItems.push(item);
				item.selected = true;
			}
			
			this.input.value = this.currentItems.map(item => item.label).join(",");
			
			this._styleItem(item);
			
		}else {
			this.currentItems = [item];
			item.selected = true;
			
			this.input.value = item.label;
			
			this._styleItem(item);
			
			if(!silent){
				this._resolveValue();
			}
		}
		
		this._focusItem(item);
	}
	
	_resolveValue(blur){
		var output, initialValue;
		
		if(this.popup){
			this.popup.hide(true);
		}
		
		if(this.params.multiselect){
			output = this.currentItems.map(item => item.value);
		}else {
			if(blur && this.params.autocomplete && this.typing){
				if(this.params.freetext || (this.params.allowEmpty && this.input.value === "")){
					output = this.input.value;
				}else {
					this.actions.cancel();
					return;
				}
			}else {
				if(this.currentItems[0]){
					output = this.currentItems[0].value;
				}else {
					initialValue = Array.isArray(this.initialValues) ? this.initialValues[0] : this.initialValues;
					
					if(initialValue === null || typeof initialValue === "undefined" || initialValue === ""){
						output = initialValue;
					}else {
						output = this.params.emptyValue;
					}
				}
				
			}
		}
		
		if(output === ""){
			output = this.params.emptyValue;
		}
		
		this.actions.success(output);
		
		if(this.isFilter){
			this.initialValues = output && !Array.isArray(output) ? [output] : output;
			this.currentItems = [];
		}
	}
	
};

function list(cell, onRendered, success, cancel, editorParams){
	var list = new Edit$1(this, cell, onRendered, success, cancel, editorParams);

	return list.input;
}

//star rating
function star$1(cell, onRendered, success, cancel, editorParams){
	var self = this,
	element = cell.getElement(),
	value = cell.getValue(),
	maxStars = element.getElementsByTagName("svg").length || 5,
	size = element.getElementsByTagName("svg")[0] ? element.getElementsByTagName("svg")[0].getAttribute("width") : 14,
	stars = [],
	starsHolder = document.createElement("div"),
	star = document.createElementNS('http://www.w3.org/2000/svg', "svg");


	//change star type
	function starChange(val){
		stars.forEach(function(star, i){
			if(i < val){
				if(self.table.browser == "ie"){
					star.setAttribute("class", "tabulator-star-active");
				}else {
					star.classList.replace("tabulator-star-inactive", "tabulator-star-active");
				}

				star.innerHTML = '<polygon fill="#488CE9" stroke="#014AAE" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
			}else {
				if(self.table.browser == "ie"){
					star.setAttribute("class", "tabulator-star-inactive");
				}else {
					star.classList.replace("tabulator-star-active", "tabulator-star-inactive");
				}

				star.innerHTML = '<polygon fill="#010155" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
			}
		});
	}

	//build stars
	function buildStar(i){

		var starHolder =  document.createElement("span");
		var nextStar = star.cloneNode(true);

		stars.push(nextStar);

		starHolder.addEventListener("mouseenter", function(e){
			e.stopPropagation();
			e.stopImmediatePropagation();
			starChange(i);
		});

		starHolder.addEventListener("mousemove", function(e){
			e.stopPropagation();
			e.stopImmediatePropagation();
		});

		starHolder.addEventListener("click", function(e){
			e.stopPropagation();
			e.stopImmediatePropagation();
			success(i);
			element.blur();
		});

		starHolder.appendChild(nextStar);
		starsHolder.appendChild(starHolder);

	}

	//handle keyboard navigation value change
	function changeValue(val){
		value = val;
		starChange(val);
	}

	//style cell
	element.style.whiteSpace = "nowrap";
	element.style.overflow = "hidden";
	element.style.textOverflow = "ellipsis";

	//style holding element
	starsHolder.style.verticalAlign = "middle";
	starsHolder.style.display = "inline-block";
	starsHolder.style.padding = "4px";

	//style star
	star.setAttribute("width", size);
	star.setAttribute("height", size);
	star.setAttribute("viewBox", "0 0 512 512");
	star.setAttribute("xml:space", "preserve");
	star.style.padding = "0 1px";

	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				starsHolder.setAttribute(key, starsHolder.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				starsHolder.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}

	//create correct number of stars
	for(var i=1;i<= maxStars;i++){
		buildStar(i);
	}

	//ensure value does not exceed number of stars
	value = Math.min(parseInt(value), maxStars);

	// set initial styling of stars
	starChange(value);

	starsHolder.addEventListener("mousemove", function(e){
		starChange(0);
	});

	starsHolder.addEventListener("click", function(e){
		success(0);
	});

	element.addEventListener("blur", function(e){
		cancel();
	});

	//allow key based navigation
	element.addEventListener("keydown", function(e){
		switch(e.keyCode){
			case 39: //right arrow
				changeValue(value + 1);
				break;

			case 37: //left arrow
				changeValue(value - 1);
				break;

			case 13: //enter
				success(value);
				break;

			case 27: //escape
				cancel();
				break;
		}
	});

	return starsHolder;
}

//draggable progress bar
function progress$1(cell, onRendered, success, cancel, editorParams){
	var element = cell.getElement(),
	max = typeof editorParams.max === "undefined" ? ((element.getElementsByTagName("div")[0] && element.getElementsByTagName("div")[0].getAttribute("max")) || 100) : editorParams.max,
	min = typeof editorParams.min === "undefined" ? ((element.getElementsByTagName("div")[0] && element.getElementsByTagName("div")[0].getAttribute("min")) || 0) : editorParams.min,
	percent = (max - min) / 100,
	value = cell.getValue() || 0,
	handle = document.createElement("div"),
	bar = document.createElement("div"),
	mouseDrag, mouseDragWidth;

	//set new value
	function updateValue(){
		var style = window.getComputedStyle(element, null);

		var calcVal = (percent * Math.round(bar.offsetWidth / ((element.clientWidth - parseInt(style.getPropertyValue("padding-left")) - parseInt(style.getPropertyValue("padding-right")))/100))) + min;
		success(calcVal);
		element.setAttribute("aria-valuenow", calcVal);
		element.setAttribute("aria-label", value);
	}

	//style handle
	handle.style.position = "absolute";
	handle.style.right = "0";
	handle.style.top = "0";
	handle.style.bottom = "0";
	handle.style.width = "5px";
	handle.classList.add("tabulator-progress-handle");

	//style bar
	bar.style.display = "inline-block";
	bar.style.position = "relative";
	// bar.style.top = "8px";
	// bar.style.bottom = "8px";
	// bar.style.left = "4px";
	// bar.style.marginRight = "4px";
	bar.style.height = "100%";
	bar.style.backgroundColor = "#488CE9";
	bar.style.maxWidth = "100%";
	bar.style.minWidth = "0%";

	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				bar.setAttribute(key, bar.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				bar.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}

	//style cell
	element.style.padding = "4px 4px";

	//make sure value is in range
	value = Math.min(parseFloat(value), max);
	value = Math.max(parseFloat(value), min);

	//workout percentage
	value = Math.round((value - min) / percent);
	// bar.style.right = value + "%";
	bar.style.width = value + "%";

	element.setAttribute("aria-valuemin", min);
	element.setAttribute("aria-valuemax", max);

	bar.appendChild(handle);

	handle.addEventListener("mousedown", function(e){
		mouseDrag = e.screenX;
		mouseDragWidth = bar.offsetWidth;
	});

	handle.addEventListener("mouseover", function(){
		handle.style.cursor = "ew-resize";
	});

	element.addEventListener("mousemove", function(e){
		if(mouseDrag){
			bar.style.width = (mouseDragWidth + e.screenX - mouseDrag) + "px";
		}
	});

	element.addEventListener("mouseup", function(e){
		if(mouseDrag){
			e.stopPropagation();
			e.stopImmediatePropagation();

			mouseDrag = false;
			mouseDragWidth = false;

			updateValue();
		}
	});

	//allow key based navigation
	element.addEventListener("keydown", function(e){
		switch(e.keyCode){
			case 39: //right arrow
				e.preventDefault();
				bar.style.width = (bar.clientWidth + element.clientWidth/100) + "px";
				break;

			case 37: //left arrow
				e.preventDefault();
				bar.style.width = (bar.clientWidth - element.clientWidth/100) + "px";
				break;

			case 9: //tab
			case 13: //enter
				updateValue();
				break;

			case 27: //escape
				cancel();
				break;

		}
	});

	element.addEventListener("blur", function(){
		cancel();
	});

	return bar;
}

//checkbox
function tickCross$1(cell, onRendered, success, cancel, editorParams){
	var value = cell.getValue(),
	input = document.createElement("input"),
	tristate = editorParams.tristate,
	indetermValue = typeof editorParams.indeterminateValue === "undefined" ? null : editorParams.indeterminateValue,
	indetermState = false,
	trueValueSet = Object.keys(editorParams).includes("trueValue"),
	falseValueSet = Object.keys(editorParams).includes("falseValue");
	
	input.setAttribute("type", "checkbox");
	input.style.marginTop = "5px";
	input.style.boxSizing = "border-box";
	
	if(editorParams.elementAttributes && typeof editorParams.elementAttributes == "object"){
		for (let key in editorParams.elementAttributes){
			if(key.charAt(0) == "+"){
				key = key.slice(1);
				input.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes["+" + key]);
			}else {
				input.setAttribute(key, editorParams.elementAttributes[key]);
			}
		}
	}
	
	input.value = value;
	
	if(tristate && (typeof value === "undefined" || value === indetermValue || value === "")){
		indetermState = true;
		input.indeterminate = true;
	}
	
	if(this.table.browser != "firefox" && this.table.browser != "safari"){ //prevent blur issue on mac firefox
		onRendered(function(){
			if(cell.getType() === "cell"){
				input.focus({preventScroll: true});
			}
		});
	}
	
	input.checked = trueValueSet ? value === editorParams.trueValue : (value === true || value === "true" || value === "True" || value === 1);
	
	function setValue(blur){
		var checkedValue = input.checked;
		
		if(trueValueSet && checkedValue){
			checkedValue = editorParams.trueValue;
		}else if(falseValueSet && !checkedValue){
			checkedValue = editorParams.falseValue;
		}
		
		if(tristate){
			if(!blur){
				if(input.checked && !indetermState){
					input.checked = false;
					input.indeterminate = true;
					indetermState = true;
					return indetermValue;
				}else {
					indetermState = false;
					return checkedValue;
				}
			}else {
				if(indetermState){
					return indetermValue;
				}else {
					return checkedValue;
				}
			}
		}else {
			return checkedValue;
		}
	}
	
	//submit new value on blur
	input.addEventListener("change", function(e){
		success(setValue());
	});

	input.addEventListener("blur", function(e){
		success(setValue(true));
	});
	
	//submit new value on enter
	input.addEventListener("keydown", function(e){
		if(e.keyCode == 13){
			success(setValue());
		}
		if(e.keyCode == 27){
			cancel();
		}
	});
	
	return input;
}

function adaptable$1(cell, onRendered, success, cancel, params){
	var column = cell._getSelf().column,
	lookup, editorFunc, editorParams;
    
	function defaultLookup(cell){
		var value = cell.getValue(),
		editor = "input";
        
		switch(typeof value){
			case "number":
				editor = "number";
				break;
            
			case "boolean":
				editor = "tickCross";
				break;
            
			case "string":
				if(value.includes("\n")){
					editor = "textarea";
				}
				break;
		}
        
		return editor;
	}
    
	lookup = params.editorLookup ? params.editorLookup(cell) : defaultLookup(cell);

	if(params.paramsLookup){
		editorParams = typeof params.paramsLookup === "function" ? params.paramsLookup(lookup, cell) : params.paramsLookup[lookup];
	}

	editorFunc = this.table.modules.edit.lookupEditor(lookup, column);
    
	return  editorFunc.call(this, cell, onRendered, success, cancel, editorParams || {});
}

var defaultEditors = {
	input:input,
	textarea:textarea$1,
	number:number$1,
	range:range,
	date:date$1,
	time:time$1,
	datetime:datetime$2,
	list:list,
	star:star$1,
	progress:progress$1,
	tickCross:tickCross$1,
	adaptable:adaptable$1,
};

class Edit extends Module{

	static moduleName = "edit";

	//load defaults
	static editors = defaultEditors;
	
	constructor(table){
		super(table);
		
		this.currentCell = false; //hold currently editing cell
		this.mouseClick = false; //hold mousedown state to prevent click binding being overridden by editor opening
		this.recursionBlock = false; //prevent focus recursion
		this.invalidEdit = false;
		this.editedCells = [];
		this.convertEmptyValues = false;
		
		this.editors = Edit.editors;
	
		this.registerTableOption("editTriggerEvent", "focus");
		this.registerTableOption("editorEmptyValue");
		this.registerTableOption("editorEmptyValueFunc", this.emptyValueCheck.bind(this));

		this.registerColumnOption("editable");
		this.registerColumnOption("editor");
		this.registerColumnOption("editorParams");
		this.registerColumnOption("editorEmptyValue");
		this.registerColumnOption("editorEmptyValueFunc");
		
		this.registerColumnOption("cellEditing");
		this.registerColumnOption("cellEdited");
		this.registerColumnOption("cellEditCancelled");
		
		this.registerTableFunction("getEditedCells", this.getEditedCells.bind(this));
		this.registerTableFunction("clearCellEdited", this.clearCellEdited.bind(this));
		this.registerTableFunction("navigatePrev", this.navigatePrev.bind(this));
		this.registerTableFunction("navigateNext", this.navigateNext.bind(this));
		this.registerTableFunction("navigateLeft", this.navigateLeft.bind(this));
		this.registerTableFunction("navigateRight", this.navigateRight.bind(this));
		this.registerTableFunction("navigateUp", this.navigateUp.bind(this));
		this.registerTableFunction("navigateDown", this.navigateDown.bind(this));
		
		this.registerComponentFunction("cell", "isEdited", this.cellIsEdited.bind(this));
		this.registerComponentFunction("cell", "clearEdited", this.clearEdited.bind(this));
		this.registerComponentFunction("cell", "edit", this.editCell.bind(this));
		this.registerComponentFunction("cell", "cancelEdit", this.cellCancelEdit.bind(this));
		
		this.registerComponentFunction("cell", "navigatePrev", this.navigatePrev.bind(this));
		this.registerComponentFunction("cell", "navigateNext", this.navigateNext.bind(this));
		this.registerComponentFunction("cell", "navigateLeft", this.navigateLeft.bind(this));
		this.registerComponentFunction("cell", "navigateRight", this.navigateRight.bind(this));
		this.registerComponentFunction("cell", "navigateUp", this.navigateUp.bind(this));
		this.registerComponentFunction("cell", "navigateDown", this.navigateDown.bind(this));
	}
	
	initialize(){
		this.subscribe("cell-init", this.bindEditor.bind(this));
		this.subscribe("cell-delete", this.clearEdited.bind(this));
		this.subscribe("cell-value-changed", this.updateCellClass.bind(this));
		this.subscribe("column-layout", this.initializeColumnCheck.bind(this));
		this.subscribe("column-delete", this.columnDeleteCheck.bind(this));
		this.subscribe("row-deleting", this.rowDeleteCheck.bind(this));
		this.subscribe("row-layout", this.rowEditableCheck.bind(this));
		this.subscribe("data-refreshing", this.cancelEdit.bind(this));
		this.subscribe("clipboard-paste", this.pasteBlocker.bind(this));
		
		this.subscribe("keybinding-nav-prev", this.navigatePrev.bind(this, undefined));
		this.subscribe("keybinding-nav-next", this.keybindingNavigateNext.bind(this));
		
		// this.subscribe("keybinding-nav-left", this.navigateLeft.bind(this, undefined));
		// this.subscribe("keybinding-nav-right", this.navigateRight.bind(this, undefined));
		this.subscribe("keybinding-nav-up", this.navigateUp.bind(this, undefined));
		this.subscribe("keybinding-nav-down", this.navigateDown.bind(this, undefined));

		if(Object.keys(this.table.options).includes("editorEmptyValue")){
			this.convertEmptyValues = true;
		}
	}
	
	
	///////////////////////////////////
	///////// Paste Negation //////////
	///////////////////////////////////
	
	pasteBlocker(e){
		if(this.currentCell){
			return true;
		}
	}
	
	
	///////////////////////////////////
	////// Keybinding Functions ///////
	///////////////////////////////////
	
	keybindingNavigateNext(e){
		var cell = this.currentCell,
		newRow = this.options("tabEndNewRow");

		if(cell){
			if(!this.navigateNext(cell, e)){
				if(newRow){
					cell.getElement().firstChild.blur();
					
					if(!this.invalidEdit){
						
						if(newRow === true){
							newRow = this.table.addRow({});
						}else {
							if(typeof newRow == "function"){
								newRow = this.table.addRow(newRow(cell.row.getComponent()));
							}else {
								newRow = this.table.addRow(Object.assign({}, newRow));
							}
						}
						
						newRow.then(() => {
							setTimeout(() => {
								cell.getComponent().navigateNext();
							});
						});
					}
				}
			}
		}
	}
	
	///////////////////////////////////
	///////// Cell Functions //////////
	///////////////////////////////////
	
	cellIsEdited(cell){
		return !! cell.modules.edit && cell.modules.edit.edited;
	}
	
	cellCancelEdit(cell){
		if(cell === this.currentCell){
			this.table.modules.edit.cancelEdit();
		}else {
			console.warn("Cancel Editor Error - This cell is not currently being edited ");
		}
	}
	
	
	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////
	updateCellClass(cell){
		if(this.allowEdit(cell)) {
			cell.getElement().classList.add("tabulator-editable");
		}
		else {
			cell.getElement().classList.remove("tabulator-editable");
		}
	}
	
	clearCellEdited(cells){
		if(!cells){
			cells = this.table.modules.edit.getEditedCells();
		}
		
		if(!Array.isArray(cells)){
			cells = [cells];
		}
		
		cells.forEach((cell) => {
			this.table.modules.edit.clearEdited(cell._getSelf());
		});
	}
	
	navigatePrev(cell = this.currentCell, e){
		var nextCell, prevRow;
		
		if(cell){
			
			if(e){
				e.preventDefault();
			}
			
			nextCell = this.navigateLeft();
			
			if(nextCell){
				return true;
			}else {
				prevRow = this.table.rowManager.prevDisplayRow(cell.row, true);
				
				if(prevRow){
					nextCell = this.findPrevEditableCell(prevRow, prevRow.cells.length);
					
					if(nextCell){
						nextCell.getComponent().edit();
						return true;
					}
				}
			}
		}
		
		return false;
	}
	
	navigateNext(cell = this.currentCell, e){
		var nextCell, nextRow;
		
		if(cell){
			
			if(e){
				e.preventDefault();
			}
			
			nextCell = this.navigateRight();
			
			if(nextCell){
				return true;
			}else {
				nextRow = this.table.rowManager.nextDisplayRow(cell.row, true);
				
				if(nextRow){
					nextCell = this.findNextEditableCell(nextRow, -1);
					
					if(nextCell){
						nextCell.getComponent().edit();
						return true;
					}
				}
			}
		}
		
		return false;
	}
	
	navigateLeft(cell = this.currentCell, e){
		var index, nextCell;
		
		if(cell){
			
			if(e){
				e.preventDefault();
			}
			
			index = cell.getIndex();
			nextCell = this.findPrevEditableCell(cell.row, index);
			
			if(nextCell){
				nextCell.getComponent().edit();
				return true;
			}
		}
		
		return false;
	}
	
	navigateRight(cell = this.currentCell, e){
		var index, nextCell;
		
		if(cell){
			
			if(e){
				e.preventDefault();
			}
			
			index = cell.getIndex();
			nextCell = this.findNextEditableCell(cell.row, index);
			
			if(nextCell){
				nextCell.getComponent().edit();
				return true;
			}
		}
		
		return false;
	}
	
	navigateUp(cell = this.currentCell, e){
		var index, nextRow;
		
		if(cell){
			
			if(e){
				e.preventDefault();
			}
			
			index = cell.getIndex();
			nextRow = this.table.rowManager.prevDisplayRow(cell.row, true);
			
			if(nextRow){
				nextRow.cells[index].getComponent().edit();
				return true;
			}
		}
		
		return false;
	}
	
	navigateDown(cell = this.currentCell, e){
		var index, nextRow;
		
		if(cell){
			
			if(e){
				e.preventDefault();
			}
			
			index = cell.getIndex();
			nextRow = this.table.rowManager.nextDisplayRow(cell.row, true);
			
			if(nextRow){
				nextRow.cells[index].getComponent().edit();
				return true;
			}
		}
		
		return false;
	}
	
	findNextEditableCell(row, index){
		var nextCell = false;
		
		if(index < row.cells.length-1){
			for(var i = index+1; i < row.cells.length; i++){
				let cell = row.cells[i];
				
				if(cell.column.modules.edit && Helpers.elVisible(cell.getElement())){
					let allowEdit = this.allowEdit(cell);
					
					if(allowEdit){
						nextCell = cell;
						break;
					}
				}
			}
		}
		
		return nextCell;
	}
	
	findPrevEditableCell(row, index){
		var prevCell = false;
		
		if(index > 0){
			for(var i = index-1; i >= 0; i--){
				let cell = row.cells[i];
				
				if(cell.column.modules.edit && Helpers.elVisible(cell.getElement())){
					let allowEdit = this.allowEdit(cell);
					
					if(allowEdit){
						prevCell = cell;
						break;
					}
				}
			}
		}
		
		return prevCell;
	}
	
	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////
	
	initializeColumnCheck(column){
		if(typeof column.definition.editor !== "undefined"){
			this.initializeColumn(column);
		}
	}
	
	columnDeleteCheck(column){
		if(this.currentCell && this.currentCell.column === column){
			this.cancelEdit();
		}
	}
	
	rowDeleteCheck(row){
		if(this.currentCell && this.currentCell.row === row){
			this.cancelEdit();
		}
	}
	
	rowEditableCheck(row){
		row.getCells().forEach((cell) => {
			if(cell.column.modules.edit && typeof cell.column.modules.edit.check === "function"){
				this.updateCellClass(cell);
			}
		});
	}
	
	//initialize column editor
	initializeColumn(column){
		var convertEmpty = Object.keys(column.definition).includes("editorEmptyValue");

		var config = {
			editor:false,
			blocked:false,
			check:column.definition.editable,
			params:column.definition.editorParams || {},
			convertEmptyValues:convertEmpty,
			editorEmptyValue:column.definition.editorEmptyValue,
			editorEmptyValueFunc:column.definition.editorEmptyValueFunc,
		};
		
		//set column editor
		config.editor = this.lookupEditor(column.definition.editor, column);
		
		if(config.editor){
			column.modules.edit = config;
		}
	}

	lookupEditor(editor, column){
		var editorFunc;

		switch(typeof editor){
			case "string":
				if(this.editors[editor]){
					editorFunc = this.editors[editor];
				}else {
					console.warn("Editor Error - No such editor found: ", editor);
				}
				break;
			
			case "function":
				editorFunc = editor;
				break;
			
			case "boolean":
				if(editor === true){
					if(typeof column.definition.formatter !== "function"){
						if(this.editors[column.definition.formatter]){
							editorFunc = this.editors[column.definition.formatter];
						}else {
							editorFunc = this.editors["input"];
						}
					}else {
						console.warn("Editor Error - Cannot auto lookup editor for a custom formatter: ", column.definition.formatter);
					}
				}
				break;
		}

		return editorFunc;
	}
	
	getCurrentCell(){
		return this.currentCell ? this.currentCell.getComponent() : false;
	}
	
	clearEditor(cancel){
		var cell = this.currentCell,
		cellEl;
		
		this.invalidEdit = false;
		
		if(cell){
			this.currentCell = false;
			
			cellEl = cell.getElement();
			
			this.dispatch("edit-editor-clear", cell, cancel);
			
			cellEl.classList.remove("tabulator-editing");
			
			while(cellEl.firstChild) cellEl.removeChild(cellEl.firstChild);
			
			cell.row.getElement().classList.remove("tabulator-editing");
			
			cell.table.element.classList.remove("tabulator-editing");
		}
	}
	
	cancelEdit(){
		if(this.currentCell){
			var cell = this.currentCell;
			var component = this.currentCell.getComponent();
			
			this.clearEditor(true);
			cell.setValueActual(cell.getValue());
			cell.cellRendered();
			
			if(cell.column.definition.editor == "textarea" || cell.column.definition.variableHeight){
				cell.row.normalizeHeight(true);
			}
			
			if(cell.column.definition.cellEditCancelled){
				cell.column.definition.cellEditCancelled.call(this.table, component);
			}
			
			this.dispatch("edit-cancelled", cell);
			this.dispatchExternal("cellEditCancelled", component);
		}
	}
	
	//return a formatted value for a cell
	bindEditor(cell){
		if(cell.column.modules.edit){
			var self = this,
			element = cell.getElement(true);
			
			this.updateCellClass(cell);
			element.setAttribute("tabindex", 0);
			
			element.addEventListener("mousedown", function(e){
				if (e.button === 2) {
					e.preventDefault();
				}else {
					self.mouseClick = true;
				}
			});

			if(this.options("editTriggerEvent") === "dblclick"){
				element.addEventListener("dblclick", function(e){
					if(!element.classList.contains("tabulator-editing")){
						element.focus({preventScroll: true});
						self.edit(cell, e, false);
					}
				});
			}
			
			
			if(this.options("editTriggerEvent") === "focus" || this.options("editTriggerEvent") === "click"){
				element.addEventListener("click", function(e){
					if(!element.classList.contains("tabulator-editing")){
						element.focus({preventScroll: true});
						self.edit(cell, e, false);
					}
				});
			}
			
			if(this.options("editTriggerEvent") === "focus"){
				element.addEventListener("focus", function(e){
					if(!self.recursionBlock){
						self.edit(cell, e, false);
					}
				});
			}
		}
	}
	
	focusCellNoEvent(cell, block){
		this.recursionBlock = true;
		
		if(!(block && this.table.browser === "ie")){
			cell.getElement().focus({preventScroll: true});
		}
		
		this.recursionBlock = false;
	}
	
	editCell(cell, forceEdit){
		this.focusCellNoEvent(cell);
		this.edit(cell, false, forceEdit);
	}
	
	focusScrollAdjust(cell){
		if(this.table.rowManager.getRenderMode() == "virtual"){
			var topEdge = this.table.rowManager.element.scrollTop,
			bottomEdge = this.table.rowManager.element.clientHeight + this.table.rowManager.element.scrollTop,
			rowEl = cell.row.getElement();
			
			if(rowEl.offsetTop < topEdge){
				this.table.rowManager.element.scrollTop -= (topEdge - rowEl.offsetTop);
			}else {
				if(rowEl.offsetTop + rowEl.offsetHeight  > bottomEdge){
					this.table.rowManager.element.scrollTop += (rowEl.offsetTop + rowEl.offsetHeight - bottomEdge);
				}
			}
			
			var leftEdge = this.table.rowManager.element.scrollLeft,
			rightEdge = this.table.rowManager.element.clientWidth + this.table.rowManager.element.scrollLeft,
			cellEl = cell.getElement();
			
			if(this.table.modExists("frozenColumns")){
				leftEdge += parseInt(this.table.modules.frozenColumns.leftMargin || 0);
				rightEdge -= parseInt(this.table.modules.frozenColumns.rightMargin || 0);
			}
			
			if(this.table.options.renderHorizontal === "virtual"){
				leftEdge -= parseInt(this.table.columnManager.renderer.vDomPadLeft);
				rightEdge -= parseInt(this.table.columnManager.renderer.vDomPadLeft);
			}
			
			if(cellEl.offsetLeft < leftEdge){
				this.table.rowManager.element.scrollLeft -= (leftEdge - cellEl.offsetLeft);
			}else {
				if(cellEl.offsetLeft + cellEl.offsetWidth  > rightEdge){
					this.table.rowManager.element.scrollLeft += (cellEl.offsetLeft + cellEl.offsetWidth - rightEdge);
				}
			}
		}
	}
	
	allowEdit(cell) {
		var check = cell.column.modules.edit ? true : false;
		
		if(cell.column.modules.edit){
			switch(typeof cell.column.modules.edit.check){
				case "function":
					if(cell.row.initialized){
						check = cell.column.modules.edit.check(cell.getComponent());
					}
					break;
				
				case "string":
					check = !!cell.row.data[cell.column.modules.edit.check];
					break;
				
				case "boolean":
					check = cell.column.modules.edit.check;
					break;
			}
		}
		
		return check;
	}
	
	edit(cell, e, forceEdit){
		var self = this,
		allowEdit = true,
		rendered = function(){},
		element = cell.getElement(),
		editFinished = false,
		cellEditor, component, params;

		//prevent editing if another cell is refusing to leave focus (eg. validation fail)
		
		if(this.currentCell){
			if(!this.invalidEdit && this.currentCell !== cell){
				this.cancelEdit();
			}
			return;
		}
		
		//handle successful value change
		function success(value){
			if(self.currentCell === cell && !editFinished){
				var valid = self.chain("edit-success", [cell, value], true, true);

				if(valid === true || self.table.options.validationMode === "highlight"){

					editFinished = true;

					self.clearEditor();
					
					if(!cell.modules.edit){
						cell.modules.edit = {};
					}
					
					cell.modules.edit.edited = true;
					
					if(self.editedCells.indexOf(cell) == -1){
						self.editedCells.push(cell);
					}

					value = self.transformEmptyValues(value, cell);
					
					cell.setValue(value, true);

					return valid === true;
				}else {
					editFinished = true;
					self.invalidEdit = true;
					self.focusCellNoEvent(cell, true);
					rendered();

					setTimeout(() => {
						editFinished = false;
					}, 10);
					return false;
				}
			}
		}
		
		//handle aborted edit
		function cancel(){
			// editFinished = true;

			if(self.currentCell === cell && !editFinished){
				self.cancelEdit();
			}
		}
		
		function onRendered(callback){
			rendered = callback;
		}
		
		if(!cell.column.modules.edit.blocked){
			if(e){
				e.stopPropagation();
			}
			
			allowEdit = this.allowEdit(cell);
			
			if(allowEdit || forceEdit){
				self.cancelEdit();
				
				self.currentCell = cell;
				
				this.focusScrollAdjust(cell);
				
				component = cell.getComponent();
				
				if(this.mouseClick){
					this.mouseClick = false;
					
					if(cell.column.definition.cellClick){
						cell.column.definition.cellClick.call(this.table, e, component);
					}
				}
				
				if(cell.column.definition.cellEditing){
					cell.column.definition.cellEditing.call(this.table, component);
				}
				
				this.dispatch("cell-editing", cell);
				this.dispatchExternal("cellEditing", component);
				
				params = typeof cell.column.modules.edit.params === "function" ? cell.column.modules.edit.params(component) : cell.column.modules.edit.params;
				
				cellEditor = cell.column.modules.edit.editor.call(self, component, onRendered, success, cancel, params);
				
				//if editor returned, add to DOM, if false, abort edit
				if(this.currentCell && cellEditor !== false){
					if(cellEditor instanceof Node){
						element.classList.add("tabulator-editing");
						cell.row.getElement().classList.add("tabulator-editing");
						cell.table.element.classList.add("tabulator-editing");
						while(element.firstChild) element.removeChild(element.firstChild);
						element.appendChild(cellEditor);
						
						//trigger onRendered Callback
						rendered();
						
						//prevent editing from triggering rowClick event
						var children = element.children;
						
						for (var i = 0; i < children.length; i++) {
							children[i].addEventListener("click", function(e){
								e.stopPropagation();
							});
						}
					}else {
						console.warn("Edit Error - Editor should return an instance of Node, the editor returned:", cellEditor);
						this.blur(element);
						return false;
					}
				}else {
					this.blur(element);
					return false;
				}
				
				return true;
			}else {
				this.mouseClick = false;
				this.blur(element);
				return false;
			}
		}else {
			this.mouseClick = false;
			this.blur(element);
			return false;
		}
	}

	emptyValueCheck(value){
		return value === "" || value === null || typeof value === "undefined";
	}

	transformEmptyValues(value, cell){
		var mod = cell.column.modules.edit, 
		convert = mod.convertEmptyValues || this.convertEmptyValues,
		checkFunc;
		
		if(convert){
			checkFunc = mod.editorEmptyValueFunc || this.options("editorEmptyValueFunc");

			if(checkFunc && checkFunc(value)){
				value = mod.convertEmptyValues ? mod.editorEmptyValue : this.options("editorEmptyValue");
			}
		}
		
		return value;
	}
	
	blur(element){
		if(!this.confirm("edit-blur", [element]) ){
			element.blur();
		}
	}
	
	getEditedCells(){
		var output = [];
		
		this.editedCells.forEach((cell) => {
			output.push(cell.getComponent());
		});
		
		return output;
	}
	
	clearEdited(cell){
		var editIndex;
		
		if(cell.modules.edit && cell.modules.edit.edited){
			cell.modules.edit.edited = false;
			
			this.dispatch("edit-edited-clear", cell);
		}
		
		editIndex = this.editedCells.indexOf(cell);
		
		if(editIndex > -1){
			this.editedCells.splice(editIndex, 1);
		}
	}
}

class ExportRow{
	constructor(type, columns, component, indent){
		this.type = type;
		this.columns = columns;
		this.component = component || false;
		this.indent = indent || 0;
	}
}

class ExportColumn{
	constructor(value, component, width, height, depth){
		this.value = value;
		this.component = component || false;
		this.width = width;
		this.height = height;
		this.depth = depth;
	}
}

var columnLookups$1 = {

};

var rowLookups$1 = {
	visible:function(){
		return this.rowManager.getVisibleRows(false, true);
	},
	all:function(){
		return this.rowManager.rows;
	},
	selected:function(){
		return this.modules.selectRow.selectedRows;
	},
	active:function(){
		if(this.options.pagination){
			return this.rowManager.getDisplayRows(this.rowManager.displayRows.length - 2);
		}else {
			return this.rowManager.getDisplayRows();
		}
	},
};

class Export extends Module{

	static moduleName = "export";

	static columnLookups = columnLookups$1;
	static rowLookups = rowLookups$1;
	
	constructor(table){
		super(table);
		
		this.config = {};
		this.cloneTableStyle = true;
		this.colVisProp = "";
		this.colVisPropAttach = "";
		
		this.registerTableOption("htmlOutputConfig", false); //html output config
		
		this.registerColumnOption("htmlOutput");
		this.registerColumnOption("titleHtmlOutput");
	}
	
	initialize(){
		this.registerTableFunction("getHtml", this.getHtml.bind(this));
	}
	
	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////
	
	generateExportList(config, style, range, colVisProp){
		var headers, body, columns, colLookup;

		this.cloneTableStyle = style;
		this.config = config || {};
		this.colVisProp = colVisProp;
		this.colVisPropAttach = this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1);

		colLookup = Export.columnLookups[range];

		if(colLookup){
			columns = colLookup.call(this.table);
			columns = columns.filter(col => this.columnVisCheck(col));
		}

		headers = this.config.columnHeaders !== false ? this.headersToExportRows(this.generateColumnGroupHeaders(columns)) : [];

		if(columns){
			columns = columns.map(col => col.getComponent());
		}
		
		body = this.bodyToExportRows(this.rowLookup(range), columns);

		return headers.concat(body);
	}
	
	generateTable(config, style, range, colVisProp){
		var list = this.generateExportList(config, style, range, colVisProp);
		
		return this.generateTableElement(list);
	}
	
	rowLookup(range){
		var rows = [], 
		rowLookup;
		
		if(typeof range == "function"){
			range.call(this.table).forEach((row) =>{
				row = this.table.rowManager.findRow(row);
				
				if(row){
					rows.push(row);
				}
			});
		}else {
			rowLookup = Export.rowLookups[range] || Export.rowLookups["active"];

			rows = rowLookup.call(this.table);
		}
		
		return Object.assign([], rows);
	}
	
	generateColumnGroupHeaders(columns){
		var output = [];
		
		if (!columns) {
			columns = this.config.columnGroups !== false ? this.table.columnManager.columns : this.table.columnManager.columnsByIndex;
		}
		
		columns.forEach((column) => {
			var colData = this.processColumnGroup(column);
			
			if(colData){
				output.push(colData);
			}
		});



		return output;
	}
	
	processColumnGroup(column){
		var subGroups = column.columns,
		maxDepth = 0,
		title = column.definition["title" + (this.colVisPropAttach)] || column.definition.title;
		
		var groupData = {
			title:title,
			column:column,
			depth:1,
		};
		
		if(subGroups.length){
			groupData.subGroups = [];
			groupData.width = 0;
			
			subGroups.forEach((subGroup) => {
				var subGroupData = this.processColumnGroup(subGroup);
				
				if(subGroupData){
					groupData.width += subGroupData.width;
					groupData.subGroups.push(subGroupData);
					
					if(subGroupData.depth > maxDepth){
						maxDepth = subGroupData.depth;
					}
				}
			});
			
			groupData.depth += maxDepth;
			
			if(!groupData.width){
				return false;
			}
		}else {
			if(this.columnVisCheck(column)){
				groupData.width = 1;
			}else {
				return false;
			}
		}
		
		return groupData;
	}
	
	columnVisCheck(column){
		var visProp = column.definition[this.colVisProp];

		if(this.config.rowHeaders === false && column.isRowHeader){
			return false;
		}
		
		if(typeof visProp === "function"){
			visProp = visProp.call(this.table, column.getComponent());
		}

		if(visProp === false || visProp === true){
			return visProp;
		}

		return column.visible && column.field;
	}
	
	headersToExportRows(columns){
		var headers = [],
		headerDepth = 0,
		exportRows = [];
		
		function parseColumnGroup(column, level){
			
			var depth = headerDepth - level;
			
			if(typeof headers[level] === "undefined"){
				headers[level] = [];
			}
			
			column.height = column.subGroups ? 1 : (depth - column.depth) + 1;
			
			headers[level].push(column);
			
			if(column.height > 1){
				for(let i = 1; i < column.height; i ++){
					
					if(typeof headers[level + i] === "undefined"){
						headers[level + i] = [];
					}
					
					headers[level + i].push(false);
				}
			}
			
			if(column.width > 1){
				for(let i = 1; i < column.width; i ++){
					headers[level].push(false);
				}
			}
			
			if(column.subGroups){
				column.subGroups.forEach(function(subGroup){
					parseColumnGroup(subGroup, level+1);
				});
			}
		}
		
		//calculate maximum header depth
		columns.forEach(function(column){
			if(column.depth > headerDepth){
				headerDepth = column.depth;
			}
		});
		
		columns.forEach(function(column){
			parseColumnGroup(column,0);
		});
		
		headers.forEach((header) => {
			var columns = [];
			
			header.forEach((col) => {
				if(col){
					let title = typeof col.title === "undefined" ? "" : col.title;
					columns.push(new ExportColumn(title, col.column.getComponent(), col.width, col.height, col.depth));
				}else {
					columns.push(null);
				}
			});
			
			exportRows.push(new ExportRow("header", columns));
		});
		
		return exportRows;
	}
	
	bodyToExportRows(rows, columns = []){
		var exportRows = [];
		
		if (columns.length === 0) {
			this.table.columnManager.columnsByIndex.forEach((column) => {
				if (this.columnVisCheck(column)) {
					columns.push(column.getComponent());
				}
			});
		}
		
		if(this.config.columnCalcs !== false && this.table.modExists("columnCalcs")){
			if(this.table.modules.columnCalcs.topInitialized){
				rows.unshift(this.table.modules.columnCalcs.topRow);
			}
			
			if(this.table.modules.columnCalcs.botInitialized){
				rows.push(this.table.modules.columnCalcs.botRow);
			}
		}

		rows = rows.filter((row) => {
			switch(row.type){
				case "group":
					return this.config.rowGroups !== false;
				
				case "calc":
					return this.config.columnCalcs !== false;
				
				case "row":
					return !(this.table.options.dataTree && this.config.dataTree === false && row.modules.dataTree.parent);
			}
			
			return true;
		});
		
		rows.forEach((row, i) => {
			var rowData = row.getData(this.colVisProp);
			var exportCols = [];
			var indent = 0;
			
			switch(row.type){
				case "group":
					indent = row.level;
					exportCols.push(new ExportColumn(row.key, row.getComponent(), columns.length, 1));
					break;
				
				case "calc" :
				case "row" :
					columns.forEach((col) => {
						exportCols.push(new ExportColumn(col._column.getFieldValue(rowData), col, 1, 1));
					});
				
					if(this.table.options.dataTree && this.config.dataTree !== false){
						indent = row.modules.dataTree.index;
					}
					break;
			}
			
			exportRows.push(new ExportRow(row.type, exportCols, row.getComponent(), indent));
		});
		
		return exportRows;
	}
	
	generateTableElement(list){
		var table = document.createElement("table"),
		headerEl = document.createElement("thead"),
		bodyEl = document.createElement("tbody"),
		styles = this.lookupTableStyles(),
		rowFormatter = this.table.options["rowFormatter" + (this.colVisPropAttach)],
		setup = {};
		
		setup.rowFormatter = rowFormatter !== null ? rowFormatter : this.table.options.rowFormatter;
		
		if(this.table.options.dataTree &&this.config.dataTree !== false && this.table.modExists("columnCalcs")){
			setup.treeElementField = this.table.modules.dataTree.elementField;
		}
		
		//assign group header formatter
		setup.groupHeader = this.table.options["groupHeader" + (this.colVisPropAttach)];
		
		if(setup.groupHeader && !Array.isArray(setup.groupHeader)){
			setup.groupHeader = [setup.groupHeader];
		}
		
		table.classList.add("tabulator-print-table");
		
		this.mapElementStyles(this.table.columnManager.getHeadersElement(), headerEl, ["border-top", "border-left", "border-right", "border-bottom", "background-color", "color", "font-weight", "font-family", "font-size"]);

		if(list.length > 1000){
			console.warn("It may take a long time to render an HTML table with more than 1000 rows");
		}
		
		list.forEach((row, i) => {
			let rowEl;
			
			switch(row.type){
				case "header":
					headerEl.appendChild(this.generateHeaderElement(row, setup, styles));
					break;
				
				case "group":
					bodyEl.appendChild(this.generateGroupElement(row, setup, styles));
					break;
				
				case "calc":
					bodyEl.appendChild(this.generateCalcElement(row, setup, styles));
					break;
				
				case "row":
					rowEl = this.generateRowElement(row, setup, styles);
				
					this.mapElementStyles(((i % 2) && styles.evenRow) ? styles.evenRow : styles.oddRow, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
					bodyEl.appendChild(rowEl);
					break;
			}
		});
		
		if(headerEl.innerHTML){
			table.appendChild(headerEl);
		}
		
		table.appendChild(bodyEl);
		
		
		this.mapElementStyles(this.table.element, table, ["border-top", "border-left", "border-right", "border-bottom"]);
		return table;
	}
	
	lookupTableStyles(){
		var styles = {};
		
		//lookup row styles
		if(this.cloneTableStyle && window.getComputedStyle){
			styles.oddRow = this.table.element.querySelector(".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)");
			styles.evenRow = this.table.element.querySelector(".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)");
			styles.calcRow = this.table.element.querySelector(".tabulator-row.tabulator-calcs");
			styles.firstRow = this.table.element.querySelector(".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)");
			styles.firstGroup = this.table.element.getElementsByClassName("tabulator-group")[0];
			
			if(styles.firstRow){
				styles.styleCells = styles.firstRow.getElementsByClassName("tabulator-cell");
				styles.styleRowHeader = styles.firstRow.getElementsByClassName("tabulator-row-header")[0];
				styles.firstCell = styles.styleCells[0];
				styles.lastCell = styles.styleCells[styles.styleCells.length - 1];
			}
		}
		
		return styles;
	}
	
	generateHeaderElement(row, setup, styles){
		var rowEl = document.createElement("tr");
		
		row.columns.forEach((column) => {
			if(column){
				var cellEl = document.createElement("th");
				var classNames = column.component._column.definition.cssClass ? column.component._column.definition.cssClass.split(" ") : [];
				
				cellEl.colSpan = column.width;
				cellEl.rowSpan = column.height;
				
				cellEl.innerHTML = column.value;
				
				if(this.cloneTableStyle){
					cellEl.style.boxSizing = "border-box";
				}
				
				classNames.forEach(function(className) {
					cellEl.classList.add(className);
				});
				
				this.mapElementStyles(column.component.getElement(), cellEl, ["text-align", "border-left", "border-right", "background-color", "color", "font-weight", "font-family", "font-size"]);
				this.mapElementStyles(column.component._column.contentElement, cellEl, ["padding-top", "padding-left", "padding-right", "padding-bottom"]);
		
				if(column.component._column.visible){
					this.mapElementStyles(column.component.getElement(), cellEl, ["width"]);
				}else {
					if(column.component._column.definition.width){
						cellEl.style.width = column.component._column.definition.width + "px";
					}
				}
				
				if(column.component._column.parent && column.component._column.parent.isGroup){
					this.mapElementStyles(column.component._column.parent.groupElement, cellEl, ["border-top"]);
				}else {
					this.mapElementStyles(column.component.getElement(), cellEl, ["border-top"]);
				}
				
				if(column.component._column.isGroup){
					this.mapElementStyles(column.component.getElement(), cellEl, ["border-bottom"]);
				}else {
					this.mapElementStyles(this.table.columnManager.getElement(), cellEl, ["border-bottom"]);
				}
				
				rowEl.appendChild(cellEl);
			}
		});
		
		return rowEl;
	}
	
	generateGroupElement(row, setup, styles){
		
		var rowEl = document.createElement("tr"),
		cellEl = document.createElement("td"),
		group = row.columns[0];
		
		rowEl.classList.add("tabulator-print-table-row");
		
		if(setup.groupHeader && setup.groupHeader[row.indent]){
			group.value = setup.groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
		}else {
			if(setup.groupHeader !== false){
				group.value = row.component._group.generator(group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
			}
		}
		
		cellEl.colSpan = group.width;
		cellEl.innerHTML = group.value;
		
		rowEl.classList.add("tabulator-print-table-group");
		rowEl.classList.add("tabulator-group-level-" + row.indent);
		
		if(group.component.isVisible()){
			rowEl.classList.add("tabulator-group-visible");
		}
		
		this.mapElementStyles(styles.firstGroup, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
		this.mapElementStyles(styles.firstGroup, cellEl, ["padding-top", "padding-left", "padding-right", "padding-bottom"]);
		
		rowEl.appendChild(cellEl);
		
		return rowEl;
	}
	
	generateCalcElement(row, setup, styles){
		var rowEl = this.generateRowElement(row, setup, styles);
		
		rowEl.classList.add("tabulator-print-table-calcs");
		this.mapElementStyles(styles.calcRow, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
		
		return rowEl;
	}
	
	generateRowElement(row, setup, styles){
		var rowEl = document.createElement("tr");
		
		rowEl.classList.add("tabulator-print-table-row");
		
		row.columns.forEach((col, i) => {
			if(col){
				var cellEl = document.createElement("td"),
				column = col.component._column,
				table =  this.table,
				index = table.columnManager.findColumnIndex(column),
				value = col.value,
				cellStyle, styleProps;
				
				var cellWrapper = {
					modules:{},
					getValue:function(){
						return value;
					},
					getField:function(){
						return column.definition.field;
					},
					getElement:function(){
						return cellEl;
					},
					getType:function(){
						return "cell";
					},
					getColumn:function(){
						return column.getComponent();
					},
					getData:function(){
						return row.component.getData();
					},
					getRow:function(){
						return row.component;
					},
					getTable:function(){
						return table;
					},
					getComponent:function(){
						return cellWrapper;
					},
					column:column,
				};
				
				var classNames = column.definition.cssClass ? column.definition.cssClass.split(" ") : [];
				
				classNames.forEach(function(className) {
					cellEl.classList.add(className);
				});
				
				if(this.table.modExists("format") && this.config.formatCells !== false){
					value = this.table.modules.format.formatExportValue(cellWrapper, this.colVisProp);
				}else {
					switch(typeof value){
						case "object":
							value = value !== null ? JSON.stringify(value) : "";
							break;
						
						case "undefined":
							value = "";
							break;
					}
				}
				
				if(value instanceof Node){
					cellEl.appendChild(value);
				}else {
					cellEl.innerHTML = value;
				}

				styleProps = ["padding-top", "padding-left", "padding-right", "padding-bottom", "border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "text-align"];

				if(column.isRowHeader){
					cellStyle = styles.styleRowHeader;
					styleProps.push("background-color");
				}else {
					cellStyle = styles.styleCells && styles.styleCells[index] ? styles.styleCells[index] : styles.firstCell;
				}
				
				if(cellStyle){
					this.mapElementStyles(cellStyle, cellEl, styleProps);
					
					if(column.definition.align){
						cellEl.style.textAlign = column.definition.align;
					}
				}
				
				if(this.table.options.dataTree && this.config.dataTree !== false){
					if((setup.treeElementField && setup.treeElementField == column.field) || (!setup.treeElementField && i == 0)){
						if(row.component._row.modules.dataTree.controlEl){
							cellEl.insertBefore(row.component._row.modules.dataTree.controlEl.cloneNode(true), cellEl.firstChild);
						}
						if(row.component._row.modules.dataTree.branchEl){
							cellEl.insertBefore(row.component._row.modules.dataTree.branchEl.cloneNode(true), cellEl.firstChild);
						}
					}
				}
				
				rowEl.appendChild(cellEl);
				
				if(cellWrapper.modules.format && cellWrapper.modules.format.renderedCallback){
					cellWrapper.modules.format.renderedCallback();
				}
			}
		});
		
		if(setup.rowFormatter && row.type === "row" && this.config.formatCells !== false){
			let formatComponent = Object.assign(row.component);

			formatComponent.getElement = function(){return rowEl;};

			setup.rowFormatter(row.component);
		}
		
		return rowEl;
	}
	
	generateHTMLTable(list){
		var holder = document.createElement("div");
		
		holder.appendChild(this.generateTableElement(list));
		
		return holder.innerHTML;
	}
	
	getHtml(visible, style, config, colVisProp){
		var list = this.generateExportList(config || this.table.options.htmlOutputConfig, style, visible, colVisProp || "htmlOutput");
		
		return this.generateHTMLTable(list);
	}
	
	mapElementStyles(from, to, props){
		if(this.cloneTableStyle && from && to){
			
			var lookup = {
				"background-color" : "backgroundColor",
				"color" : "fontColor",
				"width" : "width",
				"font-weight" : "fontWeight",
				"font-family" : "fontFamily",
				"font-size" : "fontSize",
				"text-align" : "textAlign",
				"border-top" : "borderTop",
				"border-left" : "borderLeft",
				"border-right" : "borderRight",
				"border-bottom" : "borderBottom",
				"padding-top" : "paddingTop",
				"padding-left" : "paddingLeft",
				"padding-right" : "paddingRight",
				"padding-bottom" : "paddingBottom",
			};
			
			if(window.getComputedStyle){
				var fromStyle = window.getComputedStyle(from);

				props.forEach(function(prop){
					if(!to.style[lookup[prop]]){
						to.style[lookup[prop]] = fromStyle.getPropertyValue(prop);
					}
				});
			}
		}
	}
}

var defaultFilters = {

	//equal to
	"=":function(filterVal, rowVal, rowData, filterParams){
		return rowVal == filterVal ? true : false;
	},

	//less than
	"<":function(filterVal, rowVal, rowData, filterParams){
		return rowVal < filterVal ? true : false;
	},

	//less than or equal to
	"<=":function(filterVal, rowVal, rowData, filterParams){
		return rowVal <= filterVal ? true : false;
	},

	//greater than
	">":function(filterVal, rowVal, rowData, filterParams){
		return rowVal > filterVal ? true : false;
	},

	//greater than or equal to
	">=":function(filterVal, rowVal, rowData, filterParams){
		return rowVal >= filterVal ? true : false;
	},

	//not equal to
	"!=":function(filterVal, rowVal, rowData, filterParams){
		return rowVal != filterVal ? true : false;
	},

	"regex":function(filterVal, rowVal, rowData, filterParams){

		if(typeof filterVal == "string"){
			filterVal = new RegExp(filterVal);
		}

		return filterVal.test(rowVal);
	},

	//contains the string
	"like":function(filterVal, rowVal, rowData, filterParams){
		if(filterVal === null || typeof filterVal === "undefined"){
			return rowVal === filterVal ? true : false;
		}else {
			if(typeof rowVal !== 'undefined' && rowVal !== null){
				return String(rowVal).toLowerCase().indexOf(filterVal.toLowerCase()) > -1;
			}
			else {
				return false;
			}
		}
	},

	//contains the keywords
	"keywords":function(filterVal, rowVal, rowData, filterParams){
		var keywords = filterVal.toLowerCase().split(typeof filterParams.separator === "undefined" ? " " : filterParams.separator),
		value = String(rowVal === null || typeof rowVal === "undefined" ? "" : rowVal).toLowerCase(),
		matches = [];

		keywords.forEach((keyword) =>{
			if(value.includes(keyword)){
				matches.push(true);
			}
		});

		return filterParams.matchAll ? matches.length === keywords.length : !!matches.length;
	},

	//starts with the string
	"starts":function(filterVal, rowVal, rowData, filterParams){
		if(filterVal === null || typeof filterVal === "undefined"){
			return rowVal === filterVal ? true : false;
		}else {
			if(typeof rowVal !== 'undefined' && rowVal !== null){
				return String(rowVal).toLowerCase().startsWith(filterVal.toLowerCase());
			}
			else {
				return false;
			}
		}
	},

	//ends with the string
	"ends":function(filterVal, rowVal, rowData, filterParams){
		if(filterVal === null || typeof filterVal === "undefined"){
			return rowVal === filterVal ? true : false;
		}else {
			if(typeof rowVal !== 'undefined' && rowVal !== null){
				return String(rowVal).toLowerCase().endsWith(filterVal.toLowerCase());
			}
			else {
				return false;
			}
		}
	},

	//in array
	"in":function(filterVal, rowVal, rowData, filterParams){
		if(Array.isArray(filterVal)){
			return filterVal.length ? filterVal.indexOf(rowVal) > -1 : true;
		}else {
			console.warn("Filter Error - filter value is not an array:", filterVal);
			return false;
		}
	},
};

class Filter extends Module{

	static moduleName = "filter";

	//load defaults
	static filters = defaultFilters;

	constructor(table){
		super(table);

		this.filterList = []; //hold filter list
		this.headerFilters = {}; //hold column filters
		this.headerFilterColumns = []; //hold columns that use header filters

		this.prevHeaderFilterChangeCheck = "";
		this.prevHeaderFilterChangeCheck = "{}";

		this.changed = false; //has filtering changed since last render
		this.tableInitialized = false;

		this.registerTableOption("filterMode", "local"); //local or remote filtering

		this.registerTableOption("initialFilter", false); //initial filtering criteria
		this.registerTableOption("initialHeaderFilter", false); //initial header filtering criteria
		this.registerTableOption("headerFilterLiveFilterDelay", 300); //delay before updating column after user types in header filter
		this.registerTableOption("placeholderHeaderFilter", false); //placeholder when header filter is empty

		this.registerColumnOption("headerFilter");
		this.registerColumnOption("headerFilterPlaceholder");
		this.registerColumnOption("headerFilterParams");
		this.registerColumnOption("headerFilterEmptyCheck");
		this.registerColumnOption("headerFilterFunc");
		this.registerColumnOption("headerFilterFuncParams");
		this.registerColumnOption("headerFilterLiveFilter");

		this.registerTableFunction("searchRows", this.searchRows.bind(this));
		this.registerTableFunction("searchData", this.searchData.bind(this));

		this.registerTableFunction("setFilter", this.userSetFilter.bind(this));
		this.registerTableFunction("refreshFilter", this.userRefreshFilter.bind(this));
		this.registerTableFunction("addFilter", this.userAddFilter.bind(this));
		this.registerTableFunction("getFilters", this.getFilters.bind(this));
		this.registerTableFunction("setHeaderFilterFocus", this.userSetHeaderFilterFocus.bind(this));
		this.registerTableFunction("getHeaderFilterValue", this.userGetHeaderFilterValue.bind(this));
		this.registerTableFunction("setHeaderFilterValue", this.userSetHeaderFilterValue.bind(this));
		this.registerTableFunction("getHeaderFilters", this.getHeaderFilters.bind(this));
		this.registerTableFunction("removeFilter", this.userRemoveFilter.bind(this));
		this.registerTableFunction("clearFilter", this.userClearFilter.bind(this));
		this.registerTableFunction("clearHeaderFilter", this.userClearHeaderFilter.bind(this));

		this.registerComponentFunction("column", "headerFilterFocus", this.setHeaderFilterFocus.bind(this));
		this.registerComponentFunction("column", "reloadHeaderFilter", this.reloadHeaderFilter.bind(this));
		this.registerComponentFunction("column", "getHeaderFilterValue", this.getHeaderFilterValue.bind(this));
		this.registerComponentFunction("column", "setHeaderFilterValue", this.setHeaderFilterValue.bind(this));
	}

	initialize(){
		this.subscribe("column-init", this.initializeColumnHeaderFilter.bind(this));
		this.subscribe("column-width-fit-before", this.hideHeaderFilterElements.bind(this));
		this.subscribe("column-width-fit-after", this.showHeaderFilterElements.bind(this));
		this.subscribe("table-built", this.tableBuilt.bind(this));
		this.subscribe("placeholder", this.generatePlaceholder.bind(this));

		if(this.table.options.filterMode === "remote"){
			this.subscribe("data-params", this.remoteFilterParams.bind(this));
		}

		this.registerDataHandler(this.filter.bind(this), 10);
	}

	tableBuilt(){
		if(this.table.options.initialFilter){
			this.setFilter(this.table.options.initialFilter);
		}

		if(this.table.options.initialHeaderFilter){
			this.table.options.initialHeaderFilter.forEach((item) => {

				var column = this.table.columnManager.findColumn(item.field);

				if(column){
					this.setHeaderFilterValue(column, item.value);
				}else {
					console.warn("Column Filter Error - No matching column found:", item.field);
					return false;
				}
			});
		}

		this.tableInitialized = true;
	}

	remoteFilterParams(data, config, silent, params){
		params.filter = this.getFilters(true, true);
		return params;
	}

	generatePlaceholder(text){
		if(this.table.options.placeholderHeaderFilter && Object.keys(this.headerFilters).length){
			return this.table.options.placeholderHeaderFilter;
		}
	}

	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////

	//set standard filters
	userSetFilter(field, type, value, params){
		this.setFilter(field, type, value, params);
		this.refreshFilter();
	}

	//set standard filters
	userRefreshFilter(){
		this.refreshFilter();
	}

	//add filter to array
	userAddFilter(field, type, value, params){
		this.addFilter(field, type, value, params);
		this.refreshFilter();
	}

	userSetHeaderFilterFocus(field){
		var column = this.table.columnManager.findColumn(field);

		if(column){
			this.setHeaderFilterFocus(column);
		}else {
			console.warn("Column Filter Focus Error - No matching column found:", field);
			return false;
		}
	}

	userGetHeaderFilterValue(field) {
		var column = this.table.columnManager.findColumn(field);

		if(column){
			return this.getHeaderFilterValue(column);
		}else {
			console.warn("Column Filter Error - No matching column found:", field);
		}
	}

	userSetHeaderFilterValue(field, value){
		var column = this.table.columnManager.findColumn(field);

		if(column){
			this.setHeaderFilterValue(column, value);
		}else {
			console.warn("Column Filter Error - No matching column found:", field);
			return false;
		}
	}

	//remove filter from array
	userRemoveFilter(field, type, value){
		this.removeFilter(field, type, value);
		this.refreshFilter();
	}

	//clear filters
	userClearFilter(all){
		this.clearFilter(all);
		this.refreshFilter();
	}

	//clear header filters
	userClearHeaderFilter(){
		this.clearHeaderFilter();
		this.refreshFilter();
	}


	//search for specific row components
	searchRows(field, type, value){
		return this.search("rows", field, type, value);
	}

	//search for specific data
	searchData(field, type, value){
		return this.search("data", field, type, value);
	}

	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////

	initializeColumnHeaderFilter(column){
		var def = column.definition;

		if(def.headerFilter){
			this.initializeColumn(column);
		}
	}

	//initialize column header filter
	initializeColumn(column, value){
		var self = this,
		field = column.getField();

		//handle successfully value change
		function success(value){
			var filterType = (column.modules.filter.tagType == "input" && column.modules.filter.attrType == "text") || column.modules.filter.tagType == "textarea" ? "partial" : "match",
			type = "",
			filterChangeCheck = "",
			filterFunc;

			if(typeof column.modules.filter.prevSuccess === "undefined" || column.modules.filter.prevSuccess !== value){

				column.modules.filter.prevSuccess = value;

				if(!column.modules.filter.emptyFunc(value)){
					column.modules.filter.value = value;

					switch(typeof column.definition.headerFilterFunc){
						case "string":
							if(Filter.filters[column.definition.headerFilterFunc]){
								type = column.definition.headerFilterFunc;
								filterFunc = function(data){
									var params = column.definition.headerFilterFuncParams || {};
									var fieldVal = column.getFieldValue(data);

									params = typeof params === "function" ? params(value, fieldVal, data) : params;

									return Filter.filters[column.definition.headerFilterFunc](value, fieldVal, data, params);
								};
							}else {
								console.warn("Header Filter Error - Matching filter function not found: ", column.definition.headerFilterFunc);
							}
							break;

						case "function":
							filterFunc = function(data){
								var params = column.definition.headerFilterFuncParams || {};
								var fieldVal = column.getFieldValue(data);

								params = typeof params === "function" ? params(value, fieldVal, data) : params;

								return column.definition.headerFilterFunc(value, fieldVal, data, params);
							};

							type = filterFunc;
							break;
					}

					if(!filterFunc){
						switch(filterType){
							case "partial":
								filterFunc = function(data){
									var colVal = column.getFieldValue(data);

									if(typeof colVal !== 'undefined' && colVal !== null){
										return String(colVal).toLowerCase().indexOf(String(value).toLowerCase()) > -1;
									}else {
										return false;
									}
								};
								type = "like";
								break;

							default:
								filterFunc = function(data){
									return column.getFieldValue(data) == value;
								};
								type = "=";
						}
					}

					self.headerFilters[field] = {value:value, func:filterFunc, type:type};
				}else {
					delete self.headerFilters[field];
				}

				column.modules.filter.value = value;

				filterChangeCheck = JSON.stringify(self.headerFilters);

				if(self.prevHeaderFilterChangeCheck !== filterChangeCheck){
					self.prevHeaderFilterChangeCheck = filterChangeCheck;

					self.trackChanges();
					self.refreshFilter();
				}
			}

			return true;
		}

		column.modules.filter = {
			success:success,
			attrType:false,
			tagType:false,
			emptyFunc:false,
		};

		this.generateHeaderFilterElement(column);
	}

	generateHeaderFilterElement(column, initialValue, reinitialize){
		var self = this,
		success = column.modules.filter.success,
		field = column.getField(),
		filterElement, editor, editorElement, cellWrapper, typingTimer, searchTrigger, params, onRenderedCallback;

		column.modules.filter.value = initialValue;

		//handle aborted edit
		function cancel(){}

		function onRendered(callback){
			onRenderedCallback = callback;
		}

		if(column.modules.filter.headerElement && column.modules.filter.headerElement.parentNode){
			column.contentElement.removeChild(column.modules.filter.headerElement.parentNode);
		}

		if(field){

			//set empty value function
			column.modules.filter.emptyFunc = column.definition.headerFilterEmptyCheck || function(value){
				return !value && value !== 0;
			};

			filterElement = document.createElement("div");
			filterElement.classList.add("tabulator-header-filter");

			//set column editor
			switch(typeof column.definition.headerFilter){
				case "string":
					if(self.table.modules.edit.editors[column.definition.headerFilter]){
						editor = self.table.modules.edit.editors[column.definition.headerFilter];

						if((column.definition.headerFilter === "tick" || column.definition.headerFilter === "tickCross") && !column.definition.headerFilterEmptyCheck){
							column.modules.filter.emptyFunc = function(value){
								return value !== true && value !== false;
							};
						}
					}else {
						console.warn("Filter Error - Cannot build header filter, No such editor found: ", column.definition.editor);
					}
					break;

				case "function":
					editor = column.definition.headerFilter;
					break;

				case "boolean":
					if(column.modules.edit && column.modules.edit.editor){
						editor = column.modules.edit.editor;
					}else {
						if(column.definition.formatter && self.table.modules.edit.editors[column.definition.formatter]){
							editor = self.table.modules.edit.editors[column.definition.formatter];

							if((column.definition.formatter === "tick" || column.definition.formatter === "tickCross") && !column.definition.headerFilterEmptyCheck){
								column.modules.filter.emptyFunc = function(value){
									return value !== true && value !== false;
								};
							}
						}else {
							editor = self.table.modules.edit.editors["input"];
						}
					}
					break;
			}

			if(editor){

				cellWrapper = {
					getValue:function(){
						return typeof initialValue !== "undefined" ? initialValue : "";
					},
					getField:function(){
						return column.definition.field;
					},
					getElement:function(){
						return filterElement;
					},
					getColumn:function(){
						return column.getComponent();
					},
					getTable:() => {
						return this.table;
					},
					getType:() => {
						return "header";
					},
					getRow:function(){
						return {
							normalizeHeight:function(){

							}
						};
					}
				};

				params = column.definition.headerFilterParams || {};

				params = typeof params === "function" ? params.call(self.table, cellWrapper) : params;

				editorElement = editor.call(this.table.modules.edit, cellWrapper, onRendered, success, cancel, params);

				if(!editorElement){
					console.warn("Filter Error - Cannot add filter to " + field + " column, editor returned a value of false");
					return;
				}

				if(!(editorElement instanceof Node)){
					console.warn("Filter Error - Cannot add filter to " + field + " column, editor should return an instance of Node, the editor returned:", editorElement);
					return;
				}

				//set Placeholder Text
				self.langBind("headerFilters|columns|" + column.definition.field, function(value){
					editorElement.setAttribute("placeholder", typeof value !== "undefined" && value ? value : (column.definition.headerFilterPlaceholder || self.langText("headerFilters|default")));
				});

				//focus on element on click
				editorElement.addEventListener("click", function(e){
					e.stopPropagation();
					editorElement.focus();
				});

				editorElement.addEventListener("focus", (e) => {
					var left = this.table.columnManager.contentsElement.scrollLeft;

					var headerPos = this.table.rowManager.element.scrollLeft;

					if(left !== headerPos){
						this.table.rowManager.scrollHorizontal(left);
						this.table.columnManager.scrollHorizontal(left);
					}
				});

				//live update filters as user types
				typingTimer = false;

				searchTrigger = function(e){
					if(typingTimer){
						clearTimeout(typingTimer);
					}

					typingTimer = setTimeout(function(){
						success(editorElement.value);
					},self.table.options.headerFilterLiveFilterDelay);
				};

				column.modules.filter.headerElement = editorElement;
				column.modules.filter.attrType = editorElement.hasAttribute("type") ? editorElement.getAttribute("type").toLowerCase() : "" ;
				column.modules.filter.tagType = editorElement.tagName.toLowerCase();

				if(column.definition.headerFilterLiveFilter !== false){

					if (
						!(
							column.definition.headerFilter === 'autocomplete' ||
							column.definition.headerFilter === 'tickCross' ||
							((column.definition.editor === 'autocomplete' ||
								column.definition.editor === 'tickCross') &&
							column.definition.headerFilter === true)
						)
					) {
						editorElement.addEventListener("keyup", searchTrigger);
						editorElement.addEventListener("search", searchTrigger);


						//update number filtered columns on change
						if(column.modules.filter.attrType == "number"){
							editorElement.addEventListener("change", function(e){
								success(editorElement.value);
							});
						}

						//change text inputs to search inputs to allow for clearing of field
						if(column.modules.filter.attrType == "text" && this.table.browser !== "ie"){
							editorElement.setAttribute("type", "search");
						// editorElement.off("change blur"); //prevent blur from triggering filter and preventing selection click
						}

					}

					//prevent input and select elements from propagating click to column sorters etc
					if(column.modules.filter.tagType == "input" || column.modules.filter.tagType == "select" || column.modules.filter.tagType == "textarea"){
						editorElement.addEventListener("mousedown",function(e){
							e.stopPropagation();
						});
					}
				}

				filterElement.appendChild(editorElement);

				column.contentElement.appendChild(filterElement);

				if(!reinitialize){
					self.headerFilterColumns.push(column);
				}

				if(onRenderedCallback){
					onRenderedCallback();
				}
			}
		}else {
			console.warn("Filter Error - Cannot add header filter, column has no field set:", column.definition.title);
		}
	}

	//hide all header filter elements (used to ensure correct column widths in "fitData" layout mode)
	hideHeaderFilterElements(){
		this.headerFilterColumns.forEach(function(column){
			if(column.modules.filter && column.modules.filter.headerElement){
				column.modules.filter.headerElement.style.display = 'none';
			}
		});
	}

	//show all header filter elements (used to ensure correct column widths in "fitData" layout mode)
	showHeaderFilterElements(){
		this.headerFilterColumns.forEach(function(column){
			if(column.modules.filter && column.modules.filter.headerElement){
				column.modules.filter.headerElement.style.display = '';
			}
		});
	}

	//programmatically set focus of header filter
	setHeaderFilterFocus(column){
		if(column.modules.filter && column.modules.filter.headerElement){
			column.modules.filter.headerElement.focus();
		}else {
			console.warn("Column Filter Focus Error - No header filter set on column:", column.getField());
		}
	}

	//programmatically get value of header filter
	getHeaderFilterValue(column){
		if(column.modules.filter && column.modules.filter.headerElement){
			return column.modules.filter.value;
		} else {
			console.warn("Column Filter Error - No header filter set on column:", column.getField());
		}
	}

	//programmatically set value of header filter
	setHeaderFilterValue(column, value){
		if (column){
			if(column.modules.filter && column.modules.filter.headerElement){
				this.generateHeaderFilterElement(column, value, true);
				column.modules.filter.success(value);
			}else {
				console.warn("Column Filter Error - No header filter set on column:", column.getField());
			}
		}
	}

	reloadHeaderFilter(column){
		if (column){
			if(column.modules.filter && column.modules.filter.headerElement){
				this.generateHeaderFilterElement(column, column.modules.filter.value, true);
			}else {
				console.warn("Column Filter Error - No header filter set on column:", column.getField());
			}
		}
	}

	refreshFilter(){
		if(this.tableInitialized){
			if(this.table.options.filterMode === "remote"){
				this.reloadData(null, false, false);
			}else {
				this.refreshData(true);
			}
		}

		//TODO - Persist left position of row manager
		// left = this.scrollLeft;
		// this.scrollHorizontal(left);
	}

	//check if the filters has changed since last use
	trackChanges(){
		this.changed = true;
		this.dispatch("filter-changed");
	}

	//check if the filters has changed since last use
	hasChanged(){
		var changed = this.changed;
		this.changed = false;
		return changed;
	}

	//set standard filters
	setFilter(field, type, value, params){
		this.filterList = [];

		if(!Array.isArray(field)){
			field = [{field:field, type:type, value:value, params:params}];
		}

		this.addFilter(field);
	}

	//add filter to array
	addFilter(field, type, value, params){
		var changed = false;

		if(!Array.isArray(field)){
			field = [{field:field, type:type, value:value, params:params}];
		}

		field.forEach((filter) => {
			filter = this.findFilter(filter);

			if(filter){
				this.filterList.push(filter);
				changed = true;
			}
		});

		if(changed){
			this.trackChanges();
		}
	}

	findFilter(filter){
		var column;

		if(Array.isArray(filter)){
			return this.findSubFilters(filter);
		}

		var filterFunc = false;

		if(typeof filter.field == "function"){
			filterFunc = function(data){
				return filter.field(data, filter.type || {});// pass params to custom filter function
			};
		}else {

			if(Filter.filters[filter.type]){

				column = this.table.columnManager.getColumnByField(filter.field);

				if(column){
					filterFunc = function(data){
						return Filter.filters[filter.type](filter.value, column.getFieldValue(data), data, filter.params || {});
					};
				}else {
					filterFunc = function(data){
						return Filter.filters[filter.type](filter.value, data[filter.field], data, filter.params || {});
					};
				}


			}else {
				console.warn("Filter Error - No such filter type found, ignoring: ", filter.type);
			}
		}

		filter.func = filterFunc;

		return filter.func ? filter : false;
	}

	findSubFilters(filters){
		var output = [];

		filters.forEach((filter) => {
			filter = this.findFilter(filter);

			if(filter){
				output.push(filter);
			}
		});

		return output.length ? output : false;
	}

	//get all filters
	getFilters(all, ajax){
		var output = [];

		if(all){
			output = this.getHeaderFilters();
		}

		if(ajax){
			output.forEach(function(item){
				if(typeof item.type == "function"){
					item.type = "function";
				}
			});
		}

		output = output.concat(this.filtersToArray(this.filterList, ajax));

		return output;
	}

	//filter to Object
	filtersToArray(filterList, ajax){
		var output = [];

		filterList.forEach((filter) => {
			var item;

			if(Array.isArray(filter)){
				output.push(this.filtersToArray(filter, ajax));
			}else {
				item = {field:filter.field, type:filter.type, value:filter.value};

				if(ajax){
					if(typeof item.type == "function"){
						item.type = "function";
					}
				}

				output.push(item);
			}
		});

		return output;
	}

	//get all filters
	getHeaderFilters(){
		var output = [];

		for(var key in this.headerFilters){
			output.push({field:key, type:this.headerFilters[key].type, value:this.headerFilters[key].value});
		}

		return output;
	}

	//remove filter from array
	removeFilter(field, type, value){
		if(!Array.isArray(field)){
			field = [{field:field, type:type, value:value}];
		}

		field.forEach((filter) => {
			var index = -1;

			if(typeof filter.field == "object"){
				index = this.filterList.findIndex((element) => {
					return filter === element;
				});
			}else {
				index = this.filterList.findIndex((element) => {
					return filter.field === element.field && filter.type === element.type  && filter.value === element.value;
				});
			}

			if(index > -1){
				this.filterList.splice(index, 1);
			}else {
				console.warn("Filter Error - No matching filter type found, ignoring: ", filter.type);
			}
		});

		this.trackChanges();
	}

	//clear filters
	clearFilter(all){
		this.filterList = [];

		if(all){
			this.clearHeaderFilter();
		}

		this.trackChanges();
	}

	//clear header filters
	clearHeaderFilter(){
		this.headerFilters = {};
		this.prevHeaderFilterChangeCheck = "{}";

		this.headerFilterColumns.forEach((column) => {
			if(typeof column.modules.filter.value !== "undefined"){
				delete column.modules.filter.value;
			}
			column.modules.filter.prevSuccess = undefined;
			this.reloadHeaderFilter(column);
		});

		this.trackChanges();
	}

	//search data and return matching rows
	search (searchType, field, type, value){
		var activeRows = [],
		filterList = [];

		if(!Array.isArray(field)){
			field = [{field:field, type:type, value:value}];
		}

		field.forEach((filter) => {
			filter = this.findFilter(filter);

			if(filter){
				filterList.push(filter);
			}
		});

		this.table.rowManager.rows.forEach((row) => {
			var match = true;

			filterList.forEach((filter) => {
				if(!this.filterRecurse(filter, row.getData())){
					match = false;
				}
			});

			if(match){
				activeRows.push(searchType === "data" ? row.getData("data") : row.getComponent());
			}

		});

		return activeRows;
	}

	//filter row array
	filter(rowList, filters){
		var activeRows = [],
		activeRowComponents = [];

		if(this.subscribedExternal("dataFiltering")){
			this.dispatchExternal("dataFiltering", this.getFilters(true));
		}

		if(this.table.options.filterMode !== "remote" && (this.filterList.length || Object.keys(this.headerFilters).length)){

			rowList.forEach((row) => {
				if(this.filterRow(row)){
					activeRows.push(row);
				}
			});

		}else {
			activeRows = rowList.slice(0);
		}

		if(this.subscribedExternal("dataFiltered")){

			activeRows.forEach((row) => {
				activeRowComponents.push(row.getComponent());
			});

			this.dispatchExternal("dataFiltered", this.getFilters(true), activeRowComponents);
		}

		return activeRows;
	}

	//filter individual row
	filterRow(row, filters){
		var match = true,
		data = row.getData();

		this.filterList.forEach((filter) => {
			if(!this.filterRecurse(filter, data)){
				match = false;
			}
		});


		for(var field in this.headerFilters){
			if(!this.headerFilters[field].func(data)){
				match = false;
			}
		}

		return match;
	}

	filterRecurse(filter, data){
		var match = false;

		if(Array.isArray(filter)){
			filter.forEach((subFilter) => {
				if(this.filterRecurse(subFilter, data)){
					match = true;
				}
			});
		}else {
			match = filter.func(data);
		}

		return match;
	}
}

function plaintext(cell, formatterParams, onRendered){
	return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
}

function html(cell, formatterParams, onRendered){
	return cell.getValue();
}

function textarea(cell, formatterParams, onRendered){
	cell.getElement().style.whiteSpace = "pre-wrap";
	return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
}

function money(cell, formatterParams, onRendered){
	var floatVal = parseFloat(cell.getValue()),
	sign = "",
	number, integer, decimal, rgx, value;

	var decimalSym = formatterParams.decimal || ".";
	var thousandSym = formatterParams.thousand || ",";
	var negativeSign = formatterParams.negativeSign || "-";
	var symbol = formatterParams.symbol || "";
	var after = !!formatterParams.symbolAfter;
	var precision = typeof formatterParams.precision !== "undefined" ? formatterParams.precision : 2;

	if(isNaN(floatVal)){
		return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
	}

	if(floatVal < 0){
		floatVal = Math.abs(floatVal);
		sign = negativeSign;
	}

	number = precision !== false ? floatVal.toFixed(precision) : floatVal;
	number = String(number).split(".");

	integer = number[0];
	decimal = number.length > 1 ? decimalSym + number[1] : "";

	if (formatterParams.thousand !== false) {
		rgx = /(\d+)(\d{3})/;

		while (rgx.test(integer)){
			integer = integer.replace(rgx, "$1" + thousandSym + "$2");
		}
	}

	value = integer + decimal;
	
	if(sign === true){
		value = "(" + value  + ")";
		return after ? value + symbol : symbol + value;
	}else {
		return after ? sign + value + symbol : sign + symbol + value;
	}
}

function link(cell, formatterParams, onRendered){
	var value = cell.getValue(),
	urlPrefix = formatterParams.urlPrefix || "",
	download = formatterParams.download,
	label = value,
	el = document.createElement("a"),
	data;

	function labelTraverse(path, data){
		var item = path.shift(),
		value = data[item];
		
		if(path.length && typeof value === "object"){
			return labelTraverse(path, value);
		}

		return value;
	}

	if(formatterParams.labelField){
		data = cell.getData();
		label = labelTraverse(formatterParams.labelField.split(this.table.options.nestedFieldSeparator), data);
	}

	if(formatterParams.label){
		switch(typeof formatterParams.label){
			case "string":
				label = formatterParams.label;
				break;

			case "function":
				label = formatterParams.label(cell);
				break;
		}
	}

	if(label){
		if(formatterParams.urlField){
			data = cell.getData();

			value = Helpers.retrieveNestedData(this.table.options.nestedFieldSeparator, formatterParams.urlField, data);
		}

		if(formatterParams.url){
			switch(typeof formatterParams.url){
				case "string":
					value = formatterParams.url;
					break;

				case "function":
					value = formatterParams.url(cell);
					break;
			}
		}

		el.setAttribute("href", urlPrefix + value);

		if(formatterParams.target){
			el.setAttribute("target", formatterParams.target);
		}

		if(formatterParams.download){

			if(typeof download == "function"){
				download = download(cell);
			}else {
				download = download === true ? "" : download;
			}

			el.setAttribute("download", download);
		}

		el.innerHTML = this.emptyToSpace(this.sanitizeHTML(label));

		return el;
	}else {
		return "&nbsp;";
	}
}

function image(cell, formatterParams, onRendered){
	var el = document.createElement("img"),
	src = cell.getValue();

	if(formatterParams.urlPrefix){
		src = formatterParams.urlPrefix + cell.getValue();
	}

	if(formatterParams.urlSuffix){
		src = src + formatterParams.urlSuffix;
	}

	el.setAttribute("src", src);

	switch(typeof formatterParams.height){
		case "number":
			el.style.height = formatterParams.height + "px";
			break;

		case "string":
			el.style.height = formatterParams.height;
			break;
	}

	switch(typeof formatterParams.width){
		case "number":
			el.style.width = formatterParams.width + "px";
			break;

		case "string":
			el.style.width = formatterParams.width;
			break;
	}

	el.addEventListener("load", function(){
		cell.getRow().normalizeHeight();
	});

	return el;
}

function tickCross(cell, formatterParams, onRendered){
	var value = cell.getValue(),
	element = cell.getElement(),
	empty = formatterParams.allowEmpty,
	truthy = formatterParams.allowTruthy,
	trueValueSet = Object.keys(formatterParams).includes("trueValue"),
	tick = typeof formatterParams.tickElement !== "undefined" ? formatterParams.tickElement : '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>',
	cross = typeof formatterParams.crossElement !== "undefined" ? formatterParams.crossElement : '<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';

	if((trueValueSet && value === formatterParams.trueValue) || (!trueValueSet && ((truthy && value) || (value === true || value === "true" || value === "True" || value === 1 || value === "1")))){
		element.setAttribute("aria-checked", true);
		return tick || "";
	}else {
		if(empty && (value === "null" || value === "" || value === null || typeof value === "undefined")){
			element.setAttribute("aria-checked", "mixed");
			return "";
		}else {
			element.setAttribute("aria-checked", false);
			return cross || "";
		}
	}
}

function datetime$1(cell, formatterParams, onRendered){
	var DT = this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime");
	var inputFormat = formatterParams.inputFormat || "yyyy-MM-dd HH:mm:ss";
	var	outputFormat = formatterParams.outputFormat || "dd/MM/yyyy HH:mm:ss";
	var	invalid = typeof formatterParams.invalidPlaceholder !== "undefined" ? formatterParams.invalidPlaceholder : "";
	var value = cell.getValue();

	if(typeof DT != "undefined"){
		var newDatetime;

		if(DT.isDateTime(value)){
			newDatetime = value;
		}else if(inputFormat === "iso"){
			newDatetime = DT.fromISO(String(value));
		}else {
			newDatetime = DT.fromFormat(String(value), inputFormat);
		}

		if(newDatetime.isValid){
			if(formatterParams.timezone){
				newDatetime = newDatetime.setZone(formatterParams.timezone);
			}

			return newDatetime.toFormat(outputFormat);
		}else {
			if(invalid === true || !value){
				return value;
			}else if(typeof invalid === "function"){
				return invalid(value);
			}else {
				return invalid;
			}
		}
	}else {
		console.error("Format Error - 'datetime' formatter is dependant on luxon.js");
	}
}

function datetimediff (cell, formatterParams, onRendered) {
	var DT = this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime");
	var inputFormat = formatterParams.inputFormat || "yyyy-MM-dd HH:mm:ss";
	var invalid = typeof formatterParams.invalidPlaceholder !== "undefined" ? formatterParams.invalidPlaceholder : "";
	var suffix = typeof formatterParams.suffix !== "undefined" ? formatterParams.suffix : false;
	var unit = typeof formatterParams.unit !== "undefined" ? formatterParams.unit : "days";
	var humanize = typeof formatterParams.humanize !== "undefined" ? formatterParams.humanize : false;
	var date = typeof formatterParams.date !== "undefined" ? formatterParams.date : DT.now();
	var value = cell.getValue();

	if(typeof DT != "undefined"){
		var newDatetime;

		if(DT.isDateTime(value)){
			newDatetime = value;
		}else if(inputFormat === "iso"){
			newDatetime = DT.fromISO(String(value));
		}else {
			newDatetime = DT.fromFormat(String(value), inputFormat);
		}

		if (newDatetime.isValid){
			if(humanize){
				return newDatetime.diff(date, unit).toHuman()  + (suffix ? " " + suffix : "");
			}else {
				return parseInt(newDatetime.diff(date, unit)[unit]) + (suffix ? " " + suffix : "");
			}
		} else {

			if (invalid === true) {
				return value;
			} else if (typeof invalid === "function") {
				return invalid(value);
			} else {
				return invalid;
			}
		}
	}else {
		console.error("Format Error - 'datetimediff' formatter is dependant on luxon.js");
	}
}

function lookup (cell, formatterParams, onRendered) {
	var value = cell.getValue();

	if (typeof formatterParams[value] === "undefined") {
		console.warn('Missing display value for ' + value);
		return value;
	}

	return formatterParams[value];
}

function star(cell, formatterParams, onRendered){
	var value = cell.getValue(),
	element = cell.getElement(),
	maxStars = formatterParams && formatterParams.stars ? formatterParams.stars : 5,
	stars = document.createElement("span"),
	star = document.createElementNS('http://www.w3.org/2000/svg', "svg"),
	starActive = '<polygon fill="#FFEA00" stroke="#C1AB60" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>',
	starInactive = '<polygon fill="#D2D2D2" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';

	//style stars holder
	stars.style.verticalAlign = "middle";

	//style star
	star.setAttribute("width", "14");
	star.setAttribute("height", "14");
	star.setAttribute("viewBox", "0 0 512 512");
	star.setAttribute("xml:space", "preserve");
	star.style.padding = "0 1px";

	value = value && !isNaN(value) ? parseInt(value) : 0;

	value = Math.max(0, Math.min(value, maxStars));

	for(var i=1;i<= maxStars;i++){
		var nextStar = star.cloneNode(true);
		nextStar.innerHTML = i <= value ? starActive : starInactive;

		stars.appendChild(nextStar);
	}

	element.style.whiteSpace = "nowrap";
	element.style.overflow = "hidden";
	element.style.textOverflow = "ellipsis";

	element.setAttribute("aria-label", value);

	return stars;
}

function traffic(cell, formatterParams, onRendered){
	var value = this.sanitizeHTML(cell.getValue()) || 0,
	el = document.createElement("span"),
	max = formatterParams && formatterParams.max ? formatterParams.max : 100,
	min = formatterParams && formatterParams.min ? formatterParams.min : 0,
	colors = formatterParams && typeof formatterParams.color !== "undefined" ? formatterParams.color : ["red", "orange", "green"],
	color = "#666666",
	percent, percentValue;

	if(isNaN(value) || typeof cell.getValue() === "undefined"){
		return;
	}

	el.classList.add("tabulator-traffic-light");

	//make sure value is in range
	percentValue = parseFloat(value) <= max ? parseFloat(value) : max;
	percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min;

	//workout percentage
	percent = (max - min) / 100;
	percentValue = Math.round((percentValue - min) / percent);

	//set color
	switch(typeof colors){
		case "string":
			color = colors;
			break;
		case "function":
			color = colors(value);
			break;
		case "object":
			if(Array.isArray(colors)){
				var unit = 100 / colors.length;
				var index = Math.floor(percentValue / unit);

				index = Math.min(index, colors.length - 1);
				index = Math.max(index, 0);
				color = colors[index];
				break;
			}
	}

	el.style.backgroundColor = color;

	return el;
}

function progress(cell, formatterParams = {}, onRendered){ //progress bar
	var value = this.sanitizeHTML(cell.getValue()) || 0,
	element = cell.getElement(),
	max = formatterParams.max ? formatterParams.max : 100,
	min = formatterParams.min ? formatterParams.min : 0,
	legendAlign = formatterParams.legendAlign ? formatterParams.legendAlign : "center",
	percent, percentValue, color, legend, legendColor;

	//make sure value is in range
	percentValue = parseFloat(value) <= max ? parseFloat(value) : max;
	percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min;

	//workout percentage
	percent = (max - min) / 100;
	percentValue = Math.round((percentValue - min) / percent);

	//set bar color
	switch(typeof formatterParams.color){
		case "string":
			color = formatterParams.color;
			break;
		case "function":
			color = formatterParams.color(value);
			break;
		case "object":
			if(Array.isArray(formatterParams.color)){
				let unit = 100 / formatterParams.color.length;
				let index = Math.floor(percentValue / unit);

				index = Math.min(index, formatterParams.color.length - 1);
				index = Math.max(index, 0);
				color = formatterParams.color[index];
				break;
			}
		default:
			color = "#2DC214";
	}

	//generate legend
	switch(typeof formatterParams.legend){
		case "string":
			legend = formatterParams.legend;
			break;
		case "function":
			legend = formatterParams.legend(value);
			break;
		case "boolean":
			legend = value;
			break;
		default:
			legend = false;
	}

	//set legend color
	switch(typeof formatterParams.legendColor){
		case "string":
			legendColor = formatterParams.legendColor;
			break;
		case "function":
			legendColor = formatterParams.legendColor(value);
			break;
		case "object":
			if(Array.isArray(formatterParams.legendColor)){
				let unit = 100 / formatterParams.legendColor.length;
				let index = Math.floor(percentValue / unit);

				index = Math.min(index, formatterParams.legendColor.length - 1);
				index = Math.max(index, 0);
				legendColor = formatterParams.legendColor[index];
			}
			break;
		default:
			legendColor = "#000";
	}

	element.style.minWidth = "30px";
	element.style.position = "relative";

	element.setAttribute("aria-label", percentValue);

	var barEl = document.createElement("div");
	barEl.style.display = "inline-block";
	barEl.style.width = percentValue + "%";
	barEl.style.backgroundColor = color;
	barEl.style.height = "100%";

	barEl.setAttribute('data-max', max);
	barEl.setAttribute('data-min', min);

	var barContainer = document.createElement("div");
	barContainer.style.position = "relative";
	barContainer.style.width = "100%";
	barContainer.style.height = "100%";

	if(legend){
		var legendEl = document.createElement("div");
		legendEl.style.position = "absolute";
		legendEl.style.top = 0;
		legendEl.style.left = 0;
		legendEl.style.textAlign = legendAlign;
		legendEl.style.width = "100%";
		legendEl.style.color = legendColor;
		legendEl.innerHTML = legend;
	}

	onRendered(function(){

		//handle custom element needed if formatter is to be included in printed/downloaded output
		if(!(cell instanceof CellComponent)){
			var holderEl = document.createElement("div");
			holderEl.style.position = "absolute";
			holderEl.style.top = "4px";
			holderEl.style.bottom = "4px";
			holderEl.style.left = "4px";
			holderEl.style.right = "4px";

			element.appendChild(holderEl);

			element = holderEl;
		}

		element.appendChild(barContainer);
		barContainer.appendChild(barEl);

		if(legend){
			barContainer.appendChild(legendEl);
		}
	});

	return "";
}

function color(cell, formatterParams, onRendered){
	cell.getElement().style.backgroundColor = this.sanitizeHTML(cell.getValue());
	return "";
}

function buttonTick(cell, formatterParams, onRendered){
	return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>';
}

function buttonCross(cell, formatterParams, onRendered){
	return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';
}

function toggle(cell, formatterParams, onRendered){
	var value = cell.getValue(),
	size = formatterParams.size ||15,
	sizePx = size + "px",
	containEl, switchEl,
	onValue = formatterParams.hasOwnProperty("onValue") ? formatterParams.onValue : true,
	offValue = formatterParams.hasOwnProperty("offValue") ? formatterParams.offValue : false,


	state = formatterParams.onTruthy ? value : value === onValue;

	
	containEl = document.createElement("div");
	containEl.classList.add("tabulator-toggle");

	if(state){
		containEl.classList.add("tabulator-toggle-on");
		containEl.style.flexDirection = "row-reverse";

		if(formatterParams.onColor){
			containEl.style.background = formatterParams.onColor;
		}
	}else {
		if(formatterParams.offColor){
			containEl.style.background = formatterParams.offColor;
		}
	}

	containEl.style.width = (2.5 * size) + "px";
	containEl.style.borderRadius = sizePx;

	if(formatterParams.clickable){
		containEl.addEventListener("click", (e) => {
			cell.setValue(state ? offValue : onValue);
		});
	}

	switchEl = document.createElement("div");
	switchEl.classList.add("tabulator-toggle-switch");

	switchEl.style.height = sizePx;
	switchEl.style.width = sizePx;
	switchEl.style.borderRadius = sizePx;
	
	containEl.appendChild(switchEl);
	
	return containEl;
}

function rownum(cell, formatterParams, onRendered){
	var content = document.createElement("span");
	var row = cell.getRow();
	var table = cell.getTable();

	row.watchPosition((position) => {
		if (formatterParams.relativeToPage) {
			position += table.modules.page.getPageSize() * (table.modules.page.getPage() - 1);
		}
		content.innerText = position;
	});
	
	return content;
}

function handle(cell, formatterParams, onRendered){
	cell.getElement().classList.add("tabulator-row-handle");
	return "<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>";
}

function adaptable(cell, params, onRendered){
	var lookup, formatterFunc, formatterParams;
    
	function defaultLookup(cell){
		var value = cell.getValue(),
		formatter = "plaintext";
        
		switch(typeof value){           
			case "boolean":
				formatter = "tickCross";
				break;
            
			case "string":
				if(value.includes("\n")){
					formatter = "textarea";
				}
				break;
		}
        
		return formatter;
	}
    
	lookup = params.formatterLookup ? params.formatterLookup(cell) : defaultLookup(cell);

	if(params.paramsLookup){
		formatterParams = typeof params.paramsLookup === "function" ? params.paramsLookup(lookup, cell) : params.paramsLookup[lookup];
	}

	formatterFunc = this.table.modules.format.lookupFormatter(lookup);
    
	return  formatterFunc.call(this, cell, formatterParams || {}, onRendered);
}

function array$2(cell, formatterParams, onRendered){
	var delimiter = formatterParams.delimiter || ",",
	value = cell.getValue(),
	table = this.table,
	valueMap;
	
	if(formatterParams.valueMap){
		if(typeof formatterParams.valueMap === "string"){
			valueMap = function(value){
				return value.map((item) => {
					return Helpers.retrieveNestedData(table.options.nestedFieldSeparator, formatterParams.valueMap, item);
				});
			};
		}else {
			valueMap = formatterParams.valueMap;
		}
	}

	if(Array.isArray(value)){
		if(valueMap){
			value = valueMap(value);
		}

		return value.join(delimiter);
	}else {
		return value;
	}
}

function json$1(cell, formatterParams, onRendered){
	var indent = formatterParams.indent || "\t",
	multiline = typeof formatterParams.multiline === "undefined" ? true : formatterParams.multiline,
	replacer = formatterParams.replacer || null,
	value = cell.getValue();
	
	if(multiline){
		cell.getElement().style.whiteSpace = "pre-wrap";
	}

	return JSON.stringify(value, replacer, indent);
}

var defaultFormatters = {
	plaintext:plaintext,
	html:html,
	textarea:textarea,
	money:money,
	link:link,
	image:image,
	tickCross:tickCross,
	datetime:datetime$1,
	datetimediff:datetimediff,
	lookup:lookup,
	star:star,
	traffic:traffic,
	progress:progress,
	color:color,
	buttonTick:buttonTick,
	buttonCross:buttonCross,
	toggle:toggle,
	rownum:rownum,
	handle:handle,
	adaptable:adaptable,
	array:array$2,
	json:json$1,
};

class Format extends Module{
	
	static moduleName = "format";
	
	//load defaults
	static formatters = defaultFormatters;
	
	constructor(table){
		super(table);
		
		this.registerColumnOption("formatter");
		this.registerColumnOption("formatterParams");
		
		this.registerColumnOption("formatterPrint");
		this.registerColumnOption("formatterPrintParams");
		this.registerColumnOption("formatterClipboard");
		this.registerColumnOption("formatterClipboardParams");
		this.registerColumnOption("formatterHtmlOutput");
		this.registerColumnOption("formatterHtmlOutputParams");
		this.registerColumnOption("titleFormatter");
		this.registerColumnOption("titleFormatterParams");
	}
	
	initialize(){
		this.subscribe("cell-format", this.formatValue.bind(this));
		this.subscribe("cell-rendered", this.cellRendered.bind(this));
		this.subscribe("column-layout", this.initializeColumn.bind(this));
		this.subscribe("column-format", this.formatHeader.bind(this));
	}
	
	//initialize column formatter
	initializeColumn(column){
		column.modules.format = this.lookupTypeFormatter(column, "");
		
		if(typeof column.definition.formatterPrint !== "undefined"){
			column.modules.format.print = this.lookupTypeFormatter(column, "Print");
		}
		
		if(typeof column.definition.formatterClipboard !== "undefined"){
			column.modules.format.clipboard = this.lookupTypeFormatter(column, "Clipboard");
		}
		
		if(typeof column.definition.formatterHtmlOutput !== "undefined"){
			column.modules.format.htmlOutput = this.lookupTypeFormatter(column, "HtmlOutput");
		}
	}
	
	lookupTypeFormatter(column, type){
		var config = {params:column.definition["formatter" + type + "Params"] || {}},
		formatter = column.definition["formatter" + type];
		
		config.formatter = this.lookupFormatter(formatter);
		
		return config;
	}
	
	
	lookupFormatter(formatter){
		var formatterFunc;

		//set column formatter
		switch(typeof formatter){
			case "string":
				if(Format.formatters[formatter]){
					formatterFunc = Format.formatters[formatter];
				}else {
					console.warn("Formatter Error - No such formatter found: ", formatter);
					formatterFunc = Format.formatters.plaintext;
				}
				break;
			
			case "function":
				formatterFunc = formatter;
				break;
			
			default:
				formatterFunc = Format.formatters.plaintext;
				break;
		}
		
		return formatterFunc;
	}
	
	cellRendered(cell){
		if(cell.modules.format && cell.modules.format.renderedCallback && !cell.modules.format.rendered){
			cell.modules.format.renderedCallback();
			cell.modules.format.rendered = true;
		}
	}
	
	//return a formatted value for a column header
	formatHeader(column, title, el){
		var formatter, params, onRendered, mockCell;
		
		if(column.definition.titleFormatter){
			formatter = this.lookupFormatter(column.definition.titleFormatter);
			
			onRendered = (callback) => {
				column.titleFormatterRendered = callback;
			};
			
			mockCell = {
				getValue:function(){
					return title;
				},
				getElement:function(){
					return el;
				},
				getType:function(){
					return "header";
				},
				getColumn:function(){
					return column.getComponent();
				},
				getTable:() => {
					return this.table;
				}
			};
			
			params = column.definition.titleFormatterParams || {};
			
			params = typeof params === "function" ? params() : params;
			
			return formatter.call(this, mockCell, params, onRendered);
		}else {
			return title;
		}
	}
	
	
	//return a formatted value for a cell
	formatValue(cell){
		var component = cell.getComponent(),
		params = typeof cell.column.modules.format.params === "function" ? cell.column.modules.format.params(component) : cell.column.modules.format.params;
		
		function onRendered(callback){
			if(!cell.modules.format){
				cell.modules.format = {};
			}
			
			cell.modules.format.renderedCallback = callback;
			cell.modules.format.rendered = false;
		}
		
		return cell.column.modules.format.formatter.call(this, component, params, onRendered);
	}
	
	formatExportValue(cell, type){
		var formatter = cell.column.modules.format[type],
		params;
		
		if(formatter){
			params = typeof formatter.params === "function" ? formatter.params(cell.getComponent()) : formatter.params;
			
			function onRendered(callback){
				if(!cell.modules.format){
					cell.modules.format = {};
				}
				
				cell.modules.format.renderedCallback = callback;
				cell.modules.format.rendered = false;
			}
			
			return formatter.formatter.call(this, cell.getComponent(), params, onRendered);
			
		}else {
			return this.formatValue(cell);
		}
	}
	
	sanitizeHTML(value){
		if(value){
			var entityMap = {
				'&': '&amp;',
				'<': '&lt;',
				'>': '&gt;',
				'"': '&quot;',
				"'": '&#39;',
				'/': '&#x2F;',
				'`': '&#x60;',
				'=': '&#x3D;'
			};
			
			return String(value).replace(/[&<>"'`=/]/g, function (s) {
				return entityMap[s];
			});
		}else {
			return value;
		}
	}
	
	emptyToSpace(value){
		return value === null || typeof value === "undefined" || value === "" ? "&nbsp;" : value;
	}
	
}

class FrozenColumns extends Module{

	static moduleName = "frozenColumns";
	
	constructor(table){
		super(table);
		
		this.leftColumns = [];
		this.rightColumns = [];
		this.initializationMode = "left";
		this.active = false;
		this.blocked = true;
		
		this.registerColumnOption("frozen");
	}
	
	//reset initial state
	reset(){
		this.initializationMode = "left";
		this.leftColumns = [];
		this.rightColumns = [];
		this.active = false;
	}
	
	initialize(){
		this.subscribe("cell-layout", this.layoutCell.bind(this));
		this.subscribe("column-init", this.initializeColumn.bind(this));
		this.subscribe("column-width", this.layout.bind(this));
		this.subscribe("row-layout-after", this.layoutRow.bind(this));
		this.subscribe("table-layout", this.layout.bind(this));
		this.subscribe("columns-loading", this.reset.bind(this));
		
		this.subscribe("column-add", this.reinitializeColumns.bind(this));
		this.subscribe("column-deleted", this.reinitializeColumns.bind(this));
		this.subscribe("column-hide", this.reinitializeColumns.bind(this));
		this.subscribe("column-show", this.reinitializeColumns.bind(this));
		this.subscribe("columns-loaded", this.reinitializeColumns.bind(this));
		
		this.subscribe("table-redraw", this.layout.bind(this));
		this.subscribe("layout-refreshing", this.blockLayout.bind(this));
		this.subscribe("layout-refreshed", this.unblockLayout.bind(this));
		this.subscribe("scrollbar-vertical", this.adjustForScrollbar.bind(this));
	}
	
	blockLayout(){
		this.blocked = true;
	}
	
	unblockLayout(){
		this.blocked = false;
	}
	
	layoutCell(cell){
		this.layoutElement(cell.element, cell.column);
	}
	
	reinitializeColumns(){
		this.reset();
		
		this.table.columnManager.columnsByIndex.forEach((column) => {
			this.initializeColumn(column);
		});

		this.layout();
	}
	
	//initialize specific column
	initializeColumn(column){
		var config = {margin:0, edge:false};
		
		if(!column.isGroup){			
			if(this.frozenCheck(column)){
				config.position = this.initializationMode;
				
				if(this.initializationMode == "left"){
					this.leftColumns.push(column);
				}else {
					this.rightColumns.unshift(column);
				}
				
				this.active = true;
				
				column.modules.frozen = config;
			}else {
				this.initializationMode = "right";
			}
		}
	}
	
	frozenCheck(column){
		if(column.parent.isGroup && column.definition.frozen){
			console.warn("Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups");
		}
		
		if(column.parent.isGroup){
			return this.frozenCheck(column.parent);
		}else {
			return column.definition.frozen;
		}
	}
	
	//layout calculation rows
	layoutCalcRows(){
		if(this.table.modExists("columnCalcs")){
			if(this.table.modules.columnCalcs.topInitialized && this.table.modules.columnCalcs.topRow){
				this.layoutRow(this.table.modules.columnCalcs.topRow);
			}
			
			if(this.table.modules.columnCalcs.botInitialized && this.table.modules.columnCalcs.botRow){
				this.layoutRow(this.table.modules.columnCalcs.botRow);
			}
			
			if(this.table.modExists("groupRows")){
				this.layoutGroupCalcs(this.table.modules.groupRows.getGroups());
			}
		}
	}
	
	layoutGroupCalcs(groups){
		groups.forEach((group) => {
			if(group.calcs.top){
				this.layoutRow(group.calcs.top);
			}
			
			if(group.calcs.bottom){
				this.layoutRow(group.calcs.bottom);
			}
			
			if(group.groupList && group.groupList.length){
				this.layoutGroupCalcs(group.groupList);
			}
		});
	}
	
	//calculate column positions and layout headers
	layoutColumnPosition(allCells){
		var leftParents = [];
		
		var leftMargin = 0;
		var rightMargin = 0;
		
		this.leftColumns.forEach((column, i) => {	
			column.modules.frozen.marginValue = leftMargin;
			column.modules.frozen.margin = column.modules.frozen.marginValue + "px";
			
			if(column.visible){
				leftMargin += column.getWidth();
			}
			
			if(i == this.leftColumns.length - 1){
				column.modules.frozen.edge = true;
			}else {
				column.modules.frozen.edge = false;
			}
			
			if(column.parent.isGroup){
				var parentEl = this.getColGroupParentElement(column);
				if(!leftParents.includes(parentEl)){
					this.layoutElement(parentEl, column);
					leftParents.push(parentEl);
				}
				
				parentEl.classList.toggle("tabulator-frozen-left",  column.modules.frozen.edge && column.modules.frozen.position === "left");
				parentEl.classList.toggle("tabulator-frozen-right", column.modules.frozen.edge && column.modules.frozen.position === "right");
			}else {
				this.layoutElement(column.getElement(), column);
			}
			
			if(allCells){
				column.cells.forEach((cell) => {
					this.layoutElement(cell.getElement(true), column);
				});
			}
		});
		
		this.rightColumns.forEach((column, i) => {
			
			column.modules.frozen.marginValue = rightMargin;
			column.modules.frozen.margin = column.modules.frozen.marginValue + "px";
			
			if(column.visible){
				rightMargin += column.getWidth();
			}
			
			if(i == this.rightColumns.length - 1){
				column.modules.frozen.edge = true;
			}else {
				column.modules.frozen.edge = false;
			}
			
			if(column.parent.isGroup){
				this.layoutElement(this.getColGroupParentElement(column), column);
			}else {
				this.layoutElement(column.getElement(), column);
			}
			
			if(allCells){
				column.cells.forEach((cell) => {
					this.layoutElement(cell.getElement(true), column);
				});
			}
		});
	}
	
	getColGroupParentElement(column){
		return column.parent.isGroup ? this.getColGroupParentElement(column.parent) : column.getElement();
	}
	
	//layout columns appropriately
	layout(){	
		if(this.active && !this.blocked){
			//calculate left columns
			this.layoutColumnPosition();
			
			this.reinitializeRows();
			
			this.layoutCalcRows();
		}
	}
	
	reinitializeRows(){
		var visibleRows = this.table.rowManager.getVisibleRows(true);
		var otherRows = this.table.rowManager.getRows().filter(row => !visibleRows.includes(row));
		
		otherRows.forEach((row) =>{
			row.deinitialize();
		});
		
		visibleRows.forEach((row) =>{
			if(row.type === "row"){
				this.layoutRow(row);
			}
		});
	}
	
	layoutRow(row){
		if(this.table.options.layout === "fitDataFill" && this.rightColumns.length){
			this.table.rowManager.getTableElement().style.minWidth = "calc(100% - " + this.rightMargin + ")";
		}
		
		this.leftColumns.forEach((column) => {
			var cell = row.getCell(column);
			
			if(cell){
				this.layoutElement(cell.getElement(true), column);
			}
		});
		
		this.rightColumns.forEach((column) => {
			var cell = row.getCell(column);
			
			if(cell){
				this.layoutElement(cell.getElement(true), column);
			}
		});
	}
	
	layoutElement(element, column){
		var position;
		
		if(column.modules.frozen && element){
			element.style.position = "sticky";

			if(this.table.rtl){
				position = column.modules.frozen.position === "left" ? "right" : "left";
			}else {
				position = column.modules.frozen.position;
			}
		
			element.style[position] = column.modules.frozen.margin;

			element.classList.add("tabulator-frozen");
			
			element.classList.toggle("tabulator-frozen-left",  column.modules.frozen.edge && column.modules.frozen.position === "left");
			element.classList.toggle("tabulator-frozen-right", column.modules.frozen.edge && column.modules.frozen.position === "right");
		}
	}

	adjustForScrollbar(width){
		if(this.rightColumns.length){
			this.table.columnManager.getContentsElement().style.width = "calc(100% - " + width + "px)";
		}
	}

	getFrozenColumns(){
		return this.leftColumns.concat(this.rightColumns);
	}
	
	_calcSpace(columns, index){
		var width = 0;
		
		for (let i = 0; i < index; i++){
			if(columns[i].visible){
				width += columns[i].getWidth();
			}
		}
		
		return width;
	}
}

class FrozenRows extends Module{

	static moduleName = "frozenRows";

	constructor(table){
		super(table);

		this.topElement = document.createElement("div");
		this.rows = [];

		//register component functions
		this.registerComponentFunction("row", "freeze", this.freezeRow.bind(this));
		this.registerComponentFunction("row", "unfreeze", this.unfreezeRow.bind(this));
		this.registerComponentFunction("row", "isFrozen", this.isRowFrozen.bind(this));

		//register table options
		this.registerTableOption("frozenRowsField", "id"); //field to choose frozen rows by
		this.registerTableOption("frozenRows", false); //holder for frozen row identifiers
	}

	initialize(){
		var	fragment = document.createDocumentFragment();
		
		this.rows = [];

		this.topElement.classList.add("tabulator-frozen-rows-holder");
		
		fragment.appendChild(document.createElement("br"));
		fragment.appendChild(this.topElement);

		// this.table.columnManager.element.append(this.topElement);
		this.table.columnManager.getContentsElement().insertBefore(fragment, this.table.columnManager.headersElement.nextSibling);

		this.subscribe("row-deleting", this.detachRow.bind(this));
		this.subscribe("rows-visible", this.visibleRows.bind(this));

		this.registerDisplayHandler(this.getRows.bind(this), 10);

		if(this.table.options.frozenRows){
			this.subscribe("data-processed", this.initializeRows.bind(this));
			this.subscribe("row-added", this.initializeRow.bind(this));
			this.subscribe("table-redrawing", this.resizeHolderWidth.bind(this));
			this.subscribe("column-resized", this.resizeHolderWidth.bind(this));
			this.subscribe("column-show", this.resizeHolderWidth.bind(this));
			this.subscribe("column-hide", this.resizeHolderWidth.bind(this));
		}

		this.resizeHolderWidth();
	}

	resizeHolderWidth(){
		this.topElement.style.minWidth = this.table.columnManager.headersElement.offsetWidth + "px";
	}

	initializeRows(){
		this.table.rowManager.getRows().forEach((row) => {
			this.initializeRow(row);
		});
	}

	initializeRow(row){
		var frozenRows = this.table.options.frozenRows,
		rowType = typeof frozenRows;

		if(rowType === "number"){
			if(row.getPosition() && (row.getPosition() + this.rows.length) <= frozenRows){
				this.freezeRow(row);
			}
		}else if(rowType === "function"){
			if(frozenRows.call(this.table, row.getComponent())){
				this.freezeRow(row);
			}
		}else if(Array.isArray(frozenRows)){
			if(frozenRows.includes(row.data[this.options("frozenRowsField")])){
				this.freezeRow(row);
			}
		}
	}

	isRowFrozen(row){
		var index = this.rows.indexOf(row);
		return index > -1;
	}

	isFrozen(){
		return !!this.rows.length;
	}

	visibleRows(viewable, rows){
		this.rows.forEach((row) => {
			rows.push(row);
		});

		return rows;
	}

	//filter frozen rows out of display data
	getRows(rows){
		var output = rows.slice(0);

		this.rows.forEach(function(row){
			var index = output.indexOf(row);

			if(index > -1){
				output.splice(index, 1);
			}
		});

		return output;
	}

	freezeRow(row){
		if(!row.modules.frozen){
			row.modules.frozen = true;
			this.topElement.appendChild(row.getElement());
			row.initialize();
			row.normalizeHeight();
		
			this.rows.push(row);

			this.refreshData(false, "display");

			this.table.rowManager.adjustTableSize();

			this.styleRows();

		}else {
			console.warn("Freeze Error - Row is already frozen");
		}
	}

	unfreezeRow(row){
		if(row.modules.frozen){

			row.modules.frozen = false;

			this.detachRow(row);

			this.table.rowManager.adjustTableSize();

			this.refreshData(false, "display");

			if(this.rows.length){
				this.styleRows();
			}

		}else {
			console.warn("Freeze Error - Row is already unfrozen");
		}
	}

	detachRow(row){
		var index = this.rows.indexOf(row);

		if(index > -1){
			var rowEl = row.getElement();

			if(rowEl.parentNode){
				rowEl.parentNode.removeChild(rowEl);
			}

			this.rows.splice(index, 1);
		}
	}

	styleRows(row){
		this.rows.forEach((row, i) => {
			this.table.rowManager.styleRow(row, i);
		});
	}
}

//public group object
class GroupComponent {
	constructor (group){
		this._group = group;
		this.type = "GroupComponent";

		return new Proxy(this, {
			get: function(target, name, receiver) {
				if (typeof target[name] !== "undefined") {
					return target[name];
				}else {
					return target._group.groupManager.table.componentFunctionBinder.handle("group", target._group, name);
				}
			}
		});
	}

	getKey(){
		return this._group.key;
	}

	getField(){
		return this._group.field;
	}

	getElement(){
		return this._group.element;
	}

	getRows(){
		return this._group.getRows(true);
	}

	getSubGroups(){
		return this._group.getSubGroups(true);
	}

	getParentGroup(){
		return this._group.parent ? this._group.parent.getComponent() : false;
	}

	isVisible(){
		return this._group.visible;
	}

	show(){
		this._group.show();
	}

	hide(){
		this._group.hide();
	}

	toggle(){
		this._group.toggleVisibility();
	}

	scrollTo(position, ifVisible){
		return this._group.groupManager.table.rowManager.scrollToRow(this._group, position, ifVisible);
	}

	_getSelf(){
		return this._group;
	}

	getTable(){
		return this._group.groupManager.table;
	}
}

//Group functions
class Group{
	
	constructor(groupManager, parent, level, key, field, generator, oldGroup){
		this.groupManager = groupManager;
		this.parent = parent;
		this.key = key;
		this.level = level;
		this.field = field;
		this.hasSubGroups = level < (groupManager.groupIDLookups.length - 1);
		this.addRow = this.hasSubGroups ? this._addRowToGroup : this._addRow;
		this.type = "group"; //type of element
		this.old = oldGroup;
		this.rows = [];
		this.groups = [];
		this.groupList = [];
		this.generator = generator;
		this.element = false;
		this.elementContents = false;
		this.height = 0;
		this.outerHeight = 0;
		this.initialized = false;
		this.calcs = {};
		this.initialized = false;
		this.modules = {};
		this.arrowElement = false;
		
		this.visible = oldGroup ? oldGroup.visible : (typeof groupManager.startOpen[level] !== "undefined" ? groupManager.startOpen[level] : groupManager.startOpen[0]);
		
		this.component = null;
		
		this.createElements();
		this.addBindings();
		
		this.createValueGroups();
	}
	
	wipe(elementsOnly){
		if(!elementsOnly){
			if(this.groupList.length){
				this.groupList.forEach(function(group){
					group.wipe();
				});
			}else {
				this.rows.forEach((row) => {
					if(row.modules){
						delete row.modules.group;
					}
				});
			}
		}
		
		this.element = false;
		this.arrowElement = false;
		this.elementContents = false;
	}
	
	createElements(){
		var arrow = document.createElement("div");
		arrow.classList.add("tabulator-arrow");
		
		this.element = document.createElement("div");
		this.element.classList.add("tabulator-row");
		this.element.classList.add("tabulator-group");
		this.element.classList.add("tabulator-group-level-" + this.level);
		this.element.setAttribute("role", "rowgroup");
		
		this.arrowElement = document.createElement("div");
		this.arrowElement.classList.add("tabulator-group-toggle");
		this.arrowElement.appendChild(arrow);
		
		//setup movable rows
		if(this.groupManager.table.options.movableRows !== false && this.groupManager.table.modExists("moveRow")){
			this.groupManager.table.modules.moveRow.initializeGroupHeader(this);
		}
	}
	
	createValueGroups(){
		var level = this.level + 1;
		if(this.groupManager.allowedValues && this.groupManager.allowedValues[level]){
			this.groupManager.allowedValues[level].forEach((value) => {
				this._createGroup(value, level);
			});
		}
	}
	
	addBindings(){
		var toggleElement;
		
		if(this.groupManager.table.options.groupToggleElement){
			toggleElement = this.groupManager.table.options.groupToggleElement == "arrow" ? this.arrowElement : this.element;
			
			toggleElement.addEventListener("click", (e) => {
				if(this.groupManager.table.options.groupToggleElement === "arrow"){
					e.stopPropagation();
					e.stopImmediatePropagation();
				}

				//allow click event to propagate before toggling visibility
				setTimeout(() => {
					this.toggleVisibility();
				});
			});
		}
	}
	
	_createGroup(groupID, level){
		var groupKey = level + "_" + groupID;
		var group = new Group(this.groupManager, this, level, groupID,  this.groupManager.groupIDLookups[level].field, this.groupManager.headerGenerator[level] || this.groupManager.headerGenerator[0], this.old ? this.old.groups[groupKey] : false);
		
		this.groups[groupKey] = group;
		this.groupList.push(group);
	}
	
	_addRowToGroup(row){
		
		var level = this.level + 1;
		
		if(this.hasSubGroups){
			var groupID = this.groupManager.groupIDLookups[level].func(row.getData()),
			groupKey = level + "_" + groupID;
			
			if(this.groupManager.allowedValues && this.groupManager.allowedValues[level]){
				if(this.groups[groupKey]){
					this.groups[groupKey].addRow(row);
				}
			}else {
				if(!this.groups[groupKey]){
					this._createGroup(groupID, level);
				}
				
				this.groups[groupKey].addRow(row);
			}
		}
	}
	
	_addRow(row){
		this.rows.push(row);
		row.modules.group = this;
	}
	
	insertRow(row, to, after){
		var data = this.conformRowData({});
		
		row.updateData(data);
		
		var toIndex = this.rows.indexOf(to);
		
		if(toIndex > -1){
			if(after){
				this.rows.splice(toIndex+1, 0, row);
			}else {
				this.rows.splice(toIndex, 0, row);
			}
		}else {
			if(after){
				this.rows.push(row);
			}else {
				this.rows.unshift(row);
			}
		}
		
		row.modules.group = this;
		
		// this.generateGroupHeaderContents();
		
		if(this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.options.columnCalcs != "table"){
			this.groupManager.table.modules.columnCalcs.recalcGroup(this);
		}
		
		this.groupManager.updateGroupRows(true);
	}
	
	scrollHeader(left){
		if(this.arrowElement){
			this.arrowElement.style.marginLeft = left;
			
			this.groupList.forEach(function(child){
				child.scrollHeader(left);
			});
		}
	}
	
	getRowIndex(row){}
	
	//update row data to match grouping constraints
	conformRowData(data){
		if(this.field){
			data[this.field] = this.key;
		}else {
			console.warn("Data Conforming Error - Cannot conform row data to match new group as groupBy is a function");
		}
		
		if(this.parent){
			data = this.parent.conformRowData(data);
		}
		
		return data;
	}
	
	removeRow(row){
		var index = this.rows.indexOf(row);
		var el = row.getElement();
		
		if(index > -1){
			this.rows.splice(index, 1);
		}
		
		if(!this.groupManager.table.options.groupValues && !this.rows.length){
			if(this.parent){
				this.parent.removeGroup(this);
			}else {
				this.groupManager.removeGroup(this);
			}		
			
			this.groupManager.updateGroupRows(true);
			
		}else {
			
			if(el.parentNode){
				el.parentNode.removeChild(el);
			}
			
			if(!this.groupManager.blockRedraw){
				this.generateGroupHeaderContents();
				
				if(this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.options.columnCalcs != "table"){
					this.groupManager.table.modules.columnCalcs.recalcGroup(this);
				}
			}
			
		}
	}
	
	removeGroup(group){
		var groupKey = group.level + "_" + group.key,
		index;
		
		if(this.groups[groupKey]){
			delete this.groups[groupKey];
			
			index = this.groupList.indexOf(group);
			
			if(index > -1){
				this.groupList.splice(index, 1);
			}
			
			if(!this.groupList.length){
				if(this.parent){
					this.parent.removeGroup(this);
				}else {
					this.groupManager.removeGroup(this);
				}
			}
		}
	}
	
	getHeadersAndRows(){
		var output = [];
		
		output.push(this);
		
		this._visSet();
		
		
		if(this.calcs.top){
			this.calcs.top.detachElement();
			this.calcs.top.deleteCells();
		}
		
		if(this.calcs.bottom){
			this.calcs.bottom.detachElement();
			this.calcs.bottom.deleteCells();
		}
		
		
		
		if(this.visible){
			if(this.groupList.length){
				this.groupList.forEach(function(group){
					output = output.concat(group.getHeadersAndRows());
				});
				
			}else {
				if(this.groupManager.table.options.columnCalcs != "table" && this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasTopCalcs()){
					this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);
					output.push(this.calcs.top);
				}
				
				output = output.concat(this.rows);
				
				if(this.groupManager.table.options.columnCalcs != "table" &&  this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()){
					this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);
					output.push(this.calcs.bottom);
				}
			}
		}else {
			if(!this.groupList.length && this.groupManager.table.options.columnCalcs != "table"){
				
				if(this.groupManager.table.modExists("columnCalcs")){
					if(this.groupManager.table.modules.columnCalcs.hasTopCalcs()){
						if(this.groupManager.table.options.groupClosedShowCalcs){
							this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);
							output.push(this.calcs.top);
						}
					}
					
					if(this.groupManager.table.modules.columnCalcs.hasBottomCalcs()){						
						if(this.groupManager.table.options.groupClosedShowCalcs){
							this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);
							output.push(this.calcs.bottom);
						}
					}
				}
			}
			
		}
		
		return output;
	}
	
	getData(visible, transform){
		var output = [];
		
		this._visSet();
		
		if(!visible || (visible && this.visible)){
			this.rows.forEach((row) => {
				output.push(row.getData(transform || "data"));
			});
		}
		
		return output;
	}
	
	getRowCount(){
		var count = 0;
		
		if(this.groupList.length){
			this.groupList.forEach((group) => {
				count += group.getRowCount();
			});
		}else {
			count = this.rows.length;
		}
		return count;
	}

	
	toggleVisibility(){
		if(this.visible){
			this.hide();
		}else {
			this.show();
		}
	}
	
	hide(){
		this.visible = false;
		
		if(this.groupManager.table.rowManager.getRenderMode() == "basic" && !this.groupManager.table.options.pagination){
			
			this.element.classList.remove("tabulator-group-visible");
			
			if(this.groupList.length){
				this.groupList.forEach((group) => {
					
					var rows = group.getHeadersAndRows();
					
					rows.forEach((row) => {
						row.detachElement();
					});
				});
				
			}else {
				this.rows.forEach((row) => {
					var rowEl = row.getElement();
					rowEl.parentNode.removeChild(rowEl);
				});
			}
			
			this.groupManager.updateGroupRows(true);
			
		}else {
			this.groupManager.updateGroupRows(true);
		}
		
		this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged", this.getComponent(), false);
	}
	
	show(){
		this.visible = true;
		
		if(this.groupManager.table.rowManager.getRenderMode() == "basic" && !this.groupManager.table.options.pagination){
			
			this.element.classList.add("tabulator-group-visible");
			
			var prev = this.generateElement();
			
			if(this.groupList.length){
				this.groupList.forEach((group) => {
					var rows = group.getHeadersAndRows();
					
					rows.forEach((row) => {
						var rowEl = row.getElement();
						prev.parentNode.insertBefore(rowEl, prev.nextSibling);
						row.initialize();
						prev = rowEl;
					});
				});
				
			}else {
				this.rows.forEach((row) => {
					var rowEl = row.getElement();
					prev.parentNode.insertBefore(rowEl, prev.nextSibling);
					row.initialize();
					prev = rowEl;
				});
			}
			
			this.groupManager.updateGroupRows(true);
		}else {
			this.groupManager.updateGroupRows(true);
		}
		
		this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged", this.getComponent(), true);
	}
	
	_visSet(){
		var data = [];
		
		if(typeof this.visible == "function"){
			
			this.rows.forEach(function(row){
				data.push(row.getData());
			});
			
			this.visible = this.visible(this.key, this.getRowCount(), data, this.getComponent());
		}
	}
	
	getRowGroup(row){
		var match = false;
		if(this.groupList.length){
			this.groupList.forEach(function(group){
				var result = group.getRowGroup(row);
				
				if(result){
					match = result;
				}
			});
		}else {
			if(this.rows.find(function(item){
				return item === row;
			})){
				match = this;
			}
		}
		
		return match;
	}
	
	getSubGroups(component){
		var output = [];
		
		this.groupList.forEach(function(child){
			output.push(component ? child.getComponent() : child);
		});
		
		return output;
	}
	
	getRows(component, includeChildren){
		var output = [];
		
		if(includeChildren && this.groupList.length){
			this.groupList.forEach((group) => {
				output = output.concat(group.getRows(component, includeChildren));
			});
		}else {
			this.rows.forEach(function(row){
				output.push(component ? row.getComponent() : row);
			});
		}
		
		return output;
	}
	
	generateGroupHeaderContents(){
		var data = [];
		
		var rows = this.getRows(false, true);
		
		rows.forEach(function(row){
			data.push(row.getData());
		});
		
		this.elementContents = this.generator(this.key, this.getRowCount(), data, this.getComponent());
		
		while(this.element.firstChild) this.element.removeChild(this.element.firstChild);
		
		if(typeof this.elementContents === "string"){
			this.element.innerHTML = this.elementContents;
		}else {
			this.element.appendChild(this.elementContents);
		}
		
		this.element.insertBefore(this.arrowElement, this.element.firstChild);
	}
	
	getPath(path = []) {
		path.unshift(this.key);
		if(this.parent) {
			this.parent.getPath(path);
		}
		return path;
	}
	
	////////////// Standard Row Functions //////////////
	
	getElement(){
		return this.elementContents ? this.element : this.generateElement();
	}
	
	generateElement(){
		this.addBindings = false;
		
		this._visSet();
		
		if(this.visible){
			this.element.classList.add("tabulator-group-visible");
		}else {
			this.element.classList.remove("tabulator-group-visible");
		}
		
		for(var i = 0; i < this.element.childNodes.length; ++i){
			this.element.childNodes[i].parentNode.removeChild(this.element.childNodes[i]);
		}
		
		this.generateGroupHeaderContents();
		
		// this.addBindings();
		
		return this.element;
	}
	
	detachElement(){
		if (this.element && this.element.parentNode){
			this.element.parentNode.removeChild(this.element);
		}
	}
	
	//normalize the height of elements in the row
	normalizeHeight(){
		this.setHeight(this.element.clientHeight);
	}
	
	initialize(force){
		if(!this.initialized || force){
			this.normalizeHeight();
			this.initialized = true;
		}
	}
	
	reinitialize(){
		this.initialized = false;
		this.height = 0;
		
		if(Helpers.elVisible(this.element)){
			this.initialize(true);
		}
	}
	
	setHeight(height){
		if(this.height != height){
			this.height = height;
			this.outerHeight = this.element.offsetHeight;
		}
	}
	
	//return rows outer height
	getHeight(){
		return this.outerHeight;
	}
	
	getGroup(){
		return this;
	}
	
	reinitializeHeight(){}
	
	calcHeight(){}
	
	setCellHeight(){}
	
	clearCellHeight(){}
	
	deinitializeHeight(){}

	rendered(){}
	
	//////////////// Object Generation /////////////////
	getComponent(){
		if(!this.component){
			this.component = new GroupComponent(this);
		}
		
		return this.component;
	}
}

class GroupRows extends Module{

	static moduleName = "groupRows";
	
	constructor(table){
		super(table);
		
		this.groupIDLookups = false; //enable table grouping and set field to group by
		this.startOpen = [function(){return false;}]; //starting state of group
		this.headerGenerator = [function(){return "";}];
		this.groupList = []; //ordered list of groups
		this.allowedValues = false;
		this.groups = {}; //hold row groups
		
		this.displayHandler = this.getRows.bind(this);

		this.blockRedraw = false;
		
		//register table options
		this.registerTableOption("groupBy", false); //enable table grouping and set field to group by
		this.registerTableOption("groupStartOpen", true); //starting state of group
		this.registerTableOption("groupValues", false);
		this.registerTableOption("groupUpdateOnCellEdit", false);
		this.registerTableOption("groupHeader", false); //header generation function
		this.registerTableOption("groupHeaderPrint", null);
		this.registerTableOption("groupHeaderClipboard", null);
		this.registerTableOption("groupHeaderHtmlOutput", null);
		this.registerTableOption("groupHeaderDownload", null);
		this.registerTableOption("groupToggleElement", "arrow");
		this.registerTableOption("groupClosedShowCalcs", false);
		
		//register table functions
		this.registerTableFunction("setGroupBy", this.setGroupBy.bind(this));
		this.registerTableFunction("setGroupValues", this.setGroupValues.bind(this));
		this.registerTableFunction("setGroupStartOpen", this.setGroupStartOpen.bind(this));
		this.registerTableFunction("setGroupHeader", this.setGroupHeader.bind(this));
		this.registerTableFunction("getGroups", this.userGetGroups.bind(this));
		this.registerTableFunction("getGroupedData", this.userGetGroupedData.bind(this));
		
		//register component functions
		this.registerComponentFunction("row", "getGroup", this.rowGetGroup.bind(this));
	}
	
	//initialize group configuration
	initialize(){
		this.subscribe("table-destroy", this._blockRedrawing.bind(this));
		this.subscribe("rows-wipe", this._blockRedrawing.bind(this));
		this.subscribe("rows-wiped", this._restore_redrawing.bind(this));

		if(this.table.options.groupBy){
			if(this.table.options.groupUpdateOnCellEdit){
				this.subscribe("cell-value-updated", this.cellUpdated.bind(this));
				this.subscribe("row-data-changed", this.reassignRowToGroup.bind(this), 0);
			}
			
			this.subscribe("table-built", this.configureGroupSetup.bind(this));
			
			this.subscribe("row-deleting", this.rowDeleting.bind(this));
			this.subscribe("row-deleted", this.rowsUpdated.bind(this));
			this.subscribe("scroll-horizontal", this.scrollHeaders.bind(this));
			this.subscribe("rows-wipe", this.wipe.bind(this));
			this.subscribe("rows-added", this.rowsUpdated.bind(this));
			this.subscribe("row-moving", this.rowMoving.bind(this));
			this.subscribe("row-adding-index", this.rowAddingIndex.bind(this));
			
			this.subscribe("rows-sample", this.rowSample.bind(this));
			
			this.subscribe("render-virtual-fill", this.virtualRenderFill.bind(this));
			
			this.registerDisplayHandler(this.displayHandler, 20);
			
			this.initialized = true;
		}
	}
	
	_blockRedrawing(){
		this.blockRedraw = true;
	}

	_restore_redrawing(){
		this.blockRedraw = false;
	}

	configureGroupSetup(){
		if(this.table.options.groupBy){
			var groupBy = this.table.options.groupBy,
			startOpen = this.table.options.groupStartOpen,
			groupHeader = this.table.options.groupHeader;
			
			this.allowedValues = this.table.options.groupValues;
			
			if(Array.isArray(groupBy) && Array.isArray(groupHeader) && groupBy.length > groupHeader.length){
				console.warn("Error creating group headers, groupHeader array is shorter than groupBy array");
			}
			
			this.headerGenerator = [function(){return "";}];
			this.startOpen = [function(){return false;}]; //starting state of group
			
			this.langBind("groups|item", (langValue, lang) => {
				this.headerGenerator[0] = (value, count, data) => { //header layout function
					return (typeof value === "undefined" ? "" : value) + "<span>(" + count + " " + ((count === 1) ? langValue : lang.groups.items) + ")</span>";
				};
			});
			
			this.groupIDLookups = [];
			
			if(groupBy){
				if(this.table.modExists("columnCalcs") && this.table.options.columnCalcs != "table" && this.table.options.columnCalcs != "both"){
					this.table.modules.columnCalcs.removeCalcs();
				}
			}else {
				if(this.table.modExists("columnCalcs") && this.table.options.columnCalcs != "group"){
					
					var cols = this.table.columnManager.getRealColumns();
					
					cols.forEach((col) => {
						if(col.definition.topCalc){
							this.table.modules.columnCalcs.initializeTopRow();
						}
						
						if(col.definition.bottomCalc){
							this.table.modules.columnCalcs.initializeBottomRow();
						}
					});
				}
			}
			
			if(!Array.isArray(groupBy)){
				groupBy = [groupBy];
			}
			
			groupBy.forEach((group, i) => {
				var lookupFunc, column;
				
				if(typeof group == "function"){
					lookupFunc = group;
				}else {
					column = this.table.columnManager.getColumnByField(group);
					
					if(column){
						lookupFunc = function(data){
							return column.getFieldValue(data);
						};
					}else {
						lookupFunc = function(data){
							return data[group];
						};
					}
				}
				
				this.groupIDLookups.push({
					field: typeof group === "function" ? false : group,
					func:lookupFunc,
					values:this.allowedValues ? this.allowedValues[i] : false,
				});
			});
			
			if(startOpen){
				if(!Array.isArray(startOpen)){
					startOpen = [startOpen];
				}
				
				startOpen.forEach((level) => {
				});
				
				this.startOpen = startOpen;
			}
			
			if(groupHeader){
				this.headerGenerator = Array.isArray(groupHeader) ? groupHeader : [groupHeader];
			}
		}else {
			this.groupList = [];
			this.groups = {};
		}
	}
	
	rowSample(rows, prevValue){
		if(this.table.options.groupBy){
			var group = this.getGroups(false)[0];
			
			prevValue.push(group.getRows(false)[0]);
		}
		
		return prevValue;
	}
	
	virtualRenderFill(){
		var el = this.table.rowManager.tableElement;
		var rows = this.table.rowManager.getVisibleRows();
		
		if(this.table.options.groupBy){
			rows = rows.filter((row) => {
				return row.type !== "group";
			});
			
			el.style.minWidth = !rows.length ? this.table.columnManager.getWidth() + "px" : "";
		}else {
			return rows;
		}
	}
	
	rowAddingIndex(row, index, top){
		if(this.table.options.groupBy){
			this.assignRowToGroup(row);
			
			var groupRows = row.modules.group.rows;
			
			if(groupRows.length > 1){
				if(!index || (index && groupRows.indexOf(index) == -1)){
					if(top){
						if(groupRows[0] !== row){
							index = groupRows[0];
							this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index, !top);
						}
					}else {
						if(groupRows[groupRows.length -1] !== row){
							index = groupRows[groupRows.length -1];
							this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index, !top);
						}
					}
				}else {
					this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index, !top);
				}
			}
			
			return index;
		}
	}
	
	trackChanges(){
		this.dispatch("group-changed");
	}
	
	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////
	
	setGroupBy(groups){
		this.table.options.groupBy = groups;
		
		if(!this.initialized){
			this.initialize();
		}
		
		this.configureGroupSetup();

		if(!groups && this.table.modExists("columnCalcs") && this.table.options.columnCalcs === true){
			this.table.modules.columnCalcs.reinitializeCalcs();
		}
		
		this.refreshData();
		
		this.trackChanges();
	}
	
	setGroupValues(groupValues){
		this.table.options.groupValues = groupValues;
		this.configureGroupSetup();
		this.refreshData();
		
		this.trackChanges();
	}
	
	setGroupStartOpen(values){
		this.table.options.groupStartOpen = values;
		this.configureGroupSetup();
		
		if(this.table.options.groupBy){
			this.refreshData();
			
			this.trackChanges();
		}else {
			console.warn("Grouping Update - cant refresh view, no groups have been set");
		}
	}
	
	setGroupHeader(values){
		this.table.options.groupHeader = values;
		this.configureGroupSetup();
		
		if(this.table.options.groupBy){
			this.refreshData();
			
			this.trackChanges();
		}else {
			console.warn("Grouping Update - cant refresh view, no groups have been set");
		}
	}
	
	userGetGroups(values){
		return this.getGroups(true);
	}
	
	// get grouped table data in the same format as getData()
	userGetGroupedData(){
		return this.table.options.groupBy ? this.getGroupedData() : this.getData();
	}
	
	
	///////////////////////////////////////
	///////// Component Functions /////////
	///////////////////////////////////////
	
	rowGetGroup(row){
		return row.modules.group ? row.modules.group.getComponent() : false;
	}
	
	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////
	
	rowMoving(from, to, after){
		if(this.table.options.groupBy){
			if(!after && to instanceof Group){
				to = this.table.rowManager.prevDisplayRow(from) || to;
			}
			
			var toGroup = to instanceof Group ? to : to.modules.group;
			var fromGroup = from instanceof Group ? from : from.modules.group;
			
			if(toGroup === fromGroup){
				this.table.rowManager.moveRowInArray(toGroup.rows, from, to, after);
			}else {
				if(fromGroup){
					fromGroup.removeRow(from);
				}
				
				toGroup.insertRow(from, to, after);
			}
		}
	}
	
	
	rowDeleting(row){
		//remove from group
		if(this.table.options.groupBy && row.modules.group){
			row.modules.group.removeRow(row);
		}
	}
	
	rowsUpdated(row){
		if(this.table.options.groupBy){
			this.updateGroupRows(true);
		}	
	}
	
	cellUpdated(cell){
		if(this.table.options.groupBy){
			this.reassignRowToGroup(cell.row);
		}
	}
	
	//return appropriate rows with group headers
	getRows(rows){
		if(this.table.options.groupBy && this.groupIDLookups.length){
			
			this.dispatchExternal("dataGrouping");
			
			this.generateGroups(rows);
			
			if(this.subscribedExternal("dataGrouped")){
				this.dispatchExternal("dataGrouped", this.getGroups(true));
			}
			
			return this.updateGroupRows();
			
		}else {
			return rows.slice(0);
		}
	}
	
	getGroups(component){
		var groupComponents = [];
		
		this.groupList.forEach(function(group){
			groupComponents.push(component ? group.getComponent() : group);
		});
		
		return groupComponents;
	}
	
	getChildGroups(group){
		var groupComponents = [];
		
		if(!group){
			group = this;
		}
		
		group.groupList.forEach((child) => {
			if(child.groupList.length){
				groupComponents = groupComponents.concat(this.getChildGroups(child));
			}else {
				groupComponents.push(child);
			}
		});
		
		return groupComponents;
	}
	
	wipe(){
		if(this.table.options.groupBy){
			this.groupList.forEach(function(group){
				group.wipe();
			});
			
			this.groupList = [];
			this.groups = {};
		}
	}
	
	pullGroupListData(groupList) {
		var groupListData = [];
		
		groupList.forEach((group) => {
			var groupHeader = {};
			groupHeader.level = 0;
			groupHeader.rowCount = 0;
			groupHeader.headerContent = "";
			var childData = [];
			
			if (group.hasSubGroups) {
				childData = this.pullGroupListData(group.groupList);
				
				groupHeader.level = group.level;
				groupHeader.rowCount = childData.length - group.groupList.length; // data length minus number of sub-headers
				groupHeader.headerContent = group.generator(group.key, groupHeader.rowCount, group.rows, group);
				
				groupListData.push(groupHeader);
				groupListData = groupListData.concat(childData);
			}
			
			else {
				groupHeader.level = group.level;
				groupHeader.headerContent = group.generator(group.key, group.rows.length, group.rows, group);
				groupHeader.rowCount = group.getRows().length;
				
				groupListData.push(groupHeader);
				
				group.getRows().forEach((row) => {
					groupListData.push(row.getData("data"));
				});
			}
		});
		
		return groupListData;
	}
	
	getGroupedData(){
		
		return this.pullGroupListData(this.groupList);
	}
	
	getRowGroup(row){
		var match = false;
		
		if(this.options("dataTree")){
			row = this.table.modules.dataTree.getTreeParentRoot(row);
		}
		
		this.groupList.forEach((group) => {
			var result = group.getRowGroup(row);
			
			if(result){
				match = result;
			}
		});
		
		return match;
	}
	
	countGroups(){
		return this.groupList.length;
	}
	
	generateGroups(rows){
		var oldGroups = this.groups;
		
		this.groups = {};
		this.groupList = [];
		
		if(this.allowedValues && this.allowedValues[0]){
			this.allowedValues[0].forEach((value) => {
				this.createGroup(value, 0, oldGroups);
			});
			
			rows.forEach((row) => {
				this.assignRowToExistingGroup(row, oldGroups);
			});
		}else {
			rows.forEach((row) => {
				this.assignRowToGroup(row, oldGroups);
			});
		}
		
		Object.values(oldGroups).forEach((group) => {
			group.wipe(true);
		});	
	}
	
	
	createGroup(groupID, level, oldGroups){
		var groupKey = level + "_" + groupID,
		group;
		
		oldGroups = oldGroups || [];
		
		group = new Group(this, false, level, groupID, this.groupIDLookups[0].field, this.headerGenerator[0], oldGroups[groupKey]);
		
		this.groups[groupKey] = group;
		this.groupList.push(group);
	}
	
	assignRowToExistingGroup(row, oldGroups){
		var groupID = this.groupIDLookups[0].func(row.getData()),
		groupKey = "0_" + groupID;
		
		if(this.groups[groupKey]){
			this.groups[groupKey].addRow(row);
		}
	}
	
	assignRowToGroup(row, oldGroups){
		var groupID = this.groupIDLookups[0].func(row.getData()),
		newGroupNeeded = !this.groups["0_" + groupID];
		
		if(newGroupNeeded){
			this.createGroup(groupID, 0, oldGroups);
		}
		
		this.groups["0_" + groupID].addRow(row);
		
		return !newGroupNeeded;
	}
	
	reassignRowToGroup(row){
		if(row.type === "row"){
			var oldRowGroup = row.modules.group,
			oldGroupPath = oldRowGroup.getPath(),
			newGroupPath = this.getExpectedPath(row),
			samePath;
			
			// figure out if new group path is the same as old group path
			samePath = (oldGroupPath.length == newGroupPath.length) && oldGroupPath.every((element, index) => {
				return element === newGroupPath[index];
			});
			
			// refresh if they new path and old path aren't the same (aka the row's groupings have changed)
			if(!samePath) {
				oldRowGroup.removeRow(row);
				this.assignRowToGroup(row, this.groups);
				this.refreshData(true);
			}
		}
	}
	
	getExpectedPath(row) {
		var groupPath = [], rowData = row.getData();
		
		this.groupIDLookups.forEach((groupId) => {
			groupPath.push(groupId.func(rowData));
		});
		
		return groupPath;
	}
	
	updateGroupRows(force){
		var output = [];

		if(!this.blockRedraw){
			this.groupList.forEach((group) => {
				output = output.concat(group.getHeadersAndRows());
			});
			
			if(force){
				this.refreshData(true);
			}
		}
		
		return output;
	}
	
	scrollHeaders(left){
		if(this.table.options.groupBy){
			if(this.table.options.renderHorizontal === "virtual"){
				left -= this.table.columnManager.renderer.vDomPadLeft;
			}
			
			left = left + "px";
			
			this.groupList.forEach((group) => {
				group.scrollHeader(left);
			});
		}
	}
	
	removeGroup(group){
		var groupKey = group.level + "_" + group.key,
		index;
		
		if(this.groups[groupKey]){
			delete this.groups[groupKey];
			
			index = this.groupList.indexOf(group);
			
			if(index > -1){
				this.groupList.splice(index, 1);
			}
		}
	}
	
	checkBasicModeGroupHeaderWidth(){
		var element = this.table.rowManager.tableElement,
		onlyGroupHeaders = true;
		
		this.table.rowManager.getDisplayRows().forEach((row, index) =>{
			this.table.rowManager.styleRow(row, index);
			element.appendChild(row.getElement());
			row.initialize(true);
			
			if(row.type !== "group"){
				onlyGroupHeaders = false;
			}
		});
		
		if(onlyGroupHeaders){
			element.style.minWidth = this.table.columnManager.getWidth() + "px";
		}else {
			element.style.minWidth = "";
		}
	}
	
}

var defaultUndoers = {
	cellEdit: function(action){
		action.component.setValueProcessData(action.data.oldValue);
		action.component.cellRendered();
	},

	rowAdd: function(action){
		action.component.deleteActual();

		this.table.rowManager.checkPlaceholder();
	},

	rowDelete: function(action){
		var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);

		if(this.table.options.groupBy && this.table.modExists("groupRows")){
			this.table.modules.groupRows.updateGroupRows(true);
		}

		this._rebindRow(action.component, newRow);

		this.table.rowManager.checkPlaceholder();
	},

	rowMove: function(action){
		var after = (action.data.posFrom  - action.data.posTo) > 0;

		this.table.rowManager.moveRowActual(action.component, this.table.rowManager.getRowFromPosition(action.data.posFrom), after);

		this.table.rowManager.regenerateRowPositions();
		this.table.rowManager.reRenderInPosition();
	},
};

var defaultRedoers = {
	cellEdit: function(action){
		action.component.setValueProcessData(action.data.newValue);
		action.component.cellRendered();
	},

	rowAdd: function(action){
		var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);

		if(this.table.options.groupBy && this.table.modExists("groupRows")){
			this.table.modules.groupRows.updateGroupRows(true);
		}

		this._rebindRow(action.component, newRow);

		this.table.rowManager.checkPlaceholder();
	},

	rowDelete:function(action){
		action.component.deleteActual();

		this.table.rowManager.checkPlaceholder();
	},

	rowMove: function(action){
		this.table.rowManager.moveRowActual(action.component, this.table.rowManager.getRowFromPosition(action.data.posTo), action.data.after);
		
		this.table.rowManager.regenerateRowPositions();
		this.table.rowManager.reRenderInPosition();
	},
};

var bindings$1 = {
	undo:["ctrl + 90", "meta + 90"],
	redo:["ctrl + 89", "meta + 89"],
};

var actions$1 = {
	undo:function(e){
		var cell = false;
		if(this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")){

			cell = this.table.modules.edit.currentCell;

			if(!cell){
				e.preventDefault();
				this.table.modules.history.undo();
			}
		}
	},

	redo:function(e){
		var cell = false;
		if(this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")){

			cell = this.table.modules.edit.currentCell;

			if(!cell){
				e.preventDefault();
				this.table.modules.history.redo();
			}
		}
	},
};

var extensions$3 = {
	keybindings:{
		bindings:bindings$1,
		actions:actions$1
	},
};

class History extends Module{

	static moduleName = "history";
	static moduleExtensions = extensions$3;

	//load defaults
	static undoers = defaultUndoers;
	static redoers = defaultRedoers;

	constructor(table){
		super(table);

		this.history = [];
		this.index = -1;

		this.registerTableOption("history", false); //enable edit history
	}

	initialize(){
		if(this.table.options.history){
			this.subscribe("cell-value-updated", this.cellUpdated.bind(this));
			this.subscribe("cell-delete", this.clearComponentHistory.bind(this));
			this.subscribe("row-delete", this.rowDeleted.bind(this));
			this.subscribe("rows-wipe", this.clear.bind(this));
			this.subscribe("row-added", this.rowAdded.bind(this));
			this.subscribe("row-move", this.rowMoved.bind(this));
		}

		this.registerTableFunction("undo", this.undo.bind(this));
		this.registerTableFunction("redo", this.redo.bind(this));
		this.registerTableFunction("getHistoryUndoSize", this.getHistoryUndoSize.bind(this));
		this.registerTableFunction("getHistoryRedoSize", this.getHistoryRedoSize.bind(this));
		this.registerTableFunction("clearHistory", this.clear.bind(this));
	}

	rowMoved(from, to, after){
		this.action("rowMove", from, {posFrom:from.getPosition(), posTo:to.getPosition(), to:to, after:after});
	}

	rowAdded(row, data, pos, index){
		this.action("rowAdd", row, {data:data, pos:pos, index:index});
	}

	rowDeleted(row){
		var index, rows;

		if(this.table.options.groupBy){

			rows = row.getComponent().getGroup()._getSelf().rows;
			index = rows.indexOf(row);

			if(index){
				index = rows[index-1];
			}
		}else {
			index = row.table.rowManager.getRowIndex(row);

			if(index){
				index = row.table.rowManager.rows[index-1];
			}
		}

		this.action("rowDelete", row, {data:row.getData(), pos:!index, index:index});
	}

	cellUpdated(cell){
		this.action("cellEdit", cell, {oldValue:cell.oldValue, newValue:cell.value});
	}

	clear(){
		this.history = [];
		this.index = -1;
	}

	action(type, component, data){
		this.history = this.history.slice(0, this.index + 1);

		this.history.push({
			type:type,
			component:component,
			data:data,
		});

		this.index ++;
	}

	getHistoryUndoSize(){
		return this.index + 1;
	}

	getHistoryRedoSize(){
		return this.history.length - (this.index + 1);
	}

	clearComponentHistory(component){
		var index = this.history.findIndex(function(item){
			return item.component === component;
		});

		if(index > -1){
			this.history.splice(index, 1);
			if(index <= this.index){
				this.index--;
			}

			this.clearComponentHistory(component);
		}
	}

	undo(){
		if(this.index > -1){
			let action = this.history[this.index];

			History.undoers[action.type].call(this, action);

			this.index--;

			this.dispatchExternal("historyUndo", action.type, action.component.getComponent(), action.data);

			return true;
		}else {
			console.warn(this.options("history") ? "History Undo Error - No more history to undo" : "History module not enabled");
			return false;
		}
	}

	redo(){
		if(this.history.length-1 > this.index){

			this.index++;

			let action = this.history[this.index];

			History.redoers[action.type].call(this, action);

			this.dispatchExternal("historyRedo", action.type, action.component.getComponent(), action.data);

			return true;
		}else {
			console.warn(this.options("history") ? "History Redo Error - No more history to redo" : "History module not enabled");
			return false;
		}
	}

	//rebind rows to new element after deletion
	_rebindRow(oldRow, newRow){
		this.history.forEach(function(action){
			if(action.component instanceof Row){
				if(action.component === oldRow){
					action.component = newRow;
				}
			}else if(action.component instanceof Cell){
				if(action.component.row === oldRow){
					var field = action.component.column.getField();

					if(field){
						action.component = newRow.getCell(field);
					}

				}
			}
		});
	}
}

class HtmlTableImport extends Module{

	static moduleName = "htmlTableImport";

	constructor(table){
		super(table);

		this.fieldIndex = [];
		this.hasIndex = false;
	}

	initialize(){
		this.tableElementCheck();
	}

	tableElementCheck(){
		if(this.table.originalElement && this.table.originalElement.tagName === "TABLE"){
			if(this.table.originalElement.childNodes.length){
				this.parseTable();
			}else {
				console.warn("Unable to parse data from empty table tag, Tabulator should be initialized on a div tag unless importing data from a table element.");
			}
		}
	}

	parseTable(){
		var element = this.table.originalElement,
		options = this.table.options,
		headers = element.getElementsByTagName("th"),
		rows = element.getElementsByTagName("tbody")[0],
		data = [];

		this.hasIndex = false;

		this.dispatchExternal("htmlImporting");

		rows = rows ? rows.getElementsByTagName("tr") : [];

		//check for Tabulator inline options
		this._extractOptions(element, options);

		if(headers.length){
			this._extractHeaders(headers, rows);
		}else {
			this._generateBlankHeaders(headers, rows);
		}

		//iterate through table rows and build data set
		for(var index = 0; index < rows.length; index++){
			var row = rows[index],
			cells = row.getElementsByTagName("td"),
			item = {};

			//create index if the don't exist in table
			if(!this.hasIndex){
				item[options.index] = index;
			}

			for(var i = 0; i < cells.length; i++){
				var cell = cells[i];
				if(typeof this.fieldIndex[i] !== "undefined"){
					item[this.fieldIndex[i]] = cell.innerHTML;
				}
			}

			//add row data to item
			data.push(item);
		}

		options.data = data;

		this.dispatchExternal("htmlImported");
	}

	//extract tabulator attribute options
	_extractOptions(element, options, defaultOptions){
		var attributes = element.attributes;
		var optionsArr = defaultOptions ? Object.keys(defaultOptions) : Object.keys(options);
		var optionsList = {};

		optionsArr.forEach((item) => {
			optionsList[item.toLowerCase()] = item;
		});

		for(var index in attributes){
			var attrib = attributes[index];
			var name;

			if(attrib && typeof attrib == "object" && attrib.name && attrib.name.indexOf("tabulator-") === 0){
				name = attrib.name.replace("tabulator-", "");

				if(typeof optionsList[name] !== "undefined"){
					options[optionsList[name]] = this._attribValue(attrib.value);
				}
			}
		}
	}

	//get value of attribute
	_attribValue(value){
		if(value === "true"){
			return true;
		}

		if(value === "false"){
			return false;
		}

		return value;
	}

	//find column if it has already been defined
	_findCol(title){
		var match = this.table.options.columns.find((column) => {
			return column.title === title;
		});

		return match || false;
	}

	//extract column from headers
	_extractHeaders(headers, rows){
		for(var index = 0; index < headers.length; index++){
			var header = headers[index],
			exists = false,
			col = this._findCol(header.textContent),
			width;

			if(col){
				exists = true;
			}else {
				col = {title:header.textContent.trim()};
			}

			if(!col.field) {
				col.field = header.textContent.trim().toLowerCase().replaceAll(" ", "_");
			}

			width = header.getAttribute("width");

			if(width && !col.width)	{
				col.width = width;
			}

			//check for Tabulator inline options
			this._extractOptions(header, col, this.table.columnManager.optionsList.registeredDefaults);

			this.fieldIndex[index] = col.field;

			if(col.field == this.table.options.index){
				this.hasIndex = true;
			}

			if(!exists){
				this.table.options.columns.push(col);
			}

		}
	}

	//generate blank headers
	_generateBlankHeaders(headers, rows){
		for(var index = 0; index < headers.length; index++){
			var header = headers[index],
			col = {title:"", field:"col" + index};

			this.fieldIndex[index] = col.field;

			var width = header.getAttribute("width");

			if(width){
				col.width = width;
			}

			this.table.options.columns.push(col);
		}
	}
}

function csv(input){
	var data = [],
	row = 0, 
	col = 0,
	inQuote = false;
    
	//Iterate over each character
	for (let index = 0; index < input.length; index++) {
		let char = input[index], 
		nextChar = input[index+1];      
        
		//Initialize empty row
		if(!data[row]){
			data[row] = [];
		}

		//Initialize empty column
		if(!data[row][col]){
			data[row][col] = "";
		}
        
		//Handle quotation mark inside string
		if (char == '"' && inQuote && nextChar == '"') { 
			data[row][col] += char; 
			index++;
			continue; 
		}
        
		//Begin / End Quote
		if (char == '"') { 
			inQuote = !inQuote;
			continue;
		}
        
		//Next column (if not in quote)
		if (char == ',' && !inQuote) { 
			col++;
			continue; 
		}
        
		//New row if new line and not in quote (CRLF) 
		if (char == '\r' && nextChar == '\n' && !inQuote) { 
			col = 0; 
			row++; 
			index++; 
			continue; 
		}
        
		//New row if new line and not in quote (CR or LF) 
		if ((char == '\r' || char == '\n') && !inQuote) { 
			col = 0;
			row++;
			continue; 
		}

		//Normal Character, append to column
		data[row][col] += char;
	}

	return data;
}

function json(input){
	try {
		return JSON.parse(input);
	} catch(e) {
		console.warn("JSON Import Error - File contents is invalid JSON", e);
		return Promise.reject();
	}
}

function array$1 (input){
	return input;
}

function xlsx(input){
	var XLSXLib = this.dependencyRegistry.lookup("XLSX"),
	workbook2 = XLSXLib.read(input),
	sheet = workbook2.Sheets[workbook2.SheetNames[0]];
	
	return XLSXLib.utils.sheet_to_json(sheet, {header: 1 });
}

var defaultImporters = {
	csv:csv,
	json:json,
	array:array$1,
	xlsx:xlsx,
};

class Import extends Module{
	
	static moduleName = "import";
	
	//load defaults
	static importers = defaultImporters;
	
	constructor(table){
		super(table);
		
		this.registerTableOption("importFormat");
		this.registerTableOption("importReader", "text");
		this.registerTableOption("importHeaderTransform");
		this.registerTableOption("importValueTransform");
		this.registerTableOption("importDataValidator");
		this.registerTableOption("importFileValidator");
	}
	
	initialize(){
		this.registerTableFunction("import", this.importFromFile.bind(this));
		
		if(this.table.options.importFormat){
			this.subscribe("data-loading", this.loadDataCheck.bind(this), 10);
			this.subscribe("data-load", this.loadData.bind(this), 10);
		}
	}
	
	loadDataCheck(data){
		return this.table.options.importFormat && (typeof data === "string" || (Array.isArray(data) && data.length && Array.isArray(data)));
	}
	
	loadData(data, params, config, silent, previousData){
		return this.importData(this.lookupImporter(), data)
			.then(this.structureData.bind(this))
			.catch((err) => {
				console.error("Import Error:", err || "Unable to import data");
				return Promise.reject(err);
			});
	}
	
	lookupImporter(importFormat){
		var importer;
		
		if(!importFormat){
			importFormat = this.table.options.importFormat;
		}
		
		if(typeof importFormat === "string"){
			importer = Import.importers[importFormat];
		}else {
			importer = importFormat;
		}
		
		if(!importer){
			console.error("Import Error - Importer not found:", importFormat);
		}
		
		return importer;
	}
	
	importFromFile(importFormat, extension, importReader){
		var importer = this.lookupImporter(importFormat);
		
		if(importer){
			return this.pickFile(extension, importReader)
				.then(this.importData.bind(this, importer))
				.then(this.structureData.bind(this))
				.then(this.mutateData.bind(this))
				.then(this.validateData.bind(this))
				.then(this.setData.bind(this))
				.catch((err) => {
					this.dispatch("import-error", err);
					this.dispatchExternal("importError", err);
					
					console.error("Import Error:", err || "Unable to import file");
					
					this.table.dataLoader.alertError();

					setTimeout(() => {
						this.table.dataLoader.clearAlert();
					}, 3000);
					
					return Promise.reject(err);
				});
		}
	}
	
	pickFile(extensions, importReader){
		return new Promise((resolve, reject) => {
			var input = document.createElement("input");
			input.type = "file";
			input.accept = extensions;
			
			input.addEventListener("change", (e) => {
				var file = input.files[0],
				reader = new FileReader(),
				valid = this.validateFile(file);

				if(valid === true){
				
					this.dispatch("import-importing", input.files);
					this.dispatchExternal("importImporting", input.files);
				
					switch(importReader || this.table.options.importReader){
						case "buffer":
							reader.readAsArrayBuffer(file);
							break;
						
						case "binary":
							reader.readAsBinaryString(file);
							break;
						
						case "url":
							reader.readAsDataURL(file);
							break;
						
						case "text":
						default:
							reader.readAsText(file);
					}
					
					reader.onload = (e) => {
						resolve(reader.result);
					};
					
					reader.onerror = (e) => {
						console.warn("File Load Error - Unable to read file");
						reject(e);
					};
				}else {
					reject(valid);
				}
			});
			
			this.dispatch("import-choose");
			this.dispatchExternal("importChoose");
			input.click();
		});
	}
	
	importData(importer, fileContents){
		var data;
		
		this.table.dataLoader.alertLoader();
		
		return new Promise((resolve, reject) => {
			setTimeout(() => {
				data = importer.call(this.table, fileContents);
				
				if(data instanceof Promise){
					resolve(data);
				}else {
					data ? resolve(data) : reject();
				}
			}, 10);
		});
	}
	
	structureData(parsedData){
		var data = [];
		
		if(Array.isArray(parsedData) && parsedData.length && Array.isArray(parsedData[0])){
			if(this.table.options.autoColumns){
				data = this.structureArrayToObject(parsedData);
			}else {
				data = this.structureArrayToColumns(parsedData);
			}
			
			return data;
		}else {
			return parsedData;
		}
	}
	
	mutateData(data){
		var output = [];
		
		if(Array.isArray(data)){
			data.forEach((row) => {
				output.push(this.table.modules.mutator.transformRow(row, "import"));
			});
		}else {
			output = data;
		}
		
		return output;
	}
	
	transformHeader(headers){
		var output = [];
		
		if(this.table.options.importHeaderTransform){
			headers.forEach((item) => {
				output.push(this.table.options.importHeaderTransform.call(this.table, item, headers));
			});
		}else {
			return headers;
		}
		
		return output;
	}
	
	transformData(row){
		var output = [];

		if(this.table.options.importValueTransform){
			row.forEach((item) => {
				output.push(this.table.options.importValueTransform.call(this.table, item, row));
			});
		}else {
			return row;
		}
		
		return output;
	}
	
	structureArrayToObject(parsedData){
		var columns = this.transformHeader(parsedData.shift());	
		
		var data = parsedData.map((values) => {
			var row = {};

			values = this.transformData(values);
			
			columns.forEach((key, i) => {
				row[key] = values[i];
			});
			
			return row;
		});
		
		return data;
	}
	
	structureArrayToColumns(parsedData){
		var data = [],
		firstRow = this.transformHeader(parsedData[0]),
		columns = this.table.getColumns();
		
		//remove first row if it is the column names
		if(columns[0] && firstRow[0]){
			if(columns[0].getDefinition().title === firstRow[0]){
				parsedData.shift();
			}
		}
		
		//convert row arrays to objects
		parsedData.forEach((rowData) => {
			var row = {};

			rowData = this.transformData(rowData);
			
			rowData.forEach((value, index) => {
				var column = columns[index];
				
				if(column){
					row[column.getField()] = value;
				}
			});
			
			data.push(row);
		});
		
		return data;
	}

	validateFile(file){
		if(this.table.options.importFileValidator){
			return this.table.options.importFileValidator.call(this.table, file);
		}

		return true;
	}

	validateData(data){
		var result;

		if(this.table.options.importDataValidator){
			result = this.table.options.importDataValidator.call(this.table, data);

			if(result === true){
				return data;
			}else {
				return Promise.reject(result);
			}
		}

		return data;
	}
	
	setData(data){
		this.dispatch("import-imported", data);
		this.dispatchExternal("importImported", data);
		
		this.table.dataLoader.clearAlert();
		
		return this.table.setData(data);
	}
}

class Interaction extends Module{

	static moduleName = "interaction";

	constructor(table){
		super(table);

		this.eventMap = {
			//row events
			rowClick:"row-click",
			rowDblClick:"row-dblclick",
			rowContext:"row-contextmenu",
			rowMouseEnter:"row-mouseenter",
			rowMouseLeave:"row-mouseleave",
			rowMouseOver:"row-mouseover",
			rowMouseOut:"row-mouseout",
			rowMouseMove:"row-mousemove",
			rowMouseDown:"row-mousedown",
			rowMouseUp:"row-mouseup",
			rowTap:"row",
			rowDblTap:"row",
			rowTapHold:"row",

			//cell events
			cellClick:"cell-click",
			cellDblClick:"cell-dblclick",
			cellContext:"cell-contextmenu",
			cellMouseEnter:"cell-mouseenter",
			cellMouseLeave:"cell-mouseleave",
			cellMouseOver:"cell-mouseover",
			cellMouseOut:"cell-mouseout",
			cellMouseMove:"cell-mousemove",
			cellMouseDown:"cell-mousedown",
			cellMouseUp:"cell-mouseup",
			cellTap:"cell",
			cellDblTap:"cell",
			cellTapHold:"cell",

			//column header events
			headerClick:"column-click",
			headerDblClick:"column-dblclick",
			headerContext:"column-contextmenu",
			headerMouseEnter:"column-mouseenter",
			headerMouseLeave:"column-mouseleave",
			headerMouseOver:"column-mouseover",
			headerMouseOut:"column-mouseout",
			headerMouseMove:"column-mousemove",
			headerMouseDown:"column-mousedown",
			headerMouseUp:"column-mouseup",
			headerTap:"column",
			headerDblTap:"column",
			headerTapHold:"column",

			//group header
			groupClick:"group-click",
			groupDblClick:"group-dblclick",
			groupContext:"group-contextmenu",
			groupMouseEnter:"group-mouseenter",
			groupMouseLeave:"group-mouseleave",
			groupMouseOver:"group-mouseover",
			groupMouseOut:"group-mouseout",
			groupMouseMove:"group-mousemove",
			groupMouseDown:"group-mousedown",
			groupMouseUp:"group-mouseup",
			groupTap:"group",
			groupDblTap:"group",
			groupTapHold:"group",
		};

		this.subscribers = {};

		this.touchSubscribers = {};

		this.columnSubscribers = {};

		this.touchWatchers = {
			row:{
				tap:null,
				tapDbl:null,
				tapHold:null,
			},
			cell:{
				tap:null,
				tapDbl:null,
				tapHold:null,
			},
			column:{
				tap:null,
				tapDbl:null,
				tapHold:null,
			},
			group:{
				tap:null,
				tapDbl:null,
				tapHold:null,
			}
		};

		this.registerColumnOption("headerClick");
		this.registerColumnOption("headerDblClick");
		this.registerColumnOption("headerContext");
		this.registerColumnOption("headerMouseEnter");
		this.registerColumnOption("headerMouseLeave");
		this.registerColumnOption("headerMouseOver");
		this.registerColumnOption("headerMouseOut");
		this.registerColumnOption("headerMouseMove");
		this.registerColumnOption("headerMouseDown");
		this.registerColumnOption("headerMouseUp");
		this.registerColumnOption("headerTap");
		this.registerColumnOption("headerDblTap");
		this.registerColumnOption("headerTapHold");

		this.registerColumnOption("cellClick");
		this.registerColumnOption("cellDblClick");
		this.registerColumnOption("cellContext");
		this.registerColumnOption("cellMouseEnter");
		this.registerColumnOption("cellMouseLeave");
		this.registerColumnOption("cellMouseOver");
		this.registerColumnOption("cellMouseOut");
		this.registerColumnOption("cellMouseMove");
		this.registerColumnOption("cellMouseDown");
		this.registerColumnOption("cellMouseUp");
		this.registerColumnOption("cellTap");
		this.registerColumnOption("cellDblTap");
		this.registerColumnOption("cellTapHold");

	}

	initialize(){
		this.initializeExternalEvents();

		this.subscribe("column-init", this.initializeColumn.bind(this));
		this.subscribe("cell-dblclick", this.cellContentsSelectionFixer.bind(this));
		this.subscribe("scroll-horizontal", this.clearTouchWatchers.bind(this));
		this.subscribe("scroll-vertical", this.clearTouchWatchers.bind(this));
	}

	clearTouchWatchers(){
		var types = Object.values(this.touchWatchers);

		types.forEach((type) => {
			for(let key in type){
				type[key] = null;
			}
		});
	}
		
	cellContentsSelectionFixer(e, cell){
		var range;

		if(this.table.modExists("edit")){
			if (this.table.modules.edit.currentCell === cell){
				return; //prevent instant selection of editor content
			}
		}

		e.preventDefault();

		try{
			if (document.selection) { // IE
				range = document.body.createTextRange();
				range.moveToElementText(cell.getElement());
				range.select();
			} else if (window.getSelection) {
				range = document.createRange();
				range.selectNode(cell.getElement());
				window.getSelection().removeAllRanges();
				window.getSelection().addRange(range);
			}
		}catch(e){}
	}

	initializeExternalEvents(){
		for(let key in this.eventMap){
			this.subscriptionChangeExternal(key, this.subscriptionChanged.bind(this, key));
		}
	}

	subscriptionChanged(key, added){
		if(added){
			if(!this.subscribers[key]){
				if(this.eventMap[key].includes("-")){
					this.subscribers[key] = this.handle.bind(this, key);
					this.subscribe(this.eventMap[key], this.subscribers[key]);
				}else {
					this.subscribeTouchEvents(key);
				}
			}
		}else {
			if(this.eventMap[key].includes("-")){
				if(this.subscribers[key] && !this.columnSubscribers[key]  && !this.subscribedExternal(key)){
					this.unsubscribe(this.eventMap[key], this.subscribers[key]);
					delete this.subscribers[key];
				}
			}else {
				this.unsubscribeTouchEvents(key);
			}
		}
	}


	subscribeTouchEvents(key){
		var type = this.eventMap[key];

		if(!this.touchSubscribers[type + "-touchstart"]){
			this.touchSubscribers[type + "-touchstart"] = this.handleTouch.bind(this, type, "start");
			this.touchSubscribers[type + "-touchend"] = this.handleTouch.bind(this, type, "end");

			this.subscribe(type + "-touchstart", this.touchSubscribers[type + "-touchstart"]);
			this.subscribe(type + "-touchend", this.touchSubscribers[type + "-touchend"]);
		}

		this.subscribers[key] = true;
	}

	unsubscribeTouchEvents(key){
		var noTouch = true,
		type = this.eventMap[key];

		if(this.subscribers[key] && !this.subscribedExternal(key)){
			delete this.subscribers[key];

			for(let i in this.eventMap){
				if(this.eventMap[i] === type){
					if(this.subscribers[i]){
						noTouch = false;
					}
				}
			}

			if(noTouch){
				this.unsubscribe(type + "-touchstart", this.touchSubscribers[type + "-touchstart"]);
				this.unsubscribe(type + "-touchend", this.touchSubscribers[type + "-touchend"]);

				delete this.touchSubscribers[type + "-touchstart"];
				delete this.touchSubscribers[type + "-touchend"];
			}
		}
	}

	initializeColumn(column){
		var def = column.definition;

		for(let key in this.eventMap){
			if(def[key]){
				this.subscriptionChanged(key, true);

				if(!this.columnSubscribers[key]){
					this.columnSubscribers[key] = [];
				}

				this.columnSubscribers[key].push(column);
			}
		}
	}

	handle(action, e, component){
		this.dispatchEvent(action, e, component);
	}

	handleTouch(type, action, e, component){
		var watchers = this.touchWatchers[type];

		if(type === "column"){
			type = "header";
		}

		switch(action){
			case "start":
				watchers.tap = true;

				clearTimeout(watchers.tapHold);

				watchers.tapHold = setTimeout(() => {
					clearTimeout(watchers.tapHold);
					watchers.tapHold = null;

					watchers.tap = null;
					clearTimeout(watchers.tapDbl);
					watchers.tapDbl = null;

					this.dispatchEvent(type + "TapHold", e,  component);
				}, 1000);
				break;

			case "end":
				if(watchers.tap){

					watchers.tap = null;
					this.dispatchEvent(type + "Tap", e,  component);
				}

				if(watchers.tapDbl){
					clearTimeout(watchers.tapDbl);
					watchers.tapDbl = null;

					this.dispatchEvent(type + "DblTap", e,  component);
				}else {
					watchers.tapDbl = setTimeout(() => {
						clearTimeout(watchers.tapDbl);
						watchers.tapDbl = null;
					}, 300);
				}

				clearTimeout(watchers.tapHold);
				watchers.tapHold = null;
				break;
		}
	}

	dispatchEvent(action, e, component){
		var componentObj = component.getComponent(),
		callback;

		if(this.columnSubscribers[action]){

			if(component instanceof Cell){
				callback = component.column.definition[action];
			}else if(component instanceof Column){
				callback = component.definition[action];
			}

			if(callback){
				callback(e, componentObj);
			}
		}

		this.dispatchExternal(action, e, componentObj);
	}
}

var defaultBindings = {
	navPrev:"shift + 9",
	navNext:9,
	navUp:38,
	navDown:40,
	navLeft:37,
	navRight:39,
	scrollPageUp:33,
	scrollPageDown:34,
	scrollToStart:36,
	scrollToEnd:35,
};

var defaultActions = {
	keyBlock:function(e){
		e.stopPropagation();
		e.preventDefault();
	},

	scrollPageUp:function(e){
		var rowManager = this.table.rowManager,
		newPos = rowManager.scrollTop - rowManager.element.clientHeight;

		e.preventDefault();

		if(rowManager.displayRowsCount){
			if(newPos >= 0){
				rowManager.element.scrollTop = newPos;
			}else {
				rowManager.scrollToRow(rowManager.getDisplayRows()[0]);
			}
		}

		this.table.element.focus();
	},

	scrollPageDown:function(e){
		var rowManager = this.table.rowManager,
		newPos = rowManager.scrollTop + rowManager.element.clientHeight,
		scrollMax = rowManager.element.scrollHeight;

		e.preventDefault();

		if(rowManager.displayRowsCount){
			if(newPos <= scrollMax){
				rowManager.element.scrollTop = newPos;
			}else {
				rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);
			}
		}

		this.table.element.focus();

	},

	scrollToStart:function(e){
		var rowManager = this.table.rowManager;

		e.preventDefault();

		if(rowManager.displayRowsCount){
			rowManager.scrollToRow(rowManager.getDisplayRows()[0]);
		}

		this.table.element.focus();
	},

	scrollToEnd:function(e){
		var rowManager = this.table.rowManager;

		e.preventDefault();

		if(rowManager.displayRowsCount){
			rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);
		}

		this.table.element.focus();
	},

	navPrev:function(e){
		this.dispatch("keybinding-nav-prev", e);
	},

	navNext:function(e){
		this.dispatch("keybinding-nav-next", e);
	},

	navLeft:function(e){
		this.dispatch("keybinding-nav-left", e);
	},

	navRight:function(e){
		this.dispatch("keybinding-nav-right", e);
	},

	navUp:function(e){
		this.dispatch("keybinding-nav-up", e);
	},

	navDown:function(e){
		this.dispatch("keybinding-nav-down", e);
	},
};

class Keybindings extends Module{

	static moduleName = "keybindings";

	//load defaults
	static bindings = defaultBindings;
	static actions = defaultActions;

	constructor(table){
		super(table);

		this.watchKeys = null;
		this.pressedKeys = null;
		this.keyupBinding = false;
		this.keydownBinding = false;

		this.registerTableOption("keybindings", {}); //array for keybindings
		this.registerTableOption("tabEndNewRow", false); //create new row when tab to end of table
	}

	initialize(){
		var bindings = this.table.options.keybindings,
		mergedBindings = {};

		this.watchKeys = {};
		this.pressedKeys = [];

		if(bindings !== false){
			Object.assign(mergedBindings, Keybindings.bindings);
			Object.assign(mergedBindings, bindings);

			this.mapBindings(mergedBindings);
			this.bindEvents();
		}

		this.subscribe("table-destroy", this.clearBindings.bind(this));
	}

	mapBindings(bindings){
		for(let key in bindings){
			if(Keybindings.actions[key]){
				if(bindings[key]){
					if(typeof bindings[key] !== "object"){
						bindings[key] = [bindings[key]];
					}

					bindings[key].forEach((binding) => {
						var bindingList = Array.isArray(binding) ?  binding : [binding];
						
						bindingList.forEach((item) => {
							this.mapBinding(key, item);
						});						
					});
				}
			}else {
				console.warn("Key Binding Error - no such action:", key);
			}
		}
	}

	mapBinding(action, symbolsList){
		var binding = {
			action: Keybindings.actions[action],
			keys: [],
			ctrl: false,
			shift: false,
			meta: false,
		};

		var symbols = symbolsList.toString().toLowerCase().split(" ").join("").split("+");

		symbols.forEach((symbol) => {
			switch(symbol){
				case "ctrl":
					binding.ctrl = true;
					break;

				case "shift":
					binding.shift = true;
					break;

				case "meta":
					binding.meta = true;
					break;

				default:
					symbol = isNaN(symbol) ? symbol.toUpperCase().charCodeAt(0) : parseInt(symbol);
					binding.keys.push(symbol);

					if(!this.watchKeys[symbol]){
						this.watchKeys[symbol] = [];
					}

					this.watchKeys[symbol].push(binding);
			}
		});
	}

	bindEvents(){
		var self = this;

		this.keyupBinding = function(e){
			var code = e.keyCode;
			var bindings = self.watchKeys[code];

			if(bindings){

				self.pressedKeys.push(code);

				bindings.forEach(function(binding){
					self.checkBinding(e, binding);
				});
			}
		};

		this.keydownBinding = function(e){
			var code = e.keyCode;
			var bindings = self.watchKeys[code];

			if(bindings){

				var index = self.pressedKeys.indexOf(code);

				if(index > -1){
					self.pressedKeys.splice(index, 1);
				}
			}
		};

		this.table.element.addEventListener("keydown", this.keyupBinding);

		this.table.element.addEventListener("keyup", this.keydownBinding);
	}

	clearBindings(){
		if(this.keyupBinding){
			this.table.element.removeEventListener("keydown", this.keyupBinding);
		}

		if(this.keydownBinding){
			this.table.element.removeEventListener("keyup", this.keydownBinding);
		}
	}

	checkBinding(e, binding){
		var match = true;

		if(e.ctrlKey == binding.ctrl && e.shiftKey == binding.shift && e.metaKey == binding.meta){
			binding.keys.forEach((key) => {
				var index = this.pressedKeys.indexOf(key);

				if(index == -1){
					match = false;
				}
			});

			if(match){
				binding.action.call(this, e);
			}

			return true;
		}

		return false;
	}
}

class Menu extends Module{

	static moduleName = "menu";
	
	constructor(table){
		super(table);
		
		this.menuContainer = null;
		this.nestedMenuBlock = false;
		
		this.currentComponent = null;
		this.rootPopup = null;
		
		this.columnSubscribers = {};
		
		// this.registerTableOption("menuContainer", undefined); //deprecated
		
		this.registerTableOption("rowContextMenu", false);
		this.registerTableOption("rowClickMenu", false);
		this.registerTableOption("rowDblClickMenu", false);
		this.registerTableOption("groupContextMenu", false);
		this.registerTableOption("groupClickMenu", false);
		this.registerTableOption("groupDblClickMenu", false);
		
		this.registerColumnOption("headerContextMenu");
		this.registerColumnOption("headerClickMenu");
		this.registerColumnOption("headerDblClickMenu");
		this.registerColumnOption("headerMenu");
		this.registerColumnOption("headerMenuIcon");
		this.registerColumnOption("contextMenu");
		this.registerColumnOption("clickMenu");
		this.registerColumnOption("dblClickMenu");
		
	}
	
	initialize(){
		this.deprecatedOptionsCheck();
		this.initializeRowWatchers();
		this.initializeGroupWatchers();
		
		this.subscribe("column-init", this.initializeColumn.bind(this));
	}
	
	deprecatedOptionsCheck(){
		// if(!this.deprecationCheck("menuContainer", "popupContainer")){
		// 	this.table.options.popupContainer = this.table.options.menuContainer;
		// }
	}	
	
	initializeRowWatchers(){
		if(this.table.options.rowContextMenu){
			this.subscribe("row-contextmenu", this.loadMenuEvent.bind(this, this.table.options.rowContextMenu));
			this.table.on("rowTapHold", this.loadMenuEvent.bind(this, this.table.options.rowContextMenu));
		}
		
		if(this.table.options.rowClickMenu){
			this.subscribe("row-click", this.loadMenuEvent.bind(this, this.table.options.rowClickMenu));
		}
		
		if(this.table.options.rowDblClickMenu){
			this.subscribe("row-dblclick", this.loadMenuEvent.bind(this, this.table.options.rowDblClickMenu));
		}
	}
	
	initializeGroupWatchers(){
		if(this.table.options.groupContextMenu){
			this.subscribe("group-contextmenu", this.loadMenuEvent.bind(this, this.table.options.groupContextMenu));
			this.table.on("groupTapHold", this.loadMenuEvent.bind(this, this.table.options.groupContextMenu));
		}
		
		if(this.table.options.groupClickMenu){
			this.subscribe("group-click", this.loadMenuEvent.bind(this, this.table.options.groupClickMenu));
		}
		
		if(this.table.options.groupDblClickMenu){
			this.subscribe("group-dblclick", this.loadMenuEvent.bind(this, this.table.options.groupDblClickMenu));
		}
	}

	initializeColumn(column){
		var	def = column.definition;
		
		//handle column events
		if(def.headerContextMenu && !this.columnSubscribers.headerContextMenu){
			this.columnSubscribers.headerContextMenu = this.loadMenuTableColumnEvent.bind(this, "headerContextMenu");
			this.subscribe("column-contextmenu", this.columnSubscribers.headerContextMenu);
			this.table.on("headerTapHold", this.loadMenuTableColumnEvent.bind(this, "headerContextMenu"));
		}
		
		if(def.headerClickMenu && !this.columnSubscribers.headerClickMenu){
			this.columnSubscribers.headerClickMenu = this.loadMenuTableColumnEvent.bind(this, "headerClickMenu");
			this.subscribe("column-click", this.columnSubscribers.headerClickMenu);
		}
		
		if(def.headerDblClickMenu && !this.columnSubscribers.headerDblClickMenu){
			this.columnSubscribers.headerDblClickMenu = this.loadMenuTableColumnEvent.bind(this, "headerDblClickMenu");
			this.subscribe("column-dblclick", this.columnSubscribers.headerDblClickMenu);
		}
		
		if(def.headerMenu){
			this.initializeColumnHeaderMenu(column);
		}
		
		//handle cell events
		if(def.contextMenu && !this.columnSubscribers.contextMenu){
			this.columnSubscribers.contextMenu = this.loadMenuTableCellEvent.bind(this, "contextMenu");
			this.subscribe("cell-contextmenu", this.columnSubscribers.contextMenu);
			this.table.on("cellTapHold", this.loadMenuTableCellEvent.bind(this, "contextMenu"));
		}
		
		if(def.clickMenu && !this.columnSubscribers.clickMenu){
			this.columnSubscribers.clickMenu = this.loadMenuTableCellEvent.bind(this, "clickMenu");
			this.subscribe("cell-click", this.columnSubscribers.clickMenu);
		}
		
		if(def.dblClickMenu && !this.columnSubscribers.dblClickMenu){
			this.columnSubscribers.dblClickMenu = this.loadMenuTableCellEvent.bind(this, "dblClickMenu");
			this.subscribe("cell-dblclick", this.columnSubscribers.dblClickMenu);
		}
	}
	
	initializeColumnHeaderMenu(column){
		var icon = column.definition.headerMenuIcon,
		headerMenuEl;
		
		headerMenuEl = document.createElement("span");
		headerMenuEl.classList.add("tabulator-header-popup-button");
		
		if(icon){
			if(typeof icon === "function"){
				icon = icon(column.getComponent());
			}
			
			if(icon instanceof HTMLElement){
				headerMenuEl.appendChild(icon);
			}else {
				headerMenuEl.innerHTML = icon;
			}
		}else {
			headerMenuEl.innerHTML = "&vellip;";
		}
		
		headerMenuEl.addEventListener("click", (e) => {
			e.stopPropagation();
			e.preventDefault();
			
			this.loadMenuEvent(column.definition.headerMenu, e, column);
		});
		
		column.titleElement.insertBefore(headerMenuEl, column.titleElement.firstChild);
	}
	
	loadMenuTableCellEvent(option, e, cell){
		if(cell._cell){
			cell = cell._cell;
		}
		
		if(cell.column.definition[option]){
			this.loadMenuEvent(cell.column.definition[option], e, cell);
		}
	}
	
	loadMenuTableColumnEvent(option, e, column){
		if(column._column){
			column = column._column;
		}
		
		if(column.definition[option]){
			this.loadMenuEvent(column.definition[option], e, column);
		}
	}
	
	loadMenuEvent(menu, e, component){
		if(component._group){
			component = component._group;
		}else if(component._row){
			component = component._row;
		}
		
		menu = typeof menu == "function" ? menu.call(this.table, e, component.getComponent()) : menu;
		
		this.loadMenu(e, component, menu);
	}
	
	loadMenu(e, component, menu, parentEl, parentPopup){
		var touch = !(e instanceof MouseEvent),		
		menuEl = document.createElement("div"),
		popup;
		
		menuEl.classList.add("tabulator-menu");
		
		if(!touch){
			e.preventDefault();
		}
		
		//abort if no menu set
		if(!menu || !menu.length){
			return;
		}
		
		if(!parentEl){
			if(this.nestedMenuBlock){
				//abort if child menu already open
				if(this.rootPopup){
					return;
				}
			}else {
				this.nestedMenuBlock = setTimeout(() => {
					this.nestedMenuBlock = false;
				}, 100);
			}
			
			if(this.rootPopup){
				this.rootPopup.hide();	
			}
			
			this.rootPopup = popup = this.popup(menuEl);
			
		}else {
			popup = parentPopup.child(menuEl);
		}
		
		menu.forEach((item) => {
			var itemEl = document.createElement("div"),
			label = item.label,
			disabled = item.disabled;
			
			if(item.separator){
				itemEl.classList.add("tabulator-menu-separator");
			}else {
				itemEl.classList.add("tabulator-menu-item");
				
				if(typeof label == "function"){
					label = label.call(this.table, component.getComponent());
				}
				
				if(label instanceof Node){
					itemEl.appendChild(label);
				}else {
					itemEl.innerHTML = label;
				}
				
				if(typeof disabled == "function"){
					disabled = disabled.call(this.table, component.getComponent());
				}
				
				if(disabled){
					itemEl.classList.add("tabulator-menu-item-disabled");
					itemEl.addEventListener("click", (e) => {
						e.stopPropagation();
					});
				}else {
					if(item.menu && item.menu.length){
						itemEl.addEventListener("click", (e) => {
							e.stopPropagation();
							this.loadMenu(e, component, item.menu, itemEl, popup);
						});
					}else {
						if(item.action){
							itemEl.addEventListener("click", (e) => {
								item.action(e, component.getComponent());
							});
						}
					}
				}
				
				if(item.menu && item.menu.length){
					itemEl.classList.add("tabulator-menu-item-submenu");
				}
			}
			
			menuEl.appendChild(itemEl);
		});
		
		menuEl.addEventListener("click", (e) => {
			if(this.rootPopup){
				this.rootPopup.hide();
			}
		});
		
		popup.show(parentEl || e);
		
		if(popup === this.rootPopup){
			this.rootPopup.hideOnBlur(() => {
				this.rootPopup = null;
				
				if(this.currentComponent){
					this.dispatch("menu-closed", menu, popup);
					this.dispatchExternal("menuClosed", this.currentComponent.getComponent());
					this.currentComponent = null;
				}
			});
			
			this.currentComponent = component;
			
			this.dispatch("menu-opened", menu, popup);
			this.dispatchExternal("menuOpened", component.getComponent());
		}
	}
}

class MoveColumns extends Module{

	static moduleName = "moveColumn";
	
	constructor(table){
		super(table);
		
		this.placeholderElement = this.createPlaceholderElement();
		this.hoverElement = false; //floating column header element
		this.checkTimeout = false; //click check timeout holder
		this.checkPeriod = 250; //period to wait on mousedown to consider this a move and not a click
		this.moving = false; //currently moving column
		this.toCol = false; //destination column
		this.toColAfter = false; //position of moving column relative to the destination column
		this.startX = 0; //starting position within header element
		this.autoScrollMargin = 40; //auto scroll on edge when within margin
		this.autoScrollStep = 5; //auto scroll distance in pixels
		this.autoScrollTimeout = false; //auto scroll timeout
		this.touchMove = false;
		
		this.moveHover = this.moveHover.bind(this);
		this.endMove = this.endMove.bind(this);
		
		this.registerTableOption("movableColumns", false); //enable movable columns
	}
	
	createPlaceholderElement(){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-col");
		el.classList.add("tabulator-col-placeholder");
		
		return el;
	}
	
	initialize(){
		if(this.table.options.movableColumns){
			this.subscribe("column-init", this.initializeColumn.bind(this));
			this.subscribe("alert-show", this.abortMove.bind(this));
		}
	}

	abortMove(){
		clearTimeout(this.checkTimeout);
	}
	
	initializeColumn(column){
		var self = this,
		config = {},
		colEl;

		if(!column.modules.frozen && !column.isGroup && !column.isRowHeader){
			colEl = column.getElement();
			
			config.mousemove = function(e){
				if(column.parent === self.moving.parent){
					if((((self.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(colEl).left) + self.table.columnManager.contentsElement.scrollLeft) > (column.getWidth() / 2)){
						if(self.toCol !== column || !self.toColAfter){
							colEl.parentNode.insertBefore(self.placeholderElement, colEl.nextSibling);
							self.moveColumn(column, true);
						}
					}else {
						if(self.toCol !== column || self.toColAfter){
							colEl.parentNode.insertBefore(self.placeholderElement, colEl);
							self.moveColumn(column, false);
						}
					}
				}
			}.bind(self);
			
			colEl.addEventListener("mousedown", function(e){
				self.touchMove = false;
				if(e.which === 1){
					self.checkTimeout = setTimeout(function(){
						self.startMove(e, column);
					}, self.checkPeriod);
				}
			});
			
			colEl.addEventListener("mouseup", function(e){
				if(e.which === 1){
					if(self.checkTimeout){
						clearTimeout(self.checkTimeout);
					}
				}
			});
			
			self.bindTouchEvents(column);
		}
		
		column.modules.moveColumn = config;
	}
	
	bindTouchEvents(column){
		var colEl = column.getElement(),
		startXMove = false, //shifting center position of the cell
		nextCol, prevCol, nextColWidth, prevColWidth, nextColWidthLast, prevColWidthLast;
		
		colEl.addEventListener("touchstart", (e) => {
			this.checkTimeout = setTimeout(() => {
				this.touchMove = true;
				nextCol = column.nextColumn();
				nextColWidth = nextCol ? nextCol.getWidth()/2 : 0;
				prevCol = column.prevColumn();
				prevColWidth = prevCol ? prevCol.getWidth()/2 : 0;
				nextColWidthLast = 0;
				prevColWidthLast = 0;
				startXMove = false;
				
				this.startMove(e, column);
			}, this.checkPeriod);
		}, {passive: true});
		
		colEl.addEventListener("touchmove", (e) => {
			var diff, moveToCol;
			
			if(this.moving){
				this.moveHover(e);
				
				if(!startXMove){
					startXMove = e.touches[0].pageX;
				}
				
				diff = e.touches[0].pageX - startXMove;
				
				if(diff > 0){
					if(nextCol && diff - nextColWidthLast > nextColWidth){
						moveToCol = nextCol;
						
						if(moveToCol !== column){
							startXMove = e.touches[0].pageX;
							moveToCol.getElement().parentNode.insertBefore(this.placeholderElement, moveToCol.getElement().nextSibling);
							this.moveColumn(moveToCol, true);
						}
					}
				}else {
					if(prevCol && -diff - prevColWidthLast >  prevColWidth){
						moveToCol = prevCol;
						
						if(moveToCol !== column){
							startXMove = e.touches[0].pageX;
							moveToCol.getElement().parentNode.insertBefore(this.placeholderElement, moveToCol.getElement());
							this.moveColumn(moveToCol, false);
						}
					}
				}
				
				if(moveToCol){
					nextCol = moveToCol.nextColumn();
					nextColWidthLast = nextColWidth;
					nextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;
					prevCol = moveToCol.prevColumn();
					prevColWidthLast = prevColWidth;
					prevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;
				}
			}
		}, {passive: true});
		
		colEl.addEventListener("touchend", (e) => {
			if(this.checkTimeout){
				clearTimeout(this.checkTimeout);
			}
			if(this.moving){
				this.endMove(e);
			}
		});
	}
	
	startMove(e, column){
		var element = column.getElement(),
		headerElement = this.table.columnManager.getContentsElement(),
		headersElement = this.table.columnManager.getHeadersElement();
		
		//Prevent moving columns when range selection is active
		if(this.table.modules.selectRange && this.table.modules.selectRange.columnSelection){
			if(this.table.modules.selectRange.mousedown && this.table.modules.selectRange.selecting === "column"){
				return;
			}
		}

		this.moving = column;
		this.startX = (this.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(element).left;
		
		this.table.element.classList.add("tabulator-block-select");
		
		//create placeholder
		this.placeholderElement.style.width = column.getWidth() + "px";
		this.placeholderElement.style.height = column.getHeight() + "px";
		
		element.parentNode.insertBefore(this.placeholderElement, element);
		element.parentNode.removeChild(element);
		
		//create hover element
		this.hoverElement = element.cloneNode(true);
		this.hoverElement.classList.add("tabulator-moving");
		
		headerElement.appendChild(this.hoverElement);
		
		this.hoverElement.style.left = "0";
		this.hoverElement.style.bottom = (headerElement.clientHeight - headersElement.offsetHeight) + "px";
		
		if(!this.touchMove){
			this._bindMouseMove();
			
			document.body.addEventListener("mousemove", this.moveHover);
			document.body.addEventListener("mouseup", this.endMove);
		}
		
		this.moveHover(e);

		this.dispatch("column-moving", e, this.moving);
	}
	
	_bindMouseMove(){
		this.table.columnManager.columnsByIndex.forEach(function(column){
			if(column.modules.moveColumn.mousemove){
				column.getElement().addEventListener("mousemove", column.modules.moveColumn.mousemove);
			}
		});
	}
	
	_unbindMouseMove(){
		this.table.columnManager.columnsByIndex.forEach(function(column){
			if(column.modules.moveColumn.mousemove){
				column.getElement().removeEventListener("mousemove", column.modules.moveColumn.mousemove);
			}
		});
	}
	
	moveColumn(column, after){
		var movingCells = this.moving.getCells();
		
		this.toCol = column;
		this.toColAfter = after;
		
		if(after){
			column.getCells().forEach(function(cell, i){
				var cellEl = cell.getElement(true);
				
				if(cellEl.parentNode && movingCells[i]){
					cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl.nextSibling);
				}
			});
		}else {
			column.getCells().forEach(function(cell, i){
				var cellEl = cell.getElement(true);
				
				if(cellEl.parentNode && movingCells[i]){
					cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl);
				}
			});
		}
	}
	
	endMove(e){
		if(e.which === 1 || this.touchMove){
			this._unbindMouseMove();
			
			this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);
			this.placeholderElement.parentNode.removeChild(this.placeholderElement);
			this.hoverElement.parentNode.removeChild(this.hoverElement);
			
			this.table.element.classList.remove("tabulator-block-select");
			
			if(this.toCol){
				this.table.columnManager.moveColumnActual(this.moving, this.toCol, this.toColAfter);
			}

			this.moving = false;
			this.toCol = false;
			this.toColAfter = false;
			
			if(!this.touchMove){
				document.body.removeEventListener("mousemove", this.moveHover);
				document.body.removeEventListener("mouseup", this.endMove);
			}
		}
	}
	
	moveHover(e){
		var columnHolder = this.table.columnManager.getContentsElement(),
		scrollLeft = columnHolder.scrollLeft,
		xPos = ((this.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(columnHolder).left) + scrollLeft,
		scrollPos;
		
		this.hoverElement.style.left = (xPos - this.startX) + "px";
		
		if(xPos - scrollLeft < this.autoScrollMargin){
			if(!this.autoScrollTimeout){
				this.autoScrollTimeout = setTimeout(() => {
					scrollPos = Math.max(0,scrollLeft-5);
					this.table.rowManager.getElement().scrollLeft = scrollPos;
					this.autoScrollTimeout = false;
				}, 1);
			}
		}
		
		if(scrollLeft + columnHolder.clientWidth - xPos < this.autoScrollMargin){
			if(!this.autoScrollTimeout){
				this.autoScrollTimeout = setTimeout(() => {
					scrollPos = Math.min(columnHolder.clientWidth, scrollLeft+5);
					this.table.rowManager.getElement().scrollLeft = scrollPos;
					this.autoScrollTimeout = false;
				}, 1);
			}
		}
	}
}

var defaultSenders = {
	delete:function(fromRow, toRow, toTable){
		fromRow.delete();
	}
};

var defaultReceivers = {
	insert:function(fromRow, toRow, fromTable){
		this.table.addRow(fromRow.getData(), undefined, toRow);
		return true;
	},

	add:function(fromRow, toRow, fromTable){
		this.table.addRow(fromRow.getData());
		return true;
	},

	update:function(fromRow, toRow, fromTable){
		if(toRow){
			toRow.update(fromRow.getData());
			return true;
		}

		return false;
	},

	replace:function(fromRow, toRow, fromTable){
		if(toRow){
			this.table.addRow(fromRow.getData(), undefined, toRow);
			toRow.delete();
			return true;
		}

		return false;
	},
};

class MoveRows extends Module{

	static moduleName = "moveRow";

	//load defaults
	static senders = defaultSenders;
	static receivers = defaultReceivers;

	constructor(table){
		super(table);

		this.placeholderElement = this.createPlaceholderElement();
		this.hoverElement = false; //floating row header element
		this.checkTimeout = false; //click check timeout holder
		this.checkPeriod = 150; //period to wait on mousedown to consider this a move and not a click
		this.moving = false; //currently moving row
		this.toRow = false; //destination row
		this.toRowAfter = false; //position of moving row relative to the destination row
		this.hasHandle = false; //row has handle instead of fully movable row
		this.startY = 0; //starting Y position within header element
		this.startX = 0; //starting X position within header element

		this.moveHover = this.moveHover.bind(this);
		this.endMove = this.endMove.bind(this);
		this.tableRowDropEvent = false;

		this.touchMove = false;

		this.connection = false;
		this.connectionSelectorsTables = false;
		this.connectionSelectorsElements = false;
		this.connectionElements = [];
		this.connections = [];

		this.connectedTable = false;
		this.connectedRow = false;

		this.registerTableOption("movableRows", false); //enable movable rows
		this.registerTableOption("movableRowsConnectedTables", false); //tables for movable rows to be connected to
		this.registerTableOption("movableRowsConnectedElements", false); //other elements for movable rows to be connected to
		this.registerTableOption("movableRowsSender", false);
		this.registerTableOption("movableRowsReceiver", "insert");

		this.registerColumnOption("rowHandle");
	}

	createPlaceholderElement(){
		var el = document.createElement("div");

		el.classList.add("tabulator-row");
		el.classList.add("tabulator-row-placeholder");

		return el;
	}

	initialize(){
		if(this.table.options.movableRows){
			this.connectionSelectorsTables = this.table.options.movableRowsConnectedTables;
			this.connectionSelectorsElements = this.table.options.movableRowsConnectedElements;

			this.connection = this.connectionSelectorsTables || this.connectionSelectorsElements;

			this.subscribe("cell-init", this.initializeCell.bind(this));
			this.subscribe("column-init", this.initializeColumn.bind(this));
			this.subscribe("row-init", this.initializeRow.bind(this));
		}
	}

	initializeGroupHeader(group){
		var self = this,
		config = {};

		//inter table drag drop
		config.mouseup = function(e){
			self.tableRowDrop(e, group);
		}.bind(self);

		//same table drag drop
		config.mousemove = function(e){
			var rowEl;

			if(((e.pageY - Helpers.elOffset(group.element).top) + self.table.rowManager.element.scrollTop) > (group.getHeight() / 2)){
				if(self.toRow !== group || !self.toRowAfter){
					rowEl = group.getElement();
					rowEl.parentNode.insertBefore(self.placeholderElement, rowEl.nextSibling);
					self.moveRow(group, true);
				}
			}else {
				if(self.toRow !== group || self.toRowAfter){
					rowEl = group.getElement();
					if(rowEl.previousSibling){
						rowEl.parentNode.insertBefore(self.placeholderElement, rowEl);
						self.moveRow(group, false);
					}
				}
			}
		}.bind(self);

		group.modules.moveRow = config;
	}

	initializeRow(row){
		var self = this,
		config = {},
		rowEl;

		//inter table drag drop
		config.mouseup = function(e){
			self.tableRowDrop(e, row);
		}.bind(self);

		//same table drag drop
		config.mousemove = function(e){
			var rowEl = row.getElement();

			if(((e.pageY - Helpers.elOffset(rowEl).top) + self.table.rowManager.element.scrollTop) > (row.getHeight() / 2)){
				if(self.toRow !== row || !self.toRowAfter){
					rowEl.parentNode.insertBefore(self.placeholderElement, rowEl.nextSibling);
					self.moveRow(row, true);
				}
			}else {
				if(self.toRow !== row || self.toRowAfter){
					rowEl.parentNode.insertBefore(self.placeholderElement, rowEl);
					self.moveRow(row, false);
				}
			}
		}.bind(self);


		if(!this.hasHandle){

			rowEl = row.getElement();

			rowEl.addEventListener("mousedown", function(e){
				if(e.which === 1){
					self.checkTimeout = setTimeout(function(){
						self.startMove(e, row);
					}, self.checkPeriod);
				}
			});

			rowEl.addEventListener("mouseup", function(e){
				if(e.which === 1){
					if(self.checkTimeout){
						clearTimeout(self.checkTimeout);
					}
				}
			});

			this.bindTouchEvents(row, row.getElement());
		}

		row.modules.moveRow = config;
	}

	initializeColumn(column){
		if(column.definition.rowHandle && this.table.options.movableRows !== false){
			this.hasHandle = true;
		}
	}

	initializeCell(cell){
		if(cell.column.definition.rowHandle && this.table.options.movableRows !== false){
			var self = this,
			cellEl = cell.getElement(true);

			cellEl.addEventListener("mousedown", function(e){
				if(e.which === 1){
					self.checkTimeout = setTimeout(function(){
						self.startMove(e, cell.row);
					}, self.checkPeriod);
				}
			});

			cellEl.addEventListener("mouseup", function(e){
				if(e.which === 1){
					if(self.checkTimeout){
						clearTimeout(self.checkTimeout);
					}
				}
			});

			this.bindTouchEvents(cell.row, cellEl);
		}
	}

	bindTouchEvents(row, element){
		var startYMove = false, //shifting center position of the cell
		nextRow, prevRow, nextRowHeight, prevRowHeight, nextRowHeightLast, prevRowHeightLast;

		element.addEventListener("touchstart", (e) => {
			this.checkTimeout = setTimeout(() => {
				this.touchMove = true;
				nextRow = row.nextRow();
				nextRowHeight = nextRow ? nextRow.getHeight()/2 : 0;
				prevRow = row.prevRow();
				prevRowHeight = prevRow ? prevRow.getHeight()/2 : 0;
				nextRowHeightLast = 0;
				prevRowHeightLast = 0;
				startYMove = false;

				this.startMove(e, row);
			}, this.checkPeriod);
		}, {passive: true});
		this.moving, this.toRow, this.toRowAfter;
		element.addEventListener("touchmove", (e) => {

			var diff, moveToRow;

			if(this.moving){
				e.preventDefault();

				this.moveHover(e);

				if(!startYMove){
					startYMove = e.touches[0].pageY;
				}

				diff = e.touches[0].pageY - startYMove;

				if(diff > 0){
					if(nextRow && diff - nextRowHeightLast > nextRowHeight){
						moveToRow = nextRow;

						if(moveToRow !== row){
							startYMove = e.touches[0].pageY;
							moveToRow.getElement().parentNode.insertBefore(this.placeholderElement, moveToRow.getElement().nextSibling);
							this.moveRow(moveToRow, true);
						}
					}
				}else {
					if(prevRow && -diff - prevRowHeightLast >  prevRowHeight){
						moveToRow = prevRow;

						if(moveToRow !== row){
							startYMove = e.touches[0].pageY;
							moveToRow.getElement().parentNode.insertBefore(this.placeholderElement, moveToRow.getElement());
							this.moveRow(moveToRow, false);
						}
					}
				}

				if(moveToRow){
					nextRow = moveToRow.nextRow();
					nextRowHeightLast = nextRowHeight;
					nextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;
					prevRow = moveToRow.prevRow();
					prevRowHeightLast = prevRowHeight;
					prevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;
				}
			}
		});

		element.addEventListener("touchend", (e) => {
			if(this.checkTimeout){
				clearTimeout(this.checkTimeout);
			}
			if(this.moving){
				this.endMove(e);
				this.touchMove = false;
			}
		});
	}

	_bindMouseMove(){
		this.table.rowManager.getDisplayRows().forEach((row) => {
			if((row.type === "row" || row.type === "group") && row.modules.moveRow && row.modules.moveRow.mousemove){
				row.getElement().addEventListener("mousemove", row.modules.moveRow.mousemove);
			}
		});
	}

	_unbindMouseMove(){
		this.table.rowManager.getDisplayRows().forEach((row) => {
			if((row.type === "row" || row.type === "group") && row.modules.moveRow && row.modules.moveRow.mousemove){
				row.getElement().removeEventListener("mousemove", row.modules.moveRow.mousemove);
			}
		});
	}

	startMove(e, row){
		var element = row.getElement();

		this.setStartPosition(e, row);

		this.moving = row;

		this.table.element.classList.add("tabulator-block-select");

		//create placeholder
		this.placeholderElement.style.width = row.getWidth() + "px";
		this.placeholderElement.style.height = row.getHeight() + "px";

		if(!this.connection){
			element.parentNode.insertBefore(this.placeholderElement, element);
			element.parentNode.removeChild(element);
		}else {
			this.table.element.classList.add("tabulator-movingrow-sending");
			this.connectToTables(row);
		}

		//create hover element
		this.hoverElement = element.cloneNode(true);
		this.hoverElement.classList.add("tabulator-moving");

		if(this.connection){
			document.body.appendChild(this.hoverElement);
			this.hoverElement.style.left = "0";
			this.hoverElement.style.top = "0";
			this.hoverElement.style.width = this.table.element.clientWidth + "px";
			this.hoverElement.style.whiteSpace = "nowrap";
			this.hoverElement.style.overflow = "hidden";
			this.hoverElement.style.pointerEvents = "none";
		}else {
			this.table.rowManager.getTableElement().appendChild(this.hoverElement);

			this.hoverElement.style.left = "0";
			this.hoverElement.style.top = "0";

			this._bindMouseMove();
		}

		document.body.addEventListener("mousemove", this.moveHover);
		document.body.addEventListener("mouseup", this.endMove);

		this.dispatchExternal("rowMoving", row.getComponent());

		this.moveHover(e);
	}

	setStartPosition(e, row){
		var pageX = this.touchMove ? e.touches[0].pageX : e.pageX,
		pageY = this.touchMove ? e.touches[0].pageY : e.pageY,
		element, position;

		element = row.getElement();
		if(this.connection){
			position = element.getBoundingClientRect();

			this.startX = position.left - pageX + window.pageXOffset;
			this.startY = position.top - pageY + window.pageYOffset;
		}else {
			this.startY = (pageY - element.getBoundingClientRect().top);
		}
	}

	endMove(e){
		if(!e || e.which === 1 || this.touchMove){
			this._unbindMouseMove();

			if(!this.connection){
				this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);
				this.placeholderElement.parentNode.removeChild(this.placeholderElement);
			}

			this.hoverElement.parentNode.removeChild(this.hoverElement);

			this.table.element.classList.remove("tabulator-block-select");

			if(this.toRow){
				this.table.rowManager.moveRow(this.moving, this.toRow, this.toRowAfter);
			}else {
				this.dispatchExternal("rowMoveCancelled", this.moving.getComponent());
			}

			this.moving = false;
			this.toRow = false;
			this.toRowAfter = false;

			document.body.removeEventListener("mousemove", this.moveHover);
			document.body.removeEventListener("mouseup", this.endMove);

			if(this.connection){
				this.table.element.classList.remove("tabulator-movingrow-sending");
				this.disconnectFromTables();
			}
		}
	}

	moveRow(row, after){
		this.toRow = row;
		this.toRowAfter = after;
	}

	moveHover(e){
		if(this.connection){
			this.moveHoverConnections.call(this, e);
		}else {
			this.moveHoverTable.call(this, e);
		}
	}

	moveHoverTable(e){
		var rowHolder = this.table.rowManager.getElement(),
		scrollTop = rowHolder.scrollTop,
		yPos = ((this.touchMove ? e.touches[0].pageY : e.pageY) - rowHolder.getBoundingClientRect().top) + scrollTop;
		
		this.hoverElement.style.top = Math.min(yPos - this.startY, this.table.rowManager.element.scrollHeight - this.hoverElement.offsetHeight) + "px";
	}

	moveHoverConnections(e){
		this.hoverElement.style.left = (this.startX + (this.touchMove ? e.touches[0].pageX : e.pageX)) + "px";
		this.hoverElement.style.top = (this.startY + (this.touchMove ? e.touches[0].pageY : e.pageY)) + "px";
	}

	elementRowDrop(e, element, row){
		this.dispatchExternal("movableRowsElementDrop", e, element, row ? row.getComponent() : false);
	}

	//establish connection with other tables
	connectToTables(row){
		var connectionTables;

		if(this.connectionSelectorsTables){
			connectionTables = this.commsConnections(this.connectionSelectorsTables);

			this.dispatchExternal("movableRowsSendingStart", connectionTables);

			this.commsSend(this.connectionSelectorsTables, "moveRow", "connect", {
				row:row,
			});
		}

		if(this.connectionSelectorsElements){

			this.connectionElements = [];

			if(!Array.isArray(this.connectionSelectorsElements)){
				this.connectionSelectorsElements = [this.connectionSelectorsElements];
			}

			this.connectionSelectorsElements.forEach((query) => {
				if(typeof query === "string"){
					this.connectionElements = this.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(query)));
				}else {
					this.connectionElements.push(query);
				}
			});

			this.connectionElements.forEach((element) => {
				var dropEvent = (e) => {
					this.elementRowDrop(e, element, this.moving);
				};

				element.addEventListener("mouseup", dropEvent);
				element.tabulatorElementDropEvent = dropEvent;

				element.classList.add("tabulator-movingrow-receiving");
			});
		}
	}

	//disconnect from other tables
	disconnectFromTables(){
		var connectionTables;

		if(this.connectionSelectorsTables){
			connectionTables = this.commsConnections(this.connectionSelectorsTables);

			this.dispatchExternal("movableRowsSendingStop", connectionTables);

			this.commsSend(this.connectionSelectorsTables, "moveRow", "disconnect");
		}

		this.connectionElements.forEach((element) => {
			element.classList.remove("tabulator-movingrow-receiving");
			element.removeEventListener("mouseup", element.tabulatorElementDropEvent);
			delete element.tabulatorElementDropEvent;
		});
	}

	//accept incomming connection
	connect(table, row){
		if(!this.connectedTable){
			this.connectedTable = table;
			this.connectedRow = row;

			this.table.element.classList.add("tabulator-movingrow-receiving");

			this.table.rowManager.getDisplayRows().forEach((row) => {
				if(row.type === "row" && row.modules.moveRow && row.modules.moveRow.mouseup){
					row.getElement().addEventListener("mouseup", row.modules.moveRow.mouseup);
				}
			});

			this.tableRowDropEvent = this.tableRowDrop.bind(this);

			this.table.element.addEventListener("mouseup", this.tableRowDropEvent);

			this.dispatchExternal("movableRowsReceivingStart", row, table);

			return true;
		}else {
			console.warn("Move Row Error - Table cannot accept connection, already connected to table:", this.connectedTable);
			return false;
		}
	}

	//close incoming connection
	disconnect(table){
		if(table === this.connectedTable){
			this.connectedTable = false;
			this.connectedRow = false;

			this.table.element.classList.remove("tabulator-movingrow-receiving");

			this.table.rowManager.getDisplayRows().forEach((row) =>{
				if(row.type === "row" && row.modules.moveRow && row.modules.moveRow.mouseup){
					row.getElement().removeEventListener("mouseup", row.modules.moveRow.mouseup);
				}
			});

			this.table.element.removeEventListener("mouseup", this.tableRowDropEvent);

			this.dispatchExternal("movableRowsReceivingStop", table);
		}else {
			console.warn("Move Row Error - trying to disconnect from non connected table");
		}
	}

	dropComplete(table, row, success){
		var sender = false;

		if(success){

			switch(typeof this.table.options.movableRowsSender){
				case "string":
					sender = MoveRows.senders[this.table.options.movableRowsSender];
					break;

				case "function":
					sender = this.table.options.movableRowsSender;
					break;
			}

			if(sender){
				sender.call(this, this.moving ? this.moving.getComponent() : undefined, row ? row.getComponent() : undefined, table);
			}else {
				if(this.table.options.movableRowsSender){
					console.warn("Mover Row Error - no matching sender found:", this.table.options.movableRowsSender);
				}
			}

			this.dispatchExternal("movableRowsSent", this.moving.getComponent(), row ? row.getComponent() : undefined, table);
		}else {
			this.dispatchExternal("movableRowsSentFailed", this.moving.getComponent(), row ? row.getComponent() : undefined, table);
		}

		this.endMove();
	}

	tableRowDrop(e, row){
		var receiver = false,
		success = false;

		e.stopImmediatePropagation();

		switch(typeof this.table.options.movableRowsReceiver){
			case "string":
				receiver = MoveRows.receivers[this.table.options.movableRowsReceiver];
				break;

			case "function":
				receiver = this.table.options.movableRowsReceiver;
				break;
		}

		if(receiver){
			success = receiver.call(this, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);
		}else {
			console.warn("Mover Row Error - no matching receiver found:", this.table.options.movableRowsReceiver);
		}

		if(success){
			this.dispatchExternal("movableRowsReceived", this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);
		}else {
			this.dispatchExternal("movableRowsReceivedFailed", this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);
		}

		this.commsSend(this.connectedTable, "moveRow", "dropcomplete", {
			row:row,
			success:success,
		});
	}

	commsReceived(table, action, data){
		switch(action){
			case "connect":
				return this.connect(table, data.row);

			case "disconnect":
				return this.disconnect(table);

			case "dropcomplete":
				return this.dropComplete(table, data.row, data.success);
		}
	}
}

var defaultMutators = {};

class Mutator extends Module{

	static moduleName = "mutator";

	//load defaults
	static mutators = defaultMutators;

	constructor(table){
		super(table);

		this.allowedTypes = ["", "data", "edit", "clipboard", "import"]; //list of mutation types
		this.enabled = true;

		this.registerColumnOption("mutator");
		this.registerColumnOption("mutatorParams");
		this.registerColumnOption("mutatorData");
		this.registerColumnOption("mutatorDataParams");
		this.registerColumnOption("mutatorEdit");
		this.registerColumnOption("mutatorEditParams");
		this.registerColumnOption("mutatorClipboard");
		this.registerColumnOption("mutatorClipboardParams");
		this.registerColumnOption("mutatorImport");
		this.registerColumnOption("mutatorImportParams");
		this.registerColumnOption("mutateLink");
	}

	initialize(){
		this.subscribe("cell-value-changing", this.transformCell.bind(this));
		this.subscribe("cell-value-changed", this.mutateLink.bind(this));
		this.subscribe("column-layout", this.initializeColumn.bind(this));
		this.subscribe("row-data-init-before", this.rowDataChanged.bind(this));
		this.subscribe("row-data-changing", this.rowDataChanged.bind(this));
	}

	rowDataChanged(row, tempData, updatedData){
		return this.transformRow(tempData, "data", updatedData);
	}

	//initialize column mutator
	initializeColumn(column){
		var match = false,
		config = {};

		this.allowedTypes.forEach((type) => {
			var key = "mutator" + (type.charAt(0).toUpperCase() + type.slice(1)),
			mutator;

			if(column.definition[key]){
				mutator = this.lookupMutator(column.definition[key]);

				if(mutator){
					match = true;

					config[key] = {
						mutator:mutator,
						params: column.definition[key + "Params"] || {},
					};
				}
			}
		});

		if(match){
			column.modules.mutate = config;
		}
	}

	lookupMutator(value){
		var mutator = false;

		//set column mutator
		switch(typeof value){
			case "string":
				if(Mutator.mutators[value]){
					mutator = Mutator.mutators[value];
				}else {
					console.warn("Mutator Error - No such mutator found, ignoring: ", value);
				}
				break;

			case "function":
				mutator = value;
				break;
		}

		return mutator;
	}

	//apply mutator to row
	transformRow(data, type, updatedData){
		var key = "mutator" + (type.charAt(0).toUpperCase() + type.slice(1)),
		value;

		// console.log("key", key)

		if(this.enabled){

			this.table.columnManager.traverse((column) => {
				var mutator, params, component;

				if(column.modules.mutate){
					mutator = column.modules.mutate[key] || column.modules.mutate.mutator || false;

					if(mutator){
						value = column.getFieldValue(typeof updatedData !== "undefined" ? updatedData : data);

						if((type == "data" && !updatedData)|| typeof value !== "undefined"){
							component = column.getComponent();
							params = typeof mutator.params === "function" ? mutator.params(value, data, type, component) : mutator.params;
							column.setFieldValue(data, mutator.mutator(value, data, type, params, component));
						}
					}
				}
			});
		}

		return data;
	}

	//apply mutator to new cell value
	transformCell(cell, value){
		if(cell.column.modules.mutate){
			var mutator = cell.column.modules.mutate.mutatorEdit || cell.column.modules.mutate.mutator || false,
			tempData = {};

			if(mutator){
				tempData = Object.assign(tempData, cell.row.getData());
				cell.column.setFieldValue(tempData, value);
				return mutator.mutator(value, tempData, "edit", mutator.params, cell.getComponent());
			}
		}

		return value;
	}

	mutateLink(cell){
		var links = cell.column.definition.mutateLink;

		if(links){
			if(!Array.isArray(links)){
				links = [links];
			}

			links.forEach((link) => {
				var linkCell = cell.row.getCell(link);

				if(linkCell){
					linkCell.setValue(linkCell.getValue(), true, true);
				}
			});
		}
	}

	enable(){
		this.enabled = true;
	}

	disable(){
		this.enabled = false;
	}
}

function rows(pageSize, currentRow, currentPage, totalRows, totalPages){
	var el = document.createElement("span"),
	showingEl = document.createElement("span"),
	valueEl = document.createElement("span"),
	ofEl = document.createElement("span"),
	totalEl = document.createElement("span"),
	rowsEl = document.createElement("span");

	this.table.modules.localize.langBind("pagination|counter|showing", (value) => {
		showingEl.innerHTML = value;
	});

	this.table.modules.localize.langBind("pagination|counter|of", (value) => {
		ofEl.innerHTML = value;
	});

	this.table.modules.localize.langBind("pagination|counter|rows", (value) => {
		rowsEl.innerHTML = value;
	});

	if(totalRows){
		valueEl.innerHTML = " " + currentRow + "-" + Math.min((currentRow + pageSize - 1), totalRows) + " ";
		
		totalEl.innerHTML = " " + totalRows + " ";
		
		el.appendChild(showingEl);
		el.appendChild(valueEl);
		el.appendChild(ofEl);
		el.appendChild(totalEl);
		el.appendChild(rowsEl);
	}else {
		valueEl.innerHTML = " 0 ";

		el.appendChild(showingEl);
		el.appendChild(valueEl);
		el.appendChild(rowsEl);
	}
	
	return el;
}

function pages(pageSize, currentRow, currentPage, totalRows, totalPages){

	var el = document.createElement("span"),
	showingEl = document.createElement("span"),
	valueEl = document.createElement("span"),
	ofEl = document.createElement("span"),
	totalEl = document.createElement("span"),
	rowsEl = document.createElement("span");
	
	this.table.modules.localize.langBind("pagination|counter|showing", (value) => {
		showingEl.innerHTML = value;
	});
	
	valueEl.innerHTML = " " + currentPage + " ";
	
	this.table.modules.localize.langBind("pagination|counter|of", (value) => {
		ofEl.innerHTML = value;
	});
	
	totalEl.innerHTML = " " + totalPages + " ";
	
	this.table.modules.localize.langBind("pagination|counter|pages", (value) => {
		rowsEl.innerHTML = value;
	});
	
	el.appendChild(showingEl);
	el.appendChild(valueEl);
	el.appendChild(ofEl);
	el.appendChild(totalEl);
	el.appendChild(rowsEl);
	
	return el;
}

var defaultPageCounters = {
	rows:rows,
	pages:pages,
};

class Page extends Module{

	static moduleName = "page";

	//load defaults
	static pageCounters = defaultPageCounters;
	
	constructor(table){
		super(table);
		
		this.mode = "local";
		this.progressiveLoad = false;
		
		this.element = null;
		this.pageCounterElement = null;
		this.pageCounter = null;
		
		this.size = 0;
		this.page = 1;
		this.count = 5;
		this.max = 1;

		this.remoteRowCountEstimate = null;
		
		this.initialLoad = true;
		this.dataChanging = false; //flag to check if data is being changed by this module
		
		this.pageSizes = [];
		
		this.registerTableOption("pagination", false); //set pagination type
		this.registerTableOption("paginationMode", "local"); //local or remote pagination
		this.registerTableOption("paginationSize", false); //set number of rows to a page
		this.registerTableOption("paginationInitialPage", 1); //initial page to show on load
		this.registerTableOption("paginationCounter", false);  // set pagination counter
		this.registerTableOption("paginationCounterElement", false);  // set pagination counter
		this.registerTableOption("paginationButtonCount", 5);  // set count of page button
		this.registerTableOption("paginationSizeSelector", false); //add pagination size selector element
		this.registerTableOption("paginationElement", false); //element to hold pagination numbers
		// this.registerTableOption("paginationDataSent", {}); //pagination data sent to the server
		// this.registerTableOption("paginationDataReceived", {}); //pagination data received from the server
		this.registerTableOption("paginationAddRow", "page"); //add rows on table or page
		this.registerTableOption("paginationOutOfRange", false); //reset the current page when the last page < this.page, values: false|function|any value accepted by setPage()
		
		this.registerTableOption("progressiveLoad", false); //progressive loading
		this.registerTableOption("progressiveLoadDelay", 0); //delay between requests
		this.registerTableOption("progressiveLoadScrollMargin", 0); //margin before scroll begins
		
		this.registerTableFunction("setMaxPage", this.setMaxPage.bind(this));
		this.registerTableFunction("setPage", this.setPage.bind(this));
		this.registerTableFunction("setPageToRow", this.userSetPageToRow.bind(this));
		this.registerTableFunction("setPageSize", this.userSetPageSize.bind(this));
		this.registerTableFunction("getPageSize", this.getPageSize.bind(this));
		this.registerTableFunction("previousPage", this.previousPage.bind(this));
		this.registerTableFunction("nextPage", this.nextPage.bind(this));
		this.registerTableFunction("getPage", this.getPage.bind(this));
		this.registerTableFunction("getPageMax", this.getPageMax.bind(this));
		
		//register component functions
		this.registerComponentFunction("row", "pageTo", this.setPageToRow.bind(this));
	}
	
	initialize(){
		if(this.table.options.pagination){
			this.subscribe("row-deleted", this.rowsUpdated.bind(this));
			this.subscribe("row-added", this.rowsUpdated.bind(this));
			this.subscribe("data-processed", this.initialLoadComplete.bind(this));
			this.subscribe("table-built", this.calculatePageSizes.bind(this));
			this.subscribe("footer-redraw", this.footerRedraw.bind(this));

			if(this.table.options.paginationAddRow == "page"){
				this.subscribe("row-adding-position", this.rowAddingPosition.bind(this));
			}
			
			if(this.table.options.paginationMode === "remote"){
				this.subscribe("data-params", this.remotePageParams.bind(this));
				this.subscribe("data-loaded", this._parseRemoteData.bind(this));
			}
			
			if(this.table.options.progressiveLoad){
				console.error("Progressive Load Error - Pagination and progressive load cannot be used at the same time");
			}
			
			this.registerDisplayHandler(this.restOnRenderBefore.bind(this), 40);
			this.registerDisplayHandler(this.getRows.bind(this), 50);
			
			this.createElements();
			this.initializePageCounter();
			this.initializePaginator();
		}else if(this.table.options.progressiveLoad){
			this.subscribe("data-params", this.remotePageParams.bind(this));
			this.subscribe("data-loaded", this._parseRemoteData.bind(this));
			this.subscribe("table-built", this.calculatePageSizes.bind(this));
			this.subscribe("data-processed", this.initialLoadComplete.bind(this));
			
			this.initializeProgressive(this.table.options.progressiveLoad);
			
			if(this.table.options.progressiveLoad === "scroll"){
				this.subscribe("scroll-vertical", this.scrollVertical.bind(this));
			}
		}
	}
	
	rowAddingPosition(row, top){
		var rowManager = this.table.rowManager,
		displayRows = rowManager.getDisplayRows(),
		index;
		
		if(top){
			if(displayRows.length){
				index = displayRows[0];
			}else {
				if(rowManager.activeRows.length){
					index = rowManager.activeRows[rowManager.activeRows.length-1];
					top = false;
				}
			}
		}else {
			if(displayRows.length){
				index = displayRows[displayRows.length - 1];
				top = displayRows.length < this.size ? false : true;
			}
		}
		
		return {index, top};
	}
	
	calculatePageSizes(){
		var testElRow, testElCell;
		
		if(this.table.options.paginationSize){
			this.size = this.table.options.paginationSize;
		}else {
			testElRow = document.createElement("div");
			testElRow.classList.add("tabulator-row");
			testElRow.style.visibility = "hidden";
			
			testElCell = document.createElement("div");
			testElCell.classList.add("tabulator-cell");
			testElCell.innerHTML = "Page Row Test";
			
			testElRow.appendChild(testElCell);
			
			this.table.rowManager.getTableElement().appendChild(testElRow);
			
			this.size = Math.floor(this.table.rowManager.getElement().clientHeight / testElRow.offsetHeight);
			
			this.table.rowManager.getTableElement().removeChild(testElRow);
		}

		this.dispatchExternal("pageSizeChanged", this.size);
		
		this.generatePageSizeSelectList();
	}
	
	initialLoadComplete(){
		this.initialLoad = false;
	}
	
	remotePageParams(data, config, silent, params){
		if(!this.initialLoad){
			if((this.progressiveLoad && !silent) || (!this.progressiveLoad && !this.dataChanging)){
				this.reset(true);
			}
		}
		
		//configure request params
		params.page = this.page;
		
		//set page size if defined
		if(this.size){
			params.size = this.size;
		}
		
		return params;
	}
	
	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////
	
	userSetPageToRow(row){
		if(this.table.options.pagination){
			row = this.table.rowManager.findRow(row);
			
			if(row){
				return this.setPageToRow(row);
			}
		}
		
		return Promise.reject();
	}
	
	userSetPageSize(size){
		if(this.table.options.pagination){
			this.setPageSize(size);
			return this.setPage(1);
		}else {
			return false;
		}
	}
	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////
	
	scrollVertical(top, dir){
		var element, diff, margin;
		if(!dir && !this.table.dataLoader.loading){
			element = this.table.rowManager.getElement();
			diff = element.scrollHeight - element.clientHeight - top;
			margin = this.table.options.progressiveLoadScrollMargin || (element.clientHeight * 2);
			
			if(diff < margin){
				this.nextPage()
					.catch(() => {}); //consume the exception thrown when on the last page
			}
		}
	}
	
	restOnRenderBefore(rows, renderInPosition){
		if(!renderInPosition){
			if(this.mode === "local"){
				this.reset();
			}
		}
		
		return rows;
	}
	
	rowsUpdated(){
		this.refreshData(true, "all");
	}
	
	createElements(){
		var button;
		
		this.element = document.createElement("span");
		this.element.classList.add("tabulator-paginator");
		
		this.pagesElement = document.createElement("span");
		this.pagesElement.classList.add("tabulator-pages");
		
		button = document.createElement("button");
		button.classList.add("tabulator-page");
		button.setAttribute("type", "button");
		button.setAttribute("role", "button");
		button.setAttribute("aria-label", "");
		button.setAttribute("title", "");
		
		this.firstBut = button.cloneNode(true);
		this.firstBut.setAttribute("data-page", "first");
		
		this.prevBut = button.cloneNode(true);
		this.prevBut.setAttribute("data-page", "prev");
		
		this.nextBut = button.cloneNode(true);
		this.nextBut.setAttribute("data-page", "next");
		
		this.lastBut = button.cloneNode(true);
		this.lastBut.setAttribute("data-page", "last");
		
		if(this.table.options.paginationSizeSelector){
			this.pageSizeSelect = document.createElement("select");
			this.pageSizeSelect.classList.add("tabulator-page-size");
		}
	}
	
	generatePageSizeSelectList(){
		var pageSizes = [];
		
		if(this.pageSizeSelect){
			
			if(Array.isArray(this.table.options.paginationSizeSelector)){
				pageSizes = this.table.options.paginationSizeSelector;
				this.pageSizes = pageSizes;
				
				if(this.pageSizes.indexOf(this.size) == -1){
					pageSizes.unshift(this.size);
				}
			}else {
				
				if(this.pageSizes.indexOf(this.size) == -1){
					pageSizes = [];
					
					for (let i = 1; i < 5; i++){
						pageSizes.push(this.size * i);
					}
					
					this.pageSizes = pageSizes;
				}else {
					pageSizes = this.pageSizes;
				}
			}
			
			while(this.pageSizeSelect.firstChild) this.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);
			
			pageSizes.forEach((item) => {
				var itemEl = document.createElement("option");
				itemEl.value = item;
				
				if(item === true){
					this.langBind("pagination|all", function(value){
						itemEl.innerHTML = value;
					});
				}else {
					itemEl.innerHTML = item;
				}
				
				
				
				this.pageSizeSelect.appendChild(itemEl);
			});
			
			this.pageSizeSelect.value = this.size;
		}
	}
	
	initializePageCounter(){
		var counter = this.table.options.paginationCounter,
		pageCounter = null;
		
		if(counter){
			if(typeof counter === "function"){
				pageCounter = counter;
			}else {
				pageCounter = Page.pageCounters[counter];
			}
			
			if(pageCounter){
				this.pageCounter = pageCounter;
				
				this.pageCounterElement = document.createElement("span");
				this.pageCounterElement.classList.add("tabulator-page-counter");
			}else {
				console.warn("Pagination Error - No such page counter found: ", counter);
			}
		}
	}
	
	//setup pagination
	initializePaginator(hidden){
		var pageSelectLabel, paginationCounterHolder;
		
		if(!hidden){
			//build pagination element
			
			//bind localizations
			this.langBind("pagination|first", (value) => {
				this.firstBut.innerHTML = value;
			});
			
			this.langBind("pagination|first_title", (value) => {
				this.firstBut.setAttribute("aria-label", value);
				this.firstBut.setAttribute("title", value);
			});
			
			this.langBind("pagination|prev", (value) => {
				this.prevBut.innerHTML = value;
			});
			
			this.langBind("pagination|prev_title", (value) => {
				this.prevBut.setAttribute("aria-label", value);
				this.prevBut.setAttribute("title", value);
			});
			
			this.langBind("pagination|next", (value) => {
				this.nextBut.innerHTML = value;
			});
			
			this.langBind("pagination|next_title", (value) => {
				this.nextBut.setAttribute("aria-label", value);
				this.nextBut.setAttribute("title", value);
			});
			
			this.langBind("pagination|last", (value) => {
				this.lastBut.innerHTML = value;
			});
			
			this.langBind("pagination|last_title", (value) => {
				this.lastBut.setAttribute("aria-label", value);
				this.lastBut.setAttribute("title", value);
			});
			
			//click bindings
			this.firstBut.addEventListener("click", () => {
				this.setPage(1);
			});
			
			this.prevBut.addEventListener("click", () => {
				this.previousPage();
			});
			
			this.nextBut.addEventListener("click", () => {
				this.nextPage();
			});
			
			this.lastBut.addEventListener("click", () => {
				this.setPage(this.max);
			});
			
			if(this.table.options.paginationElement){
				this.element = this.table.options.paginationElement;
			}
			
			if(this.pageSizeSelect){
				pageSelectLabel = document.createElement("label");
				
				this.langBind("pagination|page_size", (value) => {
					this.pageSizeSelect.setAttribute("aria-label", value);
					this.pageSizeSelect.setAttribute("title", value);
					pageSelectLabel.innerHTML = value;
				});
				
				this.element.appendChild(pageSelectLabel);
				this.element.appendChild(this.pageSizeSelect);
				
				this.pageSizeSelect.addEventListener("change", (e) => {
					this.setPageSize(this.pageSizeSelect.value == "true" ? true : this.pageSizeSelect.value);
					this.setPage(1);
				});
			}
			
			//append to DOM
			this.element.appendChild(this.firstBut);
			this.element.appendChild(this.prevBut);
			this.element.appendChild(this.pagesElement);
			this.element.appendChild(this.nextBut);
			this.element.appendChild(this.lastBut);
			
			if(!this.table.options.paginationElement){
				if(this.table.options.paginationCounter){

					if(this.table.options.paginationCounterElement){
						if(this.table.options.paginationCounterElement instanceof HTMLElement){
							this.table.options.paginationCounterElement.appendChild(this.pageCounterElement);
						}else if(typeof this.table.options.paginationCounterElement === "string"){
							paginationCounterHolder = document.querySelector(this.table.options.paginationCounterElement);
							
							if(paginationCounterHolder){
								paginationCounterHolder.appendChild(this.pageCounterElement);
							}else {
								console.warn("Pagination Error - Unable to find element matching paginationCounterElement selector:", this.table.options.paginationCounterElement);
							}
						}
					}else {
						this.footerAppend(this.pageCounterElement);
					}
					
				}
				
				this.footerAppend(this.element);
			}
			
			this.page = this.table.options.paginationInitialPage;
			this.count = this.table.options.paginationButtonCount;
		}
		
		//set default values
		this.mode = this.table.options.paginationMode;
	}
	
	initializeProgressive(mode){
		this.initializePaginator(true);
		this.mode = "progressive_" + mode;
		this.progressiveLoad = true;
	}
	
	trackChanges(){
		this.dispatch("page-changed");
	}
	
	//calculate maximum page from number of rows
	setMaxRows(rowCount){
		if(!rowCount){
			this.max = 1;
		}else {
			this.max = this.size === true ?  1 : Math.ceil(rowCount/this.size);
		}
		
		if(this.page > this.max){
			this.page = this.max;
		}
	}
	
	//reset to first page without triggering action
	reset(force){
		if(!this.initialLoad){
			if(this.mode == "local" || force){
				this.page = 1;
				this.trackChanges();
			}
		}
	}
	
	//set the maximum page
	setMaxPage(max){
		
		max = parseInt(max);
		
		this.max = max || 1;
		
		if(this.page > this.max){
			this.page = this.max;
			this.trigger();
		}
	}
	
	//set current page number
	setPage(page){
		switch(page){
			case "first":
				return this.setPage(1);
	
			case "prev":
				return this.previousPage();
			
			case "next":
				return this.nextPage();
			
			case "last":
				return this.setPage(this.max);
		}
		
		page = parseInt(page);
		
		if((page > 0 && page <= this.max) || this.mode !== "local"){
			this.page = page;
			
			this.trackChanges();
			
			return this.trigger();
		}else {
			console.warn("Pagination Error - Requested page is out of range of 1 - " + this.max + ":", page);
			return Promise.reject();
		}
	}
	
	setPageToRow(row){
		var rows = this.displayRows(-1);
		var index = rows.indexOf(row);
	
		if(index > -1){
			var page = this.size === true ? 1 : Math.ceil((index + 1) / this.size);
			
			return this.setPage(page);
		}else {
			console.warn("Pagination Error - Requested row is not visible");
			return Promise.reject();
		}
	}
	
	setPageSize(size){
		if(size !== true){
			size = parseInt(size);
		}

		if(size > 0){
			this.size = size;
			this.dispatchExternal("pageSizeChanged", size);
		}
		
		if(this.pageSizeSelect){
			// this.pageSizeSelect.value = size;
			this.generatePageSizeSelectList();
		}
		
		this.trackChanges();
	}
	
	_setPageCounter(totalRows, size, currentRow){
		var content;
		
		if(this.pageCounter){

			if(this.mode === "remote"){
				size = this.size;
				currentRow = ((this.page - 1) * this.size) + 1;
				totalRows = this.remoteRowCountEstimate;
			}

			content = this.pageCounter.call(this, size, currentRow, this.page, totalRows, this.max);
			
			switch(typeof content){
				case "object":
					if(content instanceof Node){
					
						//clear previous cell contents
						while(this.pageCounterElement.firstChild) this.pageCounterElement.removeChild(this.pageCounterElement.firstChild);
					
						this.pageCounterElement.appendChild(content);
					}else {
						this.pageCounterElement.innerHTML = "";
					
						if(content != null){
							console.warn("Page Counter Error - Page Counter has returned a type of object, the only valid page counter object return is an instance of Node, the page counter returned:", content);
						}
					}
					break;
				case "undefined":
					this.pageCounterElement.innerHTML = "";
					break;
				default:
					this.pageCounterElement.innerHTML = content;
			}
		}
	}
	
	//setup the pagination buttons
	_setPageButtons(){
		let leftSize = Math.floor((this.count-1) / 2);
		let rightSize = Math.ceil((this.count-1) / 2);
		let min = this.max - this.page + leftSize + 1 < this.count ? this.max-this.count+1: Math.max(this.page-leftSize,1);
		let max = this.page <= rightSize? Math.min(this.count, this.max) :Math.min(this.page+rightSize, this.max);
		
		while(this.pagesElement.firstChild) this.pagesElement.removeChild(this.pagesElement.firstChild);
		
		if(this.page == 1){
			this.firstBut.disabled = true;
			this.prevBut.disabled = true;
		}else {
			this.firstBut.disabled = false;
			this.prevBut.disabled = false;
		}
		
		if(this.page == this.max){
			this.lastBut.disabled = true;
			this.nextBut.disabled = true;
		}else {
			this.lastBut.disabled = false;
			this.nextBut.disabled = false;
		}
		
		for(let i = min; i <= max; i++){
			if(i>0 && i <= this.max){
				this.pagesElement.appendChild(this._generatePageButton(i));
			}
		}
		
		this.footerRedraw();
	}
	
	_generatePageButton(page){
		var button = document.createElement("button");
		
		button.classList.add("tabulator-page");
		if(page == this.page){
			button.classList.add("active");
		}
		
		button.setAttribute("type", "button");
		button.setAttribute("role", "button");
		
		this.langBind("pagination|page_title", (value) => {
			button.setAttribute("aria-label", value + " " + page);
			button.setAttribute("title", value + " " + page);
		});
		
		button.setAttribute("data-page", page);
		button.textContent = page;
		
		button.addEventListener("click", (e) => {
			this.setPage(page);
		});
		
		return button;
	}
	
	//previous page
	previousPage(){
		if(this.page > 1){
			this.page--;
			
			this.trackChanges();
			
			return this.trigger();
			
		}else {
			console.warn("Pagination Error - Previous page would be less than page 1:", 0);
			return Promise.reject();
		}
	}
	
	//next page
	nextPage(){
		if(this.page < this.max){
			this.page++;
			
			this.trackChanges();
			
			return this.trigger();
			
		}else {
			if(!this.progressiveLoad){
				console.warn("Pagination Error - Next page would be greater than maximum page of " + this.max + ":", this.max + 1);
			}
			return Promise.reject();
		}
	}
	
	//return current page number
	getPage(){
		return this.page;
	}
	
	//return max page number
	getPageMax(){
		return this.max;
	}
	
	getPageSize(size){
		return this.size;
	}
	
	getMode(){
		return this.mode;
	}
	
	//return appropriate rows for current page
	getRows(data){
		var actualRowPageSize = 0,
		output, start, end, actualStartRow;

		var actualRows = data.filter((row) => {
			return row.type === "row";
		});
		
		if(this.mode == "local"){
			output = [];
			
			this.setMaxRows(data.length);
			
			if(this.size === true){
				start = 0;
				end = data.length;
			}else {
				start = this.size * (this.page - 1);
				end = start + parseInt(this.size);
			}
			
			this._setPageButtons();
			
			for(let i = start; i < end; i++){
				let row = data[i];

				if(row){
					output.push(row);

					if(row.type === "row"){
						if(!actualStartRow){
							actualStartRow = row;
						}	

						actualRowPageSize++;
					}
				}
			}
			
			this._setPageCounter(actualRows.length, actualRowPageSize, actualStartRow ? (actualRows.indexOf(actualStartRow) + 1) : 0);
			
			return output;
		}else {
			this._setPageButtons();
			this._setPageCounter(actualRows.length);
			
			return data.slice(0);
		}
	}
	
	trigger(){
		var left;
		
		switch(this.mode){
			case "local":
				left = this.table.rowManager.scrollLeft;
			
				this.refreshData();
				this.table.rowManager.scrollHorizontal(left);
			
				this.dispatchExternal("pageLoaded", this.getPage());
			
				return Promise.resolve();
			
			case "remote":
				this.dataChanging = true;
				return this.reloadData(null)
					.finally(() => {
						this.dataChanging = false;
					});
			
			case "progressive_load":
			case "progressive_scroll":
				return this.reloadData(null, true);
			
			default:
				console.warn("Pagination Error - no such pagination mode:", this.mode);
				return Promise.reject();
		}
	}
	
	_parseRemoteData(data){
		var margin, paginationOutOfRange;
		
		if(typeof data.last_page === "undefined"){
			console.warn("Remote Pagination Error - Server response missing '" + (this.options("dataReceiveParams").last_page || "last_page") + "' property");
		}
		
		if(data.data){
			this.max = parseInt(data.last_page) || 1;

			this.remoteRowCountEstimate = typeof data.last_row !== "undefined" ? data.last_row : (data.last_page * this.size - (this.page == data.last_page ? (this.size - data.data.length) : 0));
			
			if(this.progressiveLoad){
				switch(this.mode){
					case "progressive_load":
					
						if(this.page == 1){
							this.table.rowManager.setData(data.data, false, this.page == 1);
						}else {
							this.table.rowManager.addRows(data.data);
						}
					
						if(this.page < this.max){
							setTimeout(() => {
								this.nextPage();
							}, this.table.options.progressiveLoadDelay);
						}
						break;
					
					case "progressive_scroll":
						data = this.page === 1 ? data.data : this.table.rowManager.getData().concat(data.data);
					
						this.table.rowManager.setData(data, this.page !== 1, this.page == 1);
					
						margin = this.table.options.progressiveLoadScrollMargin || (this.table.rowManager.element.clientHeight * 2);
					
						if(this.table.rowManager.element.scrollHeight <= (this.table.rowManager.element.clientHeight + margin)){
							if(this.page < this.max){
								setTimeout(() => {
									this.nextPage();
								});
							}
						}
						break;
				}
				
				return false;
			}else {

				if(this.page > this.max){
					console.warn( "Remote Pagination Error - Server returned last page value lower than the current page" );

					paginationOutOfRange = this.options('paginationOutOfRange');

					if(paginationOutOfRange){
						return this.setPage(typeof paginationOutOfRange === 'function' ? paginationOutOfRange.call(this, this.page, this.max) :	paginationOutOfRange);
					}
				}

				// left = this.table.rowManager.scrollLeft;
				this.dispatchExternal("pageLoaded",  this.getPage());
				// this.table.rowManager.scrollHorizontal(left);
				// this.table.columnManager.scrollHorizontal(left);
			}
			
		}else {
			console.warn("Remote Pagination Error - Server response missing '" + (this.options("dataReceiveParams").data || "data") + "' property");
		}
		
		return data.data;
	}
	
	//handle the footer element being redrawn
	footerRedraw(){
		var footer = this.table.footerManager.containerElement;

		if((Math.ceil(footer.clientWidth) - footer.scrollWidth) < 0){
			this.pagesElement.style.display = 'none';
		}else {
			this.pagesElement.style.display = '';
			
			if((Math.ceil(footer.clientWidth) - footer.scrollWidth) < 0){
				this.pagesElement.style.display = 'none';
			}
		}
	}
}

// read persistance information from storage
var defaultReaders = {
	local:function(id, type){
		var data = localStorage.getItem(id + "-" + type);

		return data ? JSON.parse(data) : false;
	},
	cookie:function(id, type){
		var cookie = document.cookie,
		key = id + "-" + type,
		cookiePos = cookie.indexOf(key + "="),
		end, data;

		//if cookie exists, decode and load column data into tabulator
		if(cookiePos > -1){
			cookie = cookie.slice(cookiePos);

			end = cookie.indexOf(";");

			if(end > -1){
				cookie = cookie.slice(0, end);
			}

			data = cookie.replace(key + "=", "");
		}

		return data ? JSON.parse(data) : false;
	}
};

//write persistence information to storage
var defaultWriters = {
	local:function(id, type, data){
		localStorage.setItem(id + "-" + type, JSON.stringify(data));
	},
	cookie:function(id, type, data){
		var expireDate = new Date();

		expireDate.setDate(expireDate.getDate() + 10000);

		document.cookie = id + "-" + type + "=" + JSON.stringify(data) + "; expires=" + expireDate.toUTCString();
	}
};

class Persistence extends Module{

	static moduleName = "persistence";

	static moduleInitOrder = -10;

	//load defaults
	static readers = defaultReaders;
	static writers = defaultWriters;

	constructor(table){
		super(table);

		this.mode = "";
		this.id = "";
		// this.persistProps = ["field", "width", "visible"];
		this.defWatcherBlock = false;
		this.config = {};
		this.readFunc = false;
		this.writeFunc = false;

		this.registerTableOption("persistence", false);
		this.registerTableOption("persistenceID", ""); //key for persistent storage
		this.registerTableOption("persistenceMode", true); //mode for storing persistence information
		this.registerTableOption("persistenceReaderFunc", false); //function for handling persistence data reading
		this.registerTableOption("persistenceWriterFunc", false); //function for handling persistence data writing
	}

	// Test for whether localStorage is available for use.
	localStorageTest() {
		var  testKey =  "_tabulator_test";

		try {
			window.localStorage.setItem( testKey, testKey);
			window.localStorage.removeItem( testKey );
			return true;
		} catch(e) {
			return false;
		}
	}

	//setup parameters
	initialize(){
		if(this.table.options.persistence){
			//determine persistent layout storage type
			var mode = this.table.options.persistenceMode,
			id = this.table.options.persistenceID,
			retrievedData;

			this.mode = mode !== true ?  mode : (this.localStorageTest() ? "local" : "cookie");

			if(this.table.options.persistenceReaderFunc){
				if(typeof this.table.options.persistenceReaderFunc === "function"){
					this.readFunc = this.table.options.persistenceReaderFunc;
				}else {
					if(Persistence.readers[this.table.options.persistenceReaderFunc]){
						this.readFunc = Persistence.readers[this.table.options.persistenceReaderFunc];
					}else {
						console.warn("Persistence Read Error - invalid reader set", this.table.options.persistenceReaderFunc);
					}
				}
			}else {
				if(Persistence.readers[this.mode]){
					this.readFunc = Persistence.readers[this.mode];
				}else {
					console.warn("Persistence Read Error - invalid reader set", this.mode);
				}
			}

			if(this.table.options.persistenceWriterFunc){
				if(typeof this.table.options.persistenceWriterFunc === "function"){
					this.writeFunc = this.table.options.persistenceWriterFunc;
				}else {
					if(Persistence.writers[this.table.options.persistenceWriterFunc]){
						this.writeFunc = Persistence.writers[this.table.options.persistenceWriterFunc];
					}else {
						console.warn("Persistence Write Error - invalid reader set", this.table.options.persistenceWriterFunc);
					}
				}
			}else {
				if(Persistence.writers[this.mode]){
					this.writeFunc = Persistence.writers[this.mode];
				}else {
					console.warn("Persistence Write Error - invalid writer set", this.mode);
				}
			}

			//set storage tag
			this.id = "tabulator-" + (id || (this.table.element.getAttribute("id") || ""));

			this.config = {
				sort:this.table.options.persistence === true || this.table.options.persistence.sort,
				filter:this.table.options.persistence === true || this.table.options.persistence.filter,
				headerFilter:this.table.options.persistence === true || this.table.options.persistence.headerFilter,
				group:this.table.options.persistence === true || this.table.options.persistence.group,
				page:this.table.options.persistence === true || this.table.options.persistence.page,
				columns:this.table.options.persistence === true ? ["title", "width", "visible"] : this.table.options.persistence.columns,
			};

			//load pagination data if needed
			if(this.config.page){
				retrievedData = this.retrieveData("page");

				if(retrievedData){
					if(typeof retrievedData.paginationSize !== "undefined" && (this.config.page === true || this.config.page.size)){
						this.table.options.paginationSize = retrievedData.paginationSize;
					}

					if(typeof retrievedData.paginationInitialPage !== "undefined" && (this.config.page === true || this.config.page.page)){
						this.table.options.paginationInitialPage = retrievedData.paginationInitialPage;
					}
				}
			}

			//load group data if needed
			if(this.config.group){
				retrievedData = this.retrieveData("group");

				if(retrievedData){
					if(typeof retrievedData.groupBy !== "undefined" && (this.config.group === true || this.config.group.groupBy)){
						this.table.options.groupBy = retrievedData.groupBy;
					}
					if(typeof retrievedData.groupStartOpen !== "undefined" && (this.config.group === true || this.config.group.groupStartOpen)){
						this.table.options.groupStartOpen = retrievedData.groupStartOpen;
					}
					if(typeof retrievedData.groupHeader !== "undefined" && (this.config.group === true || this.config.group.groupHeader)){
						this.table.options.groupHeader = retrievedData.groupHeader;
					}
				}
			}

			if(this.config.columns){
				this.table.options.columns = this.load("columns", this.table.options.columns);
				this.subscribe("column-init", this.initializeColumn.bind(this));
				this.subscribe("column-show", this.save.bind(this, "columns"));
				this.subscribe("column-hide", this.save.bind(this, "columns"));
				this.subscribe("column-moved", this.save.bind(this, "columns"));
			}

			this.subscribe("table-built", this.tableBuilt.bind(this), 0);

			this.subscribe("table-redraw", this.tableRedraw.bind(this));

			this.subscribe("filter-changed", this.eventSave.bind(this, "filter"));
			this.subscribe("filter-changed", this.eventSave.bind(this, "headerFilter"));
			this.subscribe("sort-changed", this.eventSave.bind(this, "sort"));
			this.subscribe("group-changed", this.eventSave.bind(this, "group"));
			this.subscribe("page-changed", this.eventSave.bind(this, "page"));
			this.subscribe("column-resized", this.eventSave.bind(this, "columns"));
			this.subscribe("column-width", this.eventSave.bind(this, "columns"));
			this.subscribe("layout-refreshed", this.eventSave.bind(this, "columns"));
		}

		this.registerTableFunction("getColumnLayout", this.getColumnLayout.bind(this));
		this.registerTableFunction("setColumnLayout", this.setColumnLayout.bind(this));
	}

	eventSave(type){
		if(this.config[type]){
			this.save(type);
		}
	}

	tableBuilt(){
		var sorters, filters, headerFilters;

		if(this.config.sort){
			sorters = this.load("sort");

			if(!sorters === false){
				this.table.options.initialSort = sorters;
			}
		}

		if(this.config.filter){
			filters = this.load("filter");

			if(!filters === false){
				this.table.options.initialFilter = filters;
			}
		}
		if(this.config.headerFilter){
			headerFilters = this.load("headerFilter");

			if(!headerFilters === false){
				this.table.options.initialHeaderFilter = headerFilters;
			}
		}
		
	}

	tableRedraw(force){
		if(force && this.config.columns){
			this.save("columns");
		}
	}

	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////

	getColumnLayout(){
		return this.parseColumns(this.table.columnManager.getColumns());
	}

	setColumnLayout(layout){
		this.table.columnManager.setColumns(this.mergeDefinition(this.table.options.columns, layout, true));
		return true;
	}

	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////

	initializeColumn(column){
		var def, keys;

		if(this.config.columns){
			this.defWatcherBlock = true;

			def = column.getDefinition();

			keys = this.config.columns === true ? Object.keys(def) : this.config.columns;

			keys.forEach((key)=>{
				var props = Object.getOwnPropertyDescriptor(def, key);
				var value = def[key];

				if(props){
					Object.defineProperty(def, key, {
						set: (newValue) => {
							value = newValue;

							if(!this.defWatcherBlock){
								this.save("columns");
							}

							if(props.set){
								props.set(newValue);
							}
						},
						get:() => {
							if(props.get){
								props.get();
							}
							return value;
						}
					});
				}
			});

			this.defWatcherBlock = false;
		}
	}

	//load saved definitions
	load(type, current){
		var data = this.retrieveData(type);

		if(current){
			data = data ? this.mergeDefinition(current, data) : current;
		}

		return data;
	}

	//retrieve data from memory
	retrieveData(type){
		return this.readFunc ? this.readFunc(this.id, type) : false;
	}

	//merge old and new column definitions
	mergeDefinition(oldCols, newCols, mergeAllNew){
		var output = [];

		newCols = newCols || [];

		newCols.forEach((column, to) => {
			var from = this._findColumn(oldCols, column),
			keys;

			if(from){
				if(mergeAllNew){
					keys = Object.keys(column);
				}else if(this.config.columns === true || this.config.columns == undefined){
					keys =  Object.keys(from);
					keys.push("width");
				}else {
					keys = this.config.columns;
				}

				keys.forEach((key)=>{
					if(key !== "columns" && typeof column[key] !== "undefined"){
						from[key] = column[key];
					}
				});

				if(from.columns){
					from.columns = this.mergeDefinition(from.columns, column.columns);
				}

				output.push(from);
			}
		});

		oldCols.forEach((column, i) => {
			var from = this._findColumn(newCols, column);

			if (!from) {
				if(output.length>i){
					output.splice(i, 0, column);
				}else {
					output.push(column);
				}
			}
		});

		return output;
	}

	//find matching columns
	_findColumn(columns, subject){
		var type = subject.columns ? "group" : (subject.field ? "field" : "object");

		return columns.find(function(col){
			switch(type){
				case "group":
					return col.title === subject.title && col.columns.length === subject.columns.length;

				case "field":
					return col.field === subject.field;

				case "object":
					return col === subject;
			}
		});
	}

	//save data
	save(type){
		var data = {};

		switch(type){
			case "columns":
				data = this.parseColumns(this.table.columnManager.getColumns());
				break;

			case "filter":
				data = this.table.modules.filter.getFilters();
				break;

			case "headerFilter":
				data = this.table.modules.filter.getHeaderFilters();
				break;

			case "sort":
				data = this.validateSorters(this.table.modules.sort.getSort());
				break;

			case "group":
				data = this.getGroupConfig();
				break;

			case "page":
				data = this.getPageConfig();
				break;
		}

		if(this.writeFunc){
			this.writeFunc(this.id, type, data);
		}

	}

	//ensure sorters contain no function data
	validateSorters(data){
		data.forEach(function(item){
			item.column = item.field;
			delete item.field;
		});

		return data;
	}

	getGroupConfig(){
		var data = {};

		if(this.config.group){
			if(this.config.group === true || this.config.group.groupBy){
				data.groupBy = this.table.options.groupBy;
			}

			if(this.config.group === true || this.config.group.groupStartOpen){
				data.groupStartOpen = this.table.options.groupStartOpen;
			}

			if(this.config.group === true || this.config.group.groupHeader){
				data.groupHeader = this.table.options.groupHeader;
			}
		}

		return data;
	}

	getPageConfig(){
		var data = {};

		if(this.config.page){
			if(this.config.page === true || this.config.page.size){
				data.paginationSize = this.table.modules.page.getPageSize();
			}

			if(this.config.page === true || this.config.page.page){
				data.paginationInitialPage = this.table.modules.page.getPage();
			}
		}

		return data;
	}


	//parse columns for data to store
	parseColumns(columns){
		var definitions = [],
		excludedKeys = ["headerContextMenu", "headerMenu", "contextMenu", "clickMenu"];

		columns.forEach((column) => {
			var defStore = {},
			colDef = column.getDefinition(),
			keys;

			if(column.isGroup){
				defStore.title = colDef.title;
				defStore.columns = this.parseColumns(column.getColumns());
			}else {
				defStore.field = column.getField();

				if(this.config.columns === true || this.config.columns == undefined){
					keys =  Object.keys(colDef);
					keys.push("width");
					keys.push("visible");
				}else {
					keys = this.config.columns;
				}

				keys.forEach((key)=>{
					switch(key){
						case "width":
							defStore.width = column.getWidth();
							break;
						case "visible":
							defStore.visible = column.visible;
							break;

						default:
							if(typeof colDef[key] !== "function" && excludedKeys.indexOf(key) === -1){
								defStore[key] = colDef[key];
							}
					}
				});
			}

			definitions.push(defStore);
		});

		return definitions;
	}
}

class Popup extends Module{
	
	static moduleName = "popup";
	
	constructor(table){
		super(table);
		
		this.columnSubscribers = {};
		
		this.registerTableOption("rowContextPopup", false);
		this.registerTableOption("rowClickPopup", false);
		this.registerTableOption("rowDblClickPopup", false);
		this.registerTableOption("groupContextPopup", false);
		this.registerTableOption("groupClickPopup", false);
		this.registerTableOption("groupDblClickPopup", false);
		
		this.registerColumnOption("headerContextPopup");
		this.registerColumnOption("headerClickPopup");
		this.registerColumnOption("headerDblClickPopup");
		this.registerColumnOption("headerPopup");
		this.registerColumnOption("headerPopupIcon");
		this.registerColumnOption("contextPopup");
		this.registerColumnOption("clickPopup");
		this.registerColumnOption("dblClickPopup");

		this.registerComponentFunction("cell", "popup", this._componentPopupCall.bind(this));
		this.registerComponentFunction("column", "popup", this._componentPopupCall.bind(this));
		this.registerComponentFunction("row", "popup", this._componentPopupCall.bind(this));
		this.registerComponentFunction("group", "popup", this._componentPopupCall.bind(this));
		
	}
	
	initialize(){
		this.initializeRowWatchers();
		this.initializeGroupWatchers();
		
		this.subscribe("column-init", this.initializeColumn.bind(this));
	}

	_componentPopupCall(component, contents, position){
		this.loadPopupEvent(contents, null, component, position);
	}
	
	initializeRowWatchers(){
		if(this.table.options.rowContextPopup){
			this.subscribe("row-contextmenu", this.loadPopupEvent.bind(this, this.table.options.rowContextPopup));
			this.table.on("rowTapHold", this.loadPopupEvent.bind(this, this.table.options.rowContextPopup));
		}
		
		if(this.table.options.rowClickPopup){
			this.subscribe("row-click", this.loadPopupEvent.bind(this, this.table.options.rowClickPopup));
		}

		if(this.table.options.rowDblClickPopup){
			this.subscribe("row-dblclick", this.loadPopupEvent.bind(this, this.table.options.rowDblClickPopup));
		}
	}
	
	initializeGroupWatchers(){
		if(this.table.options.groupContextPopup){
			this.subscribe("group-contextmenu", this.loadPopupEvent.bind(this, this.table.options.groupContextPopup));
			this.table.on("groupTapHold", this.loadPopupEvent.bind(this, this.table.options.groupContextPopup));
		}
		
		if(this.table.options.groupClickPopup){
			this.subscribe("group-click", this.loadPopupEvent.bind(this, this.table.options.groupClickPopup));
		}

		if(this.table.options.groupDblClickPopup){
			this.subscribe("group-dblclick", this.loadPopupEvent.bind(this, this.table.options.groupDblClickPopup));
		}
	}

	initializeColumn(column){
		var def = column.definition;
		
		//handle column events
		if(def.headerContextPopup && !this.columnSubscribers.headerContextPopup){
			this.columnSubscribers.headerContextPopup = this.loadPopupTableColumnEvent.bind(this, "headerContextPopup");
			this.subscribe("column-contextmenu", this.columnSubscribers.headerContextPopup);
			this.table.on("headerTapHold", this.loadPopupTableColumnEvent.bind(this, "headerContextPopup"));
		}
		
		if(def.headerClickPopup && !this.columnSubscribers.headerClickPopup){
			this.columnSubscribers.headerClickPopup = this.loadPopupTableColumnEvent.bind(this, "headerClickPopup");
			this.subscribe("column-click", this.columnSubscribers.headerClickPopup);
		
		
		}if(def.headerDblClickPopup && !this.columnSubscribers.headerDblClickPopup){
			this.columnSubscribers.headerDblClickPopup = this.loadPopupTableColumnEvent.bind(this, "headerDblClickPopup");
			this.subscribe("column-dblclick", this.columnSubscribers.headerDblClickPopup);
		}
		
		if(def.headerPopup){
			this.initializeColumnHeaderPopup(column);
		}
		
		//handle cell events
		if(def.contextPopup && !this.columnSubscribers.contextPopup){
			this.columnSubscribers.contextPopup = this.loadPopupTableCellEvent.bind(this, "contextPopup");
			this.subscribe("cell-contextmenu", this.columnSubscribers.contextPopup);
			this.table.on("cellTapHold", this.loadPopupTableCellEvent.bind(this, "contextPopup"));
		}
		
		if(def.clickPopup && !this.columnSubscribers.clickPopup){
			this.columnSubscribers.clickPopup = this.loadPopupTableCellEvent.bind(this, "clickPopup");
			this.subscribe("cell-click", this.columnSubscribers.clickPopup);
		}

		if(def.dblClickPopup && !this.columnSubscribers.dblClickPopup){
			this.columnSubscribers.dblClickPopup = this.loadPopupTableCellEvent.bind(this, "dblClickPopup");
			this.subscribe("cell-click", this.columnSubscribers.dblClickPopup);
		}
	}
	
	initializeColumnHeaderPopup(column){
		var icon = column.definition.headerPopupIcon,
		headerPopupEl;
		
		headerPopupEl = document.createElement("span");
		headerPopupEl.classList.add("tabulator-header-popup-button");

		if(icon){
			if(typeof icon === "function"){
				icon = icon(column.getComponent());
			}

			if(icon instanceof HTMLElement){
				headerPopupEl.appendChild(icon);
			}else {
				headerPopupEl.innerHTML = icon;
			}
		}else {
			headerPopupEl.innerHTML = "&vellip;";
		}
		
		headerPopupEl.addEventListener("click", (e) => {
			e.stopPropagation();
			e.preventDefault();
			
			this.loadPopupEvent(column.definition.headerPopup, e, column);
		});
		
		column.titleElement.insertBefore(headerPopupEl, column.titleElement.firstChild);
	}
	
	loadPopupTableCellEvent(option, e, cell){
		if(cell._cell){
			cell = cell._cell;
		}
		
		if(cell.column.definition[option]){
			this.loadPopupEvent(cell.column.definition[option], e, cell);
		}
	}
	
	loadPopupTableColumnEvent(option, e, column){
		if(column._column){
			column = column._column;
		}
		
		if(column.definition[option]){
			this.loadPopupEvent(column.definition[option], e, column);
		}
	}
	
	loadPopupEvent(contents, e, component, position){
		var renderedCallback;

		function onRendered(callback){
			renderedCallback = callback;
		}
		
		if(component._group){
			component = component._group;
		}else if(component._row){
			component = component._row;
		}
		
		contents = typeof contents == "function" ? contents.call(this.table, e, component.getComponent(),  onRendered) : contents;
		
		this.loadPopup(e, component, contents, renderedCallback, position);
	}
	
	loadPopup(e, component, contents, renderedCallback, position){
		var touch = !(e instanceof MouseEvent),
		contentsEl, popup;
		
		if(contents instanceof HTMLElement){
			contentsEl = contents;
		}else {
			contentsEl = document.createElement("div");
			contentsEl.innerHTML = contents;
		}
		
		contentsEl.classList.add("tabulator-popup");

		contentsEl.addEventListener("click", (e) =>{
			e.stopPropagation();
		});

		if(!touch){
			e.preventDefault();
		}
		
		popup = this.popup(contentsEl);

		if(typeof renderedCallback === "function"){
			popup.renderCallback(renderedCallback);
		}

		if(e){
			popup.show(e);
		}else {
			popup.show(component.getElement(), position || "center");
		}

		
		popup.hideOnBlur(() => {
			this.dispatchExternal("popupClosed", component.getComponent());
		});

		this.dispatchExternal("popupOpened", component.getComponent());
	}
}

class Print extends Module{

	static moduleName = "print";

	constructor(table){
		super(table);

		this.element = false;
		this.manualBlock = false;
		this.beforeprintEventHandler = null;
		this.afterprintEventHandler = null;

		this.registerTableOption("printAsHtml", false); //enable print as html
		this.registerTableOption("printFormatter", false); //printing page formatter
		this.registerTableOption("printHeader", false); //page header contents
		this.registerTableOption("printFooter", false); //page footer contents
		this.registerTableOption("printStyled", true); //enable print as html styling
		this.registerTableOption("printRowRange", "visible"); //restrict print to visible rows only
		this.registerTableOption("printConfig", {}); //print config options

		this.registerColumnOption("print");
		this.registerColumnOption("titlePrint");
	}

	initialize(){
		if(this.table.options.printAsHtml){
			this.beforeprintEventHandler = this.replaceTable.bind(this);
			this.afterprintEventHandler = this.cleanup.bind(this);

			window.addEventListener("beforeprint", this.beforeprintEventHandler );
			window.addEventListener("afterprint", this.afterprintEventHandler);
			this.subscribe("table-destroy", this.destroy.bind(this));
		}

		this.registerTableFunction("print", this.printFullscreen.bind(this));
	}

	destroy(){
		if(this.table.options.printAsHtml){
			window.removeEventListener( "beforeprint", this.beforeprintEventHandler );
			window.removeEventListener( "afterprint", this.afterprintEventHandler );
		}
	}

	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////

	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////

	replaceTable(){
		if(!this.manualBlock){
			this.element = document.createElement("div");
			this.element.classList.add("tabulator-print-table");

			this.element.appendChild(this.table.modules.export.generateTable(this.table.options.printConfig, this.table.options.printStyled, this.table.options.printRowRange, "print"));

			this.table.element.style.display = "none";

			this.table.element.parentNode.insertBefore(this.element, this.table.element);
		}
	}

	cleanup(){
		document.body.classList.remove("tabulator-print-fullscreen-hide");

		if(this.element && this.element.parentNode){
			this.element.parentNode.removeChild(this.element);
			this.table.element.style.display = "";
		}
	}

	printFullscreen(visible, style, config){
		var scrollX = window.scrollX,
		scrollY = window.scrollY,
		headerEl = document.createElement("div"),
		footerEl = document.createElement("div"),
		tableEl = this.table.modules.export.generateTable(typeof config != "undefined" ? config : this.table.options.printConfig, typeof style != "undefined" ? style : this.table.options.printStyled, visible || this.table.options.printRowRange, "print"),
		headerContent, footerContent;

		this.manualBlock = true;

		this.element = document.createElement("div");
		this.element.classList.add("tabulator-print-fullscreen");

		if(this.table.options.printHeader){
			headerEl.classList.add("tabulator-print-header");

			headerContent = typeof this.table.options.printHeader == "function" ? this.table.options.printHeader.call(this.table) : this.table.options.printHeader;

			if(typeof headerContent == "string"){
				headerEl.innerHTML = headerContent;
			}else {
				headerEl.appendChild(headerContent);
			}

			this.element.appendChild(headerEl);
		}

		this.element.appendChild(tableEl);

		if(this.table.options.printFooter){
			footerEl.classList.add("tabulator-print-footer");

			footerContent = typeof this.table.options.printFooter == "function" ? this.table.options.printFooter.call(this.table) : this.table.options.printFooter;


			if(typeof footerContent == "string"){
				footerEl.innerHTML = footerContent;
			}else {
				footerEl.appendChild(footerContent);
			}

			this.element.appendChild(footerEl);
		}

		document.body.classList.add("tabulator-print-fullscreen-hide");
		document.body.appendChild(this.element);

		if(this.table.options.printFormatter){
			this.table.options.printFormatter(this.element, tableEl);
		}

		window.print();

		this.cleanup();

		window.scrollTo(scrollX, scrollY);

		this.manualBlock = false;
	}
}

class ReactiveData extends Module{

	static moduleName = "reactiveData";
	
	constructor(table){
		super(table);
		
		this.data = false;
		this.blocked = false; //block reactivity while performing update
		this.origFuncs = {}; // hold original data array functions to allow replacement after data is done with
		this.currentVersion = 0;
		
		this.registerTableOption("reactiveData", false); //enable data reactivity
	}
	
	initialize(){
		if(this.table.options.reactiveData){
			this.subscribe("cell-value-save-before", this.block.bind(this, "cellsave"));
			this.subscribe("cell-value-save-after", this.unblock.bind(this, "cellsave"));
			this.subscribe("row-data-save-before", this.block.bind(this, "rowsave"));
			this.subscribe("row-data-save-after", this.unblock.bind(this, "rowsave"));
			this.subscribe("row-data-init-after", this.watchRow.bind(this));
			this.subscribe("data-processing", this.watchData.bind(this));
			this.subscribe("table-destroy", this.unwatchData.bind(this));
		}
	}
	
	watchData(data){
		var self = this,
		version;
		
		this.currentVersion ++;
		
		version = this.currentVersion;
		
		this.unwatchData();
		
		this.data = data;
		
		//override array push function
		this.origFuncs.push = data.push;
		
		Object.defineProperty(this.data, "push", {
			enumerable: false,
			configurable: true,
			value: function(){
				var args = Array.from(arguments),
				result;

				if(!self.blocked && version === self.currentVersion){	
					self.block("data-push");

					args.forEach((arg) => {
						self.table.rowManager.addRowActual(arg, false);
					});
					
					result = self.origFuncs.push.apply(data, arguments);
					
					self.unblock("data-push");
				}
				
				return result;
			}
		});
		
		//override array unshift function
		this.origFuncs.unshift = data.unshift;
		
		Object.defineProperty(this.data, "unshift", {
			enumerable: false,
			configurable: true,
			value: function(){
				var args = Array.from(arguments),
				result;
				
				if(!self.blocked && version === self.currentVersion){
					self.block("data-unshift");
					
					args.forEach((arg) => {
						self.table.rowManager.addRowActual(arg, true);
					});
					
					result = self.origFuncs.unshift.apply(data, arguments);
					
					self.unblock("data-unshift");
				}
				
				return result;
			}
		});
		
		
		//override array shift function
		this.origFuncs.shift = data.shift;
		
		Object.defineProperty(this.data, "shift", {
			enumerable: false,
			configurable: true,
			value: function(){
				var row, result;
				
				if(!self.blocked && version === self.currentVersion){
					self.block("data-shift");
					
					if(self.data.length){
						row = self.table.rowManager.getRowFromDataObject(self.data[0]);
						
						if(row){
							row.deleteActual();
						}
					}

					result = self.origFuncs.shift.call(data);

					self.unblock("data-shift");
				}
				
				return result;
			}
		});
		
		//override array pop function
		this.origFuncs.pop = data.pop;
		
		Object.defineProperty(this.data, "pop", {
			enumerable: false,
			configurable: true,
			value: function(){
				var row, result;
			
				if(!self.blocked && version === self.currentVersion){
					self.block("data-pop");
					
					if(self.data.length){
						row = self.table.rowManager.getRowFromDataObject(self.data[self.data.length - 1]);
						
						if(row){
							row.deleteActual();
						}
					}

					result = self.origFuncs.pop.call(data);
					
					self.unblock("data-pop");
				}

				return result;
			}
		});
		
		
		//override array splice function
		this.origFuncs.splice = data.splice;
		
		Object.defineProperty(this.data, "splice", {
			enumerable: false,
			configurable: true,
			value: function(){
				var args = Array.from(arguments),
				start = args[0] < 0 ? data.length + args[0] : args[0],
				end = args[1],
				newRows = args[2] ? args.slice(2) : false,
				startRow, result;
				
				if(!self.blocked && version === self.currentVersion){
					self.block("data-splice");
					//add new rows
					if(newRows){
						startRow = data[start] ? self.table.rowManager.getRowFromDataObject(data[start]) : false;
						
						if(startRow){
							newRows.forEach((rowData) => {
								self.table.rowManager.addRowActual(rowData, true, startRow, true);
							});
						}else {
							newRows = newRows.slice().reverse();
							
							newRows.forEach((rowData) => {
								self.table.rowManager.addRowActual(rowData, true, false, true);
							});
						}
					}
					
					//delete removed rows
					if(end !== 0){
						var oldRows = data.slice(start, typeof args[1] === "undefined" ? args[1] : start + end);
						
						oldRows.forEach((rowData, i) => {
							var row = self.table.rowManager.getRowFromDataObject(rowData);
							
							if(row){
								row.deleteActual(i !== oldRows.length - 1);
							}
						});
					}
					
					if(newRows || end !== 0){
						self.table.rowManager.reRenderInPosition();
					}

					result = self.origFuncs.splice.apply(data, arguments);
					
					self.unblock("data-splice");
				}
				
				return result ;
			}
		});
	}
	
	unwatchData(){
		if(this.data !== false){
			for(var key in this.origFuncs){
				Object.defineProperty(this.data, key, {
					enumerable: true,
					configurable:true,
					writable:true,
					value: this.origFuncs.key,
				});
			}
		}
	}
	
	watchRow(row){
		var data = row.getData();
		
		for(var key in data){
			this.watchKey(row, data, key);
		}
		
		if(this.table.options.dataTree){
			this.watchTreeChildren(row);
		}
	}
	
	watchTreeChildren (row){
		var self = this,
		childField = row.getData()[this.table.options.dataTreeChildField],
		origFuncs = {};
		
		if(childField){
			
			origFuncs.push = childField.push;
			
			Object.defineProperty(childField, "push", {
				enumerable: false,
				configurable: true,
				value: () => {
					if(!self.blocked){
						self.block("tree-push");
						
						var result = origFuncs.push.apply(childField, arguments);
						this.rebuildTree(row);
						
						self.unblock("tree-push");
					}
					
					return result;
				}
			});
			
			origFuncs.unshift = childField.unshift;
			
			Object.defineProperty(childField, "unshift", {
				enumerable: false,
				configurable: true,
				value: () => {
					if(!self.blocked){
						self.block("tree-unshift");
						
						var result =  origFuncs.unshift.apply(childField, arguments);
						this.rebuildTree(row);
						
						self.unblock("tree-unshift");
					}
					
					return result;
				}
			});
			
			origFuncs.shift = childField.shift;
			
			Object.defineProperty(childField, "shift", {
				enumerable: false,
				configurable: true,
				value: () => {
					if(!self.blocked){
						self.block("tree-shift");
						
						var result =  origFuncs.shift.call(childField);
						this.rebuildTree(row);
						
						self.unblock("tree-shift");
					}
					
					return result;
				}
			});
			
			origFuncs.pop = childField.pop;
			
			Object.defineProperty(childField, "pop", {
				enumerable: false,
				configurable: true,
				value: () => {
					if(!self.blocked){
						self.block("tree-pop");
						
						var result =  origFuncs.pop.call(childField);
						this.rebuildTree(row);
						
						self.unblock("tree-pop");
					}
					
					return result;
				}
			});
			
			origFuncs.splice = childField.splice;
			
			Object.defineProperty(childField, "splice", {
				enumerable: false,
				configurable: true,
				value: () => {
					if(!self.blocked){
						self.block("tree-splice");
						
						var result =  origFuncs.splice.apply(childField, arguments);
						this.rebuildTree(row);
						
						self.unblock("tree-splice");
					}
					
					return result;
				}
			});
		}
	}
	
	rebuildTree(row){
		this.table.modules.dataTree.initializeRow(row);
		this.table.modules.dataTree.layoutRow(row);
		this.table.rowManager.refreshActiveData("tree", false, true);
	}
	
	watchKey(row, data, key){
		var self = this,
		props = Object.getOwnPropertyDescriptor(data, key),
		value = data[key],
		version = this.currentVersion;
		
		Object.defineProperty(data, key, {
			set: (newValue) => {
				value = newValue;
				if(!self.blocked && version === self.currentVersion){
					self.block("key");
					
					var update = {};
					update[key] = newValue;
					row.updateData(update);
					
					self.unblock("key");
				}
				
				if(props.set){
					props.set(newValue);
				}
			},
			get:() => {
				
				if(props.get){
					props.get();
				}
				
				return value;
			}
		});
	}
	
	unwatchRow(row){
		var data = row.getData();
		
		for(var key in data){
			Object.defineProperty(data, key, {
				value:data[key],
			});
		}
	}
	
	block(key){
		if(!this.blocked){
			this.blocked = key;
		}
	}
	
	unblock(key){
		if(this.blocked === key){
			this.blocked = false;
		}
	}
}

class ResizeColumns extends Module{

	static moduleName = "resizeColumns";

	constructor(table){
		super(table);
		
		this.startColumn = false;
		this.startX = false;
		this.startWidth = false;
		this.latestX = false;
		this.handle = null;
		this.initialNextColumn = null;
		this.nextColumn = null;
		
		this.initialized = false;
		this.registerColumnOption("resizable", true);
		this.registerTableOption("resizableColumnFit", false);
		this.registerTableOption("resizableColumnGuide", false);
	}
	
	initialize(){
		this.subscribe("column-rendered", this.layoutColumnHeader.bind(this));
	}
	
	initializeEventWatchers(){
		if(!this.initialized){
			
			this.subscribe("cell-rendered", this.layoutCellHandles.bind(this));
			this.subscribe("cell-delete", this.deInitializeComponent.bind(this));
			
			this.subscribe("cell-height", this.resizeHandle.bind(this));
			this.subscribe("column-moved", this.columnLayoutUpdated.bind(this));
			
			this.subscribe("column-hide", this.deInitializeColumn.bind(this));
			this.subscribe("column-show", this.columnLayoutUpdated.bind(this));
			this.subscribe("column-width", this.columnWidthUpdated.bind(this));
			
			this.subscribe("column-delete", this.deInitializeComponent.bind(this));
			this.subscribe("column-height", this.resizeHandle.bind(this));
			
			this.initialized = true;
		}
	}
	
	
	layoutCellHandles(cell){
		if(cell.row.type === "row"){
			this.deInitializeComponent(cell);
			this.initializeColumn("cell", cell, cell.column, cell.element);
		}
	}
	
	layoutColumnHeader(column){
		if(column.definition.resizable){
			this.initializeEventWatchers();
			this.deInitializeComponent(column);
			this.initializeColumn("header", column, column, column.element);
		}
	}
	
	columnLayoutUpdated(column){
		var prev = column.prevColumn();
		
		this.reinitializeColumn(column);
		
		if(prev){
			this.reinitializeColumn(prev);
		}
	}
	
	columnWidthUpdated(column){
		if(column.modules.frozen){
			if(this.table.modules.frozenColumns.leftColumns.includes(column)){
				this.table.modules.frozenColumns.leftColumns.forEach((col) => {
					this.reinitializeColumn(col);
				});
			}else if(this.table.modules.frozenColumns.rightColumns.includes(column)){
				this.table.modules.frozenColumns.rightColumns.forEach((col) => {
					this.reinitializeColumn(col);
				});
			}
		}
	}

	frozenColumnOffset(column){
		var offset = false;

		if(column.modules.frozen){
			offset = column.modules.frozen.marginValue; 

			if(column.modules.frozen.position === "left"){
				offset += column.getWidth() - 3;
			}else {
				if(offset){
					offset -= 3;
				}
			}
		}

		return offset !== false ? offset + "px" : false;
	}
	
	reinitializeColumn(column){
		var frozenOffset = this.frozenColumnOffset(column);
		
		column.cells.forEach((cell) => {
			if(cell.modules.resize && cell.modules.resize.handleEl){
				if(frozenOffset){
					cell.modules.resize.handleEl.style[column.modules.frozen.position] = frozenOffset;
					cell.modules.resize.handleEl.style["z-index"] = 11;
				}
				
				cell.element.after(cell.modules.resize.handleEl);
			}
		});
		
		if(column.modules.resize && column.modules.resize.handleEl){
			if(frozenOffset){
				column.modules.resize.handleEl.style[column.modules.frozen.position] = frozenOffset;
			}
			
			column.element.after(column.modules.resize.handleEl);
		}
	}
	
	initializeColumn(type, component, column, element){
		var self = this,
		variableHeight = false,
		mode = column.definition.resizable,
		config = {},
		nearestColumn = column.getLastColumn();
		
		//set column resize mode
		if(type === "header"){
			variableHeight = column.definition.formatter == "textarea" || column.definition.variableHeight;
			config = {variableHeight:variableHeight};
		}
		
		if((mode === true || mode == type) && this._checkResizability(nearestColumn)){
			
			var handle = document.createElement('span');
			handle.className = "tabulator-col-resize-handle";
			
			handle.addEventListener("click", function(e){
				e.stopPropagation();
			});
			
			var handleDown = function(e){
				self.startColumn = column;
				self.initialNextColumn = self.nextColumn = nearestColumn.nextColumn();
				self._mouseDown(e, nearestColumn, handle);
			};
			
			handle.addEventListener("mousedown", handleDown);
			handle.addEventListener("touchstart", handleDown, {passive: true});
			
			//resize column on  double click
			handle.addEventListener("dblclick", (e) => {
				var oldWidth = nearestColumn.getWidth();
				
				e.stopPropagation();
				nearestColumn.reinitializeWidth(true);
				
				if(oldWidth !== nearestColumn.getWidth()){
					self.dispatch("column-resized", nearestColumn);
					self.dispatchExternal("columnResized", nearestColumn.getComponent());
				}
			});
			
			if(column.modules.frozen){
				handle.style.position = "sticky";
				handle.style[column.modules.frozen.position] = this.frozenColumnOffset(column);
			}
			
			config.handleEl = handle;
			
			if(element.parentNode && column.visible){
				element.after(handle);			
			}
		}
		
		component.modules.resize = config;
	}
	
	deInitializeColumn(column){
		this.deInitializeComponent(column);
		
		column.cells.forEach((cell) => {
			this.deInitializeComponent(cell);
		});
	}
	
	deInitializeComponent(component){
		var handleEl;
		
		if(component.modules.resize){
			handleEl = component.modules.resize.handleEl;
			
			if(handleEl && handleEl.parentElement){
				handleEl.parentElement.removeChild(handleEl);
			}
		}
	}
	
	resizeHandle(component, height){
		if(component.modules.resize && component.modules.resize.handleEl){
			component.modules.resize.handleEl.style.height = height;
		}
	}
	
	resize(e, column){
		var x = typeof e.clientX === "undefined" ? e.touches[0].clientX : e.clientX,
		startDiff = x - this.startX,
		moveDiff = x - this.latestX,
		blockedBefore, blockedAfter;

		this.latestX = x;

		if(this.table.rtl){
			startDiff = -startDiff;
			moveDiff = -moveDiff;
		}

		blockedBefore = column.width == column.minWidth || column.width == column.maxWidth;

		column.setWidth(this.startWidth + startDiff);

		blockedAfter = column.width == column.minWidth || column.width == column.maxWidth;

		if(moveDiff < 0){
			this.nextColumn = this.initialNextColumn;
		}

		if(this.table.options.resizableColumnFit && this.nextColumn && !(blockedBefore && blockedAfter)){
			let colWidth = this.nextColumn.getWidth();

			if(moveDiff > 0){
				if(colWidth <= this.nextColumn.minWidth){
					this.nextColumn = this.nextColumn.nextColumn();
				}
			}

			if(this.nextColumn){
				this.nextColumn.setWidth(this.nextColumn.getWidth() - moveDiff);
			}
		}

		this.table.columnManager.rerenderColumns(true);

		if(!this.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight){
			column.checkCellHeights();
		}
	}

	calcGuidePosition(e, column, handle) {
		var mouseX = typeof e.clientX === "undefined" ? e.touches[0].clientX : e.clientX,
		handleX = handle.getBoundingClientRect().x - this.table.element.getBoundingClientRect().x,
		tableX = this.table.element.getBoundingClientRect().x,
		columnX = column.element.getBoundingClientRect().left - tableX,
		mouseDiff = mouseX - this.startX,
		pos = Math.max(handleX + mouseDiff, columnX + column.minWidth);

		if(column.maxWidth){
			pos = Math.min(pos, columnX + column.maxWidth);
		}

		return pos;
	}

	_checkResizability(column){
		return column.definition.resizable;
	}
	
	_mouseDown(e, column, handle){
		var self = this,
		guideEl;

		this.dispatchExternal("columnResizing", column.getComponent());

		if(self.table.options.resizableColumnGuide){
			guideEl = document.createElement("span");
			guideEl.classList.add('tabulator-col-resize-guide');
			self.table.element.appendChild(guideEl);
			setTimeout(() => {
				guideEl.style.left = self.calcGuidePosition(e, column, handle) + "px";
			});
		}

		self.table.element.classList.add("tabulator-block-select");

		function mouseMove(e){
			if(self.table.options.resizableColumnGuide){
				guideEl.style.left = self.calcGuidePosition(e, column, handle) + "px";
			}else {
				self.resize(e, column);
			}
		}
		
		function mouseUp(e){
			if(self.table.options.resizableColumnGuide){
				self.resize(e, column);
				guideEl.remove();
			}
			
			//block editor from taking action while resizing is taking place
			if(self.startColumn.modules.edit){
				self.startColumn.modules.edit.blocked = false;
			}
			
			if(self.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight){
				column.checkCellHeights();
			}
			
			document.body.removeEventListener("mouseup", mouseUp);
			document.body.removeEventListener("mousemove", mouseMove);
			
			handle.removeEventListener("touchmove", mouseMove);
			handle.removeEventListener("touchend", mouseUp);
			
			self.table.element.classList.remove("tabulator-block-select");
			
			if(self.startWidth !== column.getWidth()){
				self.table.columnManager.verticalAlignHeaders();

				self.dispatch("column-resized", column);
				self.dispatchExternal("columnResized", column.getComponent());
			}
		}
		
		e.stopPropagation(); //prevent resize from interfering with movable columns
		
		//block editor from taking action while resizing is taking place
		if(self.startColumn.modules.edit){
			self.startColumn.modules.edit.blocked = true;
		}
		
		self.startX = typeof e.clientX === "undefined" ? e.touches[0].clientX : e.clientX;
		self.latestX = self.startX;
		self.startWidth = column.getWidth();
		
		document.body.addEventListener("mousemove", mouseMove);
		document.body.addEventListener("mouseup", mouseUp);
		handle.addEventListener("touchmove", mouseMove, {passive: true});
		handle.addEventListener("touchend", mouseUp);
	}
}

class ResizeRows extends Module{

	static moduleName = "resizeRows";

	constructor(table){
		super(table);

		this.startColumn = false;
		this.startY = false;
		this.startHeight = false;
		this.handle = null;
		this.prevHandle = null;

		this.registerTableOption("resizableRows", false); //resizable rows
		this.registerTableOption("resizableRowGuide", false);
	}

	initialize(){
		if(this.table.options.resizableRows){
			this.subscribe("row-layout-after", this.initializeRow.bind(this));
		}
	}

	initializeRow(row){
		var self = this,
		rowEl = row.getElement();

		var handle = document.createElement('div');
		handle.className = "tabulator-row-resize-handle";

		var prevHandle = document.createElement('div');
		prevHandle.className = "tabulator-row-resize-handle prev";

		handle.addEventListener("click", function(e){
			e.stopPropagation();
		});

		var handleDown = function(e){
			self.startRow = row;
			self._mouseDown(e, row, handle);
		};

		handle.addEventListener("mousedown", handleDown);
		handle.addEventListener("touchstart", handleDown, {passive: true});

		prevHandle.addEventListener("click", function(e){
			e.stopPropagation();
		});

		var prevHandleDown =  function(e){
			var prevRow = self.table.rowManager.prevDisplayRow(row);

			if(prevRow){
				self.startRow = prevRow;
				self._mouseDown(e, prevRow, prevHandle);
			}
		};

		prevHandle.addEventListener("mousedown",prevHandleDown);
		prevHandle.addEventListener("touchstart",prevHandleDown, {passive: true});

		rowEl.appendChild(handle);
		rowEl.appendChild(prevHandle);
	}

	resize(e, row) {
		row.setHeight(this.startHeight + ((typeof e.screenY === "undefined" ? e.touches[0].screenY : e.screenY) - this.startY));
	}

	calcGuidePosition(e, row, handle) {
		var mouseY = typeof e.screenY === "undefined" ? e.touches[0].screenY : e.screenY,
		handleY = handle.getBoundingClientRect().y - this.table.element.getBoundingClientRect().y,
		tableY = this.table.element.getBoundingClientRect().y,
		rowY = row.element.getBoundingClientRect().top - tableY,
		mouseDiff = mouseY - this.startY;

		return Math.max(handleY + mouseDiff, rowY);
	}

	_mouseDown(e, row, handle){
		var self = this,
		guideEl;

		self.dispatchExternal("rowResizing", row.getComponent());

		if(self.table.options.resizableRowGuide){
			guideEl = document.createElement("span");
			guideEl.classList.add('tabulator-row-resize-guide');
			self.table.element.appendChild(guideEl);
			setTimeout(() => {
				guideEl.style.top = self.calcGuidePosition(e, row, handle) + "px";
			});
		}

		self.table.element.classList.add("tabulator-block-select");

		function mouseMove(e){
			if(self.table.options.resizableRowGuide){
				guideEl.style.top = self.calcGuidePosition(e, row, handle) + "px";
			}else {
				self.resize(e, row);
			}
		}

		function mouseUp(e){
			if(self.table.options.resizableRowGuide){
				self.resize(e, row);
				guideEl.remove();
			}

			// //block editor from taking action while resizing is taking place
			// if(self.startColumn.modules.edit){
			// 	self.startColumn.modules.edit.blocked = false;
			// }

			document.body.removeEventListener("mouseup", mouseMove);
			document.body.removeEventListener("mousemove", mouseMove);

			handle.removeEventListener("touchmove", mouseMove);
			handle.removeEventListener("touchend", mouseUp);

			self.table.element.classList.remove("tabulator-block-select");

			self.dispatchExternal("rowResized", row.getComponent());
		}

		e.stopPropagation(); //prevent resize from interfering with movable columns

		//block editor from taking action while resizing is taking place
		// if(self.startColumn.modules.edit){
		// 	self.startColumn.modules.edit.blocked = true;
		// }

		self.startY = typeof e.screenY === "undefined" ? e.touches[0].screenY : e.screenY;
		self.startHeight = row.getHeight();

		document.body.addEventListener("mousemove", mouseMove);
		document.body.addEventListener("mouseup", mouseUp);

		handle.addEventListener("touchmove", mouseMove, {passive: true});
		handle.addEventListener("touchend", mouseUp);
	}
}

class ResizeTable extends Module{

	static moduleName = "resizeTable";
	
	constructor(table){
		super(table);
		
		this.binding = false;
		this.visibilityObserver = false;
		this.resizeObserver = false;
		this.containerObserver = false;
		
		this.tableHeight = 0;
		this.tableWidth = 0;
		this.containerHeight = 0;
		this.containerWidth = 0;
		
		this.autoResize = false;
		
		this.visible = false;
		
		this.initialized = false;
		this.initialRedraw = false;
		
		this.registerTableOption("autoResize", true); //auto resize table
	}
	
	initialize(){
		if(this.table.options.autoResize){
			var table = this.table,
			tableStyle;
			
			this.tableHeight = table.element.clientHeight;
			this.tableWidth = table.element.clientWidth;
			
			if(table.element.parentNode){
				this.containerHeight = table.element.parentNode.clientHeight;
				this.containerWidth = table.element.parentNode.clientWidth;
			}
			
			if(typeof IntersectionObserver !== "undefined" && typeof ResizeObserver !== "undefined" && table.rowManager.getRenderMode() === "virtual"){
				
				this.initializeVisibilityObserver();
				
				this.autoResize = true;
				
				this.resizeObserver = new ResizeObserver((entry) => {
					if(!table.browserMobile || (table.browserMobile && (!table.modules.edit || (table.modules.edit && !table.modules.edit.currentCell)))){
						
						var nodeHeight = Math.floor(entry[0].contentRect.height);
						var nodeWidth = Math.floor(entry[0].contentRect.width);
						
						if(this.tableHeight != nodeHeight || this.tableWidth != nodeWidth){
							this.tableHeight = nodeHeight;
							this.tableWidth = nodeWidth;
							
							if(table.element.parentNode){
								this.containerHeight = table.element.parentNode.clientHeight;
								this.containerWidth = table.element.parentNode.clientWidth;
							}
							
							this.redrawTable();
						}
					}
				});
				
				this.resizeObserver.observe(table.element);
				
				tableStyle = window.getComputedStyle(table.element);
				
				if(this.table.element.parentNode && !this.table.rowManager.fixedHeight && (tableStyle.getPropertyValue("max-height") || tableStyle.getPropertyValue("min-height"))){
					
					this.containerObserver = new ResizeObserver((entry) => {
						if(!table.browserMobile || (table.browserMobile && (!table.modules.edit || (table.modules.edit && !table.modules.edit.currentCell)))){
							
							var nodeHeight = Math.floor(entry[0].contentRect.height);
							var nodeWidth = Math.floor(entry[0].contentRect.width);
							
							if(this.containerHeight != nodeHeight || this.containerWidth != nodeWidth){
								this.containerHeight = nodeHeight;
								this.containerWidth = nodeWidth;
								this.tableHeight = table.element.clientHeight;
								this.tableWidth = table.element.clientWidth;
							}
							
							this.redrawTable();
						}
					});
					
					this.containerObserver.observe(this.table.element.parentNode);
				}
				
				this.subscribe("table-resize", this.tableResized.bind(this));
				
			}else {
				this.binding = function(){
					if(!table.browserMobile || (table.browserMobile && (!table.modules.edit || (table.modules.edit && !table.modules.edit.currentCell)))){
						table.columnManager.rerenderColumns(true);
						table.redraw();
					}
				};
				
				window.addEventListener("resize", this.binding);
			}
			
			this.subscribe("table-destroy", this.clearBindings.bind(this));
		}
	}
	
	initializeVisibilityObserver(){
		this.visibilityObserver = new IntersectionObserver((entries) => {
			this.visible = entries[0].isIntersecting;
			
			if(!this.initialized){
				this.initialized = true;
				this.initialRedraw = !this.visible;
			}else {
				if(this.visible){
					this.redrawTable(this.initialRedraw);
					this.initialRedraw = false;
				}
			}
		});
		
		this.visibilityObserver.observe(this.table.element);
	}
	
	redrawTable(force){
		if(this.initialized && this.visible){
			this.table.columnManager.rerenderColumns(true);
			this.table.redraw(force);
		}
	}
	
	tableResized(){
		this.table.rowManager.redraw();
	}
	
	clearBindings(){
		if(this.binding){
			window.removeEventListener("resize", this.binding);
		}
		
		if(this.resizeObserver){
			this.resizeObserver.unobserve(this.table.element);
		}
		
		if(this.visibilityObserver){
			this.visibilityObserver.unobserve(this.table.element);
		}
		
		if(this.containerObserver){
			this.containerObserver.unobserve(this.table.element.parentNode);
		}
	}
}

function responsiveCollapse(cell, formatterParams, onRendered){
	var el = document.createElement("div"),
	config = cell.getRow()._row.modules.responsiveLayout;

	el.classList.add("tabulator-responsive-collapse-toggle");
	
	el.innerHTML = `<svg class='tabulator-responsive-collapse-toggle-open' viewbox="0 0 24 24">
  <line x1="7" y1="12" x2="17" y2="12" fill="none" stroke-width="3" stroke-linecap="round" />
  <line y1="7" x1="12" y2="17" x2="12" fill="none" stroke-width="3" stroke-linecap="round" />
</svg>

<svg class='tabulator-responsive-collapse-toggle-close' viewbox="0 0 24 24">
  <line x1="7" y1="12" x2="17" y2="12"  fill="none" stroke-width="3" stroke-linecap="round" />
</svg>`;

	cell.getElement().classList.add("tabulator-row-handle");

	function toggleList(isOpen){
		var collapseEl = config.element;

		config.open = isOpen;

		if(collapseEl){

			if(config.open){
				el.classList.add("open");
				collapseEl.style.display = '';
			}else {
				el.classList.remove("open");
				collapseEl.style.display = 'none';
			}
		}
	}

	el.addEventListener("click", function(e){
		e.stopImmediatePropagation();
		toggleList(!config.open);
		cell.getTable().rowManager.adjustTableSize();
	});

	toggleList(config.open);

	return el;
}

var extensions$2 = {
	format:{
		formatters:{
			responsiveCollapse:responsiveCollapse,
		}
	}
};

class ResponsiveLayout extends Module{

	static moduleName = "responsiveLayout";
	static moduleExtensions = extensions$2;

	constructor(table){
		super(table);

		this.columns = [];
		this.hiddenColumns = [];
		this.mode = "";
		this.index = 0;
		this.collapseFormatter = [];
		this.collapseStartOpen = true;
		this.collapseHandleColumn = false;

		this.registerTableOption("responsiveLayout", false); //responsive layout flags
		this.registerTableOption("responsiveLayoutCollapseStartOpen", true); //start showing collapsed data
		this.registerTableOption("responsiveLayoutCollapseUseFormatters", true); //responsive layout collapse formatter
		this.registerTableOption("responsiveLayoutCollapseFormatter", false); //responsive layout collapse formatter

		this.registerColumnOption("responsive");
	}

	//generate responsive columns list
	initialize(){
		if(this.table.options.responsiveLayout){
			this.subscribe("column-layout", this.initializeColumn.bind(this));
			this.subscribe("column-show", this.updateColumnVisibility.bind(this));
			this.subscribe("column-hide", this.updateColumnVisibility.bind(this));
			this.subscribe("columns-loaded", this.initializeResponsivity.bind(this));
			this.subscribe("column-moved", this.initializeResponsivity.bind(this));
			this.subscribe("column-add", this.initializeResponsivity.bind(this));
			this.subscribe("column-delete", this.initializeResponsivity.bind(this));

			this.subscribe("table-redrawing", this.tableRedraw.bind(this));
			
			if(this.table.options.responsiveLayout === "collapse"){
				this.subscribe("row-data-changed", this.generateCollapsedRowContent.bind(this));
				this.subscribe("row-init", this.initializeRow.bind(this));
				this.subscribe("row-layout", this.layoutRow.bind(this));
			}
		}
	}

	tableRedraw(force){
		if(["fitColumns", "fitDataStretch"].indexOf(this.layoutMode()) === -1){
			if(!force){
				this.update();
			}
		}
	}

	initializeResponsivity(){
		var columns = [];

		this.mode = this.table.options.responsiveLayout;
		this.collapseFormatter = this.table.options.responsiveLayoutCollapseFormatter || this.formatCollapsedData;
		this.collapseStartOpen = this.table.options.responsiveLayoutCollapseStartOpen;
		this.hiddenColumns = [];

		if(this.collapseFormatter){
			this.collapseFormatter = this.collapseFormatter.bind(this.table);
		}

		//determine level of responsivity for each column
		this.table.columnManager.columnsByIndex.forEach((column, i) => {
			if(column.modules.responsive){
				if(column.modules.responsive.order && column.modules.responsive.visible){
					column.modules.responsive.index = i;
					columns.push(column);

					if(!column.visible && this.mode === "collapse"){
						this.hiddenColumns.push(column);
					}
				}
			}
		});

		//sort list by responsivity
		columns = columns.reverse();
		columns = columns.sort((a, b) => {
			var diff = b.modules.responsive.order - a.modules.responsive.order;
			return diff || (b.modules.responsive.index - a.modules.responsive.index);
		});

		this.columns = columns;

		if(this.mode === "collapse"){
			this.generateCollapsedContent();
		}

		//assign collapse column
		for (let col of this.table.columnManager.columnsByIndex){
			if(col.definition.formatter == "responsiveCollapse"){
				this.collapseHandleColumn = col;
				break;
			}
		}

		if(this.collapseHandleColumn){
			if(this.hiddenColumns.length){
				this.collapseHandleColumn.show();
			}else {
				this.collapseHandleColumn.hide();
			}
		}
	}

	//define layout information
	initializeColumn(column){
		var def = column.getDefinition();

		column.modules.responsive = {order: typeof def.responsive === "undefined" ? 1 : def.responsive, visible:def.visible === false ? false : true};
	}

	initializeRow(row){
		var el;

		if(row.type !== "calc"){
			el = document.createElement("div");
			el.classList.add("tabulator-responsive-collapse");

			row.modules.responsiveLayout = {
				element:el,
				open:this.collapseStartOpen,
			};

			if(!this.collapseStartOpen){
				el.style.display = 'none';
			}
		}
	}

	layoutRow(row){
		var rowEl = row.getElement();

		if(row.modules.responsiveLayout){
			rowEl.appendChild(row.modules.responsiveLayout.element);
			this.generateCollapsedRowContent(row);
		}
	}

	//update column visibility
	updateColumnVisibility(column, responsiveToggle){
		if(!responsiveToggle && column.modules.responsive){
			column.modules.responsive.visible = column.visible;
			this.initializeResponsivity();
		}
	}

	hideColumn(column){
		var colCount = this.hiddenColumns.length;

		column.hide(false, true);

		if(this.mode === "collapse"){
			this.hiddenColumns.unshift(column);
			this.generateCollapsedContent();

			if(this.collapseHandleColumn && !colCount){
				this.collapseHandleColumn.show();
			}
		}
	}

	showColumn(column){
		var index;

		column.show(false, true);
		//set column width to prevent calculation loops on uninitialized columns
		column.setWidth(column.getWidth());

		if(this.mode === "collapse"){
			index = this.hiddenColumns.indexOf(column);

			if(index > -1){
				this.hiddenColumns.splice(index, 1);
			}

			this.generateCollapsedContent();

			if(this.collapseHandleColumn && !this.hiddenColumns.length){
				this.collapseHandleColumn.hide();
			}
		}
	}

	//redraw columns to fit space
	update(){
		var working = true;

		while(working){

			let width = this.table.modules.layout.getMode() == "fitColumns" ? this.table.columnManager.getFlexBaseWidth() : this.table.columnManager.getWidth();

			let diff = (this.table.options.headerVisible ? this.table.columnManager.element.clientWidth : this.table.element.clientWidth) - width;

			if(diff < 0){
				//table is too wide
				let column = this.columns[this.index];

				if(column){
					this.hideColumn(column);
					this.index ++;
				}else {
					working = false;
				}

			}else {

				//table has spare space
				let column = this.columns[this.index -1];

				if(column){
					if(diff > 0){
						if(diff >= column.getWidth()){
							this.showColumn(column);
							this.index --;
						}else {
							working = false;
						}
					}else {
						working = false;
					}
				}else {
					working = false;
				}
			}

			if(!this.table.rowManager.activeRowsCount){
				this.table.rowManager.renderEmptyScroll();
			}
		}
	}

	generateCollapsedContent(){
		var rows = this.table.rowManager.getDisplayRows();

		rows.forEach((row) => {
			this.generateCollapsedRowContent(row);
		});
	}

	generateCollapsedRowContent(row){
		var el, contents;

		if(row.modules.responsiveLayout){
			el = row.modules.responsiveLayout.element;

			while(el.firstChild) el.removeChild(el.firstChild);

			contents = this.collapseFormatter(this.generateCollapsedRowData(row));
			if(contents){
				el.appendChild(contents);
			}
			row.calcHeight(true);
		}
	}

	generateCollapsedRowData(row){
		var data = row.getData(),
		output = [],
		mockCellComponent;

		this.hiddenColumns.forEach((column) => {
			var value = column.getFieldValue(data);

			if(column.definition.title && column.field){
				if(column.modules.format && this.table.options.responsiveLayoutCollapseUseFormatters){

					mockCellComponent = {
						value:false,
						data:{},
						getValue:function(){
							return value;
						},
						getData:function(){
							return data;
						},
						getType:function(){
							return "cell";
						},
						getElement:function(){
							return document.createElement("div");
						},
						getRow:function(){
							return row.getComponent();
						},
						getColumn:function(){
							return column.getComponent();
						},
						getTable:() => {
							return this.table;
						},
					};

					function onRendered(callback){
						callback();
					}

					output.push({
						field: column.field,
						title: column.definition.title,
						value: column.modules.format.formatter.call(this.table.modules.format, mockCellComponent, column.modules.format.params, onRendered)
					});
				}else {
					output.push({
						field: column.field,
						title: column.definition.title,
						value: value
					});
				}
			}
		});

		return output;
	}

	formatCollapsedData(data){
		var list = document.createElement("table");

		data.forEach((item) => {
			var row = document.createElement("tr");
			var titleData = document.createElement("td");
			var valueData = document.createElement("td");
			var node_content;

			var titleHighlight = document.createElement("strong");
			titleData.appendChild(titleHighlight);
			
			this.modules.localize.bind("columns|" + item.field, function(text){
				titleHighlight.innerHTML = text || item.title;
			});

			if(item.value instanceof Node){
				node_content = document.createElement("div");
				node_content.appendChild(item.value);
				valueData.appendChild(node_content);
			}else {
				valueData.innerHTML = item.value;
			}

			row.appendChild(titleData);
			row.appendChild(valueData);
			list.appendChild(row);
		});

		return Object.keys(data).length ? list : "";
	}
}

function rowSelection(cell, formatterParams, onRendered){
	var checkbox = document.createElement("input");
	var blocked = false;

	checkbox.type = 'checkbox';

	checkbox.setAttribute("aria-label", "Select Row");
	
	if(this.table.modExists("selectRow", true)){

		checkbox.addEventListener("click", (e) => {
			e.stopPropagation();
		});

		if(typeof cell.getRow == 'function'){
			var row = cell.getRow();

			if(row instanceof RowComponent){

				checkbox.addEventListener("change", (e) => {
					if(this.table.options.selectableRowsRangeMode === "click"){
						if(!blocked){
							row.toggleSelect();
						}else {
							blocked = false;
						}
					}else {
						row.toggleSelect();
					}
				});

				if(this.table.options.selectableRowsRangeMode === "click"){
					checkbox.addEventListener("click", (e) => {
						blocked = true;
						this.table.modules.selectRow.handleComplexRowClick(row._row, e);
					});
				}

				checkbox.checked = row.isSelected && row.isSelected();
				this.table.modules.selectRow.registerRowSelectCheckbox(row, checkbox);
			}else {
				checkbox = "";
			}
		}else {
			checkbox.addEventListener("change", (e) => {
				if(this.table.modules.selectRow.selectedRows.length){
					this.table.deselectRow();
				}else {
					this.table.selectRow(formatterParams.rowRange);
				}
			});

			this.table.modules.selectRow.registerHeaderSelectCheckbox(checkbox);
		}
	}

	return checkbox;
}

var extensions$1 = {
	format:{
		formatters:{
			rowSelection:rowSelection,
		}
	}
};

class SelectRow extends Module{

	static moduleName = "selectRow";
	static moduleExtensions = extensions$1;
	
	constructor(table){
		super(table);
		
		this.selecting = false; //flag selecting in progress
		this.lastClickedRow = false; //last clicked row
		this.selectPrev = []; //hold previously selected element for drag drop selection
		this.selectedRows = []; //hold selected rows
		this.headerCheckboxElement = null; // hold header select element
		
		this.registerTableOption("selectableRows", "highlight"); //highlight rows on hover
		this.registerTableOption("selectableRowsRangeMode", "drag");  //highlight rows on hover
		this.registerTableOption("selectableRowsRollingSelection", true); //roll selection once maximum number of selectable rows is reached
		this.registerTableOption("selectableRowsPersistence", true); // maintain selection when table view is updated
		this.registerTableOption("selectableRowsCheck", function(data, row){return true;}); //check whether row is selectable
		
		this.registerTableFunction("selectRow", this.selectRows.bind(this));
		this.registerTableFunction("deselectRow", this.deselectRows.bind(this));
		this.registerTableFunction("toggleSelectRow", this.toggleRow.bind(this));
		this.registerTableFunction("getSelectedRows", this.getSelectedRows.bind(this));
		this.registerTableFunction("getSelectedData", this.getSelectedData.bind(this));
		
		//register component functions
		this.registerComponentFunction("row", "select", this.selectRows.bind(this));
		this.registerComponentFunction("row", "deselect", this.deselectRows.bind(this));
		this.registerComponentFunction("row", "toggleSelect", this.toggleRow.bind(this));
		this.registerComponentFunction("row", "isSelected", this.isRowSelected.bind(this));
	}
	
	initialize(){

		this.deprecatedOptionsCheck();

		if(this.table.options.selectableRows === "highlight" && this.table.options.selectableRange){
			this.table.options.selectableRows = false;
		}

		if(this.table.options.selectableRows !== false){
			this.subscribe("row-init", this.initializeRow.bind(this));
			this.subscribe("row-deleting", this.rowDeleted.bind(this));
			this.subscribe("rows-wipe", this.clearSelectionData.bind(this));
			this.subscribe("rows-retrieve", this.rowRetrieve.bind(this));
			
			if(this.table.options.selectableRows && !this.table.options.selectableRowsPersistence){
				this.subscribe("data-refreshing", this.deselectRows.bind(this));
			}
		}
	}

	deprecatedOptionsCheck(){
		// this.deprecationCheck("selectable", "selectableRows", true);
		// this.deprecationCheck("selectableRollingSelection", "selectableRowsRollingSelection", true);
		// this.deprecationCheck("selectableRangeMode", "selectableRowsRangeMode", true);
		// this.deprecationCheck("selectablePersistence", "selectableRowsPersistence", true);
		// this.deprecationCheck("selectableCheck", "selectableRowsCheck", true);
	}
	
	rowRetrieve(type, prevValue){
		return type === "selected" ? this.selectedRows : prevValue;
	}
	
	rowDeleted(row){
		this._deselectRow(row, true);
	}
	
	clearSelectionData(silent){
		var prevSelected = this.selectedRows.length;

		this.selecting = false;
		this.lastClickedRow = false;
		this.selectPrev = [];
		this.selectedRows = [];
		
		if(prevSelected && silent !== true){
			this._rowSelectionChanged();
		}
	}
	
	initializeRow(row){
		var self = this,
		selectable = self.checkRowSelectability(row),
		element = row.getElement();
		
		// trigger end of row selection
		var endSelect = function(){
			
			setTimeout(function(){
				self.selecting = false;
			}, 50);
			
			document.body.removeEventListener("mouseup", endSelect);
		};
		
		row.modules.select = {selected:false};

		element.classList.toggle("tabulator-selectable", selectable);
		element.classList.toggle("tabulator-unselectable", !selectable);
		
		//set row selection class
		if(self.checkRowSelectability(row)){			
			if(self.table.options.selectableRows && self.table.options.selectableRows != "highlight"){
				if(self.table.options.selectableRowsRangeMode === "click"){
					element.addEventListener("click", this.handleComplexRowClick.bind(this, row));
				}else {
					element.addEventListener("click", function(e){
						if(!self.table.modExists("edit") || !self.table.modules.edit.getCurrentCell()){
							self.table._clearSelection();
						}
						
						if(!self.selecting){
							self.toggleRow(row);
						}
					});
					
					element.addEventListener("mousedown", function(e){
						if(e.shiftKey){
							self.table._clearSelection();
							
							self.selecting = true;
							
							self.selectPrev = [];
							
							document.body.addEventListener("mouseup", endSelect);
							document.body.addEventListener("keyup", endSelect);
							
							self.toggleRow(row);
							
							return false;
						}
					});
					
					element.addEventListener("mouseenter", function(e){
						if(self.selecting){
							self.table._clearSelection();
							self.toggleRow(row);
							
							if(self.selectPrev[1] == row){
								self.toggleRow(self.selectPrev[0]);
							}
						}
					});
					
					element.addEventListener("mouseout", function(e){
						if(self.selecting){
							self.table._clearSelection();
							self.selectPrev.unshift(row);
						}
					});
				}
			}
		}
	}
	
	handleComplexRowClick(row, e){
		if(e.shiftKey){
			this.table._clearSelection();
			this.lastClickedRow = this.lastClickedRow || row;
			
			var lastClickedRowIdx = this.table.rowManager.getDisplayRowIndex(this.lastClickedRow);
			var rowIdx = this.table.rowManager.getDisplayRowIndex(row);
			
			var fromRowIdx = lastClickedRowIdx <= rowIdx ? lastClickedRowIdx : rowIdx;
			var toRowIdx = lastClickedRowIdx >= rowIdx ? lastClickedRowIdx : rowIdx;
			
			var rows = this.table.rowManager.getDisplayRows().slice(0);
			var toggledRows = rows.splice(fromRowIdx, toRowIdx - fromRowIdx + 1);
			
			if(e.ctrlKey || e.metaKey){
				toggledRows.forEach((toggledRow)=>{
					if(toggledRow !== this.lastClickedRow){
						
						if(this.table.options.selectableRows !== true && !this.isRowSelected(row)){
							if(this.selectedRows.length < this.table.options.selectableRows){
								this.toggleRow(toggledRow);
							}
						}else {
							this.toggleRow(toggledRow);
						}
					}
				});
				this.lastClickedRow = row;
			}else {
				this.deselectRows(undefined, true);
				
				if(this.table.options.selectableRows !== true){
					if(toggledRows.length > this.table.options.selectableRows){
						toggledRows = toggledRows.slice(0, this.table.options.selectableRows);
					}
				}
				
				this.selectRows(toggledRows);
			}
			this.table._clearSelection();
		}
		else if(e.ctrlKey || e.metaKey){
			this.toggleRow(row);
			this.lastClickedRow = row;
		}else {
			this.deselectRows(undefined, true);
			this.selectRows(row);
			this.lastClickedRow = row;
		}
	}

	checkRowSelectability(row){
		if(row && row.type === "row"){
			return this.table.options.selectableRowsCheck.call(this.table, row.getComponent());
		}

		return false;
	}
	
	//toggle row selection
	toggleRow(row){
		if(this.checkRowSelectability(row)){
			if(row.modules.select && row.modules.select.selected){
				this._deselectRow(row);
			}else {
				this._selectRow(row);
			}
		}
	}
	
	//select a number of rows
	selectRows(rows){
		var changes = [], 
		rowMatch, change;
		
		switch(typeof rows){
			case "undefined":
				rowMatch = this.table.rowManager.rows;
				break;
			
			case "number":
				rowMatch = this.table.rowManager.findRow(rows);
				break;
				
			case "string":
				rowMatch = this.table.rowManager.findRow(rows);
			
				if(!rowMatch){
					rowMatch = this.table.rowManager.getRows(rows);
				}
				break;
			
			default:
				rowMatch = rows;
				break;
		}

		if(Array.isArray(rowMatch)){
			if(rowMatch.length){
				rowMatch.forEach((row) => {
					change = this._selectRow(row, true, true);

					if(change){
						changes.push(change);
					}
				});

				this._rowSelectionChanged(false, changes);
			}
		}else {
			if(rowMatch){
				this._selectRow(rowMatch, false, true);
			}
		}	
	}
	
	//select an individual row
	_selectRow(rowInfo, silent, force){
		//handle max row count
		if(!isNaN(this.table.options.selectableRows) && this.table.options.selectableRows !== true && !force){
			if(this.selectedRows.length >= this.table.options.selectableRows){
				if(this.table.options.selectableRowsRollingSelection){
					this._deselectRow(this.selectedRows[0]);
				}else {
					return false;
				}
			}
		}
		
		var row = this.table.rowManager.findRow(rowInfo);
		
		if(row){
			if(this.selectedRows.indexOf(row) == -1){
				row.getElement().classList.add("tabulator-selected");
				if(!row.modules.select){
					row.modules.select = {};
				}
				
				row.modules.select.selected = true;
				if(row.modules.select.checkboxEl){
					row.modules.select.checkboxEl.checked = true;
				}
				
				this.selectedRows.push(row);
				
				if(this.table.options.dataTreeSelectPropagate){
					this.childRowSelection(row, true);
				}
				
				this.dispatchExternal("rowSelected", row.getComponent());
				
				this._rowSelectionChanged(silent, row);

				return row;
			}
		}else {
			if(!silent){
				console.warn("Selection Error - No such row found, ignoring selection:" + rowInfo);
			}
		}
	}
	
	isRowSelected(row){
		return this.selectedRows.indexOf(row) !== -1;
	}
	
	//deselect a number of rows
	deselectRows(rows, silent){
		var changes = [], 
		rowMatch, change;
		
		switch(typeof rows){
			case "undefined":
				rowMatch = Object.assign([], this.selectedRows);
				break;

			case "number":
				rowMatch = this.table.rowManager.findRow(rows);
				break;
			
			case "string":
				rowMatch = this.table.rowManager.findRow(rows);
			
				if(!rowMatch){
					rowMatch = this.table.rowManager.getRows(rows);
				}
				break;
			
			default:
				rowMatch = rows;
				break;
		}

		if(Array.isArray(rowMatch)){
			if(rowMatch.length){
				rowMatch.forEach((row) => {
					change = this._deselectRow(row, true, true);

					if(change){
						changes.push(change);
					}
				});

				this._rowSelectionChanged(silent, [], changes);
			}
		}else {
			if(rowMatch){
				this._deselectRow(rowMatch, silent, true);
			}
		}	
	}
	
	//deselect an individual row
	_deselectRow(rowInfo, silent){
		var self = this,
		row = self.table.rowManager.findRow(rowInfo),
		index, element;
		
		if(row){
			index = self.selectedRows.findIndex(function(selectedRow){
				return selectedRow == row;
			});
			
			if(index > -1){

				element = row.getElement();
				
				if(element){
					element.classList.remove("tabulator-selected");
				}
				
				if(!row.modules.select){
					row.modules.select = {};
				}
				
				row.modules.select.selected = false;
				if(row.modules.select.checkboxEl){
					row.modules.select.checkboxEl.checked = false;
				}
				self.selectedRows.splice(index, 1);
				
				if(this.table.options.dataTreeSelectPropagate){
					this.childRowSelection(row, false);
				}
				
				this.dispatchExternal("rowDeselected", row.getComponent());
				
				self._rowSelectionChanged(silent, undefined, row);

				return row;
			}
		}else {
			if(!silent){
				console.warn("Deselection Error - No such row found, ignoring selection:" + rowInfo);
			}
		}
	}
	
	getSelectedData(){
		var data = [];
		
		this.selectedRows.forEach(function(row){
			data.push(row.getData());
		});
		
		return data;
	}
	
	getSelectedRows(){
		var rows = [];
		
		this.selectedRows.forEach(function(row){
			rows.push(row.getComponent());
		});
		
		return rows;
	}
	
	_rowSelectionChanged(silent, selected = [], deselected = []){
		if(this.headerCheckboxElement){
			if(this.selectedRows.length === 0){
				this.headerCheckboxElement.checked = false;
				this.headerCheckboxElement.indeterminate = false;
			} else if(this.table.rowManager.rows.length === this.selectedRows.length){
				this.headerCheckboxElement.checked = true;
				this.headerCheckboxElement.indeterminate = false;
			} else {
				this.headerCheckboxElement.indeterminate = true;
				this.headerCheckboxElement.checked = false;
			}
		}
		
		if(!silent){
			if(!Array.isArray(selected)){
				selected = [selected];
			}

			selected = selected.map(row => row.getComponent());

			if(!Array.isArray(deselected)){
				deselected = [deselected];
			}

			deselected = deselected.map(row => row.getComponent());

			this.dispatchExternal("rowSelectionChanged", this.getSelectedData(), this.getSelectedRows(), selected, deselected);
		}
	}
	
	registerRowSelectCheckbox (row, element) {
		if(!row._row.modules.select){
			row._row.modules.select = {};
		}
		
		row._row.modules.select.checkboxEl = element;
	}
	
	registerHeaderSelectCheckbox (element) {
		this.headerCheckboxElement = element;
	}
	
	childRowSelection(row, select){
		var children = this.table.modules.dataTree.getChildren(row, true, true);
		
		if(select){
			for(let child of children){
				this._selectRow(child, true);
			}
		}else {
			for(let child of children){
				this._deselectRow(child, true);
			}
		}
	}
}

class RangeComponent {
	constructor(range) {
		this._range = range;

		return new Proxy(this, {
			get: function (target, name, receiver) {
				if (typeof target[name] !== "undefined") {
					return target[name];
				} else {
					return target._range.table.componentFunctionBinder.handle("range", target._range, name);
				}
			},
		});
	}

	getElement() {
		return this._range.element;
	}

	getData() {
		return this._range.getData();
	}

	getCells() {
		return this._range.getCells(true, true);
	}

	getStructuredCells() {
		return this._range.getStructuredCells();
	}

	getRows() {
		return this._range.getRows().map((row) => row.getComponent());
	}

	getColumns() {
		return this._range.getColumns().map((column) => column.getComponent());
	}
	
	getBounds() {
		return this._range.getBounds();
	}

	getTopEdge() {
		return this._range.top;
	}

	getBottomEdge() {
		return this._range.bottom;
	}

	getLeftEdge() {
		return this._range.left;
	}

	getRightEdge() {
		return this._range.right;
	}

	setBounds(start, end){
		if(this._range.destroyedGuard("setBounds")){
			this._range.setBounds(start ? start._cell : start, end ? end._cell : end);
		}
	}

	setStartBound(start){
		if(this._range.destroyedGuard("setStartBound")){
			this._range.setEndBound(start ? start._cell : start);
			this._range.rangeManager.layoutElement();
		}
	}

	setEndBound(end){
		if(this._range.destroyedGuard("setEndBound")){
			this._range.setEndBound(end ? end._cell : end);
			this._range.rangeManager.layoutElement();
		}
	}

	clearValues(){
		if(this._range.destroyedGuard("clearValues")){
			this._range.clearValues();
		}
	}

	remove(){
		if(this._range.destroyedGuard("remove")){
			this._range.destroy(true);
		}
	}
}

class Range extends CoreFeature{
	constructor(table, rangeManager, start, end) {
		super(table);
		
		this.rangeManager = rangeManager;
		this.element = null;
		this.initialized = false;
		this.initializing = {
			start:false,
			end:false,
		};
		this.destroyed = false;
		
		this.top = 0;
		this.bottom = 0;
		this.left = 0;
		this.right = 0;
		
		this.table = table;
		this.start = {row:0, col:0};
		this.end = {row:0, col:0};

		if(this.rangeManager.rowHeader){
			this.left = 1;
			this.right = 1;
			this.start.col = 1;
			this.end.col = 1;
		}
		
		this.initElement();
		
		setTimeout(() => {
			this.initBounds(start, end);
		});
	}
	
	initElement(){
		this.element = document.createElement("div");
		this.element.classList.add("tabulator-range");
	}
	
	initBounds(start, end){
		this._updateMinMax();
		
		if(start){
			this.setBounds(start, end || start);
		}
	}
	
	///////////////////////////////////
	///////   Boundary Setup    ///////
	///////////////////////////////////
	
	setStart(row, col) {
		if(this.start.row !== row || this.start.col !== col){
			this.start.row = row;
			this.start.col = col;
			
			this.initializing.start = true;
			this._updateMinMax();
		}
	}
	
	setEnd(row, col) {
		if(this.end.row !== row || this.end.col !== col){
			this.end.row = row;
			this.end.col = col;
			
			this.initializing.end = true;
			this._updateMinMax();
		}
	}
	
	setBounds(start, end, visibleRows){
		if(start){
			this.setStartBound(start);
		}
		
		this.setEndBound(end || start);
		this.rangeManager.layoutElement(visibleRows);
	}
	
	setStartBound(element){
		var row, col;
		
		if (element.type === "column") {
			if(this.rangeManager.columnSelection){
				this.setStart(0, element.getPosition() - 1);
			}
		}else {
			row = element.row.position - 1;
			col = element.column.getPosition() - 1;
			
			if (element.column === this.rangeManager.rowHeader) {
				this.setStart(row, 1);
			} else {
				this.setStart(row, col);
			}
		}
	}
	
	setEndBound(element){
		var rowsCount = this._getTableRows().length,
		row, col, isRowHeader;
		
		if (element.type === "column") {
			if(this.rangeManager.columnSelection){
				if (this.rangeManager.selecting === "column") {
					this.setEnd(rowsCount - 1, element.getPosition() - 1);
				} else if (this.rangeManager.selecting === "cell") {
					this.setEnd(0, element.getPosition() - 1);
				}
			}
		}else {
			row = element.row.position - 1;
			col = element.column.getPosition() - 1;
			isRowHeader = element.column === this.rangeManager.rowHeader;
			
			if (this.rangeManager.selecting === "row") {
				this.setEnd(row, this._getTableColumns().length - 1);
			} else if (this.rangeManager.selecting !== "row" && isRowHeader) {
				this.setEnd(row, 0);
			} else if (this.rangeManager.selecting === "column") {
				this.setEnd(rowsCount - 1, col);
			} else {
				this.setEnd(row, col);
			}
		}
	}
	
	_updateMinMax() {
		this.top = Math.min(this.start.row, this.end.row);
		this.bottom = Math.max(this.start.row, this.end.row);
		this.left = Math.min(this.start.col, this.end.col);
		this.right = Math.max(this.start.col, this.end.col);
		
		if(this.initialized){
			this.dispatchExternal("rangeChanged", this.getComponent());
		}else {
			if(this.initializing.start && this.initializing.end){
				this.initialized = true;
				this.dispatchExternal("rangeAdded", this.getComponent());
			}
		}
	}
	
	_getTableColumns() {
		return this.table.columnManager.getVisibleColumnsByIndex();
	}
	
	_getTableRows() {
		return this.table.rowManager.getDisplayRows().filter(row=> row.type === "row");
	}
	
	///////////////////////////////////
	///////      Rendering      ///////
	///////////////////////////////////
	
	layout() {
		var _vDomTop = this.table.rowManager.renderer.vDomTop,
		_vDomBottom = this.table.rowManager.renderer.vDomBottom,
		_vDomLeft = this.table.columnManager.renderer.leftCol,
		_vDomRight = this.table.columnManager.renderer.rightCol,		
		top, bottom, left, right, topLeftCell, bottomRightCell, topLeftCellEl, bottomRightCellEl, topLeftRowEl, bottomRightRowEl;

		if(this.table.options.renderHorizontal === "virtual" && this.rangeManager.rowHeader) {
			_vDomRight += 1;
		}
		
		if (_vDomTop == null) {
			_vDomTop = 0;
		}
		
		if (_vDomBottom == null) {
			_vDomBottom = Infinity;
		}
		
		if (_vDomLeft == null) {
			_vDomLeft = 0;
		}
		
		if (_vDomRight == null) {
			_vDomRight = Infinity;
		}
		
		if (this.overlaps(_vDomLeft, _vDomTop, _vDomRight, _vDomBottom)) {
			top = Math.max(this.top, _vDomTop);
			bottom = Math.min(this.bottom, _vDomBottom);
			left = Math.max(this.left, _vDomLeft);
			right = Math.min(this.right, _vDomRight);
			
			topLeftCell = this.rangeManager.getCell(top, left);
			bottomRightCell = this.rangeManager.getCell(bottom, right);
			topLeftCellEl = topLeftCell.getElement();
			bottomRightCellEl = bottomRightCell.getElement();
			topLeftRowEl = topLeftCell.row.getElement();
			bottomRightRowEl = bottomRightCell.row.getElement();
			
			this.element.classList.add("tabulator-range-active");
			// this.element.classList.toggle("tabulator-range-active", this === this.rangeManager.activeRange);

			if(this.table.rtl){
				this.element.style.right = topLeftRowEl.offsetWidth - topLeftCellEl.offsetLeft - topLeftCellEl.offsetWidth + "px";
				this.element.style.width = topLeftCellEl.offsetLeft + topLeftCellEl.offsetWidth - bottomRightCellEl.offsetLeft + "px";
			}else {
				this.element.style.left = topLeftRowEl.offsetLeft + topLeftCellEl.offsetLeft + "px";
				this.element.style.width = bottomRightCellEl.offsetLeft + bottomRightCellEl.offsetWidth - topLeftCellEl.offsetLeft + "px";
			}
			
			this.element.style.top = topLeftRowEl.offsetTop + "px";
			this.element.style.height = bottomRightRowEl.offsetTop + bottomRightRowEl.offsetHeight - topLeftRowEl.offsetTop + "px";
		}
	}
	
	atTopLeft(cell) {
		return cell.row.position - 1 === this.top && cell.column.getPosition() - 1 === this.left;
	}
	
	atBottomRight(cell) {
		return cell.row.position - 1 === this.bottom && cell.column.getPosition() - 1 === this.right;
	}
	
	occupies(cell) {
		return this.occupiesRow(cell.row) && this.occupiesColumn(cell.column);
	}
	
	occupiesRow(row) {
		return this.top <= row.position - 1 && row.position - 1 <= this.bottom;
	}
	
	occupiesColumn(col) {
		return this.left <= col.getPosition() - 1 && col.getPosition() - 1 <= this.right;
	}
	
	overlaps(left, top, right, bottom) {
		if ((this.left > right || left > this.right) || (this.top > bottom || top > this.bottom)){
			return false;
		}
		
		return true;
	}
	
	getData() {
		var data = [],
		rows = this.getRows(),
		columns = this.getColumns();
		
		rows.forEach((row) => {
			var rowData = row.getData(),
			result = {};
			
			columns.forEach((column) => {
				result[column.field] = rowData[column.field];
			});
			
			data.push(result);
		});
		
		return data;
	}
	
	getCells(structured, component) {
		var cells = [],
		rows = this.getRows(),
		columns = this.getColumns();
		
		if (structured) {
			cells = rows.map((row) => {
				var arr = [];
				
				row.getCells().forEach((cell) => {
					if (columns.includes(cell.column)) {
						arr.push(component ? cell.getComponent() : cell);
					}
				});
				
				return arr;
			});
		} else {
			rows.forEach((row) => {
				row.getCells().forEach((cell) => {
					if (columns.includes(cell.column)) {
						cells.push(component ? cell.getComponent() : cell);
					}
				});
			});
		}
		
		return cells;
	}
	
	getStructuredCells() {
		return this.getCells(true, true);
	}
	
	getRows() {
		return this._getTableRows().slice(this.top, this.bottom + 1);
	}
	
	getColumns() {
		return this._getTableColumns().slice(this.left, this.right + 1);
	}
	
	clearValues(){
		var cells = this.getCells();
		var clearValue = this.table.options.selectableRangeClearCellsValue;
		
		this.table.blockRedraw();
		
		cells.forEach((cell) => {
			cell.setValue(clearValue);
		});
		
		this.table.restoreRedraw();
		
	}
	
	getBounds(component){
		var cells = this.getCells(false, component),
		output = {
			start:null,
			end:null,
		};
		
		if(cells.length){
			output.start = cells[0];
			output.end = cells[cells.length - 1];
		}else {
			console.warn("No bounds defined on range");
		}
		
		return output;
	}
	
	getComponent() {
		if (!this.component) {
			this.component = new RangeComponent(this);
		}
		return this.component;
	}
	
	destroy(notify) {
		this.destroyed = true;
		
		this.element.remove();
		
		if(notify){
			this.rangeManager.rangeRemoved(this);
		}
		
		if(this.initialized){
			this.dispatchExternal("rangeRemoved", this.getComponent());
		}
	}
	
	destroyedGuard(func){
		if(this.destroyed){
			console.warn("You cannot call the "  + func + " function on a destroyed range");
		}
		
		return !this.destroyed;
	}
}

var bindings = {
	rangeJumpUp:["ctrl + 38", "meta + 38"],
	rangeJumpDown:["ctrl + 40", "meta + 40"],
	rangeJumpLeft:["ctrl + 37", "meta + 37"],
	rangeJumpRight:["ctrl + 39", "meta + 39"],
	rangeExpandUp:"shift + 38",
	rangeExpandDown:"shift + 40",
	rangeExpandLeft:"shift + 37",
	rangeExpandRight:"shift + 39",
	rangeExpandJumpUp:["ctrl + shift + 38", "meta + shift + 38"],
	rangeExpandJumpDown:["ctrl + shift + 40", "meta + shift + 40"],
	rangeExpandJumpLeft:["ctrl + shift + 37", "meta + shift + 37"],
	rangeExpandJumpRight:["ctrl + shift + 39", "meta + shift + 39"],
};

var actions = {
	rangeJumpLeft: function(e){
		this.dispatch("keybinding-nav-range", e, "left", true, false);
	},
	rangeJumpRight: function(e){
		this.dispatch("keybinding-nav-range", e, "right", true, false);
	},
	rangeJumpUp: function(e){
		this.dispatch("keybinding-nav-range", e, "up", true, false);
	},
	rangeJumpDown: function(e){
		this.dispatch("keybinding-nav-range", e, "down", true, false);
	},
	rangeExpandLeft: function(e){
		this.dispatch("keybinding-nav-range", e, "left", false, true);
	},
	rangeExpandRight: function(e){
		this.dispatch("keybinding-nav-range", e, "right", false, true);
	},
	rangeExpandUp: function(e){
		this.dispatch("keybinding-nav-range", e, "up", false, true);
	},
	rangeExpandDown: function(e){
		this.dispatch("keybinding-nav-range", e, "down", false, true);
	},
	rangeExpandJumpLeft: function(e){
		this.dispatch("keybinding-nav-range", e, "left", true, true);
	},
	rangeExpandJumpRight: function(e){
		this.dispatch("keybinding-nav-range", e, "right", true, true);
	},
	rangeExpandJumpUp: function(e){
		this.dispatch("keybinding-nav-range", e, "up", true, true);
	},
	rangeExpandJumpDown: function(e){
		this.dispatch("keybinding-nav-range", e, "down", true, true);
	},
};

var pasteActions = {
	range:function(data){
		var rows = [],
		range = this.table.modules.selectRange.activeRange,
		singleCell = false,
		bounds, startCell, startRow, rowWidth, dataLength;

		dataLength = data.length;
		
		if(range){
			bounds = range.getBounds();
			startCell = bounds.start;
			
			if(bounds.start === bounds.end){
				singleCell = true;
			}
			
			if(startCell){
				rows = this.table.rowManager.activeRows.slice();
				startRow = rows.indexOf(startCell.row);

				if(singleCell){
					rowWidth = data.length;
				}else {
					rowWidth = (rows.indexOf(bounds.end.row) - startRow) + 1;
				}
				
				
				if(startRow >-1){
					this.table.blockRedraw();
					
					rows = rows.slice(startRow, startRow + rowWidth);
					
					rows.forEach((row, i) => {
						row.updateData(data[i % dataLength]);
					});
					
					this.table.restoreRedraw();
				}
			}
		}
		
		return rows;
	}
};

var pasteParsers = {
	range:function(clipboard){
		var data = [],
		rows = [],
		range = this.table.modules.selectRange.activeRange,
		singleCell = false,
		bounds, startCell, colWidth, columnMap, startCol;
		
		if(range){
			bounds = range.getBounds();
			startCell = bounds.start;

			if(bounds.start === bounds.end){
				singleCell = true;
			}
			
			if(startCell){
				//get data from clipboard into array of columns and rows.
				clipboard = clipboard.split("\n");
				
				clipboard.forEach(function(row){
					data.push(row.split("\t"));
				});
				
				if(data.length){
					columnMap = this.table.columnManager.getVisibleColumnsByIndex();
					startCol = columnMap.indexOf(startCell.column);

					if(startCol > -1){
						if(singleCell){
							colWidth = data[0].length;
						}else {
							colWidth = (columnMap.indexOf(bounds.end.column) - startCol) + 1;
						}

						columnMap = columnMap.slice(startCol, startCol + colWidth);

						data.forEach((item) => {
							var row = {};
							var itemLength = item.length;

							columnMap.forEach(function(col, i){
								row[col.field] = item[i % itemLength];
							});
							
							rows.push(row);	
						});

						return rows;
					}				
				}
			}
		}
		
		return false;
	}
};

var columnLookups = {
	range:function(){
		var columns = this.modules.selectRange.selectedColumns();

		if(this.columnManager.rowHeader){
			columns.unshift(this.columnManager.rowHeader);
		}

		return columns;
	},
};

var rowLookups = {
	range:function(){
		return this.modules.selectRange.selectedRows();
	},
};

var extensions = {
	keybindings:{
		bindings:bindings,
		actions:actions
	},
	clipboard:{
		pasteActions:pasteActions,
		pasteParsers:pasteParsers
	},
	export:{
		columnLookups:columnLookups,
		rowLookups:rowLookups,
	}
};

class SelectRange extends Module {
	
	static moduleName = "selectRange";
	static moduleInitOrder = 1;
	static moduleExtensions = extensions;
	
	constructor(table) {
		super(table);
		
		this.selecting = "cell";
		this.mousedown = false;
		this.ranges = [];
		this.overlay = null;
		this.rowHeader = null;
		this.layoutChangeTimeout = null;
		this.columnSelection = false;
		this.rowSelection = false;
		this.maxRanges = 0;
		this.activeRange = false;
		this.blockKeydown = false;
		
		this.keyDownEvent = this._handleKeyDown.bind(this);
		this.mouseUpEvent = this._handleMouseUp.bind(this);
		
		this.registerTableOption("selectableRange", false); //enable selectable range
		this.registerTableOption("selectableRangeColumns", false); //enable selectable range
		this.registerTableOption("selectableRangeRows", false); //enable selectable range
		this.registerTableOption("selectableRangeClearCells", false); //allow clearing of active range
		this.registerTableOption("selectableRangeClearCellsValue", undefined); //value for cleared active range
		this.registerTableOption("selectableRangeAutoFocus", true); //focus on a cell after resetRanges
		
		this.registerTableFunction("getRangesData", this.getRangesData.bind(this));
		this.registerTableFunction("getRanges", this.getRanges.bind(this));
		this.registerTableFunction("addRange", this.addRangeFromComponent.bind(this));
		
		this.registerComponentFunction("cell", "getRanges", this.cellGetRanges.bind(this));
		this.registerComponentFunction("row", "getRanges", this.rowGetRanges.bind(this));
		this.registerComponentFunction("column", "getRanges", this.colGetRanges.bind(this));
	}
	
	///////////////////////////////////
	///////    Initialization   ///////
	///////////////////////////////////
	
	initialize() {
		if (this.options("selectableRange")) {	
			if(!this.options("selectableRows")){
				this.maxRanges = this.options("selectableRange");
				
				this.initializeTable();
				this.initializeWatchers();
			}else {
				console.warn("SelectRange functionality cannot be used in conjunction with row selection");
			}

			if(this.options('columns').findIndex((column) => column.frozen) > 0) {
				console.warn("Having frozen column in arbitrary position with selectRange option may result in unpredictable behavior.");
			}

			if(this.options('columns').filter((column) => column.frozen) > 1) {
				console.warn("Having multiple frozen columns with selectRange option may result in unpredictable behavior.");
			}
		}
	}
	
	
	initializeTable() {		
		this.overlay = document.createElement("div");
		this.overlay.classList.add("tabulator-range-overlay");
		
		this.rangeContainer = document.createElement("div");
		this.rangeContainer.classList.add("tabulator-range-container");
		
		this.activeRangeCellElement = document.createElement("div");
		this.activeRangeCellElement.classList.add("tabulator-range-cell-active");
		
		this.overlay.appendChild(this.rangeContainer);
		this.overlay.appendChild(this.activeRangeCellElement);
		
		this.table.rowManager.element.addEventListener("keydown", this.keyDownEvent);
		
		this.resetRanges();
		
		this.table.rowManager.element.appendChild(this.overlay);
		this.table.columnManager.element.setAttribute("tabindex", 0);
		this.table.element.classList.add("tabulator-ranges");
	}
	
	initializeWatchers() {
		this.columnSelection = this.options("selectableRangeColumns");
		this.rowSelection = this.options("selectableRangeRows");
		
		this.subscribe("column-init", this.initializeColumn.bind(this));
		this.subscribe("column-mousedown", this.handleColumnMouseDown.bind(this));
		this.subscribe("column-mousemove", this.handleColumnMouseMove.bind(this));
		this.subscribe("column-resized", this.handleColumnResized.bind(this));
		this.subscribe("column-moving", this.handleColumnMoving.bind(this));
		this.subscribe("column-moved", this.handleColumnMoved.bind(this));
		this.subscribe("column-width", this.layoutChange.bind(this));
		this.subscribe("column-height", this.layoutChange.bind(this));
		this.subscribe("column-resized", this.layoutChange.bind(this));
		this.subscribe("columns-loaded", this.updateHeaderColumn.bind(this));
		
		this.subscribe("cell-height", this.layoutChange.bind(this));
		this.subscribe("cell-rendered", this.renderCell.bind(this));
		this.subscribe("cell-mousedown", this.handleCellMouseDown.bind(this));
		this.subscribe("cell-mousemove", this.handleCellMouseMove.bind(this));
		this.subscribe("cell-click", this.handleCellClick.bind(this));
		this.subscribe("cell-editing", this.handleEditingCell.bind(this));
		
		this.subscribe("page-changed", this.redraw.bind(this));
		
		this.subscribe("scroll-vertical", this.layoutChange.bind(this));
		this.subscribe("scroll-horizontal", this.layoutChange.bind(this));
		
		this.subscribe("data-destroy", this.tableDestroyed.bind(this));
		this.subscribe("data-processed", this.resetRanges.bind(this));
		
		this.subscribe("table-layout", this.layoutElement.bind(this));
		this.subscribe("table-redraw", this.redraw.bind(this));
		this.subscribe("table-destroy", this.tableDestroyed.bind(this));
		
		this.subscribe("edit-editor-clear", this.finishEditingCell.bind(this));
		this.subscribe("edit-blur", this.restoreFocus.bind(this));
		
		this.subscribe("keybinding-nav-prev", this.keyNavigate.bind(this, "left"));
		this.subscribe("keybinding-nav-next", this.keyNavigate.bind(this, "right"));
		this.subscribe("keybinding-nav-left", this.keyNavigate.bind(this, "left"));
		this.subscribe("keybinding-nav-right", this.keyNavigate.bind(this, "right"));
		this.subscribe("keybinding-nav-up", this.keyNavigate.bind(this, "up"));
		this.subscribe("keybinding-nav-down", this.keyNavigate.bind(this, "down"));
		this.subscribe("keybinding-nav-range", this.keyNavigateRange.bind(this));
	}
	
	
	initializeColumn(column) {
		if(this.columnSelection && column.definition.headerSort && this.options("headerSortClickElement") !== "icon"){
			console.warn("Using column headerSort with selectableRangeColumns option may result in unpredictable behavior. Consider using headerSortClickElement: 'icon'.");
		}
		
		if (column.modules.edit) ;
	}
	
	updateHeaderColumn(){
		var frozenCols;

		if(this.rowSelection){
			this.rowHeader = this.table.columnManager.getVisibleColumnsByIndex()[0];
			
			if(this.rowHeader){
				this.rowHeader.definition.cssClass = this.rowHeader.definition.cssClass + " tabulator-range-row-header";
				
				if(this.rowHeader.definition.headerSort){
					console.warn("Using column headerSort with selectableRangeRows option may result in unpredictable behavior");
				}
				
				if(this.rowHeader.definition.editor){
					console.warn("Using column editor with selectableRangeRows option may result in unpredictable behavior");
				}
			}
		}

		//warn if invalid frozen column configuration detected
		if(this.table.modules.frozenColumns && this.table.modules.frozenColumns.active){
			frozenCols = this.table.modules.frozenColumns.getFrozenColumns();

			if(frozenCols.length > 1 || (frozenCols.length === 1 && frozenCols[0] !== this.rowHeader)){
				console.warn("Using frozen columns that are not the range header in combination with the selectRange option may result in unpredictable behavior");
			}
		}
	}
	
	///////////////////////////////////
	///////   Table Functions   ///////
	///////////////////////////////////
	
	getRanges(){
		return this.ranges.map((range) => range.getComponent());
	}
	
	getRangesData() {
		return this.ranges.map((range) => range.getData());
	}
	
	addRangeFromComponent(start, end){
		start = start ? start._cell : null;
		end = end ? end._cell : null;
		
		return this.addRange(start, end);
	}
	
	///////////////////////////////////
	/////// Component Functions ///////
	///////////////////////////////////
	
	cellGetRanges(cell){
		var ranges = [];
		
		if (cell.column === this.rowHeader) {
			ranges = this.ranges.filter((range) => range.occupiesRow(cell.row));
		} else {
			ranges = this.ranges.filter((range) => range.occupies(cell));
		}
		
		return ranges.map((range) => range.getComponent());
	}
	
	rowGetRanges(row){
		var ranges = this.ranges.filter((range) => range.occupiesRow(row));
		
		return ranges.map((range) => range.getComponent());
	}
	
	colGetRanges(col){
		var ranges = this.ranges.filter((range) => range.occupiesColumn(col));
		
		return ranges.map((range) => range.getComponent());
	}
	
	///////////////////////////////////
	////////// Event Handlers /////////
	///////////////////////////////////
	
	_handleMouseUp(e){
		this.mousedown = false;
		document.removeEventListener("mouseup", this.mouseUpEvent);
	}
	
	_handleKeyDown(e) {
		if (!this.blockKeydown && (!this.table.modules.edit || (this.table.modules.edit && !this.table.modules.edit.currentCell))) {
			if (e.key === "Enter") {
				// is editing a cell?
				if (this.table.modules.edit && this.table.modules.edit.currentCell) {
					return;
				}
				
				this.table.modules.edit.editCell(this.getActiveCell());
				
				e.preventDefault();
			}
			
			if ((e.key === "Backspace" || e.key === "Delete") && this.options("selectableRangeClearCells")) {
				if(this.activeRange){
					this.activeRange.clearValues();
				}
			}
		}
	}
	
	initializeFocus(cell){
		var range;

		this.restoreFocus();
		
		try{
			if (document.selection) { // IE
				range = document.body.createTextRange();
				range.moveToElementText(cell.getElement());
				range.select();
			} else if (window.getSelection) {
				range = document.createRange();
				range.selectNode(cell.getElement());
				window.getSelection().removeAllRanges();
				window.getSelection().addRange(range);
			}
		}catch(e){}
	}
	
	restoreFocus(element){
		this.table.rowManager.element.focus();
		
		return true;
	}
	
	///////////////////////////////////
	////// Column Functionality ///////
	///////////////////////////////////
	
	handleColumnResized(column) {
		var selected;
		
		if (this.selecting !== "column" && this.selecting !== "all") {
			return;
		}
		
		selected = this.ranges.some((range) => range.occupiesColumn(column));
		
		if (!selected) {
			return;
		}
		
		this.ranges.forEach((range) => {
			var selectedColumns = range.getColumns(true);
			
			selectedColumns.forEach((selectedColumn) => {
				if (selectedColumn !== column) {
					selectedColumn.setWidth(column.width);
				}
			});
		});
	}
	
	handleColumnMoving(_event, column) {
		this.resetRanges().setBounds(column);
		this.overlay.style.visibility = "hidden";
	}

	handleColumnMoved(from, _to, _after) {
		this.activeRange.setBounds(from);
		this.layoutElement();
	}

	handleColumnMouseDown(event, column) {
		if (event.button === 2 && (this.selecting === "column" || this.selecting === "all") && this.activeRange.occupiesColumn(column)) {
			return;
		}

		//If columns are movable, allow dragging columns only if they are not
		//selected. Dragging selected columns should move the columns instead.
		if(this.table.options.movableColumns && this.selecting === "column" && this.activeRange.occupiesColumn(column)){
			return;
		}
		
		this.mousedown = true;
		
		document.addEventListener("mouseup", this.mouseUpEvent);
		
		this.newSelection(event, column);
	}
	
	handleColumnMouseMove(e, column) {
		if (column === this.rowHeader || !this.mousedown || this.selecting === 'all') {
			return;
		}
		
		this.activeRange.setBounds(false, column, true);
	}
	
	///////////////////////////////////
	//////// Cell Functionality ///////
	///////////////////////////////////
	
	renderCell(cell) {
		var el = cell.getElement(),
		rangeIdx = this.ranges.findIndex((range) => range.occupies(cell));
		
		el.classList.toggle("tabulator-range-selected", rangeIdx !== -1);
		el.classList.toggle("tabulator-range-only-cell-selected", this.ranges.length === 1 && this.ranges[0].atTopLeft(cell) &&	this.ranges[0].atBottomRight(cell));
		
		el.dataset.range = rangeIdx;
	}
	
	handleCellMouseDown(event, cell) {
		if (event.button === 2 && (this.activeRange.occupies(cell) || ((this.selecting === "row" || this.selecting === "all") && this.activeRange.occupiesRow(cell.row)))) {
			return;
		}
		
		this.mousedown = true;
		
		document.addEventListener("mouseup", this.mouseUpEvent);
		
		this.newSelection(event, cell);
	}
	
	handleCellMouseMove(e, cell) {
		if (!this.mousedown || this.selecting === "all") {
			return;
		}
		
		this.activeRange.setBounds(false, cell, true);
	}
	
	handleCellClick(e, cell){
		this.initializeFocus(cell);
	}
	
	handleEditingCell(cell) {
		if(this.activeRange){
			this.activeRange.setBounds(cell);
		}
	}
	
	finishEditingCell() {
		this.blockKeydown = true;
		this.table.rowManager.element.focus();
		
		setTimeout(() => {
			this.blockKeydown = false;
		}, 10);
	}
	
	///////////////////////////////////
	///////     Navigation      ///////
	///////////////////////////////////
	
	keyNavigate(dir, e){
		if(this.navigate(false, false, dir));
		e.preventDefault();
	}
	
	keyNavigateRange(e, dir, jump, expand){
		if(this.navigate(jump, expand, dir));
		e.preventDefault();
	}
	
	navigate(jump, expand, dir) {
		var moved = false,
		range, rangeEdge, prevRect, nextRow, nextCol, row, column,
		rowRect, rowManagerRect, columnRect, columnManagerRect;
		
		// Don't navigate while editing
		if (this.table.modules.edit && this.table.modules.edit.currentCell) {
			return false;
		}
		
		// If there are more than 1 range, use the active range and destroy the others
		if (this.ranges.length > 1) {
			this.ranges = this.ranges.filter((range) => {
				if (range === this.activeRange) {
					range.setEnd(range.start.row, range.start.col);
					return true;
				}
				range.destroy();
				return false;
			});
		}
		
		range = this.activeRange;
		prevRect = {
			top: range.top,
			bottom: range.bottom,
			left: range.left,
			right: range.right
		};
		
		rangeEdge = expand ? range.end : range.start;
		nextRow = rangeEdge.row;
		nextCol = rangeEdge.col;
		
		if(jump){
			switch(dir){
				case "left":
					nextCol = this.findJumpCellLeft(range.start.row, rangeEdge.col);
					break;
				case "right":
					nextCol = this.findJumpCellRight(range.start.row, rangeEdge.col);
					break;
				case "up":
					nextRow = this.findJumpCellUp(rangeEdge.row, range.start.col);
					break;
				case "down":
					nextRow = this.findJumpCellDown(rangeEdge.row, range.start.col);
					break;
			}
		}else {
			if(expand){
				if ((this.selecting === 'row' && (dir === 'left' || dir === 'right')) || (this.selecting === 'column' && (dir === 'up' || dir === 'down'))) {
					return;
				}
			}
			
			switch(dir){
				case "left":
					nextCol = Math.max(nextCol - 1, 0);
					break;
				case "right":
					nextCol = Math.min(nextCol + 1, this.getTableColumns().length - 1);
					break;
				case "up":
					nextRow = Math.max(nextRow - 1, 0);
					break;
				case "down":
					nextRow = Math.min(nextRow + 1, this.getTableRows().length - 1);
					break;
			}
		}

		if(this.rowHeader && nextCol === 0) {
			nextCol = 1;
		}
		
		if(!expand){
			range.setStart(nextRow, nextCol);
		}
		
		range.setEnd(nextRow, nextCol);
		
		if(!expand){
			this.selecting = "cell";
		}

		moved = prevRect.top !== range.top || prevRect.bottom !== range.bottom || prevRect.left !== range.left || prevRect.right !== range.right;

		if (moved) {
			row = this.getRowByRangePos(range.end.row);
			column = this.getColumnByRangePos(range.end.col);
			rowRect = row.getElement().getBoundingClientRect();
			columnRect = column.getElement().getBoundingClientRect();
			rowManagerRect = this.table.rowManager.getElement().getBoundingClientRect();
			columnManagerRect = this.table.columnManager.getElement().getBoundingClientRect();
			
			if(!(rowRect.top >= rowManagerRect.top && rowRect.bottom <= rowManagerRect.bottom)){
				if(row.getElement().parentNode && column.getElement().parentNode){
					// Use faster autoScroll when the elements are on the DOM
					this.autoScroll(range, row.getElement(), column.getElement());
				}else {
					row.getComponent().scrollTo(undefined, false);
				}
			}

			if(!(columnRect.left >= columnManagerRect.left + this.getRowHeaderWidth() && columnRect.right <= columnManagerRect.right)){
				if(row.getElement().parentNode && column.getElement().parentNode){
					// Use faster autoScroll when the elements are on the DOM
					this.autoScroll(range, row.getElement(), column.getElement());
				}else {
					column.getComponent().scrollTo(undefined, false);
				}
			}

			this.layoutElement();
			
			return true;
		}
	}
	
	rangeRemoved(removed){
		this.ranges = this.ranges.filter((range) => range !== removed);
		
		if(this.activeRange === removed){
			if(this.ranges.length){
				this.activeRange = this.ranges[this.ranges.length - 1];
			}else {
				this.addRange();
			}
		}
		
		this.layoutElement();
	}
	
	findJumpRow(column, rows, reverse, emptyStart, emptySide){
		if(reverse){
			rows = rows.reverse();
		}

		return this.findJumpItem(emptyStart, emptySide, rows, function(row){return row.getData()[column.getField()];});
	}
	
	findJumpCol(row, columns, reverse, emptyStart, emptySide){
		if(reverse){
			columns = columns.reverse();
		}

		return this.findJumpItem(emptyStart, emptySide, columns, function(column){return row.getData()[column.getField()];});
	}

	findJumpItem(emptyStart, emptySide, items, valueResolver){
		var nextItem;

		for(let currentItem of items){
			let currentValue = valueResolver(currentItem);
			
			if(emptyStart){
				nextItem = currentItem;
				if(currentValue){
					break;
				}
			}else {
				if(emptySide){
					nextItem = currentItem;
					
					if(currentValue){
						break;
					}
				}else {
					if(currentValue){
						nextItem = currentItem;
					}else {
						break;
					}
				}
			}
		}

		return nextItem;
	}

	findJumpCellLeft(rowPos, colPos){
		var row = this.getRowByRangePos(rowPos),
		columns = this.getTableColumns(),
		isStartingCellEmpty = this.isEmpty(row.getData()[columns[colPos].getField()]),
		isLeftOfStartingCellEmpty = columns[colPos - 1] ? this.isEmpty(row.getData()[columns[colPos - 1].getField()]) : false,
		targetCols = this.rowHeader ? columns.slice(1, colPos) : columns.slice(0, colPos),
		jumpCol = this.findJumpCol(row, targetCols, true, isStartingCellEmpty, isLeftOfStartingCellEmpty);
		
		if(jumpCol){
			return jumpCol.getPosition() - 1;
		}
		
		return colPos;
	}
	
	findJumpCellRight(rowPos, colPos){
		var row = this.getRowByRangePos(rowPos),
		columns = this.getTableColumns(),
		isStartingCellEmpty = this.isEmpty(row.getData()[columns[colPos].getField()]),
		isRightOfStartingCellEmpty = columns[colPos + 1] ? this.isEmpty(row.getData()[columns[colPos + 1].getField()]) : false,
		jumpCol = this.findJumpCol(row, columns.slice(colPos + 1, columns.length), false, isStartingCellEmpty, isRightOfStartingCellEmpty);
		
		if(jumpCol){
			return jumpCol.getPosition() - 1;
		}
		
		return colPos;
	}
	
	findJumpCellUp(rowPos, colPos) {
		var column = this.getColumnByRangePos(colPos),
		rows = this.getTableRows(),
		isStartingCellEmpty = this.isEmpty(rows[rowPos].getData()[column.getField()]),
		isTopOfStartingCellEmpty = rows[rowPos - 1] ? this.isEmpty(rows[rowPos - 1].getData()[column.getField()]) : false,
		jumpRow = this.findJumpRow(column, rows.slice(0, rowPos), true, isStartingCellEmpty, isTopOfStartingCellEmpty);
		
		if(jumpRow){
			return jumpRow.position - 1;
		}
		
		return rowPos;
	}
	
	findJumpCellDown(rowPos, colPos) {
		var column = this.getColumnByRangePos(colPos),
		rows = this.getTableRows(),
		isStartingCellEmpty = this.isEmpty(rows[rowPos].getData()[column.getField()]),
		isBottomOfStartingCellEmpty = rows[rowPos + 1] ? this.isEmpty(rows[rowPos + 1].getData()[column.getField()]) : false,
		jumpRow = this.findJumpRow(column, rows.slice(rowPos + 1, rows.length), false, isStartingCellEmpty, isBottomOfStartingCellEmpty);
		
		if(jumpRow){
			return jumpRow.position - 1;
		}
		
		return rowPos;
	}
	
	///////////////////////////////////
	///////      Selection      ///////
	///////////////////////////////////
	newSelection(event, element) {
		var range;
		
		if (element.type === "column") {
			if(!this.columnSelection){
				return;
			}
			
			if (element === this.rowHeader) {
				range = this.resetRanges();
				this.selecting = "all";
				
				var topLeftCell, bottomRightCell = this.getCell(-1, -1);
				
				if(this.rowHeader){
					topLeftCell = this.getCell(0, 1);
				}else {
					topLeftCell = this.getCell(0, 0);
				}
				
				range.setBounds(topLeftCell, bottomRightCell);		
				return;
			} else {
				this.selecting = "column";
			}
		} else if (element.column === this.rowHeader) {
			this.selecting = "row";
		} else {
			this.selecting = "cell";
		}
		
		if (event.shiftKey) {
			this.activeRange.setBounds(false, element);
		} else if (event.ctrlKey) {
			this.addRange().setBounds(element);
		} else {
			this.resetRanges().setBounds(element);
		}
	}
	
	autoScroll(range, row, column) {
		var tableHolder = this.table.rowManager.element,
		rect, view, withinHorizontalView, withinVerticalView;
		
		if (typeof row === 'undefined') {
			row = this.getRowByRangePos(range.end.row).getElement();
		}
		
		if (typeof column === 'undefined') {
			column = this.getColumnByRangePos(range.end.col).getElement();
		}
		
		rect = {
			left: column.offsetLeft,
			right: column.offsetLeft + column.offsetWidth,
			top: row.offsetTop,
			bottom: row.offsetTop + row.offsetHeight,
		};
		
		view = {
			left: tableHolder.scrollLeft + this.getRowHeaderWidth(),
			right: Math.ceil(tableHolder.scrollLeft + tableHolder.clientWidth),
			top: tableHolder.scrollTop,
			bottom:	tableHolder.scrollTop +	tableHolder.offsetHeight - this.table.rowManager.scrollbarWidth,
		};
		
		withinHorizontalView = view.left < rect.left &&	rect.left < view.right && view.left < rect.right &&	rect.right < view.right;
		
		withinVerticalView = view.top < rect.top &&	rect.top < view.bottom && view.top < rect.bottom &&	rect.bottom < view.bottom;
		
		if (!withinHorizontalView) {
			if (rect.left < view.left) {
				tableHolder.scrollLeft = rect.left - this.getRowHeaderWidth();
			} else if (rect.right > view.right) {
				tableHolder.scrollLeft = Math.min(rect.right - tableHolder.clientWidth, rect.left - this.getRowHeaderWidth());
			}
		}
		
		if (!withinVerticalView) {
			if (rect.top < view.top) {
				tableHolder.scrollTop = rect.top;
			} else if (rect.bottom > view.bottom) {
				tableHolder.scrollTop = rect.bottom - tableHolder.clientHeight;
			}
		}
	}
	
	
	///////////////////////////////////
	///////       Layout        ///////
	///////////////////////////////////
	
	layoutChange(){
		this.overlay.style.visibility = "hidden";
		clearTimeout(this.layoutChangeTimeout);
		this.layoutChangeTimeout = setTimeout(this.layoutRanges.bind(this), 200);
	}
	
	redraw(force) {
		if (force) {
			this.selecting = 'cell';
			this.resetRanges();
			this.layoutElement();
		}
	}
	
	layoutElement(visibleRows) {
		var rows;
		
		if (visibleRows) {
			rows = this.table.rowManager.getVisibleRows(true);
		} else {
			rows = this.table.rowManager.getRows();
		}
		
		rows.forEach((row) => {
			if (row.type === "row") {
				this.layoutRow(row);
				row.cells.forEach((cell) => this.renderCell(cell));
			}
		});
		
		this.getTableColumns().forEach((column) => {
			this.layoutColumn(column);
		});
		
		this.layoutRanges();
	}
	
	layoutRow(row) {
		var el = row.getElement(),
		selected = false,
		occupied = this.ranges.some((range) => range.occupiesRow(row));
		
		if (this.selecting === "row") {
			selected = occupied;
		} else if (this.selecting === "all") {
			selected = true;
		}
		
		el.classList.toggle("tabulator-range-selected", selected);
		el.classList.toggle("tabulator-range-highlight", occupied);
	}
	
	layoutColumn(column) {
		var el = column.getElement(),		
		selected = false,
		occupied = this.ranges.some((range) => range.occupiesColumn(column));
		
		if (this.selecting === "column") {
			selected = occupied;
		} else if (this.selecting === "all") {
			selected = true;
		}
		
		el.classList.toggle("tabulator-range-selected", selected);
		el.classList.toggle("tabulator-range-highlight", occupied);
	}
	
	layoutRanges() {
		var activeCell, activeCellEl, activeRowEl;
		
		if (!this.table.initialized) {
			return;
		}
		
		activeCell = this.getActiveCell();
		
		if (!activeCell) {
			return;
		}

		activeCellEl = activeCell.getElement();
		activeRowEl = activeCell.row.getElement();

		if(this.table.rtl){
			this.activeRangeCellElement.style.right = activeRowEl.offsetWidth - activeCellEl.offsetLeft - activeCellEl.offsetWidth + "px";
		}else {
			this.activeRangeCellElement.style.left = activeRowEl.offsetLeft + activeCellEl.offsetLeft + "px";
		}

		this.activeRangeCellElement.style.top =	activeRowEl.offsetTop + "px";
		this.activeRangeCellElement.style.width = activeCellEl.offsetWidth + "px";
		this.activeRangeCellElement.style.height =  activeRowEl.offsetHeight  + "px";
		
		this.ranges.forEach((range) => range.layout());
		
		this.overlay.style.visibility = "visible";
	}
	
	
	///////////////////////////////////
	///////  Helper Functions   ///////
	///////////////////////////////////	
	
	getCell(rowIdx, colIdx) {
		var row;
		
		if (colIdx < 0) {
			colIdx = this.getTableColumns().length + colIdx;
			if (colIdx < 0) {
				return null;
			}
		}
		
		if (rowIdx < 0) {
			rowIdx = this.getTableRows().length + rowIdx;
		}
		
		row = this.table.rowManager.getRowFromPosition(rowIdx + 1);
		
		return row ? row.getCells(false, true).filter((cell) => cell.column.visible)[colIdx] : null;
	}
	
	
	getActiveCell() {
		return this.getCell(this.activeRange.start.row, this.activeRange.start.col);
	}
	
	getRowByRangePos(pos) {
		return this.getTableRows()[pos];
	}
	
	getColumnByRangePos(pos) {
		return this.getTableColumns()[pos];
	}
	
	getTableRows() {
		return this.table.rowManager.getDisplayRows().filter(row=> row.type === "row");
	}
	
	getTableColumns() {
		return this.table.columnManager.getVisibleColumnsByIndex();
	}
	
	addRange(start, end) {
		var  range;
		
		if(this.maxRanges !== true && this.ranges.length >= this.maxRanges){
			this.ranges.shift().destroy();
		}
		
		range = new Range(this.table, this, start, end);
		
		this.activeRange = range;
		this.ranges.push(range);
		this.rangeContainer.appendChild(range.element);
		
		return range;
	}
	
	resetRanges() {
		var range, cell, visibleCells;
		
		this.ranges.forEach((range) => range.destroy());
		this.ranges = [];
		
		range = this.addRange();
		
		if(this.table.rowManager.activeRows.length){
			visibleCells = this.table.rowManager.activeRows[0].cells.filter((cell) => cell.column.visible);
			cell = visibleCells[this.rowHeader ? 1 : 0];

			if(cell){
				range.setBounds(cell);
				if(this.options("selectableRangeAutoFocus")){
					this.initializeFocus(cell);
				}
			}
		}
		
		return range;
	}
	
	tableDestroyed(){
		document.removeEventListener("mouseup", this.mouseUpEvent);
		this.table.rowManager.element.removeEventListener("keydown", this.keyDownEvent);
	}
	
	selectedRows(component) {
		return component ? this.activeRange.getRows().map((row) => row.getComponent()) : this.activeRange.getRows();
	}
	
	selectedColumns(component) {
		return component ? this.activeRange.getColumns().map((col) => col.getComponent()) : this.activeRange.getColumns();
	}

	getRowHeaderWidth(){
		if(!this.rowHeader){
			return 0;
		}
		return this.rowHeader.getElement().offsetWidth;
	}

	isEmpty(value) {
		return value === null || value === undefined || value === "";
	}
}

//sort numbers
function number(a, b, aRow, bRow, column, dir, params){
	var alignEmptyValues = params.alignEmptyValues;
	var decimal = params.decimalSeparator;
	var thousand = params.thousandSeparator;
	var emptyAlign = 0;

	a = String(a);
	b = String(b);

	if(thousand){
		a = a.split(thousand).join("");
		b = b.split(thousand).join("");
	}

	if(decimal){
		a = a.split(decimal).join(".");
		b = b.split(decimal).join(".");
	}

	a = parseFloat(a);
	b = parseFloat(b);

	//handle non numeric values
	if(isNaN(a)){
		emptyAlign =  isNaN(b) ? 0 : -1;
	}else if(isNaN(b)){
		emptyAlign =  1;
	}else {
		//compare valid values
		return a - b;
	}

	//fix empty values in position
	if((alignEmptyValues === "top" && dir === "desc") || (alignEmptyValues === "bottom" && dir === "asc")){
		emptyAlign *= -1;
	}

	return emptyAlign;
}

//sort strings
function string(a, b, aRow, bRow, column, dir, params){
	var alignEmptyValues = params.alignEmptyValues;
	var emptyAlign = 0;
	var locale;

	//handle empty values
	if(!a){
		emptyAlign =  !b ? 0 : -1;
	}else if(!b){
		emptyAlign =  1;
	}else {
		//compare valid values
		switch(typeof params.locale){
			case "boolean":
				if(params.locale){
					locale = this.langLocale();
				}
				break;
			case "string":
				locale = params.locale;
				break;
		}

		return String(a).toLowerCase().localeCompare(String(b).toLowerCase(), locale);
	}

	//fix empty values in position
	if((alignEmptyValues === "top" && dir === "desc") || (alignEmptyValues === "bottom" && dir === "asc")){
		emptyAlign *= -1;
	}

	return emptyAlign;
}

//sort datetime
function datetime(a, b, aRow, bRow, column, dir, params){
	var DT = this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime");
	var format = params.format || "dd/MM/yyyy HH:mm:ss",
	alignEmptyValues = params.alignEmptyValues,
	emptyAlign = 0;

	if(typeof DT != "undefined"){
		if(!DT.isDateTime(a)){
			if(format === "iso"){
				a = DT.fromISO(String(a));
			}else {
				a = DT.fromFormat(String(a), format);
			}
		}

		if(!DT.isDateTime(b)){
			if(format === "iso"){
				b = DT.fromISO(String(b));
			}else {
				b = DT.fromFormat(String(b), format);
			}
		}

		if(!a.isValid){
			emptyAlign = !b.isValid ? 0 : -1;
		}else if(!b.isValid){
			emptyAlign =  1;
		}else {
			//compare valid values
			return a - b;
		}

		//fix empty values in position
		if((alignEmptyValues === "top" && dir === "desc") || (alignEmptyValues === "bottom" && dir === "asc")){
			emptyAlign *= -1;
		}

		return emptyAlign;

	}else {
		console.error("Sort Error - 'datetime' sorter is dependant on luxon.js");
	}
}

//sort date
function date(a, b, aRow, bRow, column, dir, params){
	if(!params.format){
		params.format = "dd/MM/yyyy";
	}

	return datetime.call(this, a, b, aRow, bRow, column, dir, params);
}

//sort times
function time(a, b, aRow, bRow, column, dir, params){
	if(!params.format){
		params.format = "HH:mm";
	}

	return datetime.call(this, a, b, aRow, bRow, column, dir, params);
}

//sort booleans
function boolean(a, b, aRow, bRow, column, dir, params){
	var el1 = a === true || a === "true" || a === "True" || a === 1 ? 1 : 0;
	var el2 = b === true || b === "true" || b === "True" || b === 1 ? 1 : 0;

	return el1 - el2;
}

//sort if element contains any data
function array(a, b, aRow, bRow, column, dir, params){
	var type = params.type || "length",
	alignEmptyValues = params.alignEmptyValues,
	emptyAlign = 0,
	table = this.table,
	valueMap;

	if(params.valueMap){
		if(typeof params.valueMap === "string"){
			valueMap = function(value){
				return value.map((item) => {
					return Helpers.retrieveNestedData(table.options.nestedFieldSeparator, params.valueMap, item);
				});
			};
		}else {
			valueMap = params.valueMap;
		}
	}

	function calc(value){
		var result;
		
		if(valueMap){
			value = valueMap(value);
		}

		switch(type){
			case "length":
				result = value.length;
				break;

			case "sum":
				result = value.reduce(function(c, d){
					return c + d;
				});
				break;

			case "max":
				result = Math.max.apply(null, value) ;
				break;

			case "min":
				result = Math.min.apply(null, value) ;
				break;

			case "avg":
				result = value.reduce(function(c, d){
					return c + d;
				}) / value.length;
				break;

			case "string":
				result = value.join("");
				break;
		}

		return result;
	}

	//handle non array values
	if(!Array.isArray(a)){
		emptyAlign = !Array.isArray(b) ? 0 : -1;
	}else if(!Array.isArray(b)){
		emptyAlign = 1;
	}else {
		if(type === "string"){
			return String(calc(a)).toLowerCase().localeCompare(String(calc(b)).toLowerCase());
		}else {
			return calc(b) - calc(a);
		}
	}

	//fix empty values in position
	if((alignEmptyValues === "top" && dir === "desc") || (alignEmptyValues === "bottom" && dir === "asc")){
		emptyAlign *= -1;
	}

	return emptyAlign;
}

//sort if element contains any data
function exists(a, b, aRow, bRow, column, dir, params){
	var el1 = typeof a == "undefined" ? 0 : 1;
	var el2 = typeof b == "undefined" ? 0 : 1;

	return el1 - el2;
}

//sort alpha numeric strings
function alphanum(as, bs, aRow, bRow, column, dir, params){
	var a, b, a1, b1, i= 0, L, rx = /(\d+)|(\D+)/g, rd = /\d/;
	var alignEmptyValues = params.alignEmptyValues;
	var emptyAlign = 0;

	//handle empty values
	if(!as && as!== 0){
		emptyAlign =  !bs && bs!== 0 ? 0 : -1;
	}else if(!bs && bs!== 0){
		emptyAlign =  1;
	}else {

		if(isFinite(as) && isFinite(bs)) return as - bs;
		a = String(as).toLowerCase();
		b = String(bs).toLowerCase();
		if(a === b) return 0;
		if(!(rd.test(a) && rd.test(b))) return a > b ? 1 : -1;
		a = a.match(rx);
		b = b.match(rx);
		L = a.length > b.length ? b.length : a.length;
		while(i < L){
			a1= a[i];
			b1= b[i++];
			if(a1 !== b1){
				if(isFinite(a1) && isFinite(b1)){
					if(a1.charAt(0) === "0") a1 = "." + a1;
					if(b1.charAt(0) === "0") b1 = "." + b1;
					return a1 - b1;
				}
				else return a1 > b1 ? 1 : -1;
			}
		}

		return a.length > b.length;
	}

	//fix empty values in position
	if((alignEmptyValues === "top" && dir === "desc") || (alignEmptyValues === "bottom" && dir === "asc")){
		emptyAlign *= -1;
	}

	return emptyAlign;
}

var defaultSorters = {
	number:number,
	string:string,
	date:date,
	time:time,
	datetime:datetime,
	boolean:boolean,
	array:array,
	exists:exists,
	alphanum:alphanum
};

class Sort extends Module{

	static moduleName = "sort";

	//load defaults
	static sorters = defaultSorters;
	
	constructor(table){
		super(table);
		
		this.sortList = []; //holder current sort
		this.changed = false; //has the sort changed since last render
		
		this.registerTableOption("sortMode", "local"); //local or remote sorting
		
		this.registerTableOption("initialSort", false); //initial sorting criteria
		this.registerTableOption("columnHeaderSortMulti", true); //multiple or single column sorting
		this.registerTableOption("sortOrderReverse", false); //reverse internal sort ordering
		this.registerTableOption("headerSortElement", "<div class='tabulator-arrow'></div>"); //header sort element
		this.registerTableOption("headerSortClickElement", "header"); //element which triggers sort when clicked
		
		this.registerColumnOption("sorter");
		this.registerColumnOption("sorterParams");
		
		this.registerColumnOption("headerSort", true);
		this.registerColumnOption("headerSortStartingDir");
		this.registerColumnOption("headerSortTristate");
		
	}
	
	initialize(){
		this.subscribe("column-layout", this.initializeColumn.bind(this));
		this.subscribe("table-built", this.tableBuilt.bind(this));
		this.registerDataHandler(this.sort.bind(this), 20);
		
		this.registerTableFunction("setSort", this.userSetSort.bind(this));
		this.registerTableFunction("getSorters", this.getSort.bind(this));
		this.registerTableFunction("clearSort", this.clearSort.bind(this));
		
		if(this.table.options.sortMode === "remote"){
			this.subscribe("data-params", this.remoteSortParams.bind(this));
		}
	}
	
	tableBuilt(){
		if(this.table.options.initialSort){
			this.setSort(this.table.options.initialSort);
		}
	}
	
	remoteSortParams(data, config, silent, params){
		var sorters = this.getSort();
		
		sorters.forEach((item) => {
			delete item.column;
		});
		
		params.sort = sorters;
		
		return params;
	}
	
	
	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////
	
	userSetSort(sortList, dir){
		this.setSort(sortList, dir);
		// this.table.rowManager.sorterRefresh();
		this.refreshSort();
	}
	
	clearSort(){
		this.clear();
		// this.table.rowManager.sorterRefresh();
		this.refreshSort();
	}
	
	
	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////
	
	//initialize column header for sorting
	initializeColumn(column){
		var sorter = false,
		colEl,
		arrowEl;
		
		switch(typeof column.definition.sorter){
			case "string":
				if(Sort.sorters[column.definition.sorter]){
					sorter = Sort.sorters[column.definition.sorter];
				}else {
					console.warn("Sort Error - No such sorter found: ", column.definition.sorter);
				}
				break;
			
			case "function":
				sorter = column.definition.sorter;
				break;
		}
		
		column.modules.sort = {
			sorter:sorter, dir:"none",
			params:column.definition.sorterParams || {},
			startingDir:column.definition.headerSortStartingDir || "asc",
			tristate: column.definition.headerSortTristate,
		};
		
		if(column.definition.headerSort !== false){
			
			colEl = column.getElement();
			
			colEl.classList.add("tabulator-sortable");
			
			arrowEl = document.createElement("div");
			arrowEl.classList.add("tabulator-col-sorter");
			
			switch(this.table.options.headerSortClickElement){
				case "icon":
					arrowEl.classList.add("tabulator-col-sorter-element");
					break;
				case "header":
					colEl.classList.add("tabulator-col-sorter-element");
					break;
				default:
					colEl.classList.add("tabulator-col-sorter-element");
					break;
			}
			
			switch(this.table.options.headerSortElement){
				case "function":
				//do nothing
					break;
				
				case "object":
					arrowEl.appendChild(this.table.options.headerSortElement);
					break;
				
				default:
					arrowEl.innerHTML = this.table.options.headerSortElement;
			}
			
			//create sorter arrow
			column.titleHolderElement.appendChild(arrowEl);
			
			column.modules.sort.element = arrowEl;
			
			this.setColumnHeaderSortIcon(column, "none");
			
			if(this.table.options.headerSortClickElement === "icon"){
				arrowEl.addEventListener("mousedown", (e) => {
					e.stopPropagation();
				});
			}
			
			//sort on click
			(this.table.options.headerSortClickElement === "icon" ? arrowEl : colEl).addEventListener("click", (e) => {
				var dir = "",
				sorters=[],
				match = false;
				
				if(column.modules.sort){
					if(column.modules.sort.tristate){
						if(column.modules.sort.dir == "none"){
							dir = column.modules.sort.startingDir;
						}else {
							if(column.modules.sort.dir == column.modules.sort.startingDir){
								dir = column.modules.sort.dir == "asc" ? "desc" : "asc";
							}else {
								dir = "none";
							}
						}
					}else {
						switch(column.modules.sort.dir){
							case "asc":
								dir = "desc";
								break;
							
							case "desc":
								dir = "asc";
								break;
							
							default:
								dir = column.modules.sort.startingDir;
						}
					}
					
					if (this.table.options.columnHeaderSortMulti && (e.shiftKey || e.ctrlKey)) {
						sorters = this.getSort();
						
						match = sorters.findIndex((sorter) => {
							return sorter.field === column.getField();
						});
						
						if(match > -1){
							sorters[match].dir = dir;
							
							match = sorters.splice(match, 1)[0];
							if(dir != "none"){
								sorters.push(match);
							}
						}else {
							if(dir != "none"){
								sorters.push({column:column, dir:dir});
							}
						}
						
						//add to existing sort
						this.setSort(sorters);
					}else {
						if(dir == "none"){
							this.clear();
						}else {
							//sort by column only
							this.setSort(column, dir);
						}
						
					}
					
					// this.table.rowManager.sorterRefresh(!this.sortList.length);
					this.refreshSort();
				}
			});
		}
	}
	
	refreshSort(){
		if(this.table.options.sortMode === "remote"){
			this.reloadData(null, false, false);
		}else {
			this.refreshData(true);
		}
		
		//TODO - Persist left position of row manager
		// left = this.scrollLeft;
		// this.scrollHorizontal(left);
	}
	
	//check if the sorters have changed since last use
	hasChanged(){
		var changed = this.changed;
		this.changed = false;
		return changed;
	}
	
	//return current sorters
	getSort(){
		var self = this,
		sorters = [];
		
		self.sortList.forEach(function(item){
			if(item.column){
				sorters.push({column:item.column.getComponent(), field:item.column.getField(), dir:item.dir});
			}
		});
		
		return sorters;
	}
	
	//change sort list and trigger sort
	setSort(sortList, dir){
		var self = this,
		newSortList = [];
		
		if(!Array.isArray(sortList)){
			sortList = [{column: sortList, dir:dir}];
		}
		
		sortList.forEach(function(item){
			var column;
			
			column = self.table.columnManager.findColumn(item.column);
			
			if(column){
				item.column = column;
				newSortList.push(item);
				self.changed = true;
			}else {
				console.warn("Sort Warning - Sort field does not exist and is being ignored: ", item.column);
			}
			
		});
		
		self.sortList = newSortList;
		
		this.dispatch("sort-changed");
	}
	
	//clear sorters
	clear(){
		this.setSort([]);
	}
	
	//find appropriate sorter for column
	findSorter(column){
		var row = this.table.rowManager.activeRows[0],
		sorter = "string",
		field, value;
		
		if(row){
			row = row.getData();
			field = column.getField();
			
			if(field){
				
				value = column.getFieldValue(row);
				
				switch(typeof value){
					case "undefined":
						sorter = "string";
						break;
					
					case "boolean":
						sorter = "boolean";
						break;
					
					default:
						if(!isNaN(value) && value !== ""){
							sorter = "number";
						}else {
							if(value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)){
								sorter = "alphanum";
							}
						}
						break;
				}
			}
		}
		
		return Sort.sorters[sorter];
	}
	
	//work through sort list sorting data
	sort(data, sortOnly){
		var self = this,
		sortList = this.table.options.sortOrderReverse ? self.sortList.slice().reverse() : self.sortList,
		sortListActual = [],
		rowComponents = [];
		
		if(this.subscribedExternal("dataSorting")){
			this.dispatchExternal("dataSorting", self.getSort());
		}
		
		if(!sortOnly) {
			self.clearColumnHeaders();
		}
		
		if(this.table.options.sortMode !== "remote"){
			
			//build list of valid sorters and trigger column specific callbacks before sort begins
			sortList.forEach(function(item, i){
				var sortObj;
				
				if(item.column){
					sortObj = item.column.modules.sort;
					
					if(sortObj){
						
						//if no sorter has been defined, take a guess
						if(!sortObj.sorter){
							sortObj.sorter = self.findSorter(item.column);
						}
						
						item.params = typeof sortObj.params === "function" ? sortObj.params(item.column.getComponent(), item.dir) : sortObj.params;
						
						sortListActual.push(item);
					}
					
					if(!sortOnly) {
						self.setColumnHeader(item.column, item.dir);
					}
				}
			});
			
			//sort data
			if (sortListActual.length) {
				self._sortItems(data, sortListActual);
			}
			
		}else if(!sortOnly) {
			sortList.forEach(function(item, i){
				self.setColumnHeader(item.column, item.dir);
			});
		}

		
		if(this.subscribedExternal("dataSorted")){
			data.forEach((row) => {
				rowComponents.push(row.getComponent());
			});
			
			this.dispatchExternal("dataSorted", self.getSort(), rowComponents);
		}
		
		return data;
	}
	
	//clear sort arrows on columns
	clearColumnHeaders(){
		this.table.columnManager.getRealColumns().forEach((column) => {
			if(column.modules.sort){
				column.modules.sort.dir = "none";
				column.getElement().setAttribute("aria-sort", "none");
				this.setColumnHeaderSortIcon(column, "none");
			}
		});
	}
	
	//set the column header sort direction
	setColumnHeader(column, dir){
		column.modules.sort.dir = dir;
		column.getElement().setAttribute("aria-sort", dir === "asc" ? "ascending" : "descending");
		this.setColumnHeaderSortIcon(column, dir);
	}
	
	setColumnHeaderSortIcon(column, dir){
		var sortEl = column.modules.sort.element,
		arrowEl;
		
		if(column.definition.headerSort && typeof this.table.options.headerSortElement === "function"){
			while(sortEl.firstChild) sortEl.removeChild(sortEl.firstChild);
			
			arrowEl = this.table.options.headerSortElement.call(this.table, column.getComponent(), dir);
			
			if(typeof arrowEl === "object"){
				sortEl.appendChild(arrowEl);
			}else {
				sortEl.innerHTML = arrowEl;
			}
		}
	}
	
	//sort each item in sort list
	_sortItems(data, sortList){
		var sorterCount = sortList.length - 1;
		
		data.sort((a, b) => {
			var result;
			
			for(var i = sorterCount; i>= 0; i--){
				let sortItem = sortList[i];
				
				result = this._sortRow(a, b, sortItem.column, sortItem.dir, sortItem.params);
				
				if(result !== 0){
					break;
				}
			}
			
			return result;
		});
	}
	
	//process individual rows for a sort function on active data
	_sortRow(a, b, column, dir, params){
		var el1Comp, el2Comp;
		
		//switch elements depending on search direction
		var el1 = dir == "asc" ? a : b;
		var el2 = dir == "asc" ? b : a;
		
		a = column.getFieldValue(el1.getData());
		b = column.getFieldValue(el2.getData());
		
		a = typeof a !== "undefined" ? a : "";
		b = typeof b !== "undefined" ? b : "";
		
		el1Comp = el1.getComponent();
		el2Comp = el2.getComponent();
		
		return column.modules.sort.sorter.call(this, a, b, el1Comp, el2Comp, column.getComponent(), dir, params);
	}
}

class GridCalculator{
	constructor(columns, rows){
		this.columnCount = columns;
		this.rowCount = rows;

		this.columnString = [];
		this.columns = [];
		this.rows = [];
	}

	genColumns(data){
		var colCount = Math.max(this.columnCount, Math.max(...data.map(item => item.length)));

		this.columnString = [];
		this.columns = [];

		for(let i = 1; i <= colCount; i++){
			this.incrementChar(this.columnString.length - 1);
			this.columns.push(this.columnString.join(""));
		}

		return this.columns;
	}

	genRows(data){
		var rowCount = Math.max(this.rowCount, data.length);

		this.rows = [];

		for(let i = 1; i <= rowCount; i++){
			this.rows.push(i);
		}
		
		return this.rows;
	}

	incrementChar(i){
		let char = this.columnString[i];

		if(char){
			if(char !== "Z"){
				this.columnString[i] = String.fromCharCode(this.columnString[i].charCodeAt(0) + 1);
			}else {
				this.columnString[i] = "A";
				
				if(i){
					this.incrementChar(i-1);
				}else {
					this.columnString.push("A");
				}
			}
		}else {
			this.columnString.push("A");
		}
	}

	setRowCount(count){
		this.rowCount = count;
	}

	setColumnCount(count){
		this.columnCount = count;
	}
}

class SheetComponent {
	constructor(sheet) {
		this._sheet = sheet;

		return new Proxy(this, {
			get: function (target, name, receiver) {
				if (typeof target[name] !== "undefined") {
					return target[name];
				} else {
					return target._sheet.table.componentFunctionBinder.handle("sheet", target._sheet, name);
				}
			},
		});
	}

	getTitle(){
		return this._sheet.title;
	}

	getKey(){
		return this._sheet.key;
	}

	getDefinition(){
		return this._sheet.getDefinition();
	}

	getData() {
		return this._sheet.getData();
	}

	setData(data) {
		return this._sheet.setData(data);
	}

	clear(){
		return this._sheet.clear();
	}

	remove(){
		return this._sheet.remove();
	}
	
	active(){
		return this._sheet.active();
	}

	setTitle(title){
		return this._sheet.setTitle(title);
	}

	setRows(rows){
		return this._sheet.setRows(rows);
	}

	setColumns(columns){
		return this._sheet.setColumns(columns);
	}
}

class Sheet extends CoreFeature{
	constructor(spreadsheetManager, definition) {
		super(spreadsheetManager.table);
		
		this.spreadsheetManager = spreadsheetManager;
		this.definition = definition;
		
		this.title = this.definition.title || "";
		this.key = this.definition.key || this.definition.title;
		this.rowCount = this.definition.rows;
		this.columnCount = this.definition.columns;
		this.data = this.definition.data || [];
		this.element = null;
		this.isActive = false;
		
		this.grid = new GridCalculator(this.columnCount, this.rowCount);
		
		this.defaultColumnDefinition = {width:100, headerHozAlign:"center", headerSort:false};
		this.columnDefinition = Object.assign(this.defaultColumnDefinition, this.options("spreadsheetColumnDefinition"));
		
		this.columnDefs = [];
		this.rowDefs = [];
		this.columnFields = [];
		this.columns = [];
		this.rows = [];
		
		this.scrollTop = null;
		this.scrollLeft = null;
		
		this.initialize();
		
		this.dispatchExternal("sheetAdded", this.getComponent());
	}
	
	///////////////////////////////////
	///////// Initialization //////////
	///////////////////////////////////
	
	initialize(){
		this.initializeElement();
		this.initializeColumns();
		this.initializeRows();
	}
	
	reinitialize(){
		this.initializeColumns();
		this.initializeRows();
	}
	
	initializeElement(){
		this.element = document.createElement("div");
		this.element.classList.add("tabulator-spreadsheet-tab");
		this.element.innerText = this.title;
		
		this.element.addEventListener("click", () => {
			this.spreadsheetManager.loadSheet(this);
		});
	}
	
	initializeColumns(){
		this.grid.setColumnCount(this.columnCount);
		this.columnFields = this.grid.genColumns(this.data);
		
		this.columnDefs = [];
		
		this.columnFields.forEach((ref) => {
			var def = Object.assign({}, this.columnDefinition);
			def.field = ref;
			def.title = ref;
			
			this.columnDefs.push(def);
		});
	}
	
	initializeRows(){
		var refs;
		
		this.grid.setRowCount(this.rowCount);
		
		refs = this.grid.genRows(this.data);
		
		this.rowDefs = [];
		
		refs.forEach((ref, i) => {
			var def = {"_id":ref};
			var data = this.data[i];
			
			if(data){
				data.forEach((val, j) => {
					var field = this.columnFields[j];
					
					if(field){
						def[field] = val;
					}
				});
			}
			
			this.rowDefs.push(def);
		});
	}
	
	unload(){
		this.isActive = false;
		this.scrollTop = this.table.rowManager.scrollTop;
		this.scrollLeft = this.table.rowManager.scrollLeft;
		this.data = this.getData(true);
		this.element.classList.remove("tabulator-spreadsheet-tab-active");
	}
	
	load(){
		
		var wasInactive = !this.isActive;
		
		this.isActive = true;
		this.table.blockRedraw();
		this.table.setData([]);
		this.table.setColumns(this.columnDefs);
		this.table.setData(this.rowDefs);
		this.table.restoreRedraw();
		
		if(wasInactive && this.scrollTop !== null){
			this.table.rowManager.element.scrollLeft = this.scrollLeft;
			this.table.rowManager.element.scrollTop = this.scrollTop;
		}
		
		this.element.classList.add("tabulator-spreadsheet-tab-active");
		
		this.dispatchExternal("sheetLoaded", this.getComponent());
	}
	
	///////////////////////////////////
	//////// Helper Functions /////////
	///////////////////////////////////
	
	getComponent(){
		return new SheetComponent(this);
	}
	
	getDefinition(){
		return {
			title:this.title,
			key:this.key,
			rows:this.rowCount,
			columns:this.columnCount,
			data:this.getData(),
		};
	}
	
	getData(full){
		var output = [], 
		rowWidths,
		outputWidth, outputHeight;
		
		//map data to array format
		this.rowDefs.forEach((rowData) => {
			var row = [];
			
			this.columnFields.forEach((field) => {
				row.push(rowData[field]);
			});
			
			output.push(row);
		});
		
		//trim output
		if(!full && !this.options("spreadsheetOutputFull")){
			
			//calculate used area of data
			rowWidths = output.map(row => row.findLastIndex(val => typeof val !== 'undefined') + 1);
			outputWidth = Math.max(...rowWidths);
			outputHeight = rowWidths.findLastIndex(width => width > 0) + 1;
			
			output = output.slice(0, outputHeight);
			output = output.map(row => row.slice(0, outputWidth));
		}
		
		return output;
	}
	
	setData(data){
		this.data = data;
		this.reinitialize();
		
		this.dispatchExternal("sheetUpdated", this.getComponent());
		
		if(this.isActive){
			this.load();
		}
	}
	
	clear(){
		this.setData([]);
	}
	
	setTitle(title){
		this.title = title;
		this.element.innerText = title;
		
		this.dispatchExternal("sheetUpdated", this.getComponent());
	}
	
	setRows(rows){
		this.rowCount = rows;
		this.initializeRows();
		
		this.dispatchExternal("sheetUpdated", this.getComponent());
		
		if(this.isActive){
			this.load();
		}
	}
	
	setColumns(columns){
		this.columnCount = columns;
		this.reinitialize();
		
		this.dispatchExternal("sheetUpdated", this.getComponent());
		
		if(this.isActive){
			this.load();
		}
	}
	
	remove(){
		this.spreadsheetManager.removeSheet(this);
	}
	
	destroy(){
		if(this.element.parentNode){
			this.element.parentNode.removeChild(this.element);
		}
		
		this.dispatchExternal("sheetRemoved", this.getComponent());
	}
	
	active(){
		this.spreadsheetManager.loadSheet(this);
	}
}

class Spreadsheet extends Module{
	
	static moduleName = "spreadsheet";
	
	constructor(table){
		super(table);
		
		this.sheets = [];
		this.element = null;
		
		this.registerTableOption("spreadsheet", false); 
		this.registerTableOption("spreadsheetRows", 50); 
		this.registerTableOption("spreadsheetColumns", 50); 
		this.registerTableOption("spreadsheetColumnDefinition", {}); 
		this.registerTableOption("spreadsheetOutputFull", false); 
		this.registerTableOption("spreadsheetData", false); 
		this.registerTableOption("spreadsheetSheets", false); 
		this.registerTableOption("spreadsheetSheetTabs", false); 
		this.registerTableOption("spreadsheetSheetTabsElement", false); 
		
		this.registerTableFunction("setSheets", this.setSheets.bind(this));
		this.registerTableFunction("addSheet", this.addSheet.bind(this));
		this.registerTableFunction("getSheets", this.getSheets.bind(this));
		this.registerTableFunction("getSheetDefinitions", this.getSheetDefinitions.bind(this));
		this.registerTableFunction("setSheetData", this.setSheetData.bind(this));
		this.registerTableFunction("getSheet", this.getSheet.bind(this));
		this.registerTableFunction("getSheetData", this.getSheetData.bind(this));
		this.registerTableFunction("clearSheet", this.clearSheet.bind(this));
		this.registerTableFunction("removeSheet", this.removeSheetFunc.bind(this));
		this.registerTableFunction("activeSheet", this.activeSheetFunc.bind(this));
	}
	
	///////////////////////////////////
	////// Module Initialization //////
	///////////////////////////////////
	
	
	initialize(){
		if(this.options("spreadsheet")){	
			this.subscribe("table-initialized", this.tableInitialized.bind(this));
			this.subscribe("data-loaded", this.loadRemoteData.bind(this));
			
			this.table.options.index = "_id";
			
			if(this.options("spreadsheetData") && this.options("spreadsheetSheets")){
				console.warn("You cannot use spreadsheetData and spreadsheetSheets at the same time, ignoring spreadsheetData");
				
				this.table.options.spreadsheetData = false;
			}
			
			this.compatibilityCheck();
			
			if(this.options("spreadsheetSheetTabs")){
				this.initializeTabset();
			}
		}
	}
	
	compatibilityCheck(){
		if(this.options("data")){
			console.warn("Do not use the data option when working with spreadsheets, use either spreadsheetData or spreadsheetSheets to pass data into the table");
		}
		
		if(this.options("pagination")){
			console.warn("The spreadsheet module is not compatible with the pagination module");
		}
		
		if(this.options("groupBy")){
			console.warn("The spreadsheet module is not compatible with the row grouping module");
		}
		
		if(this.options("responsiveCollapse")){
			console.warn("The spreadsheet module is not compatible with the responsive collapse module");
		}
	}
	initializeTabset(){
		this.element = document.createElement("div");
		this.element.classList.add("tabulator-spreadsheet-tabs");
		var altContainer = this.options("spreadsheetSheetTabsElement");
		
		if(altContainer && !(altContainer instanceof HTMLElement)){
			altContainer = document.querySelector(altContainer);
			
			if(!altContainer){
				console.warn("Unable to find element matching spreadsheetSheetTabsElement selector:", this.options("spreadsheetSheetTabsElement"));
			}
		}
		
		if(altContainer){
			altContainer.appendChild(this.element);
		}else {
			this.footerAppend(this.element);
		}
	}
	
	tableInitialized(){
		if(this.sheets.length){
			this.loadSheet(this.sheets[0]);
		}else {
			
			if(this.options("spreadsheetSheets")){
				this.loadSheets(this.options("spreadsheetSheets"));
			}else if(this.options("spreadsheetData")){
				this.loadData(this.options("spreadsheetData"));
			}
		}
	}

	///////////////////////////////////
	/////////// Ajax Parsing //////////
	///////////////////////////////////

	loadRemoteData(data, data1, data2){
		console.log("data", data, data1, data2);

		if(Array.isArray(data)){

			this.table.dataLoader.clearAlert();
			this.dispatchExternal("dataLoaded", data);

			if(!data.length || Array.isArray(data[0])){
				this.loadData(data);
			}else {
				this.loadSheets(data);
			}
		}else {
			console.error("Spreadsheet Loading Error - Unable to process remote data due to invalid data type \nExpecting: array \nReceived: ", typeof data, "\nData:     ", data);
		}

		return false;
	}

	///////////////////////////////////
	///////// Sheet Management ////////
	///////////////////////////////////
	
	
	loadData(data){
		var def = {
			data:data,
		};
		
		this.loadSheet(this.newSheet(def));
	}
	
	destroySheets(){
		this.sheets.forEach((sheet) => {
			sheet.destroy();
		});
		
		this.sheets = [];
		this.activeSheet = null;
	}
	
	loadSheets(sheets){	
		if(!Array.isArray(sheets)){
			sheets = [];
		}
		
		this.destroySheets();
		
		sheets.forEach((def) => {
			this.newSheet(def);
		});
		
		this.loadSheet(this.sheets[0]);
	}
	
	loadSheet(sheet){
		if(this.activeSheet !== sheet){
			if(this.activeSheet){
				this.activeSheet.unload();
			}
			
			this.activeSheet = sheet;
			
			sheet.load();
		}
	}
	
	newSheet(definition = {}){
		var sheet;
		
		if(!definition.rows){
			definition.rows = this.options("spreadsheetRows");
		}
		
		if(!definition.columns){
			definition.columns = this.options("spreadsheetColumns");
		}
		
		sheet = new Sheet(this, definition);
		
		this.sheets.push(sheet);
		
		if(this.element){
			this.element.appendChild(sheet.element);
		}
		
		return sheet;
	}
	
	removeSheet(sheet){
		var index = this.sheets.indexOf(sheet),
		prevSheet;
		
		if(this.sheets.length > 1){
			if(index > -1){
				this.sheets.splice(index, 1);
				sheet.destroy();
				
				if(this.activeSheet === sheet){
					
					prevSheet = this.sheets[index - 1] || this.sheets[0];
					
					if(prevSheet){
						this.loadSheet(prevSheet);
					}else {
						this.activeSheet = null;
					}
				}
			}
		}else {
			console.warn("Unable to remove sheet, at least one sheet must be active");
		}
	}
	
	lookupSheet(key){
		if(!key){
			return this.activeSheet;
		}else if(key instanceof Sheet){
			return key;
		}else if(key instanceof SheetComponent){
			return key._sheet;
		}else {
			return this.sheets.find(sheet => sheet.key === key) || false;
		}
	}
	
	
	///////////////////////////////////
	//////// Public Functions /////////
	///////////////////////////////////
	
	setSheets(sheets){
		this.loadSheets(sheets);

		return this.getSheets();
	}

	addSheet(sheet){
		return this.newSheet(sheet).getComponent();
	}
	
	getSheetDefinitions(){
		return this.sheets.map(sheet => sheet.getDefinition());
	}
	
	getSheets(){
		return this.sheets.map(sheet => sheet.getComponent());
	}
	
	getSheet(key){
		var sheet = this.lookupSheet(key);
		
		return sheet ? sheet.getComponent() : false;
	}
	
	setSheetData(key, data){
		if (key && !data){
			data = key;
			key = false;
		}
		
		var sheet = this.lookupSheet(key);
		
		return sheet ? sheet.setData(data) : false;	
	}
	
	getSheetData(key){
		var sheet = this.lookupSheet(key);
		
		return sheet ? sheet.getData() : false;	
	}
	
	clearSheet(key){
		var sheet = this.lookupSheet(key);
		
		return sheet ? sheet.clear() : false;
	}
	
	removeSheetFunc(key){
		var sheet = this.lookupSheet(key);
		
		if(sheet){
			this.removeSheet(sheet);
		}
	}
	
	activeSheetFunc(key){
		var sheet = this.lookupSheet(key);
		
		return sheet ? this.loadSheet(sheet) : false;
	}
}

class Tooltip extends Module{

	static moduleName = "tooltip";
	
	constructor(table){
		super(table);
		
		this.tooltipSubscriber = null,
		this.headerSubscriber = null,
		
		this.timeout = null;
		this.popupInstance = null;
		
		// this.registerTableOption("tooltipGenerationMode", undefined);  //deprecated
		this.registerTableOption("tooltipDelay", 300); 
		
		this.registerColumnOption("tooltip");
		this.registerColumnOption("headerTooltip");
	}
	
	initialize(){
		this.deprecatedOptionsCheck();
		
		this.subscribe("column-init", this.initializeColumn.bind(this));
	}
	
	deprecatedOptionsCheck(){
		// this.deprecationCheckMsg("tooltipGenerationMode", "This option is no longer needed as tooltips are always generated on hover now");
	}	
	
	initializeColumn(column){
		if(column.definition.headerTooltip && !this.headerSubscriber){
			this.headerSubscriber = true;
			
			this.subscribe("column-mousemove", this.mousemoveCheck.bind(this, "headerTooltip"));
			this.subscribe("column-mouseout", this.mouseoutCheck.bind(this, "headerTooltip"));
		}
		
		if(column.definition.tooltip && !this.tooltipSubscriber){
			this.tooltipSubscriber = true;
			
			this.subscribe("cell-mousemove", this.mousemoveCheck.bind(this, "tooltip"));
			this.subscribe("cell-mouseout", this.mouseoutCheck.bind(this, "tooltip"));
		}
	}
	
	mousemoveCheck(action, e, component){
		var tooltip = action === "tooltip" ? component.column.definition.tooltip : component.definition.headerTooltip;
		
		if(tooltip){
			this.clearPopup();
			this.timeout = setTimeout(this.loadTooltip.bind(this, e, component, tooltip), this.table.options.tooltipDelay);
		}
	}

	mouseoutCheck(action, e, component){
		if(!this.popupInstance){
			this.clearPopup();
		}
	}
	
	clearPopup(action, e, component){
		clearTimeout(this.timeout);
		this.timeout = null;
		
		if(this.popupInstance){
			this.popupInstance.hide();
		}
	}
	
	loadTooltip(e, component, tooltip){
		var contentsEl, renderedCallback, coords;

		function onRendered(callback){
			renderedCallback = callback;
		}
		
		if(typeof tooltip === "function"){
			tooltip = tooltip(e, component.getComponent(), onRendered);
		}
		
		if(tooltip instanceof HTMLElement){
			contentsEl = tooltip;
		}else {
			contentsEl = document.createElement("div");
			
			if(tooltip === true){
				if(component instanceof Cell){
					tooltip = component.value;
				}else {
					if(component.definition.field){
						this.langBind("columns|" + component.definition.field, (value) => {
							contentsEl.innerHTML = tooltip = value || component.definition.title;
						});
					}else {
						tooltip = component.definition.title;
					}
				}
			}
			
			contentsEl.innerHTML = tooltip;
		}
		
		if(tooltip || tooltip === 0 || tooltip === false){
			contentsEl.classList.add("tabulator-tooltip");

			contentsEl.addEventListener("mousemove", e => e.preventDefault());
			
			this.popupInstance = this.popup(contentsEl);
			
			if(typeof renderedCallback === "function"){
				this.popupInstance.renderCallback(renderedCallback);
			}

			coords = this.popupInstance.containerEventCoords(e);
			
			this.popupInstance.show(coords.x + 15, coords.y + 15).hideOnBlur(() => {
				this.dispatchExternal("TooltipClosed", component.getComponent());
				this.popupInstance = null;
			});
			
			this.dispatchExternal("TooltipOpened", component.getComponent());
		}
	}
}

var defaultValidators = {
	//is integer
	integer: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}

		value = Number(value);

		return !isNaN(value) && isFinite(value) && Math.floor(value) === value;
	},

	//is float
	float: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		
		value = Number(value);

		return !isNaN(value) && isFinite(value) && value % 1 !== 0;
	},

	//must be a number
	numeric: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return !isNaN(value);
	},

	//must be a string
	string: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return isNaN(value);
	},

	//must be alphanumeric
	alphanumeric: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}

		var reg = new RegExp(/^[a-z0-9]+$/i);

		return reg.test(value);
	},

	//maximum value
	max: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return parseFloat(value) <= parameters;
	},

	//minimum value
	min: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return parseFloat(value) >= parameters;
	},

	//starts with  value
	starts: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return String(value).toLowerCase().startsWith(String(parameters).toLowerCase());
	},

	//ends with  value
	ends: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return String(value).toLowerCase().endsWith(String(parameters).toLowerCase());
	},


	//minimum string length
	minLength: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return String(value).length >= parameters;
	},

	//maximum string length
	maxLength: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		return String(value).length <= parameters;
	},

	//in provided value list
	in: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}

		if(typeof parameters == "string"){
			parameters = parameters.split("|");
		}

		return parameters.indexOf(value) > -1;
	},

	//must match provided regex
	regex: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		var reg = new RegExp(parameters);

		return reg.test(value);
	},

	//value must be unique in this column
	unique: function(cell, value, parameters){
		if(value === "" || value === null || typeof value === "undefined"){
			return true;
		}
		var unique = true;

		var cellData = cell.getData();
		var column = cell.getColumn()._getSelf();

		this.table.rowManager.rows.forEach(function(row){
			var data = row.getData();

			if(data !== cellData){
				if(value == column.getFieldValue(data)){
					unique = false;
				}
			}
		});

		return unique;
	},

	//must have a value
	required:function(cell, value, parameters){
		return value !== "" && value !== null && typeof value !== "undefined";
	},
};

class Validate extends Module{

	static moduleName = "validate";

	//load defaults
	static validators = defaultValidators;
	
	constructor(table){
		super(table);
		
		this.invalidCells = [];
		
		this.registerTableOption("validationMode", "blocking");
		
		this.registerColumnOption("validator");
		
		this.registerTableFunction("getInvalidCells", this.getInvalidCells.bind(this));
		this.registerTableFunction("clearCellValidation", this.userClearCellValidation.bind(this));
		this.registerTableFunction("validate", this.userValidate.bind(this));
		
		this.registerComponentFunction("cell", "isValid", this.cellIsValid.bind(this));
		this.registerComponentFunction("cell", "clearValidation", this.clearValidation.bind(this));
		this.registerComponentFunction("cell", "validate", this.cellValidate.bind(this));
		
		this.registerComponentFunction("column", "validate", this.columnValidate.bind(this));
		this.registerComponentFunction("row", "validate", this.rowValidate.bind(this));
	}
	
	
	initialize(){
		this.subscribe("cell-delete", this.clearValidation.bind(this));
		this.subscribe("column-layout", this.initializeColumnCheck.bind(this));
		
		this.subscribe("edit-success", this.editValidate.bind(this));
		this.subscribe("edit-editor-clear", this.editorClear.bind(this));
		this.subscribe("edit-edited-clear", this.editedClear.bind(this));
	}
	
	///////////////////////////////////
	///////// Event Handling //////////
	///////////////////////////////////
	
	editValidate(cell, value, previousValue){
		var valid = this.table.options.validationMode !== "manual" ? this.validate(cell.column.modules.validate, cell, value) : true;
		
		// allow time for editor to make render changes then style cell
		if(valid !== true){
			setTimeout(() => {
				cell.getElement().classList.add("tabulator-validation-fail");
				this.dispatchExternal("validationFailed", cell.getComponent(), value, valid);
			});
		}
		
		return valid;
	}
	
	editorClear(cell, cancelled){
		if(cancelled){
			if(cell.column.modules.validate){
				this.cellValidate(cell);
			}
		}

		cell.getElement().classList.remove("tabulator-validation-fail");
	}
	
	editedClear(cell){
		if(cell.modules.validate){
			cell.modules.validate.invalid = false;
		}
	}
	
	///////////////////////////////////
	////////// Cell Functions /////////
	///////////////////////////////////
	
	cellIsValid(cell){
		return cell.modules.validate ? (cell.modules.validate.invalid || true) : true;
	}
	
	cellValidate(cell){
		return this.validate(cell.column.modules.validate, cell, cell.getValue());
	}
	
	///////////////////////////////////
	///////// Column Functions ////////
	///////////////////////////////////
	
	columnValidate(column){
		var invalid = [];
		
		column.cells.forEach((cell) => {
			if(this.cellValidate(cell) !== true){
				invalid.push(cell.getComponent());
			}
		});
		
		return invalid.length ? invalid : true;
	}
	
	///////////////////////////////////
	////////// Row Functions //////////
	///////////////////////////////////
	
	rowValidate(row){
		var invalid = [];
		
		row.cells.forEach((cell) => {
			if(this.cellValidate(cell) !== true){
				invalid.push(cell.getComponent());
			}
		});
		
		return invalid.length ? invalid : true;
	}
	
	///////////////////////////////////
	///////// Table Functions /////////
	///////////////////////////////////
	
	
	userClearCellValidation(cells){
		if(!cells){
			cells = this.getInvalidCells();
		}
		
		if(!Array.isArray(cells)){
			cells = [cells];
		}
		
		cells.forEach((cell) => {
			this.clearValidation(cell._getSelf());
		});
	}
	
	userValidate(cells){
		var output = [];
		
		//clear row data
		this.table.rowManager.rows.forEach((row) => {
			row = row.getComponent();
			
			var valid = row.validate();
			
			if(valid !== true){
				output = output.concat(valid);
			}
		});
		
		return output.length ? output : true;
	}
	
	///////////////////////////////////
	///////// Internal Logic //////////
	///////////////////////////////////
	
	initializeColumnCheck(column){
		if(typeof column.definition.validator !== "undefined"){
			this.initializeColumn(column);
		}
	}
	
	//validate
	initializeColumn(column){
		var self = this,
		config = [],
		validator;
		
		if(column.definition.validator){
			
			if(Array.isArray(column.definition.validator)){
				column.definition.validator.forEach((item) => {
					validator = self._extractValidator(item);
					
					if(validator){
						config.push(validator);
					}
				});
				
			}else {
				validator = this._extractValidator(column.definition.validator);
				
				if(validator){
					config.push(validator);
				}
			}
			
			column.modules.validate = config.length ? config : false;
		}
	}
	
	_extractValidator(value){
		var type, params, pos;
		
		switch(typeof value){
			case "string":
				pos = value.indexOf(':');
			
				if(pos > -1){
					type = value.substring(0,pos);
					params = value.substring(pos+1);
				}else {
					type = value;
				}
			
				return this._buildValidator(type, params);
			
			case "function":
				return this._buildValidator(value);
			
			case "object":
				return this._buildValidator(value.type, value.parameters);
		}
	}
	
	_buildValidator(type, params){
		
		var func = typeof type == "function" ? type : Validate.validators[type];
		
		if(!func){
			console.warn("Validator Setup Error - No matching validator found:", type);
			return false;
		}else {
			return {
				type:typeof type == "function" ? "function" : type,
				func:func,
				params:params,
			};
		}
	}
	
	validate(validators, cell, value){
		var self = this,
		failedValidators = [],
		invalidIndex = this.invalidCells.indexOf(cell);
		
		if(validators){
			validators.forEach((item) => {
				if(!item.func.call(self, cell.getComponent(), value, item.params)){
					failedValidators.push({
						type:item.type,
						parameters:item.params
					});
				}
			});
		}
		
		if(!cell.modules.validate){
			cell.modules.validate = {};
		}
		
		if(!failedValidators.length){
			cell.modules.validate.invalid = false;
			cell.getElement().classList.remove("tabulator-validation-fail");
			
			if(invalidIndex > -1){
				this.invalidCells.splice(invalidIndex, 1);
			}
		}else {
			cell.modules.validate.invalid = failedValidators;
			
			if(this.table.options.validationMode !== "manual"){
				cell.getElement().classList.add("tabulator-validation-fail");
			}
			
			if(invalidIndex == -1){
				this.invalidCells.push(cell);
			}
		}
		
		return failedValidators.length ? failedValidators : true;
	}
	
	getInvalidCells(){
		var output = [];
		
		this.invalidCells.forEach((cell) => {
			output.push(cell.getComponent());
		});
		
		return output;
	}
	
	clearValidation(cell){
		var invalidIndex;
		
		if(cell.modules.validate && cell.modules.validate.invalid){
			
			cell.getElement().classList.remove("tabulator-validation-fail");
			cell.modules.validate.invalid = false;
			
			invalidIndex = this.invalidCells.indexOf(cell);
			
			if(invalidIndex > -1){
				this.invalidCells.splice(invalidIndex, 1);
			}
		}
	}
}

var allModules = /*#__PURE__*/Object.freeze({
	__proto__: null,
	AccessorModule: Accessor,
	AjaxModule: Ajax,
	ClipboardModule: Clipboard,
	ColumnCalcsModule: ColumnCalcs,
	DataTreeModule: DataTree,
	DownloadModule: Download,
	EditModule: Edit,
	ExportModule: Export,
	FilterModule: Filter,
	FormatModule: Format,
	FrozenColumnsModule: FrozenColumns,
	FrozenRowsModule: FrozenRows,
	GroupRowsModule: GroupRows,
	HistoryModule: History,
	HtmlTableImportModule: HtmlTableImport,
	ImportModule: Import,
	InteractionModule: Interaction,
	KeybindingsModule: Keybindings,
	MenuModule: Menu,
	MoveColumnsModule: MoveColumns,
	MoveRowsModule: MoveRows,
	MutatorModule: Mutator,
	PageModule: Page,
	PersistenceModule: Persistence,
	PopupModule: Popup,
	PrintModule: Print,
	ReactiveDataModule: ReactiveData,
	ResizeColumnsModule: ResizeColumns,
	ResizeRowsModule: ResizeRows,
	ResizeTableModule: ResizeTable,
	ResponsiveLayoutModule: ResponsiveLayout,
	SelectRangeModule: SelectRange,
	SelectRowModule: SelectRow,
	SortModule: Sort,
	SpreadsheetModule: Spreadsheet,
	TooltipModule: Tooltip,
	ValidateModule: Validate
});

var defaultOptions = {

	debugEventsExternal:false, //flag to console log events
	debugEventsInternal:false, //flag to console log events
	debugInvalidOptions:true, //allow toggling of invalid option warnings
	debugInvalidComponentFuncs:true, //allow toggling of invalid component warnings
	debugInitialization:true, //allow toggling of pre initialization function call warnings
	debugDeprecation:true, //allow toggling of deprecation warnings

	height:false, //height of tabulator
	minHeight:false, //minimum height of tabulator
	maxHeight:false, //maximum height of tabulator

	columnHeaderVertAlign:"top", //vertical alignment of column headers

	popupContainer:false,

	columns:[],//store for colum header info
	columnDefaults:{}, //store column default props
	rowHeader:false,

	data:false, //default starting data

	autoColumns:false, //build columns from data row structure
	autoColumnsDefinitions:false,

	nestedFieldSeparator:".", //separator for nested data

	footerElement:false, //hold footer element

	index:"id", //filed for row index

	textDirection:"auto",

	addRowPos:"bottom", //position to insert blank rows, top|bottom

	headerVisible:true, //hide header

	renderVertical:"virtual",
	renderHorizontal:"basic",
	renderVerticalBuffer:0, // set virtual DOM buffer size

	scrollToRowPosition:"top",
	scrollToRowIfVisible:true,

	scrollToColumnPosition:"left",
	scrollToColumnIfVisible:true,

	rowFormatter:false,
	rowFormatterPrint:null,
	rowFormatterClipboard:null,
	rowFormatterHtmlOutput:null,

	rowHeight:null,

	placeholder:false,

	dataLoader:true,
	dataLoaderLoading:false,
	dataLoaderError:false,
	dataLoaderErrorTimeout:3000,
	dataSendParams:{},
	dataReceiveParams:{},

	dependencies:{},
};

class OptionsList {
	constructor(table, msgType, defaults = {}){
		this.table = table;
		this.msgType = msgType;
		this.registeredDefaults = Object.assign({}, defaults);
	}
	
	register(option, value){
		this.registeredDefaults[option] = value;
	}
	
	generate(defaultOptions, userOptions = {}){
		var output = Object.assign({}, this.registeredDefaults),
		warn = this.table.options.debugInvalidOptions || userOptions.debugInvalidOptions === true;
		
		Object.assign(output, defaultOptions);
		
		for (let key in userOptions){
			if(!output.hasOwnProperty(key)){
				if(warn){
					console.warn("Invalid " + this.msgType + " option:", key);
				}

				output[key] = userOptions.key;
			}
		}
	
		
		for (let key in output){
			if(key in userOptions){
				output[key] = userOptions[key];
			}else {
				if(Array.isArray(output[key])){
					output[key] = Object.assign([], output[key]);
				}else if(typeof output[key] === "object" && output[key] !== null){
					output[key] = Object.assign({}, output[key]);
				}else if (typeof output[key] === "undefined"){
					delete output[key];
				}
			}
		}
		
		return output;
	}
}

class Renderer extends CoreFeature{
	constructor(table){
		super(table);

		this.elementVertical = table.rowManager.element;
		this.elementHorizontal = table.columnManager.element;
		this.tableElement =  table.rowManager.tableElement;

		this.verticalFillMode = "fit"; // used by row manager to determine how to size the render area ("fit" - fits container to the contents, "fill" - fills the container without resizing it)
	}


	///////////////////////////////////
	/////// Internal Bindings /////////
	///////////////////////////////////

	initialize(){
		//initialize core functionality
	}

	clearRows(){
		//clear down existing rows layout
	}

	clearColumns(){
		//clear down existing columns layout
	}


	reinitializeColumnWidths(columns){
		//resize columns to fit data
	}


	renderRows(){
		//render rows from a clean slate
	}

	renderColumns(){
		//render columns from a clean slate
	}

	rerenderRows(callback){
		// rerender rows and keep position
		if(callback){
			callback();
		}
	}

	rerenderColumns(update, blockRedraw){
		//rerender columns
	}

	renderRowCells(row){
		//render the cells in a row
	}

	rerenderRowCells(row, force){
		//rerender the cells in a row
	}

	scrollColumns(left, dir){
		//handle horizontal scrolling
	}

	scrollRows(top, dir){
		//handle vertical scrolling
	}

	resize(){
		//container has resized, carry out any needed recalculations (DO NOT RERENDER IN THIS FUNCTION)
	}

	scrollToRow(row){
		//scroll to a specific row
	}

	scrollToRowNearestTop(row){
		//determine weather the row is nearest the top or bottom of the table, return true for top or false for bottom
	}

	visibleRows(includingBuffer){
		//return the visible rows
		return [];
	}

	///////////////////////////////////
	//////// Helper Functions /////////
	///////////////////////////////////

	rows(){
		return this.table.rowManager.getDisplayRows();
	}

	styleRow(row, index){
		var rowEl = row.getElement();

		if(index % 2){
			rowEl.classList.add("tabulator-row-even");
			rowEl.classList.remove("tabulator-row-odd");
		}else {
			rowEl.classList.add("tabulator-row-odd");
			rowEl.classList.remove("tabulator-row-even");
		}
	}

	///////////////////////////////////
	/////// External Triggers /////////
	/////// (DO NOT OVERRIDE) /////////
	///////////////////////////////////

	clear(){
		//clear down existing layout
		this.clearRows();
		this.clearColumns();
	}

	render(){
		//render from a clean slate
		this.renderRows();
		this.renderColumns();
	}

	rerender(callback){
		// rerender and keep position
		this.rerenderRows();
		this.rerenderColumns();
	}

	scrollToRowPosition(row, position, ifVisible){
		var rowIndex = this.rows().indexOf(row),
		rowEl = row.getElement(),
		offset = 0;

		return new Promise((resolve, reject) => {
			if(rowIndex > -1){

				if(typeof ifVisible === "undefined"){
					ifVisible = this.table.options.scrollToRowIfVisible;
				}

				//check row visibility
				if(!ifVisible){
					if(Helpers.elVisible(rowEl)){
						offset = Helpers.elOffset(rowEl).top - Helpers.elOffset(this.elementVertical).top;
						
						if(offset > 0 && offset < this.elementVertical.clientHeight - rowEl.offsetHeight){
							resolve();
							return false;
						}
					}
				}

				if(typeof position === "undefined"){
					position = this.table.options.scrollToRowPosition;
				}

				if(position === "nearest"){
					position = this.scrollToRowNearestTop(row) ? "top" : "bottom";
				}

				//scroll to row
				this.scrollToRow(row);

				//align to correct position
				switch(position){
					case "middle":
					case "center":

						if(this.elementVertical.scrollHeight - this.elementVertical.scrollTop == this.elementVertical.clientHeight){
							this.elementVertical.scrollTop = this.elementVertical.scrollTop + (rowEl.offsetTop - this.elementVertical.scrollTop) - ((this.elementVertical.scrollHeight - rowEl.offsetTop) / 2);
						}else {
							this.elementVertical.scrollTop = this.elementVertical.scrollTop - (this.elementVertical.clientHeight / 2);
						}

						break;

					case "bottom":

						if(this.elementVertical.scrollHeight - this.elementVertical.scrollTop == this.elementVertical.clientHeight){
							this.elementVertical.scrollTop = this.elementVertical.scrollTop - (this.elementVertical.scrollHeight - rowEl.offsetTop) + rowEl.offsetHeight;
						}else {
							this.elementVertical.scrollTop = this.elementVertical.scrollTop - this.elementVertical.clientHeight + rowEl.offsetHeight;
						}

						break;

					case "top":
						this.elementVertical.scrollTop = rowEl.offsetTop;					
						break;
				}

				resolve();

			}else {
				console.warn("Scroll Error - Row not visible");
				reject("Scroll Error - Row not visible");
			}
		});
	}
}

class BasicHorizontal extends Renderer{
	constructor(table){
		super(table);
	}
	
	renderRowCells(row, inFragment) {
		const rowFrag = document.createDocumentFragment();
		row.cells.forEach((cell) => {
			rowFrag.appendChild(cell.getElement());
		});
		row.element.appendChild(rowFrag);
		
		if(!inFragment){
			row.cells.forEach((cell) => {
				cell.cellRendered();
			});
		}
	}
	
	reinitializeColumnWidths(columns){
		columns.forEach(function(column){
			column.reinitializeWidth();
		});
	}
}

class VirtualDomHorizontal extends Renderer{
	constructor(table){
		super(table);
		
		this.leftCol = 0;
		this.rightCol = 0;
		this.scrollLeft = 0;
		
		this.vDomScrollPosLeft = 0;
		this.vDomScrollPosRight = 0;
		
		this.vDomPadLeft = 0;
		this.vDomPadRight = 0;
		
		this.fitDataColAvg = 0;
		
		this.windowBuffer = 200; //pixel margin to make column visible before it is shown on screen
		
		this.visibleRows = null;
		
		this.initialized = false;
		this.isFitData = false;
		
		this.columns = [];
	}
	
	initialize(){
		this.compatibilityCheck();
		this.layoutCheck();
		this.vertScrollListen();
	}
	
	compatibilityCheck(){		
		if(this.options("layout") == "fitDataTable"){
			console.warn("Horizontal Virtual DOM is not compatible with fitDataTable layout mode");
		}
		
		if(this.options("responsiveLayout")){
			console.warn("Horizontal Virtual DOM is not compatible with responsive columns");
		}
		
		if(this.options("rtl")){
			console.warn("Horizontal Virtual DOM is not currently compatible with RTL text direction");
		}
	}
	
	layoutCheck(){
		this.isFitData = this.options("layout").startsWith('fitData');
	}
	
	vertScrollListen(){
		this.subscribe("scroll-vertical", this.clearVisRowCache.bind(this));
		this.subscribe("data-refreshed", this.clearVisRowCache.bind(this));
	}
	
	clearVisRowCache(){
		this.visibleRows = null;
	}
	
	//////////////////////////////////////
	///////// Public Functions ///////////
	//////////////////////////////////////
	
	renderColumns(row, force){
		this.dataChange();
	}
	
	
	scrollColumns(left, dir){
		if(this.scrollLeft != left){
			this.scrollLeft = left;
			
			this.scroll(left - (this.vDomScrollPosLeft + this.windowBuffer));
		}
	}
	
	calcWindowBuffer(){
		var buffer = this.elementVertical.clientWidth;
		
		this.table.columnManager.columnsByIndex.forEach((column) => {
			if(column.visible){
				var width = column.getWidth();
				
				if(width > buffer){
					buffer = width;
				}
			}
		});
		
		this.windowBuffer = buffer * 2;
	}
	
	rerenderColumns(update, blockRedraw){		
		var old = {
			cols:this.columns,
			leftCol:this.leftCol,
			rightCol:this.rightCol,
		},
		colPos = 0;
		
		if(update && !this.initialized){
			return;
		}
		
		this.clear();
		
		this.calcWindowBuffer();
		
		this.scrollLeft = this.elementVertical.scrollLeft;
		
		this.vDomScrollPosLeft = this.scrollLeft - this.windowBuffer;
		this.vDomScrollPosRight = this.scrollLeft + this.elementVertical.clientWidth + this.windowBuffer;
		
		this.table.columnManager.columnsByIndex.forEach((column) => {
			var config = {},
			width;
			
			if(column.visible){
				if(!column.modules.frozen){			
					width = column.getWidth();
					
					config.leftPos = colPos;
					config.rightPos = colPos + width;
					
					config.width = width;
					
					if (this.isFitData) {
						config.fitDataCheck = column.modules.vdomHoz ? column.modules.vdomHoz.fitDataCheck : true;
					}
					
					if((colPos + width > this.vDomScrollPosLeft) && (colPos < this.vDomScrollPosRight)){
						//column is visible
						
						if(this.leftCol == -1){
							this.leftCol = this.columns.length;
							this.vDomPadLeft = colPos;
						}
						
						this.rightCol = this.columns.length;
					}else {
						// column is hidden
						if(this.leftCol !== -1){
							this.vDomPadRight += width;
						}
					}
					
					this.columns.push(column);
					
					column.modules.vdomHoz = config;
					
					colPos += width;
				}
			}
		});
		
		this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
		this.tableElement.style.paddingRight = this.vDomPadRight + "px";
		
		this.initialized = true;
		
		if(!blockRedraw){
			if(!update || this.reinitChanged(old)){
				this.reinitializeRows();
			}
		}
		
		this.elementVertical.scrollLeft = this.scrollLeft;
	}
	
	renderRowCells(row){
		if(this.initialized){
			this.initializeRow(row);
		}else {
			const rowFrag = document.createDocumentFragment();
			row.cells.forEach((cell) => {
				rowFrag.appendChild(cell.getElement());
			});
			row.element.appendChild(rowFrag);
			
			row.cells.forEach((cell) => {
				cell.cellRendered();
			});
		}
	}
	
	rerenderRowCells(row, force){
		this.reinitializeRow(row, force);
	}
	
	reinitializeColumnWidths(columns){
		for(let i = this.leftCol; i <= this.rightCol; i++){
			let col = this.columns[i];
			
			if(col){
				col.reinitializeWidth();
			}
		}
	}
	
	//////////////////////////////////////
	//////// Internal Rendering //////////
	//////////////////////////////////////
	
	deinitialize(){
		this.initialized = false;
	}
	
	clear(){
		this.columns = [];
		
		this.leftCol = -1;
		this.rightCol = 0;
		
		this.vDomScrollPosLeft = 0;
		this.vDomScrollPosRight = 0;
		this.vDomPadLeft = 0;
		this.vDomPadRight = 0;
	}
	
	dataChange(){
		var change = false,
		row, rowEl;
		
		if(this.isFitData){
			this.table.columnManager.columnsByIndex.forEach((column) => {
				if(!column.definition.width && column.visible){
					change = true;
				}
			});
			
			if(change && this.table.rowManager.getDisplayRows().length){
				this.vDomScrollPosRight = this.scrollLeft + this.elementVertical.clientWidth + this.windowBuffer;
				
				row = this.chain("rows-sample", [1], [], () => {
					return this.table.rowManager.getDisplayRows();
				})[0];
				
				if(row){
					rowEl = row.getElement();
					
					row.generateCells();
					
					this.tableElement.appendChild(rowEl);
					
					for(let colEnd = 0; colEnd < row.cells.length; colEnd++){
						let cell = row.cells[colEnd];
						rowEl.appendChild(cell.getElement());
						
						cell.column.reinitializeWidth();
					}
					
					rowEl.parentNode.removeChild(rowEl);
					
					this.rerenderColumns(false, true);
				}
			}
		}else {
			if(this.options("layout") === "fitColumns"){
				this.layoutRefresh();
				this.rerenderColumns(false, true);
			}
		}
	}
	
	reinitChanged(old){
		var match = true;
		
		if(old.cols.length !== this.columns.length || old.leftCol !== this.leftCol || old.rightCol !== this.rightCol){
			return true;
		}
		
		old.cols.forEach((col, i) => {
			if(col !== this.columns[i]){
				match = false;
			}
		});
		
		return !match;
	}
	
	reinitializeRows(){
		var visibleRows = this.getVisibleRows(),
		otherRows = this.table.rowManager.getRows().filter(row => !visibleRows.includes(row));
		
		visibleRows.forEach((row) => {
			this.reinitializeRow(row, true);
		});
		
		otherRows.forEach((row) =>{
			row.deinitialize();
		});
	}
	
	getVisibleRows(){
		if (!this.visibleRows){
			this.visibleRows = this.table.rowManager.getVisibleRows();
		}
		
		return this.visibleRows;	
	}
	
	scroll(diff){
		this.vDomScrollPosLeft += diff;
		this.vDomScrollPosRight += diff;
		
		if(Math.abs(diff) > (this.windowBuffer / 2)){
			this.rerenderColumns();
		}else {
			if(diff > 0){
				//scroll right
				this.addColRight();
				this.removeColLeft();
			}else {
				//scroll left
				this.addColLeft();
				this.removeColRight();
			}
		}
	}
	
	colPositionAdjust (start, end, diff){
		for(let i = start; i < end; i++){
			let column = this.columns[i];
			
			column.modules.vdomHoz.leftPos += diff;
			column.modules.vdomHoz.rightPos += diff;
		}
	}
	
	addColRight(){
		var changes = false,
		working = true;
		
		while(working){
			
			let column = this.columns[this.rightCol + 1];
			
			if(column){
				if(column.modules.vdomHoz.leftPos <= this.vDomScrollPosRight){
					changes = true;
					
					this.getVisibleRows().forEach((row) => {
						if(row.type !== "group"){
							var cell = row.getCell(column);
							row.getElement().insertBefore(cell.getElement(), row.getCell(this.columns[this.rightCol]).getElement().nextSibling);
							cell.cellRendered();
						}
					});
					
					this.fitDataColActualWidthCheck(column);
					
					this.rightCol++; // Don't move this below the >= check below
					
					this.getVisibleRows().forEach((row) => {
						if(row.type !== "group"){
							row.modules.vdomHoz.rightCol = this.rightCol;
						}
					});
					
					if(this.rightCol >= (this.columns.length - 1)){
						this.vDomPadRight = 0;
					}else {
						this.vDomPadRight -= column.getWidth();
					}	
				}else {
					working = false;
				}
			}else {
				working = false;
			}
		}
		
		if(changes){
			this.tableElement.style.paddingRight = this.vDomPadRight + "px";
		}
	}
	
	addColLeft(){
		var changes = false,
		working = true;
		
		while(working){
			let column = this.columns[this.leftCol - 1];
			
			if(column){
				if(column.modules.vdomHoz.rightPos >= this.vDomScrollPosLeft){
					changes = true;
					
					this.getVisibleRows().forEach((row) => {
						if(row.type !== "group"){
							var cell = row.getCell(column);
							row.getElement().insertBefore(cell.getElement(), row.getCell(this.columns[this.leftCol]).getElement());
							cell.cellRendered();
						}
					});
					
					this.leftCol--; // don't move this below the <= check below
					
					this.getVisibleRows().forEach((row) => {
						if(row.type !== "group"){
							row.modules.vdomHoz.leftCol = this.leftCol;
						}
					});
					
					if(this.leftCol <= 0){ // replicating logic in addColRight
						this.vDomPadLeft = 0;
					}else {
						this.vDomPadLeft -= column.getWidth();
					}
					
					let diff = this.fitDataColActualWidthCheck(column);
					
					if(diff){
						this.scrollLeft = this.elementVertical.scrollLeft = this.elementVertical.scrollLeft + diff;
						this.vDomPadRight -= diff;
					}
					
				}else {
					working = false;
				}
			}else {
				working = false;
			}
		}
		
		if(changes){
			this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
		}
	}
	
	removeColRight(){
		var changes = false,
		working = true;
		
		while(working){
			let column = this.columns[this.rightCol];
			
			if(column){
				if(column.modules.vdomHoz.leftPos > this.vDomScrollPosRight){
					changes = true;
					
					this.getVisibleRows().forEach((row) => {
						if(row.type !== "group"){
							var cell = row.getCell(column);
							
							try {
								row.getElement().removeChild(cell.getElement());
							} catch (ex) {
								console.warn("Could not removeColRight", ex.message);
							}
						}
					});
					
					this.vDomPadRight += column.getWidth();
					this.rightCol --;
					
					this.getVisibleRows().forEach((row) => {
						if(row.type !== "group"){
							row.modules.vdomHoz.rightCol = this.rightCol;
						}
					});
				}else {
					working = false;
				}
			}else {
				working = false;
			}
		}
		
		if(changes){
			this.tableElement.style.paddingRight = this.vDomPadRight + "px";
		}
	}
	
	removeColLeft(){
		var changes = false,
		working = true;
		
		while(working){
			let column = this.columns[this.leftCol];
			
			if(column){
				if(column.modules.vdomHoz.rightPos < this.vDomScrollPosLeft){
					changes = true;
					
					this.getVisibleRows().forEach((row) => {					
						if(row.type !== "group"){
							var cell = row.getCell(column);
							
							try {
								row.getElement().removeChild(cell.getElement());
							} catch (ex) {
								console.warn("Could not removeColLeft", ex.message);
							}
						}
					});
					
					this.vDomPadLeft += column.getWidth();
					this.leftCol ++;
					
					this.getVisibleRows().forEach((row) => {
						if(row.type !== "group"){
							row.modules.vdomHoz.leftCol = this.leftCol;
						}
					});
				}else {
					working = false;
				}
			}else {
				working = false;
			}
		}
		
		if(changes){
			this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
		}
	}
	
	fitDataColActualWidthCheck(column){
		var newWidth, widthDiff;
		
		if(column.modules.vdomHoz.fitDataCheck){
			column.reinitializeWidth();
			
			newWidth = column.getWidth();
			widthDiff = newWidth - column.modules.vdomHoz.width;
			
			if(widthDiff){
				column.modules.vdomHoz.rightPos += widthDiff;
				column.modules.vdomHoz.width = newWidth;
				this.colPositionAdjust(this.columns.indexOf(column) + 1, this.columns.length, widthDiff);
			}
			
			column.modules.vdomHoz.fitDataCheck = false;
		}
		
		return widthDiff;
	}
	
	initializeRow(row){
		if(row.type !== "group"){
			row.modules.vdomHoz = {
				leftCol:this.leftCol,
				rightCol:this.rightCol,
			};
			
			if(this.table.modules.frozenColumns){
				this.table.modules.frozenColumns.leftColumns.forEach((column) => {
					this.appendCell(row, column);
				});
			}
			
			for(let i = this.leftCol; i <= this.rightCol; i++){
				this.appendCell(row, this.columns[i]);
			}
			
			if(this.table.modules.frozenColumns){
				this.table.modules.frozenColumns.rightColumns.forEach((column) => {
					this.appendCell(row, column);
				});
			}
		}
	}
	
	appendCell(row, column){
		if(column && column.visible){
			let cell = row.getCell(column);
			
			row.getElement().appendChild(cell.getElement());
			cell.cellRendered();
		}
	}
	
	reinitializeRow(row, force){
		if(row.type !== "group"){
			if(force || !row.modules.vdomHoz || row.modules.vdomHoz.leftCol !== this.leftCol || row.modules.vdomHoz.rightCol !== this.rightCol){
				
				var rowEl = row.getElement();
				while(rowEl.firstChild) rowEl.removeChild(rowEl.firstChild);
				
				this.initializeRow(row);
			}
		}
	}
}

class ColumnManager extends CoreFeature {
	
	constructor (table){
		super(table);
		
		this.blockHozScrollEvent = false;
		this.headersElement = null;
		this.contentsElement = null;
		this.rowHeader = null;
		this.element = null ; //containing element
		this.columns = []; // column definition object
		this.columnsByIndex = []; //columns by index
		this.columnsByField = {}; //columns by field
		this.scrollLeft = 0;
		this.optionsList = new OptionsList(this.table, "column definition", defaultColumnOptions);
		
		this.redrawBlock = false; //prevent redraws to allow multiple data manipulations before continuing
		this.redrawBlockUpdate = null; //store latest redraw update only status
		
		this.renderer = null;
	}
	
	////////////// Setup Functions /////////////////
	
	initialize(){
		this.initializeRenderer();
		
		this.headersElement = this.createHeadersElement();
		this.contentsElement = this.createHeaderContentsElement();
		this.element = this.createHeaderElement();
		
		this.contentsElement.insertBefore(this.headersElement, this.contentsElement.firstChild);
		this.element.insertBefore(this.contentsElement, this.element.firstChild);
		
		this.initializeScrollWheelWatcher();
		
		this.subscribe("scroll-horizontal", this.scrollHorizontal.bind(this));
		this.subscribe("scrollbar-vertical", this.padVerticalScrollbar.bind(this));
	}
	
	padVerticalScrollbar(width){
		if(this.table.rtl){
			this.headersElement.style.marginLeft = width + "px";
		}else {
			this.headersElement.style.marginRight = width + "px";
		}
	}
	
	initializeRenderer(){
		var renderClass;
		
		var renderers = {
			"virtual": VirtualDomHorizontal,
			"basic": BasicHorizontal,
		};
		
		if(typeof this.table.options.renderHorizontal === "string"){
			renderClass = renderers[this.table.options.renderHorizontal];
		}else {
			renderClass = this.table.options.renderHorizontal;
		}
		
		if(renderClass){
			this.renderer = new renderClass(this.table, this.element, this.tableElement);
			this.renderer.initialize();
		}else {
			console.error("Unable to find matching renderer:", this.table.options.renderHorizontal);
		}
	}
	
	
	createHeadersElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-headers");
		el.setAttribute("role", "row");
		
		return el;
	}
	
	createHeaderContentsElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-header-contents");
		el.setAttribute("role", "rowgroup");
		
		return el;
	}
	
	createHeaderElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-header");
		el.setAttribute("role", "rowgroup");
		
		if(!this.table.options.headerVisible){
			el.classList.add("tabulator-header-hidden");
		}
		
		return el;
	}
	
	//return containing element
	getElement(){
		return this.element;
	}
	
	//return containing contents element
	getContentsElement(){
		return this.contentsElement;
	}
	
	
	//return header containing element
	getHeadersElement(){
		return this.headersElement;
	}
	
	//scroll horizontally to match table body
	scrollHorizontal(left){
		this.contentsElement.scrollLeft = left;
		
		this.scrollLeft = left;
		
		this.renderer.scrollColumns(left);
	}
	
	initializeScrollWheelWatcher(){
		this.contentsElement.addEventListener("wheel", (e) => {
			var left;
			
			if(e.deltaX){
				left = this.contentsElement.scrollLeft + e.deltaX;
				
				this.table.rowManager.scrollHorizontal(left);
				this.table.columnManager.scrollHorizontal(left);
			}
		});
	}
	
	///////////// Column Setup Functions /////////////
	generateColumnsFromRowData(data){
		var cols = [],
		collProgress = {},
		rowSample = this.table.options.autoColumns === "full" ? data : [data[0]],
		definitions = this.table.options.autoColumnsDefinitions;
		
		if(data && data.length){
			
			rowSample.forEach((row) => {
				
				Object.keys(row).forEach((key, index) => {
					let value = row[key],
					col;
					
					if(!collProgress[key]){
						col = {
							field:key,
							title:key,
							sorter:this.calculateSorterFromValue(value),
						};

						cols.splice(index, 0, col);
						collProgress[key] = typeof value === "undefined" ? col : true;
					}else if(collProgress[key] !== true){
						if(typeof value !== "undefined"){
							collProgress[key].sorter = this.calculateSorterFromValue(value);
							collProgress[key] = true;
						}
					}
				});
			});
			
			if(definitions){
				
				switch(typeof definitions){
					case "function":
						this.table.options.columns = definitions.call(this.table, cols);
						break;
					
					case "object":
						if(Array.isArray(definitions)){
							cols.forEach((col) => {
								var match = definitions.find((def) => {
									return def.field === col.field;
								});
								
								if(match){
									Object.assign(col, match);
								}
							});
							
						}else {
							cols.forEach((col) => {
								if(definitions[col.field]){
									Object.assign(col, definitions[col.field]);
								}
							});
						}
						
						this.table.options.columns = cols;
						break;
				}
			}else {
				this.table.options.columns = cols;
			}
			
			this.setColumns(this.table.options.columns);
		}
	}
	
	calculateSorterFromValue(value){
		var sorter;
		
		switch(typeof value){
			case "undefined":
				sorter = "string";
				break;
			
			case "boolean":
				sorter = "boolean";
				break;
			
			case "number":
				sorter = "number";
				break;
			
			case "object":
				if(Array.isArray(value)){
					sorter = "array";
				}else {
					sorter = "string";
				}
				break;
			
			default:
				if(!isNaN(value) && value !== ""){
					sorter = "number";
				}else {
					if(value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)){
						sorter = "alphanum";
					}else {
						sorter = "string";
					}
				}
				break;
		}
		
		return sorter;
	}
	
	setColumns(cols, row){
		while(this.headersElement.firstChild) this.headersElement.removeChild(this.headersElement.firstChild);
		
		this.columns = [];
		this.columnsByIndex = [];
		this.columnsByField = {};
		
		this.dispatch("columns-loading");
		this.dispatchExternal("columnsLoading");
		
		if(this.table.options.rowHeader){
			this.rowHeader = new Column(this.table.options.rowHeader === true ? {} : this.table.options.rowHeader, this, true);
			this.columns.push(this.rowHeader);
			this.headersElement.appendChild(this.rowHeader.getElement());
			this.rowHeader.columnRendered();
		}
		
		cols.forEach((def, i) => {
			this._addColumn(def);
		});
		
		this._reIndexColumns();
		
		this.dispatch("columns-loaded");

		if(this.subscribedExternal("columnsLoaded")){
			this.dispatchExternal("columnsLoaded", this.getComponents());
		}
		
		this.rerenderColumns(false, true);
		
		this.redraw(true);
	}
	
	_addColumn(definition, before, nextToColumn){
		var column = new Column(definition, this),
		colEl = column.getElement(),
		index = nextToColumn ? this.findColumnIndex(nextToColumn) : nextToColumn;
		
		//prevent adding of rows in front of row header
		if(before && this.rowHeader && (!nextToColumn || nextToColumn === this.rowHeader)){
			before = false;
			nextToColumn = this.rowHeader;
			index = 0;
		}
		
		if(nextToColumn && index > -1){
			var topColumn = nextToColumn.getTopColumn();
			var parentIndex = this.columns.indexOf(topColumn);
			var nextEl = topColumn.getElement();
			
			if(before){
				this.columns.splice(parentIndex, 0, column);
				nextEl.parentNode.insertBefore(colEl, nextEl);
			}else {
				this.columns.splice(parentIndex + 1, 0, column);
				nextEl.parentNode.insertBefore(colEl, nextEl.nextSibling);
			}
		}else {
			if(before){
				this.columns.unshift(column);
				this.headersElement.insertBefore(column.getElement(), this.headersElement.firstChild);
			}else {
				this.columns.push(column);
				this.headersElement.appendChild(column.getElement());
			}
		}
		
		column.columnRendered();
		
		return column;
	}
	
	registerColumnField(col){
		if(col.definition.field){
			this.columnsByField[col.definition.field] = col;
		}
	}
	
	registerColumnPosition(col){
		this.columnsByIndex.push(col);
	}
	
	_reIndexColumns(){
		this.columnsByIndex = [];
		
		this.columns.forEach(function(column){
			column.reRegisterPosition();
		});
	}
	
	//ensure column headers take up the correct amount of space in column groups
	verticalAlignHeaders(){
		var minHeight = 0;
		
		if(!this.redrawBlock){
			
			this.headersElement.style.height="";
			
			this.columns.forEach((column) => {
				column.clearVerticalAlign();
			});
			
			this.columns.forEach((column) => {
				var height = column.getHeight();
				
				if(height > minHeight){
					minHeight = height;
				}
			});
			
			this.headersElement.style.height = minHeight + "px";
			
			this.columns.forEach((column) => {
				column.verticalAlign(this.table.options.columnHeaderVertAlign, minHeight);
			});
			
			this.table.rowManager.adjustTableSize();
		}
	}
	
	//////////////// Column Details /////////////////
	findColumn(subject){
		var columns;
		
		if(typeof subject == "object"){
			
			if(subject instanceof Column){
				//subject is column element
				return subject;
			}else if(subject instanceof ColumnComponent){
				//subject is public column component
				return subject._getSelf() || false;
			}else if(typeof HTMLElement !== "undefined" && subject instanceof HTMLElement){
				
				columns = [];
				
				this.columns.forEach((column) => {
					columns.push(column);
					columns = columns.concat(column.getColumns(true));
				});
				
				//subject is a HTML element of the column header
				let match = columns.find((column) => {
					return column.element === subject;
				});
				
				return match || false;
			}
			
		}else {
			//subject should be treated as the field name of the column
			return this.columnsByField[subject] || false;
		}
		
		//catch all for any other type of input
		return false;
	}
	
	getColumnByField(field){
		return this.columnsByField[field];
	}
	
	getColumnsByFieldRoot(root){
		var matches = [];
		
		Object.keys(this.columnsByField).forEach((field) => {
			var fieldRoot = this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator)[0] : field;
			if(fieldRoot === root){
				matches.push(this.columnsByField[field]);
			}
		});
		
		return matches;
	}
	
	getColumnByIndex(index){
		return this.columnsByIndex[index];
	}
	
	getFirstVisibleColumn(){
		var index = this.columnsByIndex.findIndex((col) => {
			return col.visible;
		});
		
		return index > -1 ? this.columnsByIndex[index] : false;
	}
	
	getVisibleColumnsByIndex() {
		return this.columnsByIndex.filter((col) => col.visible);
	}
	
	getColumns(){
		return this.columns;
	}
	
	findColumnIndex(column){
		return this.columnsByIndex.findIndex((col) => {
			return column === col;
		});
	}
	
	//return all columns that are not groups
	getRealColumns(){
		return this.columnsByIndex;
	}
	
	//traverse across columns and call action
	traverse(callback){
		this.columnsByIndex.forEach((column,i) =>{
			callback(column, i);
		});
	}
	
	//get definitions of actual columns
	getDefinitions(active){
		var output = [];
		
		this.columnsByIndex.forEach((column) => {
			if(!active || (active && column.visible)){
				output.push(column.getDefinition());
			}
		});
		
		return output;
	}
	
	//get full nested definition tree
	getDefinitionTree(){
		var output = [];
		
		this.columns.forEach((column) => {
			output.push(column.getDefinition(true));
		});
		
		return output;
	}
	
	getComponents(structured){
		var output = [],
		columns = structured ? this.columns : this.columnsByIndex;
		
		columns.forEach((column) => {
			output.push(column.getComponent());
		});
		
		return output;
	}
	
	getWidth(){
		var width = 0;
		
		this.columnsByIndex.forEach((column) => {
			if(column.visible){
				width += column.getWidth();
			}
		});
		
		return width;
	}
	
	moveColumn(from, to, after){
		to.element.parentNode.insertBefore(from.element, to.element);
		
		if(after){
			to.element.parentNode.insertBefore(to.element, from.element);
		}
		
		this.moveColumnActual(from, to, after);
		
		this.verticalAlignHeaders();
		
		this.table.rowManager.reinitialize();
	}
	
	moveColumnActual(from, to, after){
		if(from.parent.isGroup){
			this._moveColumnInArray(from.parent.columns, from, to, after);
		}else {
			this._moveColumnInArray(this.columns, from, to, after);
		}
		
		this._moveColumnInArray(this.columnsByIndex, from, to, after, true);
		
		this.rerenderColumns(true);
		
		this.dispatch("column-moved", from, to, after);
		
		if(this.subscribedExternal("columnMoved")){
			this.dispatchExternal("columnMoved", from.getComponent(), this.table.columnManager.getComponents());
		}
	}
	
	_moveColumnInArray(columns, from, to, after, updateRows){
		var	fromIndex = columns.indexOf(from),
		toIndex, rows = [];
		
		if (fromIndex > -1) {
			
			columns.splice(fromIndex, 1);
			
			toIndex = columns.indexOf(to);
			
			if (toIndex > -1) {
				
				if(after){
					toIndex = toIndex+1;
				}
				
			}else {
				toIndex = fromIndex;
			}
			
			columns.splice(toIndex, 0, from);
			
			if(updateRows){
				
				rows = this.chain("column-moving-rows", [from, to, after], null, []) || [];
				
				rows = rows.concat(this.table.rowManager.rows);
				
				rows.forEach(function(row){
					if(row.cells.length){
						var cell = row.cells.splice(fromIndex, 1)[0];
						row.cells.splice(toIndex, 0, cell);
					}
				});
				
			}
		}
	}
	
	scrollToColumn(column, position, ifVisible){
		var left = 0,
		offset = column.getLeftOffset(),
		adjust = 0,
		colEl = column.getElement();
		
		
		return new Promise((resolve, reject) => {
			
			if(typeof position === "undefined"){
				position = this.table.options.scrollToColumnPosition;
			}
			
			if(typeof ifVisible === "undefined"){
				ifVisible = this.table.options.scrollToColumnIfVisible;
			}
			
			if(column.visible){
				
				//align to correct position
				switch(position){
					case "middle":
					case "center":
						adjust = -this.element.clientWidth / 2;
						break;
					
					case "right":
						adjust = colEl.clientWidth - this.headersElement.clientWidth;
						break;
				}
				
				//check column visibility
				if(!ifVisible){
					if(offset > 0 && offset + colEl.offsetWidth < this.element.clientWidth){
						return false;
					}
				}
				
				//calculate scroll position
				left = offset + adjust;
				
				left = Math.max(Math.min(left, this.table.rowManager.element.scrollWidth - this.table.rowManager.element.clientWidth),0);
				
				this.table.rowManager.scrollHorizontal(left);
				this.scrollHorizontal(left);
				
				resolve();
			}else {
				console.warn("Scroll Error - Column not visible");
				reject("Scroll Error - Column not visible");
			}
			
		});
	}
	
	//////////////// Cell Management /////////////////
	generateCells(row){
		var cells = [];
		
		this.columnsByIndex.forEach((column) => {
			cells.push(column.generateCell(row));
		});
		
		return cells;
	}
	
	//////////////// Column Management /////////////////
	getFlexBaseWidth(){
		var totalWidth = this.table.element.clientWidth, //table element width
		fixedWidth = 0;
		
		//adjust for vertical scrollbar if present
		if(this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight){
			totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;
		}
		
		this.columnsByIndex.forEach(function(column){
			var width, minWidth, colWidth;
			
			if(column.visible){
				
				width = column.definition.width || 0;
				
				minWidth = parseInt(column.minWidth);
				
				if(typeof(width) == "string"){
					if(width.indexOf("%") > -1){
						colWidth = (totalWidth / 100) * parseInt(width) ;
					}else {
						colWidth = parseInt(width);
					}
				}else {
					colWidth = width;
				}
				
				fixedWidth += colWidth > minWidth ? colWidth : minWidth;
				
			}
		});
		
		return fixedWidth;
	}
	
	addColumn(definition, before, nextToColumn){
		return new Promise((resolve, reject) => {
			var column = this._addColumn(definition, before, nextToColumn);
			
			this._reIndexColumns();
			
			this.dispatch("column-add", definition, before, nextToColumn);
			
			if(this.layoutMode() != "fitColumns"){
				column.reinitializeWidth();
			}
			
			this.redraw(true);
			
			this.table.rowManager.reinitialize();
			
			this.rerenderColumns();
			
			resolve(column);
		});
	}
	
	//remove column from system
	deregisterColumn(column){
		var field = column.getField(),
		index;
		
		//remove from field list
		if(field){
			delete this.columnsByField[field];
		}
		
		//remove from index list
		index = this.columnsByIndex.indexOf(column);
		
		if(index > -1){
			this.columnsByIndex.splice(index, 1);
		}
		
		//remove from column list
		index = this.columns.indexOf(column);
		
		if(index > -1){
			this.columns.splice(index, 1);
		}
		
		this.verticalAlignHeaders();
		
		this.redraw();
	}
	
	rerenderColumns(update, silent){
		if(!this.redrawBlock){
			this.renderer.rerenderColumns(update, silent);
		}else {
			if(update === false || (update === true && this.redrawBlockUpdate === null)){
				this.redrawBlockUpdate = update;
			}
		}
	}
	
	blockRedraw(){
		this.redrawBlock = true;
		this.redrawBlockUpdate = null;
	}
	
	restoreRedraw(){
		this.redrawBlock = false;
		this.verticalAlignHeaders();
		this.renderer.rerenderColumns(this.redrawBlockUpdate);
		
	}
	
	//redraw columns
	redraw(force){
		if(Helpers.elVisible(this.element)){
			this.verticalAlignHeaders();
		}
		
		if(force){
			this.table.rowManager.resetScroll();
			this.table.rowManager.reinitialize();
		}
		
		if(!this.confirm("table-redrawing", force)){
			this.layoutRefresh(force);
		}
		
		this.dispatch("table-redraw", force);
		
		this.table.footerManager.redraw();
	}
}

class BasicVertical extends Renderer{
	constructor(table){
		super(table);
		
		this.verticalFillMode = "fill";
		
		this.scrollTop = 0;
		this.scrollLeft = 0;
		
		this.scrollTop = 0;
		this.scrollLeft = 0;
	}
	
	clearRows(){
		var element = this.tableElement;
		
		// element.children.detach();
		while(element.firstChild) element.removeChild(element.firstChild);
		
		element.scrollTop = 0;
		element.scrollLeft = 0;
		
		element.style.minWidth = "";
		element.style.minHeight = "";
		element.style.display = "";
		element.style.visibility = "";
	}
	
	renderRows() {
		var element = this.tableElement,
		onlyGroupHeaders = true,
		tableFrag = document.createDocumentFragment(),
		rows = this.rows();
		
		rows.forEach((row, index) => {
			this.styleRow(row, index);
			row.initialize(false, true);
			
			if (row.type !== "group") {
				onlyGroupHeaders = false;
			}
			
			tableFrag.appendChild(row.getElement());
		});
		
		element.appendChild(tableFrag);
		
		rows.forEach((row) => {
			row.rendered();
			
			if(!row.heightInitialized) {
				row.calcHeight(true);
			}
		});
		
		rows.forEach((row) => {
			if(!row.heightInitialized) {
				row.setCellHeight();
			}
		});
		
		if(onlyGroupHeaders){
			element.style.minWidth = this.table.columnManager.getWidth() + "px";
		}else {
			element.style.minWidth = "";
		}
	}
	
	
	rerenderRows(callback){	
		this.clearRows();
		
		if(callback){
			callback();
		}
		
		this.renderRows();

		if(!this.rows().length){
			this.table.rowManager.tableEmpty();
		}
	}
	
	scrollToRowNearestTop(row){
		var rowTop = Helpers.elOffset(row.getElement()).top;
		
		return !(Math.abs(this.elementVertical.scrollTop - rowTop) > Math.abs(this.elementVertical.scrollTop + this.elementVertical.clientHeight - rowTop));
	}
	
	scrollToRow(row){
		var rowEl = row.getElement();
		
		this.elementVertical.scrollTop = Helpers.elOffset(rowEl).top - Helpers.elOffset(this.elementVertical).top + this.elementVertical.scrollTop;
	}
	
	visibleRows(includingBuffer){
		return this.rows();
	}
	
}

class VirtualDomVertical extends Renderer{
	constructor(table){
		super(table);

		this.verticalFillMode = "fill";

		this.scrollTop = 0;
		this.scrollLeft = 0;

		this.vDomRowHeight = 20; //approximation of row heights for padding

		this.vDomTop = 0; //hold position for first rendered row in the virtual DOM
		this.vDomBottom = 0; //hold position for last rendered row in the virtual DOM

		this.vDomScrollPosTop = 0; //last scroll position of the vDom top;
		this.vDomScrollPosBottom = 0; //last scroll position of the vDom bottom;

		this.vDomTopPad = 0; //hold value of padding for top of virtual DOM
		this.vDomBottomPad = 0; //hold value of padding for bottom of virtual DOM

		this.vDomMaxRenderChain = 90; //the maximum number of dom elements that can be rendered in 1 go

		this.vDomWindowBuffer = 0; //window row buffer before removing elements, to smooth scrolling

		this.vDomWindowMinTotalRows = 20; //minimum number of rows to be generated in virtual dom (prevent buffering issues on tables with tall rows)
		this.vDomWindowMinMarginRows = 5; //minimum number of rows to be generated in virtual dom margin

		this.vDomTopNewRows = []; //rows to normalize after appending to optimize render speed
		this.vDomBottomNewRows = []; //rows to normalize after appending to optimize render speed
	}

	//////////////////////////////////////
	///////// Public Functions ///////////
	//////////////////////////////////////

	clearRows(){
		var element = this.tableElement;

		// element.children.detach();
		while(element.firstChild) element.removeChild(element.firstChild);

		element.style.paddingTop = "";
		element.style.paddingBottom = "";
		element.style.minHeight = "";
		element.style.display = "";
		element.style.visibility = "";

		this.elementVertical.scrollTop = 0;
		this.elementVertical.scrollLeft = 0;

		this.scrollTop = 0;
		this.scrollLeft = 0;

		this.vDomTop = 0;
		this.vDomBottom = 0;
		this.vDomTopPad = 0;
		this.vDomBottomPad = 0;
		this.vDomScrollPosTop = 0;
		this.vDomScrollPosBottom = 0;
	}

	renderRows(){
		this._virtualRenderFill();
	}

	rerenderRows(callback){
		var scrollTop = this.elementVertical.scrollTop;
		var topRow = false;
		var topOffset = false;

		var left = this.table.rowManager.scrollLeft;

		var rows = this.rows();

		for(var i = this.vDomTop; i <= this.vDomBottom; i++){

			if(rows[i]){
				var diff = scrollTop - rows[i].getElement().offsetTop;

				if(topOffset === false || Math.abs(diff) < topOffset){
					topOffset = diff;
					topRow = i;
				}else {
					break;
				}
			}
		}

		rows.forEach((row) => {
			row.deinitializeHeight();
		});

		if(callback){
			callback();
		}

		if(this.rows().length){
			this._virtualRenderFill((topRow === false ? this.rows.length - 1 : topRow), true, topOffset || 0);
		}else {
			this.clear();
			this.table.rowManager.tableEmpty();
		}

		this.scrollColumns(left);
	}

	scrollColumns(left){
		this.table.rowManager.scrollHorizontal(left);
	}

	scrollRows(top, dir){
		var topDiff = top - this.vDomScrollPosTop;
		var bottomDiff = top - this.vDomScrollPosBottom;
		var margin = this.vDomWindowBuffer * 2;
		var rows = this.rows();

		this.scrollTop = top;

		if(-topDiff > margin || bottomDiff > margin){
			//if big scroll redraw table;
			var left = this.table.rowManager.scrollLeft;
			this._virtualRenderFill(Math.floor((this.elementVertical.scrollTop / this.elementVertical.scrollHeight) * rows.length));
			this.scrollColumns(left);
		}else {

			if(dir){
				//scrolling up
				if(topDiff < 0){
					this._addTopRow(rows, -topDiff);
				}

				if(bottomDiff < 0){
					//hide bottom row if needed
					if(this.vDomScrollHeight - this.scrollTop > this.vDomWindowBuffer){
						this._removeBottomRow(rows, -bottomDiff);
					}else {
						this.vDomScrollPosBottom = this.scrollTop;
					}
				}
			}else {

				if(bottomDiff >= 0){
					this._addBottomRow(rows, bottomDiff);
				}

				//scrolling down
				if(topDiff >= 0){
					//hide top row if needed
					if(this.scrollTop > this.vDomWindowBuffer){
						this._removeTopRow(rows, topDiff);
					}else {
						this.vDomScrollPosTop = this.scrollTop;
					}
				}
			}
		}
	}

	resize(){
		this.vDomWindowBuffer = this.table.options.renderVerticalBuffer || this.elementVertical.clientHeight;
	}

	scrollToRowNearestTop(row){
		var rowIndex = this.rows().indexOf(row);

		return !(Math.abs(this.vDomTop - rowIndex) > Math.abs(this.vDomBottom - rowIndex));
	}

	scrollToRow(row){
		var index = this.rows().indexOf(row);

		if(index > -1){
			this._virtualRenderFill(index, true);
		}
	}

	visibleRows(includingBuffer){
		var topEdge = this.elementVertical.scrollTop,
		bottomEdge = this.elementVertical.clientHeight + topEdge,
		topFound = false,
		topRow = 0,
		bottomRow = 0,
		rows = this.rows();

		if(includingBuffer){
			topRow = this.vDomTop;
			bottomRow = this.vDomBottom;
		}else {
			for(var i = this.vDomTop; i <= this.vDomBottom; i++){
				if(rows[i]){
					if(!topFound){
						if((topEdge - rows[i].getElement().offsetTop) >= 0){
							topRow = i;
						}else {
							topFound = true;

							if(bottomEdge - rows[i].getElement().offsetTop >= 0){
								bottomRow = i;
							}else {
								break;
							}
						}
					}else {
						if(bottomEdge - rows[i].getElement().offsetTop >= 0){
							bottomRow = i;
						}else {
							break;
						}
					}
				}
			}
		}

		return rows.slice(topRow, bottomRow + 1);
	}

	//////////////////////////////////////
	//////// Internal Rendering //////////
	//////////////////////////////////////

	//full virtual render
	_virtualRenderFill(position, forceMove, offset) {
		var	element = this.tableElement,
		holder = this.elementVertical,
		topPad = 0,
		rowsHeight = 0,
		rowHeight = 0,
		heightOccupied = 0,
		topPadHeight = 0,
		i = 0,
		rows = this.rows(),
		rowsCount = rows.length,
		index = 0,
		row,
		rowFragment,
		renderedRows = [],
		totalRowsRendered = 0,
		rowsToRender = 0,
		fixedHeight = this.table.rowManager.fixedHeight,
		containerHeight = this.elementVertical.clientHeight, 
		avgRowHeight = this.table.options.rowHeight, 
		resized = true;

		position = position || 0;

		offset = offset || 0;

		if(!position){
			this.clear();
		}else {
			while(element.firstChild) element.removeChild(element.firstChild);

			//check if position is too close to bottom of table
			heightOccupied = (rowsCount - position + 1) * this.vDomRowHeight;

			if(heightOccupied < containerHeight){
				position -= Math.ceil((containerHeight - heightOccupied) / this.vDomRowHeight);
				if(position < 0){
					position = 0;
				}
			}

			//calculate initial pad
			topPad = Math.min(Math.max(Math.floor(this.vDomWindowBuffer / this.vDomRowHeight),  this.vDomWindowMinMarginRows), position);
			position -= topPad;
		}

		if(rowsCount && Helpers.elVisible(this.elementVertical)){
			this.vDomTop = position;
			this.vDomBottom = position -1;

			if(fixedHeight || this.table.options.maxHeight) {
				if(avgRowHeight) {
					rowsToRender = (containerHeight / avgRowHeight) + (this.vDomWindowBuffer / avgRowHeight);
				}
				rowsToRender = Math.max(this.vDomWindowMinTotalRows, Math.ceil(rowsToRender));
			}
			else {
				rowsToRender = rowsCount;
			}

			while(((rowsToRender == rowsCount || rowsHeight <= containerHeight + this.vDomWindowBuffer) || totalRowsRendered < this.vDomWindowMinTotalRows) && this.vDomBottom < rowsCount -1) {
				renderedRows = [];
				rowFragment = document.createDocumentFragment();

				i = 0;

				while ((i < rowsToRender) && this.vDomBottom < rowsCount -1) {	
					index = this.vDomBottom + 1,
					row = rows[index];

					this.styleRow(row, index);

					row.initialize(false, true);
					if(!row.heightInitialized && !this.table.options.rowHeight){
						row.clearCellHeight();
					}

					rowFragment.appendChild(row.getElement());
					renderedRows.push(row);
					this.vDomBottom ++;
					i++;
				}

				if(!renderedRows.length){
					break;
				}

				element.appendChild(rowFragment);
				
				// NOTE: The next 3 loops are separate on purpose
				// This is to batch up the dom writes and reads which drastically improves performance 

				renderedRows.forEach((row) => {
					row.rendered();

					if(!row.heightInitialized) {
						row.calcHeight(true);
					}
				});

				renderedRows.forEach((row) => {
					if(!row.heightInitialized) {
						row.setCellHeight();
					}
				});

				renderedRows.forEach((row) => {
					rowHeight = row.getHeight();
					
					if(totalRowsRendered < topPad){
						topPadHeight += rowHeight;
					}else {
						rowsHeight += rowHeight;
					}

					if(rowHeight > this.vDomWindowBuffer){
						this.vDomWindowBuffer = rowHeight * 2;
					}
					totalRowsRendered++;
				});

				resized = this.table.rowManager.adjustTableSize();
				containerHeight = this.elementVertical.clientHeight;
				if(resized && (fixedHeight || this.table.options.maxHeight))
				{
					avgRowHeight = rowsHeight / totalRowsRendered;
					rowsToRender = Math.max(this.vDomWindowMinTotalRows, Math.ceil((containerHeight / avgRowHeight) + (this.vDomWindowBuffer / avgRowHeight)));
				}
			}

			if(!position){
				this.vDomTopPad = 0;
				//adjust row height to match average of rendered elements
				this.vDomRowHeight = Math.floor((rowsHeight + topPadHeight) / totalRowsRendered);
				this.vDomBottomPad = this.vDomRowHeight * (rowsCount - this.vDomBottom -1);

				this.vDomScrollHeight = topPadHeight + rowsHeight + this.vDomBottomPad - containerHeight;
			}else {
				this.vDomTopPad = !forceMove ? this.scrollTop - topPadHeight : (this.vDomRowHeight * this.vDomTop) + offset;
				this.vDomBottomPad = this.vDomBottom == rowsCount-1 ? 0 : Math.max(this.vDomScrollHeight - this.vDomTopPad - rowsHeight - topPadHeight, 0);
			}
			
			element.style.paddingTop = this.vDomTopPad+"px";
			element.style.paddingBottom = this.vDomBottomPad+"px";

			if(forceMove){
				this.scrollTop = this.vDomTopPad + (topPadHeight) + offset - (this.elementVertical.scrollWidth > this.elementVertical.clientWidth ? this.elementVertical.offsetHeight - containerHeight : 0);
			}

			this.scrollTop = Math.min(this.scrollTop, this.elementVertical.scrollHeight - containerHeight);

			//adjust for horizontal scrollbar if present (and not at top of table)
			if(this.elementVertical.scrollWidth > this.elementVertical.clientWidth && forceMove){
				this.scrollTop += this.elementVertical.offsetHeight - containerHeight;
			}

			this.vDomScrollPosTop = this.scrollTop;
			this.vDomScrollPosBottom = this.scrollTop;

			holder.scrollTop = this.scrollTop;

			this.dispatch("render-virtual-fill");
		}
	}

	_addTopRow(rows, fillableSpace){
		var table = this.tableElement,
		addedRows = [],
		paddingAdjust = 0,
		index = this.vDomTop -1,
		i = 0,
		working = true;

		while(working){
			if(this.vDomTop){
				let row = rows[index],
				rowHeight, initialized;

				if(row && i < this.vDomMaxRenderChain){
					rowHeight = row.getHeight() || this.vDomRowHeight;
					initialized = row.initialized;

					if(fillableSpace >= rowHeight){

						this.styleRow(row, index);
						table.insertBefore(row.getElement(), table.firstChild);

						if(!row.initialized || !row.heightInitialized){
							addedRows.push(row);
						}

						row.initialize();

						if(!initialized){
							rowHeight = row.getElement().offsetHeight;

							if(rowHeight > this.vDomWindowBuffer){
								this.vDomWindowBuffer = rowHeight * 2;
							}
						}

						fillableSpace -= rowHeight;
						paddingAdjust += rowHeight;

						this.vDomTop--;
						index--;
						i++;

					}else {
						working = false;
					}

				}else {
					working = false;
				}

			}else {
				working = false;
			}
		}

		for (let row of addedRows){
			row.clearCellHeight();
		}

		this._quickNormalizeRowHeight(addedRows);

		if(paddingAdjust){
			this.vDomTopPad -= paddingAdjust;

			if(this.vDomTopPad < 0){
				this.vDomTopPad = index * this.vDomRowHeight;
			}

			if(index < 1){
				this.vDomTopPad = 0;
			}

			table.style.paddingTop = this.vDomTopPad + "px";
			this.vDomScrollPosTop -= paddingAdjust;
		}
	}

	_removeTopRow(rows, fillableSpace){
		var removableRows = [],
		paddingAdjust = 0,
		i = 0,
		working = true;

		while(working){
			let row = rows[this.vDomTop],
			rowHeight;

			if(row && i < this.vDomMaxRenderChain){
				rowHeight = row.getHeight() || this.vDomRowHeight;

				if(fillableSpace >= rowHeight){
					this.vDomTop++;

					fillableSpace -= rowHeight;
					paddingAdjust += rowHeight;

					removableRows.push(row);
					i++;
				}else {
					working = false;
				}
			}else {
				working = false;
			}
		}

		for (let row of removableRows){
			let rowEl = row.getElement();

			if(rowEl.parentNode){
				rowEl.parentNode.removeChild(rowEl);
			}
		}

		if(paddingAdjust){
			this.vDomTopPad += paddingAdjust;
			this.tableElement.style.paddingTop = this.vDomTopPad + "px";
			this.vDomScrollPosTop += this.vDomTop ? paddingAdjust : paddingAdjust + this.vDomWindowBuffer;
		}
	}

	_addBottomRow(rows, fillableSpace){
		var table = this.tableElement,
		addedRows = [],
		paddingAdjust = 0,
		index = this.vDomBottom + 1,
		i = 0,
		working = true;

		while(working){
			let row = rows[index],
			rowHeight, initialized;

			if(row && i < this.vDomMaxRenderChain){
				rowHeight = row.getHeight() || this.vDomRowHeight;
				initialized = row.initialized;

				if(fillableSpace >= rowHeight){

					this.styleRow(row, index);
					table.appendChild(row.getElement());

					if(!row.initialized || !row.heightInitialized){
						addedRows.push(row);
					}

					row.initialize();

					if(!initialized){
						rowHeight = row.getElement().offsetHeight;

						if(rowHeight > this.vDomWindowBuffer){
							this.vDomWindowBuffer = rowHeight * 2;
						}
					}

					fillableSpace -= rowHeight;
					paddingAdjust += rowHeight;

					this.vDomBottom++;
					index++;
					i++;
				}else {
					working = false;
				}
			}else {
				working = false;
			}
		}

		for (let row of addedRows){
			row.clearCellHeight();
		}

		this._quickNormalizeRowHeight(addedRows);

		if(paddingAdjust){
			this.vDomBottomPad -= paddingAdjust;

			if(this.vDomBottomPad < 0 || index == rows.length -1){
				this.vDomBottomPad = 0;
			}

			table.style.paddingBottom = this.vDomBottomPad + "px";
			this.vDomScrollPosBottom += paddingAdjust;
		}
	}

	_removeBottomRow(rows, fillableSpace){
		var removableRows = [],
		paddingAdjust = 0,
		i = 0,
		working = true;

		while(working){
			let row = rows[this.vDomBottom],
			rowHeight;

			if(row && i < this.vDomMaxRenderChain){
				rowHeight = row.getHeight() || this.vDomRowHeight;

				if(fillableSpace >= rowHeight){
					this.vDomBottom --;

					fillableSpace -= rowHeight;
					paddingAdjust += rowHeight;

					removableRows.push(row);
					i++;
				}else {
					working = false;
				}
			}else {
				working = false;
			}
		}

		for (let row of removableRows){
			let rowEl = row.getElement();

			if(rowEl.parentNode){
				rowEl.parentNode.removeChild(rowEl);
			}
		}

		if(paddingAdjust){
			this.vDomBottomPad += paddingAdjust;

			if(this.vDomBottomPad < 0){
				this.vDomBottomPad = 0;
			}

			this.tableElement.style.paddingBottom = this.vDomBottomPad + "px";
			this.vDomScrollPosBottom -= paddingAdjust;
		}
	}

	_quickNormalizeRowHeight(rows){
		for(let row of rows){
			row.calcHeight();
		}

		for(let row of rows){
			row.setCellHeight();
		}
	}
}

class RowManager extends CoreFeature{
	
	constructor(table){
		super(table);
		
		this.element = this.createHolderElement(); //containing element
		this.tableElement = this.createTableElement(); //table element
		this.heightFixer = this.createTableElement(); //table element
		this.placeholder = null; //placeholder element
		this.placeholderContents = null; //placeholder element
		
		this.firstRender = false; //handle first render
		this.renderMode = "virtual"; //current rendering mode
		this.fixedHeight = false; //current rendering mode
		
		this.rows = []; //hold row data objects
		this.activeRowsPipeline = []; //hold calculation of active rows
		this.activeRows = []; //rows currently available to on display in the table
		this.activeRowsCount = 0; //count of active rows
		
		this.displayRows = []; //rows currently on display in the table
		this.displayRowsCount = 0; //count of display rows
		
		this.scrollTop = 0;
		this.scrollLeft = 0;
		
		this.redrawBlock = false; //prevent redraws to allow multiple data manipulations before continuing
		this.redrawBlockRestoreConfig = false; //store latest redraw function calls for when redraw is needed
		this.redrawBlockRenderInPosition = false; //store latest redraw function calls for when redraw is needed
		
		this.dataPipeline = []; //hold data pipeline tasks
		this.displayPipeline = []; //hold data display pipeline tasks
		
		this.scrollbarWidth = 0;
		
		this.renderer = null;
	}
	
	//////////////// Setup Functions /////////////////
	
	createHolderElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-tableholder");
		el.setAttribute("tabindex", 0);
		// el.setAttribute("role", "rowgroup");
		
		return el;
	}
	
	createTableElement (){
		var el = document.createElement("div");
		
		el.classList.add("tabulator-table");
		el.setAttribute("role", "rowgroup");
		
		return el;
	}
	
	initializePlaceholder(){
		var placeholder = this.table.options.placeholder;
		
		if(typeof placeholder === "function"){
			placeholder = placeholder.call(this.table);
		}
		
		placeholder = this.chain("placeholder", [placeholder], placeholder, placeholder) || placeholder;
		
		//configure placeholder element
		if(placeholder){	
			let el = document.createElement("div");
			el.classList.add("tabulator-placeholder");
			
			if(typeof placeholder == "string"){
				let contents = document.createElement("div");
				contents.classList.add("tabulator-placeholder-contents");
				contents.innerHTML = placeholder;
				
				el.appendChild(contents);
				
				this.placeholderContents = contents;
				
			}else if(typeof HTMLElement !== "undefined" && placeholder instanceof HTMLElement){
				
				el.appendChild(placeholder);
				this.placeholderContents = placeholder;
			}else {
				console.warn("Invalid placeholder provided, must be string or HTML Element", placeholder);
				
				this.el = null;
			}
			
			this.placeholder = el;
		}
	}
	
	//return containing element
	getElement(){
		return this.element;
	}
	
	//return table element
	getTableElement(){
		return this.tableElement;
	}
	
	initialize(){
		this.initializePlaceholder();
		this.initializeRenderer();
		
		//initialize manager
		this.element.appendChild(this.tableElement);
		
		this.firstRender = true;
		
		//scroll header along with table body
		this.element.addEventListener("scroll", () => {
			var left = this.element.scrollLeft,
			leftDir = this.scrollLeft > left,
			top = this.element.scrollTop,
			topDir = this.scrollTop > top;
			
			//handle horizontal scrolling
			if(this.scrollLeft != left){
				this.scrollLeft = left;
				
				this.dispatch("scroll-horizontal", left, leftDir);
				this.dispatchExternal("scrollHorizontal", left, leftDir);
				
				this._positionPlaceholder();
			}
			
			//handle vertical scrolling
			if(this.scrollTop != top){
				this.scrollTop = top;
				
				this.renderer.scrollRows(top, topDir);
				
				this.dispatch("scroll-vertical", top, topDir);
				this.dispatchExternal("scrollVertical", top, topDir);
			}
		});
	}
	
	////////////////// Row Manipulation //////////////////
	findRow(subject){
		if(typeof subject == "object"){
			if(subject instanceof Row){
				//subject is row element
				return subject;
			}else if(subject instanceof RowComponent){
				//subject is public row component
				return subject._getSelf() || false;
			}else if(typeof HTMLElement !== "undefined" && subject instanceof HTMLElement){
				//subject is a HTML element of the row
				let match = this.rows.find((row) => {
					return row.getElement() === subject;
				});
				
				return match || false;
			}else if(subject === null){
				return false;
			}
		}else if(typeof subject == "undefined"){
			return false;
		}else {
			//subject should be treated as the index of the row
			let match = this.rows.find((row) => {
				return row.data[this.table.options.index] == subject;
			});
			
			return match || false;
		}
		
		//catch all for any other type of input
		return false;
	}
	
	getRowFromDataObject(data){
		var match = this.rows.find((row) => {
			return row.data === data;
		});
		
		return match || false;
	}
	
	getRowFromPosition(position){
		return this.getDisplayRows().find((row) => {
			return row.type === "row" && row.getPosition() === position && row.isDisplayed();
		});
	}
	
	scrollToRow(row, position, ifVisible){
		return this.renderer.scrollToRowPosition(row, position, ifVisible);
	}
	
	////////////////// Data Handling //////////////////
	setData(data, renderInPosition, columnsChanged){
		return new Promise((resolve, reject)=>{
			if(renderInPosition && this.getDisplayRows().length){
				if(this.table.options.pagination){
					this._setDataActual(data, true);
				}else {
					this.reRenderInPosition(() => {
						this._setDataActual(data);
					});
				}
			}else {
				if(this.table.options.autoColumns && columnsChanged && this.table.initialized){
					this.table.columnManager.generateColumnsFromRowData(data);
				}
				this.resetScroll();
				
				this._setDataActual(data);
			}
			
			resolve();
		});
	}
	
	_setDataActual(data, renderInPosition){
		this.dispatchExternal("dataProcessing", data);
		
		this._wipeElements();
		
		if(Array.isArray(data)){
			this.dispatch("data-processing", data);
			
			data.forEach((def, i) => {
				if(def && typeof def === "object"){
					var row = new Row(def, this);
					this.rows.push(row);
				}else {
					console.warn("Data Loading Warning - Invalid row data detected and ignored, expecting object but received:", def);
				}
			});
			
			this.refreshActiveData(false, false, renderInPosition);
			
			this.dispatch("data-processed", data);
			this.dispatchExternal("dataProcessed", data);
		}else {
			console.error("Data Loading Error - Unable to process data due to invalid data type \nExpecting: array \nReceived: ", typeof data, "\nData:     ", data);
		}
	}
	
	_wipeElements(){
		this.dispatch("rows-wipe");
		
		this.destroy();
		
		this.adjustTableSize();
		
		this.dispatch("rows-wiped");
	}
	
	destroy(){
		this.rows.forEach((row) => {
			row.wipe();
		});
		
		this.rows = [];
		this.activeRows = [];
		this.activeRowsPipeline = [];
		this.activeRowsCount = 0;
		this.displayRows = [];
		this.displayRowsCount = 0;
	}
	
	deleteRow(row, blockRedraw){
		var allIndex = this.rows.indexOf(row),
		activeIndex = this.activeRows.indexOf(row);
		
		if(activeIndex > -1){
			this.activeRows.splice(activeIndex, 1);
		}
		
		if(allIndex > -1){
			this.rows.splice(allIndex, 1);
		}
		
		this.setActiveRows(this.activeRows);
		
		this.displayRowIterator((rows) => {
			var displayIndex = rows.indexOf(row);
			
			if(displayIndex > -1){
				rows.splice(displayIndex, 1);
			}
		});
		
		if(!blockRedraw){
			this.reRenderInPosition();
		}
		
		this.regenerateRowPositions();
		
		this.dispatchExternal("rowDeleted", row.getComponent());
		
		if(!this.displayRowsCount){
			this.tableEmpty();
		}
		
		if(this.subscribedExternal("dataChanged")){
			this.dispatchExternal("dataChanged", this.getData());
		}
	}
	
	addRow(data, pos, index, blockRedraw){
		var row = this.addRowActual(data, pos, index, blockRedraw);
		return row;
	}
	
	//add multiple rows
	addRows(data, pos, index, refreshDisplayOnly){
		var rows = [];
		
		return new Promise((resolve, reject) => {
			pos = this.findAddRowPos(pos);
			
			if(!Array.isArray(data)){
				data = [data];
			}
			
			if((typeof index == "undefined" && pos) || (typeof index !== "undefined" && !pos)){
				data.reverse();
			}
			
			data.forEach((item, i) => {
				var row = this.addRow(item, pos, index, true);
				rows.push(row);
				this.dispatch("row-added", row, item, pos, index);
			});
			
			this.refreshActiveData(refreshDisplayOnly ? "displayPipeline" : false, false, true);
			
			this.regenerateRowPositions();
			
			if(this.displayRowsCount){
				this._clearPlaceholder();
			}
			
			resolve(rows);
		});
	}
	
	findAddRowPos(pos){
		if(typeof pos === "undefined"){
			pos = this.table.options.addRowPos;
		}
		
		if(pos === "pos"){
			pos = true;
		}
		
		if(pos === "bottom"){
			pos = false;
		}
		
		return pos;
	}
	
	addRowActual(data, pos, index, blockRedraw){
		var row = data instanceof Row ? data : new Row(data || {}, this),
		top = this.findAddRowPos(pos),
		allIndex = -1,
		activeIndex, chainResult;
		
		if(!index){
			chainResult = this.chain("row-adding-position", [row, top], null, {index, top});
			
			index = chainResult.index;
			top = chainResult.top;
		}
		
		if(typeof index !== "undefined"){
			index = this.findRow(index);
		}
		
		index = this.chain("row-adding-index", [row, index, top], null, index);
		
		if(index){
			allIndex = this.rows.indexOf(index);
		}
		
		if(index && allIndex > -1){
			activeIndex = this.activeRows.indexOf(index);
			
			this.displayRowIterator(function(rows){
				var displayIndex = rows.indexOf(index);
				
				if(displayIndex > -1){
					rows.splice((top ? displayIndex : displayIndex + 1), 0, row);
				}
			});
			
			if(activeIndex > -1){
				this.activeRows.splice((top ? activeIndex : activeIndex + 1), 0, row);
			}
			
			this.rows.splice((top ? allIndex : allIndex + 1), 0, row);
			
		}else {
			
			if(top){
				
				this.displayRowIterator(function(rows){
					rows.unshift(row);
				});
				
				this.activeRows.unshift(row);
				this.rows.unshift(row);
			}else {
				this.displayRowIterator(function(rows){
					rows.push(row);
				});
				
				this.activeRows.push(row);
				this.rows.push(row);
			}
		}
		
		this.setActiveRows(this.activeRows);
		
		this.dispatchExternal("rowAdded", row.getComponent());
		
		if(this.subscribedExternal("dataChanged")){
			this.dispatchExternal("dataChanged", this.table.rowManager.getData());
		}
		
		if(!blockRedraw){
			this.reRenderInPosition();
		}
		
		return row;
	}
	
	moveRow(from, to, after){
		this.dispatch("row-move", from, to, after);
		
		this.moveRowActual(from, to, after);
		
		this.regenerateRowPositions();
		
		this.dispatch("row-moved", from, to, after);
		this.dispatchExternal("rowMoved", from.getComponent());
	}
	
	moveRowActual(from, to, after){
		this.moveRowInArray(this.rows, from, to, after);
		this.moveRowInArray(this.activeRows, from, to, after);
		
		this.displayRowIterator((rows) => {
			this.moveRowInArray(rows, from, to, after);
		});
		
		this.dispatch("row-moving", from, to, after);
	}
	
	moveRowInArray(rows, from, to, after){
		var	fromIndex, toIndex, start, end;
		
		if(from !== to){
			
			fromIndex = rows.indexOf(from);
			
			if (fromIndex > -1) {
				
				rows.splice(fromIndex, 1);
				
				toIndex = rows.indexOf(to);
				
				if (toIndex > -1) {
					
					if(after){
						rows.splice(toIndex+1, 0, from);
					}else {
						rows.splice(toIndex, 0, from);
					}
					
				}else {
					rows.splice(fromIndex, 0, from);
				}
			}
			
			//restyle rows
			if(rows === this.getDisplayRows()){
				
				start = fromIndex < toIndex ? fromIndex : toIndex;
				end = toIndex > fromIndex ? toIndex : fromIndex +1;
				
				for(let i = start; i <= end; i++){
					if(rows[i]){
						this.styleRow(rows[i], i);
					}
				}
			}
		}
	}
	
	clearData(){
		this.setData([]);
	}
	
	getRowIndex(row){
		return this.findRowIndex(row, this.rows);
	}
	
	getDisplayRowIndex(row){
		var index = this.getDisplayRows().indexOf(row);
		return index > -1 ? index : false;
	}
	
	nextDisplayRow(row, rowOnly){
		var index = this.getDisplayRowIndex(row),
		nextRow = false;
		
		
		if(index !== false && index < this.displayRowsCount -1){
			nextRow = this.getDisplayRows()[index+1];
		}
		
		if(nextRow && (!(nextRow instanceof Row) || nextRow.type != "row")){
			return this.nextDisplayRow(nextRow, rowOnly);
		}
		
		return nextRow;
	}
	
	prevDisplayRow(row, rowOnly){
		var index = this.getDisplayRowIndex(row),
		prevRow = false;
		
		if(index){
			prevRow = this.getDisplayRows()[index-1];
		}
		
		if(rowOnly && prevRow && (!(prevRow instanceof Row) || prevRow.type != "row")){
			return this.prevDisplayRow(prevRow, rowOnly);
		}
		
		return prevRow;
	}
	
	findRowIndex(row, list){
		var rowIndex;
		
		row = this.findRow(row);
		
		if(row){
			rowIndex = list.indexOf(row);
			
			if(rowIndex > -1){
				return rowIndex;
			}
		}
		
		return false;
	}
	
	getData(active, transform){
		var output = [],
		rows = this.getRows(active);
		
		rows.forEach(function(row){
			if(row.type == "row"){
				output.push(row.getData(transform || "data"));
			}
		});
		
		return output;
	}
	
	getComponents(active){
		var	output = [],
		rows = this.getRows(active);
		
		rows.forEach(function(row){
			output.push(row.getComponent());
		});
		
		return output;
	}
	
	getDataCount(active){
		var rows = this.getRows(active);
		
		return rows.length;
	}
	
	scrollHorizontal(left){
		this.scrollLeft = left;
		this.element.scrollLeft = left;
		
		this.dispatch("scroll-horizontal", left);
	}
	
	registerDataPipelineHandler(handler, priority){
		if(typeof priority !== "undefined"){
			this.dataPipeline.push({handler, priority});
			this.dataPipeline.sort((a, b) => {
				return a.priority - b.priority;
			});
		}else {
			console.error("Data pipeline handlers must have a priority in order to be registered");
		}
	}
	
	registerDisplayPipelineHandler(handler, priority){
		if(typeof priority !== "undefined"){
			this.displayPipeline.push({handler, priority});
			this.displayPipeline.sort((a, b) => {
				return a.priority - b.priority;
			});
		}else {
			console.error("Display pipeline handlers must have a priority in order to be registered");
		}
	}
	
	//set active data set
	refreshActiveData(handler, skipStage, renderInPosition){
		var table = this.table,
		stage = "",
		index = 0,
		cascadeOrder = ["all", "dataPipeline", "display", "displayPipeline", "end"];
		
		if(!this.table.destroyed){
			if(typeof handler === "function"){
				index = this.dataPipeline.findIndex((item) => {
					return item.handler === handler;
				});
				
				if(index > -1){
					stage = "dataPipeline";
					
					if(skipStage){
						if(index == this.dataPipeline.length - 1){
							stage = "display";
						}else {
							index++;
						}
					}
				}else {
					index = this.displayPipeline.findIndex((item) => {
						return item.handler === handler;
					});
					
					if(index > -1){
						stage = "displayPipeline";
						
						if(skipStage){
							if(index == this.displayPipeline.length - 1){
								stage = "end";
							}else {
								index++;
							}
						}
					}else {
						console.error("Unable to refresh data, invalid handler provided", handler);
						return;
					}
				}
			}else {
				stage = handler || "all";
				index = 0;
			}
			
			if(this.redrawBlock){
				if(!this.redrawBlockRestoreConfig || (this.redrawBlockRestoreConfig && ((this.redrawBlockRestoreConfig.stage === stage && index < this.redrawBlockRestoreConfig.index) || (cascadeOrder.indexOf(stage) < cascadeOrder.indexOf(this.redrawBlockRestoreConfig.stage))))){
					this.redrawBlockRestoreConfig = {
						handler: handler,
						skipStage: skipStage,
						renderInPosition: renderInPosition,
						stage:stage,
						index:index,
					};
				}
				
				return;
			}else {
				if(Helpers.elVisible(this.element)){
					if(renderInPosition){
						this.reRenderInPosition(this.refreshPipelines.bind(this, handler, stage, index, renderInPosition));
					}else {
						this.refreshPipelines(handler, stage, index, renderInPosition);
						
						if(!handler){
							this.table.columnManager.renderer.renderColumns();
						}
						
						this.renderTable();
						
						if(table.options.layoutColumnsOnNewData){
							this.table.columnManager.redraw(true);
						}
					}
				}else {
					this.refreshPipelines(handler, stage, index, renderInPosition);
				}
				
				this.dispatch("data-refreshed");
			}
		}
	}
	
	refreshPipelines(handler, stage, index, renderInPosition){
		this.dispatch("data-refreshing");
		
		if(!handler || !this.activeRowsPipeline[0]){
			this.activeRowsPipeline[0] = this.rows.slice(0);
		}
		
		//cascade through data refresh stages
		switch(stage){
			case "all":
			//handle case where all data needs refreshing
			
			case "dataPipeline":
				for(let i = index; i < this.dataPipeline.length; i++){
					let result = this.dataPipeline[i].handler(this.activeRowsPipeline[i].slice(0));
				
					this.activeRowsPipeline[i + 1] = result || this.activeRowsPipeline[i].slice(0);
				}
			
				this.setActiveRows(this.activeRowsPipeline[this.dataPipeline.length]);
			
			case "display":
				index = 0;
				this.resetDisplayRows();
			
			case "displayPipeline":
				for(let i = index; i < this.displayPipeline.length; i++){
					let result = this.displayPipeline[i].handler((i ? this.getDisplayRows(i - 1) : this.activeRows).slice(0), renderInPosition);
				
					this.setDisplayRows(result || this.getDisplayRows(i - 1).slice(0), i);
				}
			
			case "end":
			//case to handle scenario when trying to skip past end stage
				this.regenerateRowPositions();
		}
		
		if(this.getDisplayRows().length){
			this._clearPlaceholder();
		}
	}
	
	//regenerate row positions
	regenerateRowPositions(){
		var rows = this.getDisplayRows();
		var index = 1;
		
		rows.forEach((row) => {
			if (row.type === "row"){
				row.setPosition(index);
				index++;
			}
		});
	}
	
	setActiveRows(activeRows){
		this.activeRows = this.activeRows = Object.assign([], activeRows);
		this.activeRowsCount = this.activeRows.length;
	}
	
	//reset display rows array
	resetDisplayRows(){
		this.displayRows = [];
		
		this.displayRows.push(this.activeRows.slice(0));
		
		this.displayRowsCount = this.displayRows[0].length;
	}
	
	//set display row pipeline data
	setDisplayRows(displayRows, index){
		this.displayRows[index] = displayRows;
		
		if(index == this.displayRows.length -1){
			this.displayRowsCount = this.displayRows[this.displayRows.length -1].length;
		}
	}
	
	getDisplayRows(index){
		if(typeof index == "undefined"){
			return this.displayRows.length ? this.displayRows[this.displayRows.length -1] : [];
		}else {
			return this.displayRows[index] || [];
		}
	}
	
	getVisibleRows(chain, viewable){
		var rows =  Object.assign([], this.renderer.visibleRows(!viewable));
		
		if(chain){
			rows = this.chain("rows-visible", [viewable], rows, rows);
		}
		
		return rows;
	}
	
	//repeat action across display rows
	displayRowIterator(callback){
		this.activeRowsPipeline.forEach(callback);
		this.displayRows.forEach(callback);
		
		this.displayRowsCount = this.displayRows[this.displayRows.length -1].length;
	}
	
	//return only actual rows (not group headers etc)
	getRows(type){
		var rows = [];
		
		switch(type){
			case "active":
				rows = this.activeRows;
				break;
			
			case "display":
				rows = this.table.rowManager.getDisplayRows();
				break;
			
			case "visible":
				rows = this.getVisibleRows(false, true);
				break;
			
			default:
				rows = this.chain("rows-retrieve", type, null, this.rows) || this.rows;
		}
		
		return rows;
	}
	
	///////////////// Table Rendering /////////////////
	//trigger rerender of table in current position
	reRenderInPosition(callback){
		if(this.redrawBlock){
			if(callback){
				callback();
			}else {
				this.redrawBlockRenderInPosition = true;
			}
		}else {
			this.dispatchExternal("renderStarted");
			
			this.renderer.rerenderRows(callback);
			
			if(!this.fixedHeight){
				this.adjustTableSize();
			}
			
			this.scrollBarCheck();
			
			this.dispatchExternal("renderComplete");
		}
	}
	
	scrollBarCheck(){
		var scrollbarWidth = 0;
		
		//adjust for vertical scrollbar moving table when present
		if(this.element.scrollHeight > this.element.clientHeight){
			scrollbarWidth = this.element.offsetWidth - this.element.clientWidth;
		}
		
		if(scrollbarWidth !== this.scrollbarWidth){
			this.scrollbarWidth = scrollbarWidth;
			this.dispatch("scrollbar-vertical", scrollbarWidth);
		}
	}
	
	initializeRenderer(){
		var renderClass;
		
		var renderers = {
			"virtual": VirtualDomVertical,
			"basic": BasicVertical,
		};
		
		if(typeof this.table.options.renderVertical === "string"){
			renderClass = renderers[this.table.options.renderVertical];
		}else {
			renderClass = this.table.options.renderVertical;
		}
		
		if(renderClass){
			this.renderMode = this.table.options.renderVertical;
			
			this.renderer = new renderClass(this.table, this.element, this.tableElement);
			this.renderer.initialize();
			
			if((this.table.element.clientHeight || this.table.options.height) && !(this.table.options.minHeight && this.table.options.maxHeight)){
				this.fixedHeight = true;
			}else {
				this.fixedHeight = false;
			}
		}else {
			console.error("Unable to find matching renderer:", this.table.options.renderVertical);
		}
	}
	
	getRenderMode(){
		return this.renderMode;
	}
	
	renderTable(){
		this.dispatchExternal("renderStarted");
		
		this.element.scrollTop = 0;
		
		this._clearTable();
		
		if(this.displayRowsCount){
			this.renderer.renderRows();
			
			if(this.firstRender){
				this.firstRender = false;
				
				if(!this.fixedHeight){
					this.adjustTableSize();
				}
				
				this.layoutRefresh(true);
			}
		}else {
			this.renderEmptyScroll();
		}
		
		if(!this.fixedHeight){
			this.adjustTableSize();
		}
		
		this.dispatch("table-layout");
		
		if(!this.displayRowsCount){
			this._showPlaceholder();
		}
		
		this.scrollBarCheck();
		
		this.dispatchExternal("renderComplete");
	}
	
	//show scrollbars on empty table div
	renderEmptyScroll(){
		if(this.placeholder){
			this.tableElement.style.display = "none";
		}else {
			this.tableElement.style.minWidth = this.table.columnManager.getWidth() + "px";
			// this.tableElement.style.minHeight = "1px";
			// this.tableElement.style.visibility = "hidden";
		}
	}
	
	_clearTable(){	
		this._clearPlaceholder();
		
		this.scrollTop = 0;
		this.scrollLeft = 0;
		
		this.renderer.clearRows();
	}
	
	tableEmpty(){
		this.renderEmptyScroll();
		this._showPlaceholder();
	}

	checkPlaceholder(){
		if(this.displayRowsCount){
			this._clearPlaceholder();
		}else {
			this.tableEmpty();
		}
	}
	
	_showPlaceholder(){
		if(this.placeholder){
			if(this.placeholder && this.placeholder.parentNode){
				this.placeholder.parentNode.removeChild(this.placeholder);
			}
			
			this.initializePlaceholder();
			
			this.placeholder.setAttribute("tabulator-render-mode", this.renderMode);
			
			this.getElement().appendChild(this.placeholder);
			this._positionPlaceholder();

			this.adjustTableSize();
		}
	}
	
	_clearPlaceholder(){
		if(this.placeholder && this.placeholder.parentNode){
			this.placeholder.parentNode.removeChild(this.placeholder);
		}
		
		// clear empty table placeholder min
		this.tableElement.style.minWidth = "";
		this.tableElement.style.display = "";
	}
	
	_positionPlaceholder(){
		if(this.placeholder && this.placeholder.parentNode){
			this.placeholder.style.width = this.table.columnManager.getWidth() + "px";
			this.placeholderContents.style.width = this.table.rowManager.element.clientWidth + "px";
			this.placeholderContents.style.marginLeft = this.scrollLeft + "px";
		}
	}
	
	styleRow(row, index){
		var rowEl = row.getElement();
		
		if(index % 2){
			rowEl.classList.add("tabulator-row-even");
			rowEl.classList.remove("tabulator-row-odd");
		}else {
			rowEl.classList.add("tabulator-row-odd");
			rowEl.classList.remove("tabulator-row-even");
		}
	}
	
	//normalize height of active rows
	normalizeHeight(force){
		this.activeRows.forEach(function(row){
			row.normalizeHeight(force);
		});
	}
	
	//adjust the height of the table holder to fit in the Tabulator element
	adjustTableSize(){
		let initialHeight = this.element.clientHeight, minHeight;
		let resized = false;
		
		if(this.renderer.verticalFillMode === "fill"){
			let otherHeight =  Math.floor(this.table.columnManager.getElement().getBoundingClientRect().height + (this.table.footerManager && this.table.footerManager.active && !this.table.footerManager.external ? this.table.footerManager.getElement().getBoundingClientRect().height : 0));
			
			if(this.fixedHeight){
				minHeight = isNaN(this.table.options.minHeight) ? this.table.options.minHeight : this.table.options.minHeight + "px";
				
				const height = "calc(100% - " + otherHeight + "px)";
				this.element.style.minHeight = minHeight || "calc(100% - " + otherHeight + "px)";
				this.element.style.height = height;
				this.element.style.maxHeight = height;
			} else {
				this.element.style.height = "";
				this.element.style.height =
				this.table.element.clientHeight - otherHeight + "px";
				this.element.scrollTop = this.scrollTop;
			}
			
			this.renderer.resize();
			
			//check if the table has changed size when dealing with variable height tables
			if(!this.fixedHeight && initialHeight != this.element.clientHeight){
				resized = true;
				if(this.subscribed("table-resize")){
					this.dispatch("table-resize");
				}else {
					this.redraw();
				}
			}
			
			this.scrollBarCheck();
		}
		
		this._positionPlaceholder();
		return resized;
	}
	
	//reinitialize all rows
	reinitialize(){
		this.rows.forEach(function(row){
			row.reinitialize(true);
		});
	}
	
	//prevent table from being redrawn
	blockRedraw (){
		this.redrawBlock = true;
		this.redrawBlockRestoreConfig = false;
	}
	
	//restore table redrawing
	restoreRedraw (){
		this.redrawBlock = false;
		
		if(this.redrawBlockRestoreConfig){
			this.refreshActiveData(this.redrawBlockRestoreConfig.handler, this.redrawBlockRestoreConfig.skipStage, this.redrawBlockRestoreConfig.renderInPosition);
			
			this.redrawBlockRestoreConfig = false;
		}else {
			if(this.redrawBlockRenderInPosition){
				this.reRenderInPosition();
			}
		}
		
		this.redrawBlockRenderInPosition = false;
	}
	
	//redraw table
	redraw (force){
		this.adjustTableSize();
		this.table.tableWidth = this.table.element.clientWidth;
		
		if(!force){	
			this.reRenderInPosition();
			this.scrollHorizontal(this.scrollLeft);
		}else {
			this.renderTable();
		}
	}
	
	resetScroll(){
		this.element.scrollLeft = 0;
		this.element.scrollTop = 0;
		
		if(this.table.browser === "ie"){
			var event = document.createEvent("Event");
			event.initEvent("scroll", false, true);
			this.element.dispatchEvent(event);
		}else {
			this.element.dispatchEvent(new Event('scroll'));
		}
	}
}

class FooterManager extends CoreFeature{

	constructor(table){
		super(table);

		this.active = false;
		this.element = this.createElement(); //containing element
		this.containerElement = this.createContainerElement(); //containing element
		this.external = false;
	}

	initialize(){
		this.initializeElement();
	}

	createElement(){
		var el = document.createElement("div");

		el.classList.add("tabulator-footer");

		return el;
	}

	
	createContainerElement(){
		var el = document.createElement("div");

		el.classList.add("tabulator-footer-contents");

		this.element.appendChild(el);

		return el;
	}

	initializeElement(){
		if(this.table.options.footerElement){

			switch(typeof this.table.options.footerElement){
				case "string":
					if(this.table.options.footerElement[0] === "<"){
						this.containerElement.innerHTML = this.table.options.footerElement;
					}else {
						this.external = true;
						this.containerElement = document.querySelector(this.table.options.footerElement);
					}
					break;

				default:
					this.element = this.table.options.footerElement;
					break;
			}
		}
	}

	getElement(){
		return this.element;
	}

	append(element){
		this.activate();

		this.containerElement.appendChild(element);
		this.table.rowManager.adjustTableSize();
	}

	prepend(element){
		this.activate();

		this.element.insertBefore(element, this.element.firstChild);
		this.table.rowManager.adjustTableSize();
	}

	remove(element){
		element.parentNode.removeChild(element);
		this.deactivate();
	}

	deactivate(force){
		if(!this.element.firstChild || force){
			if(!this.external){
				this.element.parentNode.removeChild(this.element);
			}
			this.active = false;
		}
	}

	activate(){
		if(!this.active){
			this.active = true;
			if(!this.external){
				this.table.element.appendChild(this.getElement());
				this.table.element.style.display = '';
			}
		}
	}

	redraw(){
		this.dispatch("footer-redraw");
	}
}

class InteractionManager extends CoreFeature {
	
	constructor (table){
		super(table);
		
		this.el = null;
		
		this.abortClasses = ["tabulator-headers", "tabulator-table"];
		
		this.previousTargets = {};
		
		this.listeners = [
			"click",
			"dblclick",
			"contextmenu",
			"mouseenter",
			"mouseleave",
			"mouseover",
			"mouseout",
			"mousemove",
			"mouseup",
			"mousedown",
			"touchstart",
			"touchend",
		];
		
		this.componentMap = {
			"tabulator-cell":"cell",
			"tabulator-row":"row",
			"tabulator-group":"group",
			"tabulator-col":"column",
		};
		
		this.pseudoTrackers = {
			"row":{
				subscriber:null,
				target:null,
			},
			"cell":{
				subscriber:null,
				target:null,
			},
			"group":{
				subscriber:null,
				target:null,
			},
			"column":{
				subscriber:null,
				target:null,
			},
		};
		
		this.pseudoTracking = false;
	}
	
	initialize(){
		this.el = this.table.element;
		
		this.buildListenerMap();
		this.bindSubscriptionWatchers();
	}
	
	buildListenerMap(){
		var listenerMap = {};
		
		this.listeners.forEach((listener) => {
			listenerMap[listener] = {
				handler:null,
				components:[],
			};
		});
		
		this.listeners = listenerMap;
	}
	
	bindPseudoEvents(){
		Object.keys(this.pseudoTrackers).forEach((key) => {
			this.pseudoTrackers[key].subscriber = this.pseudoMouseEnter.bind(this, key);
			this.subscribe(key + "-mouseover", this.pseudoTrackers[key].subscriber);
		});
		
		this.pseudoTracking = true;
	}
	
	pseudoMouseEnter(key, e, target){
		if(this.pseudoTrackers[key].target !== target){
			
			if(this.pseudoTrackers[key].target){
				this.dispatch(key + "-mouseleave", e, this.pseudoTrackers[key].target);
			}
			
			this.pseudoMouseLeave(key, e);
			
			this.pseudoTrackers[key].target = target;
			
			this.dispatch(key + "-mouseenter", e, target);
		}
	}
	
	pseudoMouseLeave(key, e){
		var leaveList = Object.keys(this.pseudoTrackers),
		linkedKeys = {
			"row":["cell"],
			"cell":["row"],
		};
		
		leaveList = leaveList.filter((item) => {
			var links = linkedKeys[key];
			return item !== key && (!links || (links && !links.includes(item)));
		});
		
		
		leaveList.forEach((key) => {
			var target = this.pseudoTrackers[key].target;
			
			if(this.pseudoTrackers[key].target){
				this.dispatch(key + "-mouseleave", e, target);
				
				this.pseudoTrackers[key].target = null;
			}
		});
	}
	
	
	bindSubscriptionWatchers(){
		var listeners = Object.keys(this.listeners),
		components = Object.values(this.componentMap);
		
		for(let comp of components){
			for(let listener of listeners){
				let key = comp + "-" + listener;
				
				this.subscriptionChange(key, this.subscriptionChanged.bind(this, comp, listener));
			}
		}
		
		this.subscribe("table-destroy", this.clearWatchers.bind(this));
	}
	
	subscriptionChanged(component, key, added){
		var listener = this.listeners[key].components,
		index = listener.indexOf(component),
		changed = false;
		
		if(added){
			if(index === -1){
				listener.push(component);
				changed = true;
			}
		}else {
			if(!this.subscribed(component + "-" + key)){
				if(index > -1){
					listener.splice(index, 1);
					changed = true;
				}
			}
		}
		
		if((key === "mouseenter" || key === "mouseleave") && !this.pseudoTracking){
			this.bindPseudoEvents();
		}
		
		if(changed){
			this.updateEventListeners();
		}
	}
	
	updateEventListeners(){
		for(let key in this.listeners){
			let listener = this.listeners[key];
			
			if(listener.components.length){
				if(!listener.handler){
					listener.handler = this.track.bind(this, key);
					this.el.addEventListener(key, listener.handler);
					// this.el.addEventListener(key, listener.handler, {passive: true})
				}
			}else {
				if(listener.handler){
					this.el.removeEventListener(key, listener.handler);
					listener.handler = null;
				}
			}
		}
	}
	
	track(type, e){
		var path = (e.composedPath && e.composedPath()) || e.path;
		
		var targets = this.findTargets(path);
		targets = this.bindComponents(type, targets);
		
		this.triggerEvents(type, e, targets);
		
		if(this.pseudoTracking && (type == "mouseover" || type == "mouseleave") && !Object.keys(targets).length){
			this.pseudoMouseLeave("none", e);
		}
	}
	
	findTargets(path){
		var targets = {};
		
		let componentMap = Object.keys(this.componentMap);
		
		for (let el of path) {
			let classList = el.classList ? [...el.classList] : [];
			
			let abort = classList.filter((item) => {
				return this.abortClasses.includes(item);
			});
			
			if(abort.length){
				break;
			}
			
			let elTargets = classList.filter((item) => {
				return componentMap.includes(item);
			});
			
			for (let target of elTargets) {
				if(!targets[this.componentMap[target]]){
					targets[this.componentMap[target]] = el;
				}
			}
		}

		if(targets.group && targets.group === targets.row){
			delete targets.row;
		}

		return targets;
	}
	
	bindComponents(type, targets){
		//ensure row component is looked up before cell
		var keys = Object.keys(targets).reverse(),
		listener = this.listeners[type],
		matches = {},
		output = {},
		targetMatches = {};
	
		for(let key of keys){
			let component,
			target = targets[key],
			previousTarget = this.previousTargets[key];
			
			if(previousTarget && previousTarget.target === target){
				component = previousTarget.component;
			}else {
				switch(key){
					case "row":
					case "group":
						if(listener.components.includes("row") || listener.components.includes("cell") || listener.components.includes("group")){
							let rows = this.table.rowManager.getVisibleRows(true);
						
							component = rows.find((row) => {
								return row.getElement() === target;
							});
						
							if(targets["row"] && targets["row"].parentNode && targets["row"].parentNode.closest(".tabulator-row")){
								targets[key] = false;
							}
						}
						break;
					
					case "column":
						if(listener.components.includes("column")){
							component = this.table.columnManager.findColumn(target);
						}
						break;
					
					case "cell":
						if(listener.components.includes("cell")){
							if(matches["row"] instanceof Row){
								component = matches["row"].findCell(target);
							}else {	
								if(targets["row"]){
									console.warn("Event Target Lookup Error - The row this cell is attached to cannot be found, has the table been reinitialized without being destroyed first?");
								}
							}
						}
						break;
				}
			}
			
			if(component){
				matches[key] = component;
				targetMatches[key] = {
					target:target,
					component:component,
				};
			}
		}
		
		this.previousTargets = targetMatches;

		//reverse order keys are set in so events trigger in correct sequence
		Object.keys(targets).forEach((key) => {
			let value = matches[key];
			output[key] = value;
		});
		
		return output;
	}
	
	triggerEvents(type, e, targets){
		var listener = this.listeners[type];

		for(let key in targets){
			if(targets[key] && listener.components.includes(key)){
				this.dispatch(key + "-" + type, e, targets[key]);
			}
		}
	}
	
	clearWatchers(){
		for(let key in this.listeners){
			let listener = this.listeners[key];
			
			if(listener.handler){
				this.el.removeEventListener(key, listener.handler);
				listener.handler = null;
			}
		}
	}
}

class ComponentFunctionBinder{

	constructor(table){
		this.table = table;

		this.bindings = {};
	}

	bind(type, funcName, handler){
		if(!this.bindings[type]){
			this.bindings[type] = {};
		}

		if(this.bindings[type][funcName]){
			console.warn("Unable to bind component handler, a matching function name is already bound", type, funcName, handler);
		}else {
			this.bindings[type][funcName] = handler;
		}
	}

	handle(type, component, name){
		if(this.bindings[type] && this.bindings[type][name] && typeof this.bindings[type][name].bind === 'function'){
			return this.bindings[type][name].bind(null, component);
		}else {
			if(name !== "then" && typeof name === "string" && !name.startsWith("_")){
				if(this.table.options.debugInvalidComponentFuncs){
					console.error("The " + type + " component does not have a " + name + " function, have you checked that you have the correct Tabulator module installed?");
				}
			}
		}
	}
}

class DataLoader extends CoreFeature{
	constructor(table){
		super(table);
		
		this.requestOrder = 0; //prevent requests coming out of sequence if overridden by another load request
		this.loading = false;
	}
	
	initialize(){}
	
	load(data, params, config, replace, silent, columnsChanged){
		var requestNo = ++this.requestOrder;

		if(this.table.destroyed){
			return Promise.resolve();
		}
		
		this.dispatchExternal("dataLoading", data);
		
		//parse json data to array
		if (data && (data.indexOf("{") == 0 || data.indexOf("[") == 0)){
			data = JSON.parse(data);
		}
		
		if(this.confirm("data-loading", [data, params, config, silent])){
			this.loading = true;
			
			if(!silent){
				this.alertLoader();
			}
			
			//get params for request
			params = this.chain("data-params", [data, config, silent], params || {}, params || {});
			
			params = this.mapParams(params, this.table.options.dataSendParams);
			
			var result = this.chain("data-load", [data, params, config, silent], false, Promise.resolve([]));
			
			return result.then((response) => {
				if(!this.table.destroyed){
					if(!Array.isArray(response) && typeof response == "object"){
						response = this.mapParams(response, this.objectInvert(this.table.options.dataReceiveParams));
					}
					
					var rowData = this.chain("data-loaded", [response], null, response);
					
					if(requestNo == this.requestOrder){
						this.clearAlert();
						
						if(rowData !== false){
							this.dispatchExternal("dataLoaded", rowData);
							this.table.rowManager.setData(rowData,  replace, typeof columnsChanged === "undefined" ? !replace : columnsChanged);
						}
					}else {
						console.warn("Data Load Response Blocked - An active data load request was blocked by an attempt to change table data while the request was being made");
					}
				}else {
					console.warn("Data Load Response Blocked - Table has been destroyed");
				}
			}).catch((error) => {
				console.error("Data Load Error: ", error);
				this.dispatchExternal("dataLoadError", error);
				
				if(!silent){
					this.alertError();
				}
				
				setTimeout(() => {
					this.clearAlert();
				}, this.table.options.dataLoaderErrorTimeout);
			})
				.finally(() => {
					this.loading = false;
				});
		}else {
			this.dispatchExternal("dataLoaded", data);
			
			if(!data){
				data = [];
			}
			
			this.table.rowManager.setData(data, replace, typeof columnsChanged === "undefined" ? !replace : columnsChanged);
			return Promise.resolve();
		}
	}
	
	mapParams(params, map){
		var output = {};
		
		for(let key in params){
			output[map.hasOwnProperty(key) ? map[key] : key] = params[key];
		}
		
		return output;
	}
	
	objectInvert(obj){
		var output = {};
		
		for(let key in obj){
			output[obj[key]] = key;
		}
		
		return output;
	}
	
	blockActiveLoad(){
		this.requestOrder++;
	}
	
	alertLoader(){
		var shouldLoad = typeof this.table.options.dataLoader === "function" ? this.table.options.dataLoader() : this.table.options.dataLoader;
		
		if(shouldLoad){
			this.table.alertManager.alert(this.table.options.dataLoaderLoading || this.langText("data|loading"));
		}
	}
	
	alertError(){
		this.table.alertManager.alert(this.table.options.dataLoaderError || this.langText("data|error"), "error");
	}
	
	clearAlert(){
		this.table.alertManager.clear();
	}
}

class ExternalEventBus {

	constructor(table, optionsList, debug){
		this.table = table;
		this.events = {};
		this.optionsList = optionsList || {};
		this.subscriptionNotifiers = {};

		this.dispatch = debug ? this._debugDispatch.bind(this) : this._dispatch.bind(this);
		this.debug = debug;
	}

	subscriptionChange(key, callback){
		if(!this.subscriptionNotifiers[key]){
			this.subscriptionNotifiers[key] = [];
		}

		this.subscriptionNotifiers[key].push(callback);

		if(this.subscribed(key)){
			this._notifySubscriptionChange(key, true);
		}
	}

	subscribe(key, callback){
		if(!this.events[key]){
			this.events[key] = [];
		}

		this.events[key].push(callback);

		this._notifySubscriptionChange(key, true);
	}

	unsubscribe(key, callback){
		var index;

		if(this.events[key]){
			if(callback){
				index = this.events[key].findIndex((item) => {
					return item === callback;
				});

				if(index > -1){
					this.events[key].splice(index, 1);
				}else {
					console.warn("Cannot remove event, no matching event found:", key, callback);
					return;
				}
			}else {
				delete this.events[key];
			}
		}else {
			console.warn("Cannot remove event, no events set on:", key);
			return;
		}

		this._notifySubscriptionChange(key, false);
	}

	subscribed(key){
		return this.events[key] && this.events[key].length;
	}

	_notifySubscriptionChange(key, subscribed){
		var notifiers = this.subscriptionNotifiers[key];

		if(notifiers){
			notifiers.forEach((callback)=>{
				callback(subscribed);
			});
		}
	}

	_dispatch(){
		var args = Array.from(arguments),
		key = args.shift(),
		result;

		if(this.events[key]){
			this.events[key].forEach((callback, i) => {
				let callResult = callback.apply(this.table, args);

				if(!i){
					result = callResult;
				}
			});
		}

		return result;
	}

	_debugDispatch(){
		var args = Array.from(arguments),
		key = args[0];

		args[0] = "ExternalEvent:" + args[0];

		if(this.debug === true || this.debug.includes(key)){
			console.log(...args);
		}

		return this._dispatch(...arguments);
	}
}

class InternalEventBus {

	constructor(debug){
		this.events = {};
		this.subscriptionNotifiers = {};

		this.dispatch = debug ? this._debugDispatch.bind(this) : this._dispatch.bind(this);
		this.chain = debug ? this._debugChain.bind(this) : this._chain.bind(this);
		this.confirm = debug ? this._debugConfirm.bind(this) : this._confirm.bind(this);
		this.debug = debug;
	}

	subscriptionChange(key, callback){
		if(!this.subscriptionNotifiers[key]){
			this.subscriptionNotifiers[key] = [];
		}

		this.subscriptionNotifiers[key].push(callback);

		if(this.subscribed(key)){
			this._notifySubscriptionChange(key, true);
		}
	}

	subscribe(key, callback, priority = 10000){
		if(!this.events[key]){
			this.events[key] = [];
		}

		this.events[key].push({callback, priority});

		this.events[key].sort((a, b) => {
			return a.priority - b.priority;
		});

		this._notifySubscriptionChange(key, true);
	}

	unsubscribe(key, callback){
		var index;

		if(this.events[key]){
			if(callback){
				index = this.events[key].findIndex((item) => {
					return item.callback === callback;
				});

				if(index > -1){
					this.events[key].splice(index, 1);
				}else {
					console.warn("Cannot remove event, no matching event found:", key, callback);
					return;
				}
			}
		}else {
			console.warn("Cannot remove event, no events set on:", key);
			return;
		}

		this._notifySubscriptionChange(key, false);
	}

	subscribed(key){
		return this.events[key] && this.events[key].length;
	}

	_chain(key, args, initialValue, fallback){
		var value = initialValue;

		if(!Array.isArray(args)){
			args = [args];
		}

		if(this.subscribed(key)){
			this.events[key].forEach((subscriber, i) => {
				value = subscriber.callback.apply(this, args.concat([value]));
			});

			return value;
		}else {
			return typeof fallback === "function" ? fallback() : fallback;
		}
	}

	_confirm(key, args){
		var confirmed = false;

		if(!Array.isArray(args)){
			args = [args];
		}

		if(this.subscribed(key)){
			this.events[key].forEach((subscriber, i) => {
				if(subscriber.callback.apply(this, args)){
					confirmed = true;
				}
			});
		}

		return confirmed;
	}

	_notifySubscriptionChange(key, subscribed){
		var notifiers = this.subscriptionNotifiers[key];

		if(notifiers){
			notifiers.forEach((callback)=>{
				callback(subscribed);
			});
		}
	}

	_dispatch(){
		var args = Array.from(arguments),
		key = args.shift();

		if(this.events[key]){
			this.events[key].forEach((subscriber) => {
				subscriber.callback.apply(this, args);
			});
		}
	}

	_debugDispatch(){
		var args = Array.from(arguments),
		key = args[0];

		args[0] = "InternalEvent:" + key;

		if(this.debug === true || this.debug.includes(key)){
			console.log(...args);
		}

		return this._dispatch(...arguments);
	}

	_debugChain(){
		var args = Array.from(arguments),
		key = args[0];

		args[0] = "InternalEvent:" + key;

		if(this.debug === true || this.debug.includes(key)){
			console.log(...args);
		}

		return this._chain(...arguments);
	}

	_debugConfirm(){
		var args = Array.from(arguments),
		key = args[0];

		args[0] = "InternalEvent:" + key;

		if(this.debug === true || this.debug.includes(key)){
			console.log(...args);
		}

		return this._confirm(...arguments);
	}
}

class DeprecationAdvisor extends CoreFeature{
	
	constructor(table){
		super(table);
	}
	
	_warnUser(){
		if(this.options("debugDeprecation")){
			console.warn(...arguments);
		}
	}
	
	check(oldOption, newOption, convert){
		var msg = "";
		
		if(typeof this.options(oldOption) !== "undefined"){
			msg = "Deprecated Setup Option - Use of the %c" + oldOption + "%c option is now deprecated";
			
			if(newOption){
				msg = msg + ", Please use the %c" + newOption + "%c option instead";
				this._warnUser(msg, 'font-weight: bold;', 'font-weight: normal;', 'font-weight: bold;', 'font-weight: normal;');

				if(convert){
					this.table.options[newOption] = this.table.options[oldOption];
				}
			}else {
				this._warnUser(msg, 'font-weight: bold;', 'font-weight: normal;');
			}
			
			return false;
		}else {
			return true;
		}
	}
	
	checkMsg(oldOption, msg){
		if(typeof this.options(oldOption) !== "undefined"){
			this._warnUser("%cDeprecated Setup Option - Use of the %c" + oldOption + " %c option is now deprecated, " + msg, 'font-weight: normal;', 'font-weight: bold;', 'font-weight: normal;');
			
			return false;
		}else {
			return true;
		}
	}
	
	msg(msg){
		this._warnUser(msg);
	}
}

class DependencyRegistry extends CoreFeature{
	
	constructor(table){
		super(table);
		
		this.deps = {};
		
		this.props = {
			
		};
	}
	
	initialize(){
		this.deps = Object.assign({}, this.options("dependencies"));
	}
	
	lookup(key, prop, silent){
		if(Array.isArray(key)){
			for (const item of key) {
				var match = this.lookup(item, prop, true);

				if(match){
					break;
				}
			}

			if(match){
				return match;
			}else {
				this.error(key);
			}
		}else {
			if(prop){
				return this.lookupProp(key, prop, silent);
			}else {
				return this.lookupKey(key, silent);
			}
		}
	}
	
	lookupProp(key, prop, silent){
		var dependency;
		
		if(this.props[key] && this.props[key][prop]){
			return this.props[key][prop];
		}else {
			dependency = this.lookupKey(key, silent);
			
			if(dependency){
				if(!this.props[key]){
					this.props[key] = {};
				}
				
				this.props[key][prop] = dependency[prop] || dependency;
				return this.props[key][prop];
			}
		}
	}
	
	lookupKey(key, silent){
		var dependency;
		
		if(this.deps[key]){
			dependency = this.deps[key];
		}else if(window[key]){
			this.deps[key] = window[key];
			dependency = this.deps[key];
		}else {
			if(!silent){
				this.error(key);
			}
		}
		
		return dependency;
	}

	error(key){
		console.error("Unable to find dependency", key, "Please check documentation and ensure you have imported the required library into your project");
	}
}

//resize columns to fit data they contain
function fitData(columns, forced){
	if(forced){
		this.table.columnManager.renderer.reinitializeColumnWidths(columns);
	}
	
	if(this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)){
		this.table.modules.responsiveLayout.update();
	}
}

//resize columns to fit data they contain and stretch row to fill table, also used for fitDataTable
function fitDataGeneral(columns, forced){
	columns.forEach(function(column){
		column.reinitializeWidth();
	});

	if(this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)){
		this.table.modules.responsiveLayout.update();
	}
}

//resize columns to fit data the contain and stretch last column to fill table
function fitDataStretch(columns, forced){
	var colsWidth = 0,
	tableWidth = this.table.rowManager.element.clientWidth,
	gap = 0,
	lastCol = false;

	columns.forEach((column, i) => {
		if(!column.widthFixed){
			column.reinitializeWidth();
		}

		if(this.table.options.responsiveLayout ? column.modules.responsive.visible : column.visible){
			lastCol = column;
		}

		if(column.visible){
			colsWidth += column.getWidth();
		}
	});

	if(lastCol){
		gap = tableWidth - colsWidth + lastCol.getWidth();

		if(this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)){
			lastCol.setWidth(0);
			this.table.modules.responsiveLayout.update();
		}

		if(gap > 0){
			lastCol.setWidth(gap);
		}else {
			lastCol.reinitializeWidth();
		}
	}else {
		if(this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)){
			this.table.modules.responsiveLayout.update();
		}
	}
}

//resize columns to fit
function fitColumns(columns, forced){
	var totalWidth = this.table.rowManager.element.getBoundingClientRect().width; //table element width
	var fixedWidth = 0; //total width of columns with a defined width
	var flexWidth = 0; //total width available to flexible columns
	var flexGrowUnits = 0; //total number of widthGrow blocks across all columns
	var flexColWidth = 0; //desired width of flexible columns
	var flexColumns = []; //array of flexible width columns
	var fixedShrinkColumns = []; //array of fixed width columns that can shrink
	var flexShrinkUnits = 0; //total number of widthShrink blocks across all columns
	var overflowWidth = 0; //horizontal overflow width
	var gapFill = 0; //number of pixels to be added to final column to close and half pixel gaps

	function calcWidth(width){
		var colWidth;

		if(typeof(width) == "string"){
			if(width.indexOf("%") > -1){
				colWidth = (totalWidth / 100) * parseInt(width);
			}else {
				colWidth = parseInt(width);
			}
		}else {
			colWidth = width;
		}

		return colWidth;
	}

	//ensure columns resize to take up the correct amount of space
	function scaleColumns(columns, freeSpace, colWidth, shrinkCols){
		var oversizeCols = [],
		oversizeSpace = 0,
		remainingSpace = 0,
		nextColWidth = 0,
		remainingFlexGrowUnits = flexGrowUnits,
		gap = 0,
		changeUnits = 0,
		undersizeCols = [];

		function calcGrow(col){
			return (colWidth * (col.column.definition.widthGrow || 1));
		}

		function calcShrink(col){
			return  (calcWidth(col.width) - (colWidth * (col.column.definition.widthShrink || 0)));
		}

		columns.forEach(function(col, i){
			var width = shrinkCols ? calcShrink(col) : calcGrow(col);
			if(col.column.minWidth >= width){
				oversizeCols.push(col);
			}else {
				if(col.column.maxWidth && col.column.maxWidth < width){
					col.width = col.column.maxWidth;
					freeSpace -= col.column.maxWidth;

					remainingFlexGrowUnits -= shrinkCols ? (col.column.definition.widthShrink || 1) : (col.column.definition.widthGrow || 1);

					if(remainingFlexGrowUnits){
						colWidth = Math.floor(freeSpace/remainingFlexGrowUnits);
					}
				}else {
					undersizeCols.push(col);
					changeUnits += shrinkCols ? (col.column.definition.widthShrink || 1) : (col.column.definition.widthGrow || 1);
				}
			}
		});

		if(oversizeCols.length){
			oversizeCols.forEach(function(col){
				oversizeSpace += shrinkCols ?  col.width - col.column.minWidth : col.column.minWidth;
				col.width = col.column.minWidth;
			});

			remainingSpace = freeSpace - oversizeSpace;

			nextColWidth = changeUnits ? Math.floor(remainingSpace/changeUnits) : remainingSpace;

			gap = scaleColumns(undersizeCols, remainingSpace, nextColWidth, shrinkCols);
		}else {
			gap = changeUnits ? freeSpace - (Math.floor(freeSpace/changeUnits) * changeUnits) : freeSpace;

			undersizeCols.forEach(function(column){
				column.width = shrinkCols ? calcShrink(column) : calcGrow(column);
			});
		}

		return gap;
	}

	if(this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)){
		this.table.modules.responsiveLayout.update();
	}

	//adjust for vertical scrollbar if present
	if(this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight){
		totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;
	}

	columns.forEach(function(column){
		var width, minWidth, colWidth;

		if(column.visible){

			width = column.definition.width;
			minWidth =  parseInt(column.minWidth);

			if(width){

				colWidth = calcWidth(width);

				fixedWidth += colWidth > minWidth ? colWidth : minWidth;

				if(column.definition.widthShrink){
					fixedShrinkColumns.push({
						column:column,
						width:colWidth > minWidth ? colWidth : minWidth
					});
					flexShrinkUnits += column.definition.widthShrink;
				}

			}else {
				flexColumns.push({
					column:column,
					width:0,
				});
				flexGrowUnits += column.definition.widthGrow || 1;
			}
		}
	});

	//calculate available space
	flexWidth = totalWidth - fixedWidth;

	//calculate correct column size
	flexColWidth = Math.floor(flexWidth / flexGrowUnits);

	//generate column widths
	gapFill = scaleColumns(flexColumns, flexWidth, flexColWidth, false);

	//increase width of last column to account for rounding errors
	if(flexColumns.length && gapFill > 0){
		flexColumns[flexColumns.length-1].width += gapFill;
	}

	//calculate space for columns to be shrunk into
	flexColumns.forEach(function(col){
		flexWidth -= col.width;
	});

	overflowWidth = Math.abs(gapFill) + flexWidth;

	//shrink oversize columns if there is no available space
	if(overflowWidth > 0 && flexShrinkUnits){
		gapFill = scaleColumns(fixedShrinkColumns, overflowWidth, Math.floor(overflowWidth / flexShrinkUnits), true);
	}

	//decrease width of last column to account for rounding errors
	if(gapFill && fixedShrinkColumns.length){
		fixedShrinkColumns[fixedShrinkColumns.length-1].width -= gapFill;
	}

	flexColumns.forEach(function(col){
		col.column.setWidth(col.width);
	});

	fixedShrinkColumns.forEach(function(col){
		col.column.setWidth(col.width);
	});
}

var defaultModes = {
	fitData:fitData,
	fitDataFill:fitDataGeneral,
	fitDataTable:fitDataGeneral,
	fitDataStretch:fitDataStretch,
	fitColumns:fitColumns ,
};

class Layout extends Module{

	static moduleName = "layout";

	//load defaults
	static modes = defaultModes;

	constructor(table){
		super(table, "layout");

		this.mode = null;

		this.registerTableOption("layout", "fitData"); //layout type
		this.registerTableOption("layoutColumnsOnNewData", false); //update column widths on setData

		this.registerColumnOption("widthGrow");
		this.registerColumnOption("widthShrink");
	}

	//initialize layout system
	initialize(){
		var layout = this.table.options.layout;

		if(Layout.modes[layout]){
			this.mode = layout;
		}else {
			console.warn("Layout Error - invalid mode set, defaulting to 'fitData' : " + layout);
			this.mode = 'fitData';
		}

		this.table.element.setAttribute("tabulator-layout", this.mode);
		this.subscribe("column-init", this.initializeColumn.bind(this));
	}

	initializeColumn(column){
		if(column.definition.widthGrow){
			column.definition.widthGrow = Number(column.definition.widthGrow);
		}
		if(column.definition.widthShrink){
			column.definition.widthShrink = Number(column.definition.widthShrink);
		}
	}

	getMode(){
		return this.mode;
	}

	//trigger table layout
	layout(dataChanged){

		var variableHeight = this.table.columnManager.columnsByIndex.find((column) => column.definition.variableHeight || column.definition.formatter === "textarea");
		
		this.dispatch("layout-refreshing");
		Layout.modes[this.mode].call(this, this.table.columnManager.columnsByIndex, dataChanged);

		if(variableHeight){
			this.table.rowManager.normalizeHeight(true);
		}

		this.dispatch("layout-refreshed");
	}
}

var defaultLangs = {
	"default":{ //hold default locale text
		"groups":{
			"item":"item",
			"items":"items",
		},
		"columns":{
		},
		"data":{
			"loading":"Loading",
			"error":"Error",
		},
		"pagination":{
			"page_size":"Page Size",
			"page_title":"Show Page",
			"first":"First",
			"first_title":"First Page",
			"last":"Last",
			"last_title":"Last Page",
			"prev":"Prev",
			"prev_title":"Prev Page",
			"next":"Next",
			"next_title":"Next Page",
			"all":"All",
			"counter":{
				"showing": "Showing",
				"of": "of",
				"rows": "rows",
				"pages": "pages",
			}
		},
		"headerFilters":{
			"default":"filter column...",
			"columns":{}
		}
	},
};

class Localize extends Module{

	static moduleName = "localize";

	//load defaults
	static langs = defaultLangs;

	constructor(table){
		super(table);

		this.locale = "default"; //current locale
		this.lang = false; //current language
		this.bindings = {}; //update events to call when locale is changed
		this.langList = {};

		this.registerTableOption("locale", false); //current system language
		this.registerTableOption("langs", {});
	}

	initialize(){
		this.langList = Helpers.deepClone(Localize.langs);

		if(this.table.options.columnDefaults.headerFilterPlaceholder !== false){
			this.setHeaderFilterPlaceholder(this.table.options.columnDefaults.headerFilterPlaceholder);
		}

		for(let locale in this.table.options.langs){
			this.installLang(locale, this.table.options.langs[locale]);
		}

		this.setLocale(this.table.options.locale);

		this.registerTableFunction("setLocale", this.setLocale.bind(this));
		this.registerTableFunction("getLocale", this.getLocale.bind(this));
		this.registerTableFunction("getLang", this.getLang.bind(this));
	}

	//set header placeholder
	setHeaderFilterPlaceholder(placeholder){
		this.langList.default.headerFilters.default = placeholder;
	}

	//setup a lang description object
	installLang(locale, lang){
		if(this.langList[locale]){
			this._setLangProp(this.langList[locale], lang);
		}else {
			this.langList[locale] = lang;
		}
	}

	_setLangProp(lang, values){
		for(let key in values){
			if(lang[key] && typeof lang[key] == "object"){
				this._setLangProp(lang[key], values[key]);
			}else {
				lang[key] = values[key];
			}
		}
	}

	//set current locale
	setLocale(desiredLocale){
		desiredLocale = desiredLocale || "default";

		//fill in any matching language values
		function traverseLang(trans, path){
			for(var prop in trans){
				if(typeof trans[prop] == "object"){
					if(!path[prop]){
						path[prop] = {};
					}
					traverseLang(trans[prop], path[prop]);
				}else {
					path[prop] = trans[prop];
				}
			}
		}

		//determining correct locale to load
		if(desiredLocale === true && navigator.language){
			//get local from system
			desiredLocale = navigator.language.toLowerCase();
		}

		if(desiredLocale){
			//if locale is not set, check for matching top level locale else use default
			if(!this.langList[desiredLocale]){
				let prefix = desiredLocale.split("-")[0];

				if(this.langList[prefix]){
					console.warn("Localization Error - Exact matching locale not found, using closest match: ", desiredLocale, prefix);
					desiredLocale = prefix;
				}else {
					console.warn("Localization Error - Matching locale not found, using default: ", desiredLocale);
					desiredLocale = "default";
				}
			}
		}

		this.locale = desiredLocale;

		//load default lang template
		this.lang = Helpers.deepClone(this.langList.default || {});

		if(desiredLocale != "default"){
			traverseLang(this.langList[desiredLocale], this.lang);
		}

		this.dispatchExternal("localized", this.locale, this.lang);

		this._executeBindings();
	}

	//get current locale
	getLocale(locale){
		return this.locale;
	}

	//get lang object for given local or current if none provided
	getLang(locale){
		return locale ? this.langList[locale] : this.lang;
	}

	//get text for current locale
	getText(path, value){
		var fillPath = value ? path + "|" + value : path,
		pathArray = fillPath.split("|"),
		text = this._getLangElement(pathArray, this.locale);

		// if(text === false){
		// 	console.warn("Localization Error - Matching localized text not found for given path: ", path);
		// }

		return text || "";
	}

	//traverse langs object and find localized copy
	_getLangElement(path, locale){
		var root = this.lang;

		path.forEach(function(level){
			var rootPath;

			if(root){
				rootPath = root[level];

				if(typeof rootPath != "undefined"){
					root = rootPath;
				}else {
					root = false;
				}
			}
		});

		return root;
	}

	//set update binding
	bind(path, callback){
		if(!this.bindings[path]){
			this.bindings[path] = [];
		}

		this.bindings[path].push(callback);

		callback(this.getText(path), this.lang);
	}

	//iterate through bindings and trigger updates
	_executeBindings(){
		for(let path in this.bindings){
			this.bindings[path].forEach((binding) => {
				binding(this.getText(path), this.lang);
			});
		}
	}
}

class Comms extends Module{

	static moduleName = "comms";

	constructor(table){
		super(table);
	}

	initialize(){
		this.registerTableFunction("tableComms", this.receive.bind(this));
	}

	getConnections(selectors){
		var connections = [],
		connection;

		connection = this.table.constructor.registry.lookupTable(selectors);

		connection.forEach((con) =>{
			if(this.table !== con){
				connections.push(con);
			}
		});

		return connections;
	}

	send(selectors, module, action, data){
		var connections = this.getConnections(selectors);

		connections.forEach((connection) => {
			connection.tableComms(this.table.element, module, action, data);
		});

		if(!connections.length && selectors){
			console.warn("Table Connection Error - No tables matching selector found", selectors);
		}
	}

	receive(table, module, action, data){
		if(this.table.modExists(module)){
			return this.table.modules[module].commsReceived(table, action, data);
		}else {
			console.warn("Inter-table Comms Error - no such module:", module);
		}
	}
}

var coreModules = /*#__PURE__*/Object.freeze({
	__proto__: null,
	CommsModule: Comms,
	LayoutModule: Layout,
	LocalizeModule: Localize
});

class TableRegistry {
	static registry = {
		tables:[],
		
		register(table){
			TableRegistry.registry.tables.push(table);
		},
		
		deregister(table){
			var index = TableRegistry.registry.tables.indexOf(table);
			
			if(index > -1){
				TableRegistry.registry.tables.splice(index, 1);
			}
		},
		
		lookupTable(query, silent){
			var results = [],
			matches, match;
			
			if(typeof query === "string"){
				matches = document.querySelectorAll(query);
				
				if(matches.length){
					for(var i = 0; i < matches.length; i++){
						match = TableRegistry.registry.matchElement(matches[i]);
						
						if(match){
							results.push(match);
						}
					}
				}
				
			}else if((typeof HTMLElement !== "undefined" && query instanceof HTMLElement) || query instanceof TableRegistry){
				match = TableRegistry.registry.matchElement(query);
				
				if(match){
					results.push(match);
				}
			}else if(Array.isArray(query)){
				query.forEach(function(item){
					results = results.concat(TableRegistry.registry.lookupTable(item));
				});
			}else {
				if(!silent){
					console.warn("Table Connection Error - Invalid Selector", query);
				}
			}
			
			return results;
		},
		
		matchElement(element){
			return TableRegistry.registry.tables.find(function(table){
				return element instanceof TableRegistry ? table === element : table.element === element;
			});
		}
	};

		
	static findTable(query){
		var results = TableRegistry.registry.lookupTable(query, true);
		return Array.isArray(results) && !results.length ? false : results;
	}
}

class ModuleBinder extends TableRegistry {
	
	static moduleBindings = {};
	static moduleExtensions = {};
	static modulesRegistered = false;
	
	static defaultModules = false;
	
	constructor(){
		super();
	}
	
	static initializeModuleBinder(defaultModules){
		if(!ModuleBinder.modulesRegistered){
			ModuleBinder.modulesRegistered = true;
			ModuleBinder._registerModules(coreModules, true);
			
			if(defaultModules){
				ModuleBinder._registerModules(defaultModules);
			}
		}
	}
	
	static _extendModule(name, property, values){
		if(ModuleBinder.moduleBindings[name]){
			var source = ModuleBinder.moduleBindings[name][property];
			
			if(source){
				if(typeof values == "object"){
					for(let key in values){
						source[key] = values[key];
					}
				}else {
					console.warn("Module Error - Invalid value type, it must be an object");
				}
			}else {
				console.warn("Module Error - property does not exist:", property);
			}
		}else {
			console.warn("Module Error - module does not exist:", name);
		}
	}
	
	static _registerModules(modules, core){
		var mods = Object.values(modules);
		
		if(core){
			mods.forEach((mod) => {
				mod.prototype.moduleCore = true;
			});
		}
		
		ModuleBinder._registerModule(mods);
	}
	
	static _registerModule(modules){
		if(!Array.isArray(modules)){
			modules = [modules];
		}
		
		modules.forEach((mod) => {
			ModuleBinder._registerModuleBinding(mod);
			ModuleBinder._registerModuleExtensions(mod);
		});
	}
	
	static _registerModuleBinding(mod){
		if(mod.moduleName){
			ModuleBinder.moduleBindings[mod.moduleName] = mod;
		}else {
			console.error("Unable to bind module, no moduleName defined", mod.moduleName);
		}
	}
	
	static _registerModuleExtensions(mod){
		var extensions = mod.moduleExtensions;
		
		if(mod.moduleExtensions){
			for (let modKey in extensions) {
				let ext = extensions[modKey];
				
				if(ModuleBinder.moduleBindings[modKey]){
					for (let propKey in ext) {
						ModuleBinder._extendModule(modKey, propKey, ext[propKey]);
					}
				}else {
					if(!ModuleBinder.moduleExtensions[modKey]){
						ModuleBinder.moduleExtensions[modKey] = {};
					}
					
					for (let propKey in ext) {
						if(!ModuleBinder.moduleExtensions[modKey][propKey]){
							ModuleBinder.moduleExtensions[modKey][propKey] = {};
						}

						Object.assign(ModuleBinder.moduleExtensions[modKey][propKey], ext[propKey]);
					}
				}
			}
		}

		ModuleBinder._extendModuleFromQueue(mod);
	}
	
	static _extendModuleFromQueue(mod){
		var extensions = ModuleBinder.moduleExtensions[mod.moduleName];
		
		if(extensions){
			for (let propKey in extensions) {
				ModuleBinder._extendModule(mod.moduleName, propKey, extensions[propKey]);
			}
		}
	}
	
	//ensure that module are bound to instantiated function
	_bindModules(){
		var orderedStartMods = [],
		orderedEndMods = [],
		unOrderedMods = [];
		
		this.modules = {};
		
		for(var name in ModuleBinder.moduleBindings){
			let mod = ModuleBinder.moduleBindings[name];
			let module = new mod(this);
			
			this.modules[name] = module;
			
			if(mod.prototype.moduleCore){
				this.modulesCore.push(module);
			}else {
				if(mod.moduleInitOrder){
					if(mod.moduleInitOrder < 0){
						orderedStartMods.push(module);
					}else {
						orderedEndMods.push(module);
					}
					
				}else {
					unOrderedMods.push(module);
				}
			}
		}
		
		orderedStartMods.sort((a, b) => a.moduleInitOrder > b.moduleInitOrder ? 1 : -1);
		orderedEndMods.sort((a, b) => a.moduleInitOrder > b.moduleInitOrder ? 1 : -1);
		
		this.modulesRegular = orderedStartMods.concat(unOrderedMods.concat(orderedEndMods));
	}
}

class Alert extends CoreFeature{
	constructor(table){
		super(table);
        
		this.element = this._createAlertElement();
		this.msgElement = this._createMsgElement();
		this.type = null;
        
		this.element.appendChild(this.msgElement);
	}
    
	_createAlertElement(){
		var el = document.createElement("div");
		el.classList.add("tabulator-alert");
		return el;
	}
    
	_createMsgElement(){
		var el = document.createElement("div");
		el.classList.add("tabulator-alert-msg");
		el.setAttribute("role", "alert");
		return el;
	}
    
	_typeClass(){
		return "tabulator-alert-state-" + this.type;
	}
    
	alert(content, type = "msg"){
		if(content){
			this.clear();

			this.dispatch("alert-show", type);
            
			this.type = type;
            
			while(this.msgElement.firstChild) this.msgElement.removeChild(this.msgElement.firstChild);
            
			this.msgElement.classList.add(this._typeClass());
            
			if(typeof content === "function"){
				content = content();
			}
            
			if(content instanceof HTMLElement){
				this.msgElement.appendChild(content);
			}else {
				this.msgElement.innerHTML = content;
			}
            
			this.table.element.appendChild(this.element);
		}
	}
    
	clear(){
		this.dispatch("alert-hide", this.type);

		if(this.element.parentNode){
			this.element.parentNode.removeChild(this.element);
		}
        
		this.msgElement.classList.remove(this._typeClass());
	}
}

class Tabulator extends ModuleBinder{

	//default setup options
	static defaultOptions = defaultOptions;

	static extendModule(){
		Tabulator.initializeModuleBinder();
		Tabulator._extendModule(...arguments);
	}

	static registerModule(){
		Tabulator.initializeModuleBinder();
		Tabulator._registerModule(...arguments);
	}

	constructor(element, options, modules){
		super();

		Tabulator.initializeModuleBinder(modules);

		this.options = {};
		
		this.columnManager = null; // hold Column Manager
		this.rowManager = null; //hold Row Manager
		this.footerManager = null; //holder Footer Manager
		this.alertManager = null; //hold Alert Manager
		this.vdomHoz  = null; //holder horizontal virtual dom
		this.externalEvents = null; //handle external event messaging
		this.eventBus = null; //handle internal event messaging
		this.interactionMonitor = false; //track user interaction
		this.browser = ""; //hold current browser type
		this.browserSlow = false; //handle reduced functionality for slower browsers
		this.browserMobile = false; //check if running on mobile, prevent resize cancelling edit on keyboard appearance
		this.rtl = false; //check if the table is in RTL mode
		this.originalElement = null; //hold original table element if it has been replaced
		
		this.componentFunctionBinder = new ComponentFunctionBinder(this); //bind component functions
		this.dataLoader = false; //bind component functions
		
		this.modules = {}; //hold all modules bound to this table
		this.modulesCore = []; //hold core modules bound to this table (for initialization purposes)
		this.modulesRegular = []; //hold regular modules bound to this table (for initialization purposes)
		
		this.deprecationAdvisor = new DeprecationAdvisor(this);
		this.optionsList = new OptionsList(this, "table constructor");

		this.dependencyRegistry = new DependencyRegistry(this);
		
		this.initialized = false;
		this.destroyed = false;
		
		if(this.initializeElement(element)){
			
			this.initializeCoreSystems(options);
			
			//delay table creation to allow event bindings immediately after the constructor
			setTimeout(() => {
				this._create();
			});
		}
		
		this.constructor.registry.register(this); //register table for inter-device communication
	}
	
	initializeElement(element){
		if(typeof HTMLElement !== "undefined" && element instanceof HTMLElement){
			this.element = element;
			return true;
		}else if(typeof element === "string"){
			this.element = document.querySelector(element);
			
			if(this.element){
				return true;
			}else {
				console.error("Tabulator Creation Error - no element found matching selector: ", element);
				return false;
			}
		}else {
			console.error("Tabulator Creation Error - Invalid element provided:", element);
			return false;
		}
	}
	
	initializeCoreSystems(options){
		this.columnManager = new ColumnManager(this);
		this.rowManager = new RowManager(this);
		this.footerManager = new FooterManager(this);
		this.dataLoader = new DataLoader(this);
		this.alertManager = new Alert(this);
		
		this._bindModules();
		
		this.options = this.optionsList.generate(Tabulator.defaultOptions, options);
		
		this._clearObjectPointers();
		
		this._mapDeprecatedFunctionality();
		
		this.externalEvents = new ExternalEventBus(this, this.options, this.options.debugEventsExternal);
		this.eventBus = new InternalEventBus(this.options.debugEventsInternal);
		
		this.interactionMonitor = new InteractionManager(this);
		
		this.dataLoader.initialize();
		this.footerManager.initialize();

		this.dependencyRegistry.initialize();
	}
	
	//convert deprecated functionality to new functions
	_mapDeprecatedFunctionality(){
		//all previously deprecated functionality removed in the 6.0 release
	}
	
	_clearSelection(){
		
		this.element.classList.add("tabulator-block-select");
		
		if (window.getSelection) {
			if (window.getSelection().empty) {  // Chrome
				window.getSelection().empty();
			} else if (window.getSelection().removeAllRanges) {  // Firefox
				window.getSelection().removeAllRanges();
			}
		} else if (document.selection) {  // IE?
			document.selection.empty();
		}
		
		this.element.classList.remove("tabulator-block-select");
	}
	
	//create table
	_create(){
		this.externalEvents.dispatch("tableBuilding");
		this.eventBus.dispatch("table-building");
		
		this._rtlCheck();
		
		this._buildElement();
		
		this._initializeTable();

		this.initialized = true;
		
		this._loadInitialData()
			.finally(() => {
				this.eventBus.dispatch("table-initialized");
				this.externalEvents.dispatch("tableBuilt");
			});	
	}
	
	_rtlCheck(){
		var style = window.getComputedStyle(this.element);
		
		switch(this.options.textDirection){
			case"auto":
				if(style.direction !== "rtl"){
					break;
				}
			
			case "rtl":
				this.element.classList.add("tabulator-rtl");
				this.rtl = true;
				break;
			
			case "ltr":
				this.element.classList.add("tabulator-ltr");
			
			default:
				this.rtl = false;
		}
	}
	
	//clear pointers to objects in default config object
	_clearObjectPointers(){
		this.options.columns = this.options.columns.slice(0);
		
		if(Array.isArray(this.options.data) && !this.options.reactiveData){
			this.options.data = this.options.data.slice(0);
		}
	}
	
	//build tabulator element
	_buildElement(){
		var element = this.element,
		options = this.options,
		newElement;
		
		if(element.tagName === "TABLE"){
			this.originalElement = this.element;
			newElement = document.createElement("div");
			
			//transfer attributes to new element
			var attributes = element.attributes;
			
			// loop through attributes and apply them on div
			for(var i in attributes){
				if(typeof attributes[i] == "object"){
					newElement.setAttribute(attributes[i].name, attributes[i].value);
				}
			}
			
			// replace table with div element
			element.parentNode.replaceChild(newElement, element);
			
			this.element = element = newElement;
		}
		
		element.classList.add("tabulator");
		element.setAttribute("role", "grid");
		
		//empty element
		while(element.firstChild) element.removeChild(element.firstChild);
		
		//set table height
		if(options.height){
			options.height = isNaN(options.height) ? options.height : options.height + "px";
			element.style.height = options.height;
		}
		
		//set table min height
		if(options.minHeight !== false){
			options.minHeight = isNaN(options.minHeight) ? options.minHeight : options.minHeight + "px";
			element.style.minHeight = options.minHeight;
		}
		
		//set table maxHeight
		if(options.maxHeight !== false){
			options.maxHeight = isNaN(options.maxHeight) ? options.maxHeight : options.maxHeight + "px";
			element.style.maxHeight = options.maxHeight;
		}
	}
	
	//initialize core systems and modules
	_initializeTable(){
		var element = this.element,
		options = this.options;
		
		this.interactionMonitor.initialize();
		
		this.columnManager.initialize();
		this.rowManager.initialize();
		
		this._detectBrowser();
		
		//initialize core modules
		this.modulesCore.forEach((mod) => {
			mod.initialize();
		});
		
		//build table elements
		element.appendChild(this.columnManager.getElement());
		element.appendChild(this.rowManager.getElement());
		
		if(options.footerElement){
			this.footerManager.activate();
		}
		
		if(options.autoColumns && options.data){
			
			this.columnManager.generateColumnsFromRowData(this.options.data);
		}
		
		//initialize regular modules
		this.modulesRegular.forEach((mod) => {
			mod.initialize();
		});
		
		this.columnManager.setColumns(options.columns);
		
		this.eventBus.dispatch("table-built");
	}
	
	_loadInitialData(){
		return this.dataLoader.load(this.options.data)
			.finally(() => {
				this.columnManager.verticalAlignHeaders();
			});		
	}
	
	//deconstructor
	destroy(){
		var element = this.element;
		
		this.destroyed = true;
		
		this.constructor.registry.deregister(this); //deregister table from inter-device communication
		
		this.eventBus.dispatch("table-destroy");
		
		//clear row data
		this.rowManager.destroy();
		
		//clear DOM
		while(element.firstChild) element.removeChild(element.firstChild);
		element.classList.remove("tabulator");

		this.externalEvents.dispatch("tableDestroyed");
	}
	
	_detectBrowser(){
		var ua = navigator.userAgent||navigator.vendor||window.opera;
		
		if(ua.indexOf("Trident") > -1){
			this.browser = "ie";
			this.browserSlow = true;
		}else if(ua.indexOf("Edge") > -1){
			this.browser = "edge";
			this.browserSlow = true;
		}else if(ua.indexOf("Firefox") > -1){
			this.browser = "firefox";
			this.browserSlow = false;
		}else if(ua.indexOf("Mac OS") > -1){
			this.browser = "safari";
			this.browserSlow = false;
		}else {
			this.browser = "other";
			this.browserSlow = false;
		}
		
		this.browserMobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(ua)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(ua.slice(0,4));
	}
	
	initGuard(func, msg){
		var stack, line;
		
		if(this.options.debugInitialization && !this.initialized){
			if(!func){
				stack = new Error().stack.split("\n");
				
				line = stack[0] == "Error" ? stack[2] : stack[1];
				
				if(line[0] == " "){
					func = line.trim().split(" ")[1].split(".")[1];
				}else {
					func = line.trim().split("@")[0];
				}
			}
			
			console.warn("Table Not Initialized - Calling the " + func + " function before the table is initialized may result in inconsistent behavior, Please wait for the `tableBuilt` event before calling this function." + (msg ? " " + msg : ""));
		}
		
		return this.initialized;
	}
	
	////////////////// Data Handling //////////////////
	//block table redrawing
	blockRedraw(){
		this.initGuard();

		this.eventBus.dispatch("redraw-blocking");
		
		this.rowManager.blockRedraw();
		this.columnManager.blockRedraw();

		this.eventBus.dispatch("redraw-blocked");
	}
	
	//restore table redrawing
	restoreRedraw(){
		this.initGuard();

		this.eventBus.dispatch("redraw-restoring");

		this.rowManager.restoreRedraw();
		this.columnManager.restoreRedraw();

		this.eventBus.dispatch("redraw-restored");
	}
	
	//load data
	setData(data, params, config){
		this.initGuard(false, "To set initial data please use the 'data' property in the table constructor.");
		
		return this.dataLoader.load(data, params, config, false);
	}
	
	//clear data
	clearData(){
		this.initGuard();
		
		this.dataLoader.blockActiveLoad();
		this.rowManager.clearData();
	}
	
	//get table data array
	getData(active){
		return this.rowManager.getData(active);
	}
	
	//get table data array count
	getDataCount(active){
		return this.rowManager.getDataCount(active);
	}
	
	//replace data, keeping table in position with same sort
	replaceData(data, params, config){
		this.initGuard();
		
		return this.dataLoader.load(data, params, config, true, true);
	}
	
	//update table data
	updateData(data){
		var responses = 0;
		
		this.initGuard();
		
		return new Promise((resolve, reject) => {
			this.dataLoader.blockActiveLoad();
			
			if(typeof data === "string"){
				data = JSON.parse(data);
			}
			
			if(data && data.length > 0){
				data.forEach((item) => {
					var row = this.rowManager.findRow(item[this.options.index]);
					
					if(row){
						responses++;
						
						row.updateData(item)
							.then(()=>{
								responses--;
							
								if(!responses){
									resolve();
								}
							})
							.catch((e) => {
								reject("Update Error - Unable to update row", item, e);
							});
					}else {
						reject("Update Error - Unable to find row", item);
					}
				});
			}else {
				console.warn("Update Error - No data provided");
				reject("Update Error - No data provided");
			}
		});
	}
	
	addData(data, pos, index){
		this.initGuard();
		
		return new Promise((resolve, reject) => {
			this.dataLoader.blockActiveLoad();
			
			if(typeof data === "string"){
				data = JSON.parse(data);
			}
			
			if(data){
				this.rowManager.addRows(data, pos, index)
					.then((rows) => {
						var output = [];
					
						rows.forEach(function(row){
							output.push(row.getComponent());
						});
					
						resolve(output);
					});
			}else {
				console.warn("Update Error - No data provided");
				reject("Update Error - No data provided");
			}
		});
	}
	
	//update table data
	updateOrAddData(data){
		var rows = [],
		responses = 0;
		
		this.initGuard();
		
		return new Promise((resolve, reject) => {
			this.dataLoader.blockActiveLoad();
			
			if(typeof data === "string"){
				data = JSON.parse(data);
			}
			
			if(data && data.length > 0){
				data.forEach((item) => {
					var row = this.rowManager.findRow(item[this.options.index]);
					
					responses++;
					
					if(row){
						row.updateData(item)
							.then(()=>{
								responses--;
								rows.push(row.getComponent());
							
								if(!responses){
									resolve(rows);
								}
							});
					}else {
						this.rowManager.addRows(item)
							.then((newRows)=>{
								responses--;
								rows.push(newRows[0].getComponent());
							
								if(!responses){
									resolve(rows);
								}
							});
					}
				});
			}else {
				console.warn("Update Error - No data provided");
				reject("Update Error - No data provided");
			}
		});
	}
	
	//get row object
	getRow(index){
		var row = this.rowManager.findRow(index);
		
		if(row){
			return row.getComponent();
		}else {
			console.warn("Find Error - No matching row found:", index);
			return false;
		}
	}
	
	//get row object
	getRowFromPosition(position){
		var row = this.rowManager.getRowFromPosition(position);
		
		if(row){
			return row.getComponent();
		}else {
			console.warn("Find Error - No matching row found:", position);
			return false;
		}
	}
	
	//delete row from table
	deleteRow(index){
		var foundRows = [];
		
		this.initGuard();
		
		if(!Array.isArray(index)){
			index = [index];
		}
		
		//find matching rows
		for(let item of index){
			let row = this.rowManager.findRow(item, true);
			
			if(row){
				foundRows.push(row);
			}else {
				console.error("Delete Error - No matching row found:", item);
				return Promise.reject("Delete Error - No matching row found");
			}
		}
		
		//sort rows into correct order to ensure smooth delete from table
		foundRows.sort((a, b) => {
			return this.rowManager.rows.indexOf(a) > this.rowManager.rows.indexOf(b) ? 1 : -1;
		});
		
		//delete rows
		foundRows.forEach((row) =>{
			row.delete();
		});
		
		this.rowManager.reRenderInPosition();
		
		return Promise.resolve();
	}
	
	//add row to table
	addRow(data, pos, index){
		this.initGuard();
		
		if(typeof data === "string"){
			data = JSON.parse(data);
		}
		
		return this.rowManager.addRows(data, pos, index, true)
			.then((rows)=>{
				return rows[0].getComponent();
			});
	}
	
	//update a row if it exists otherwise create it
	updateOrAddRow(index, data){
		var row = this.rowManager.findRow(index);
		
		this.initGuard();
		
		if(typeof data === "string"){
			data = JSON.parse(data);
		}
		
		if(row){
			return row.updateData(data)
				.then(()=>{
					return row.getComponent();
				});
		}else {
			return this.rowManager.addRows(data)
				.then((rows)=>{
					return rows[0].getComponent();
				});
		}
	}
	
	//update row data
	updateRow(index, data){
		var row = this.rowManager.findRow(index);
		
		this.initGuard();
		
		if(typeof data === "string"){
			data = JSON.parse(data);
		}
		
		if(row){
			return row.updateData(data)
				.then(()=>{
					return Promise.resolve(row.getComponent());
				});
		}else {
			console.warn("Update Error - No matching row found:", index);
			return Promise.reject("Update Error - No matching row found");
		}
	}
	
	//scroll to row in DOM
	scrollToRow(index, position, ifVisible){
		var row = this.rowManager.findRow(index);
		
		if(row){
			return this.rowManager.scrollToRow(row, position, ifVisible);
		}else {
			console.warn("Scroll Error - No matching row found:", index);
			return Promise.reject("Scroll Error - No matching row found");
		}
	}
	
	moveRow(from, to, after){
		var fromRow = this.rowManager.findRow(from);
		
		this.initGuard();
		
		if(fromRow){
			fromRow.moveToRow(to, after);
		}else {
			console.warn("Move Error - No matching row found:", from);
		}
	}
	
	getRows(active){
		return this.rowManager.getComponents(active);	
	}
	
	//get position of row in table
	getRowPosition(index){
		var row = this.rowManager.findRow(index);
		
		if(row){
			return row.getPosition();
		}else {
			console.warn("Position Error - No matching row found:", index);
			return false;
		}
	}
	
	/////////////// Column Functions  ///////////////
	setColumns(definition){
		this.initGuard(false, "To set initial columns please use the 'columns' property in the table constructor");
		
		this.columnManager.setColumns(definition);
	}
	
	getColumns(structured){
		return this.columnManager.getComponents(structured);
	}
	
	getColumn(field){
		var column = this.columnManager.findColumn(field);
		
		if(column){
			return column.getComponent();
		}else {
			console.warn("Find Error - No matching column found:", field);
			return false;
		}
	}
	
	getColumnDefinitions(){
		return this.columnManager.getDefinitionTree();
	}
	
	showColumn(field){
		var column = this.columnManager.findColumn(field);
		
		this.initGuard();
		
		if(column){
			column.show();
		}else {
			console.warn("Column Show Error - No matching column found:", field);
			return false;
		}
	}
	
	hideColumn(field){
		var column = this.columnManager.findColumn(field); 
		
		this.initGuard();
		
		if(column){
			column.hide();
		}else {
			console.warn("Column Hide Error - No matching column found:", field);
			return false;
		}
	}
	
	toggleColumn(field){
		var column = this.columnManager.findColumn(field);
		
		this.initGuard();
		
		if(column){
			if(column.visible){
				column.hide();
			}else {
				column.show();
			}
		}else {
			console.warn("Column Visibility Toggle Error - No matching column found:", field);
			return false;
		}
	}
	
	addColumn(definition, before, field){
		var column = this.columnManager.findColumn(field);
		
		this.initGuard();
		
		return this.columnManager.addColumn(definition, before, column)
			.then((column) => {
				return column.getComponent();
			});
	}
	
	deleteColumn(field){
		var column = this.columnManager.findColumn(field);
		
		this.initGuard();
		
		if(column){
			return column.delete();
		}else {
			console.warn("Column Delete Error - No matching column found:", field);
			return Promise.reject();
		}
	}
	
	updateColumnDefinition(field, definition){
		var column = this.columnManager.findColumn(field);
		
		this.initGuard();
		
		if(column){
			return column.updateDefinition(definition);
		}else {
			console.warn("Column Update Error - No matching column found:", field);
			return Promise.reject();
		}
	}
	
	moveColumn(from, to, after){
		var fromColumn = this.columnManager.findColumn(from),
		toColumn = this.columnManager.findColumn(to);
		
		this.initGuard();
		
		if(fromColumn){
			if(toColumn){
				this.columnManager.moveColumn(fromColumn, toColumn, after);
			}else {
				console.warn("Move Error - No matching column found:", toColumn);
			}
		}else {
			console.warn("Move Error - No matching column found:", from);
		}
	}
	
	//scroll to column in DOM
	scrollToColumn(field, position, ifVisible){
		return new Promise((resolve, reject) => {
			var column = this.columnManager.findColumn(field);
			
			if(column){
				return this.columnManager.scrollToColumn(column, position, ifVisible);
			}else {
				console.warn("Scroll Error - No matching column found:", field);
				return Promise.reject("Scroll Error - No matching column found");
			}
		});
	}
	
	//////////// General Public Functions ////////////
	//redraw list without updating data
	redraw(force){
		this.initGuard();

		this.columnManager.redraw(force);
		this.rowManager.redraw(force);
	}
	
	setHeight(height){
		this.options.height = isNaN(height) ? height : height + "px";
		this.element.style.height = this.options.height;
		this.rowManager.initializeRenderer();
		this.rowManager.redraw(true);
	}
	
	//////////////////// Event Bus ///////////////////
	
	on(key, callback){
		this.externalEvents.subscribe(key, callback);
	}
	
	off(key, callback){
		this.externalEvents.unsubscribe(key, callback);
	}
	
	dispatchEvent(){
		var args = Array.from(arguments);
		args.shift();
		
		this.externalEvents.dispatch(...arguments);
	}

	//////////////////// Alerts ///////////////////

	alert(contents, type){
		this.initGuard();

		this.alertManager.alert(contents, type);
	}

	clearAlert(){
		this.initGuard();

		this.alertManager.clear();
	}
	
	////////////// Extension Management //////////////
	modExists(plugin, required){
		if(this.modules[plugin]){
			return true;
		}else {
			if(required){
				console.error("Tabulator Module Not Installed: " + plugin);
			}
			return false;
		}
	}
	
	module(key){
		var mod = this.modules[key];
		
		if(!mod){
			console.error("Tabulator module not installed: " + key);
		}
		
		return mod;
	}
}

var Tabulator$1 = Tabulator;

//tabulator with all modules installed

class TabulatorFull extends Tabulator$1 {
	static extendModule(){
		Tabulator$1.initializeModuleBinder(allModules);
		Tabulator$1._extendModule(...arguments);
	}

	static registerModule(){
		Tabulator$1.initializeModuleBinder(allModules);
		Tabulator$1._registerModule(...arguments);
	}

	constructor(element, options, modules){
		super(element, options, allModules);
	}
}

var TabulatorFull$1 = TabulatorFull;

class PseudoRow {

	constructor (type){
		this.type = type;
		this.element = this._createElement();
	}

	_createElement(){
		var el = document.createElement("div");
		el.classList.add("tabulator-row");
		return el;
	}

	getElement(){
		return this.element;
	}

	getComponent(){
		return false;
	}

	getData(){
		return {};
	}

	getHeight(){
		return this.element.outerHeight;
	}

	initialize(){}

	reinitialize(){}

	normalizeHeight(){}

	generateCells(){}

	reinitializeHeight(){}

	calcHeight(){}

	setCellHeight(){}

	clearCellHeight(){}

	rendered(){}
}


//# sourceMappingURL=tabulator_esm.mjs.map


/***/ }),

/***/ "./src/api-holder.js":
/*!***************************!*\
  !*** ./src/api-holder.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gw2api_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gw2api-client */ "./node_modules/gw2api-client/src/index.js");
/* harmony import */ var gw2api_client_src_cache_memory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gw2api-client/src/cache/memory.js */ "./node_modules/gw2api-client/src/cache/memory.js");
/* harmony import */ var gw2api_client_src_cache_browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gw2api-client/src/cache/browser.js */ "./node_modules/gw2api-client/src/cache/browser.js");




function createClient(key) {
    const c = gw2api_client__WEBPACK_IMPORTED_MODULE_0__();
    c.schema("2024-07-20T01:00:00.000Z");
    c.language("en");
    if(key) c.authenticate(key);
    c.cacheStorage([
        gw2api_client_src_cache_memory_js__WEBPACK_IMPORTED_MODULE_1__({ gcTick: 5 * 60 * 1000 }),
        gw2api_client_src_cache_browser_js__WEBPACK_IMPORTED_MODULE_2__({
            storageKey: `gw2api-cache_${key}`,
            gcTick: 3 * 60 * 1000
        })
    ]);
    return c;
}

class Player {
    api;
    constructor(name, emoji, iconUrl, key) {
        this.name = name;
        this.emoji = emoji;
        this.iconUrl = iconUrl;
        this.key = key;
        
        if(!name) throw "Please name the players";
        if(!emoji) throw `${name} needs emoji`;
        if(!key) throw `${name} needs key`;

        this.api = createClient(key);
    }
}

function getApiHolder() {
    if(!window.apiHolder) {
        const players = readPlayers();
        window.apiHolder = {
            players: players,
            api: createClient(null)
        };
    }
    return window.apiHolder;
}

function readPlayers() {
    console.log("todo readplayers");
    var players = [];
    try {
        let storedValue = localStorage.getItem("gw2-no-nuance-players");
        if(storedValue)
            for(var p of JSON.parse(storedValue)) {
                players.push(new Player(p.name, p.emoji, p.iconUrl, p.key));
            }
    } catch(e) {
        alert(e);
    }
    console.log(players);
    return players;
}

function writePlayers(players) {
    console.log("saveplayers todo");
    console.log(players);
    let storedValue = JSON.stringify(players, (key,value) => { if (key=="api") return undefined; else return value; });
    // console.log(storedValue);
    localStorage.setItem("gw2-no-nuance-players", storedValue);
}

function apiHolderSetupHtml(elementId) {
    const element = document.getElementById(elementId);
    element.innerHTML = "";

    const table = document.createElement("table");
    element.appendChild(table);

    //const theader = document.createElement("theader");
    const theaderRow =  table.appendChild(document.createElement("tr"));
    theaderRow.appendChild(document.createElement("th")).innerText = "Player name";
    theaderRow.appendChild(document.createElement("th")).innerText = "Emoji";
    theaderRow.appendChild(document.createElement("th")).innerText = "Icon URL";
    theaderRow.appendChild(document.createElement("th")).innerText = "API Key";
    theaderRow.appendChild(document.createElement("th")).innerText = "";
    //table.appendChild(theader);

    const tbody = document.createElement("tbody");
    table.appendChild(tbody);

    const buttonAdd = document.createElement("button");
    buttonAdd.innerText = "Add row";
    const buttonSave= document.createElement("button");
    buttonSave.innerText = "Save";

    element.appendChild(buttonAdd);
    element.appendChild(buttonSave);

    const addRow = function(player) {
        const row = table.appendChild(document.createElement("tr"));
        console.log("Creating row for player:");
        console.log(player);
        row.appendChild(document.createElement("td")).appendChild(document.createElement("input")).value = player?.name    ?? "";
        row.appendChild(document.createElement("td")).appendChild(document.createElement("input")).value = player?.emoji   ?? "";
        row.appendChild(document.createElement("td")).appendChild(document.createElement("input")).value = player?.iconUrl ?? "";
        row.appendChild(document.createElement("td")).appendChild(document.createElement("input")).value = player?.key     ?? "";
        const del = row.appendChild(document.createElement("td")).appendChild(document.createElement("button"));
        del.innerText = "❌"
        del.onclick = () => { row.remove(); };
    }

    for(var player of readPlayers()) {
        addRow(player);
    }

    buttonAdd.onclick = () => { addRow(null); };
    buttonSave.onclick = () => {
        const players = [];
        for(var i in table.rows) {
            if(i==0) continue;
            const tr = table.rows[i];
            if(tr.localName!="tr") continue;
            const i0 = tr.cells[0].children[0].value
            const i1 = tr.cells[1].children[0].value
            const i2 = tr.cells[2].children[0].value
            const i3 = tr.cells[3].children[0].value
            players.push(new Player(i0,i1,i2,i3));
        }
        writePlayers(players);
    };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    getApiHolder: getApiHolder,
    apiHolderSetupHtml: apiHolderSetupHtml,
});

/***/ }),

/***/ "./src/print.js":
/*!**********************!*\
  !*** ./src/print.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ printMe)
/* harmony export */ });
function printMe() {
  console.log('I get called from print.js!');
}


/***/ }),

/***/ "./src/tables.js":
/*!***********************!*\
  !*** ./src/tables.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tabulator_tables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tabulator-tables */ "./node_modules/tabulator-tables/dist/js/tabulator_esm.mjs");
/* harmony import */ var _api_holder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api-holder.js */ "./src/api-holder.js");
// https://datatables.net/manual/installation




tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.Tabulator.registerModule([tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.HtmlTableImportModule, tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.FilterModule, tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.EditModule, tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.FormatModule, tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.ColumnCalcsModule, tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.MutatorModule, tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.GroupRowsModule]);

/**
 * 
 * @param tableElement 
 * @param columns See https://tabulator.info/docs/6.3/columns, TL;DR: array of objects, each should have "title" + "field"
 * @param tableData array of objects
 * @returns 
 */
function createTableFromData(
    tableElement,
    columns,
    tableData,
) {
    let table = new tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.Tabulator(tableElement, {
        layout: "fitDataFill",
        columns: columns,
        data: tableData
    });

    return table;
}

/**
 * 
 * Creates a table from an HTML table element, and adds a column for each player.
 * The element MUST have an id column.
 * 
 * @param {*} tableElement 
 * @returns 
 */
function createTableWithPlayerColumns(
    tableElement,

) {
    let table = new tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.Tabulator(tableElement, {
        layout: "fitDataFill",
    });

    table.on("tableBuilt", function(){
        // todo hide id column
        for(let player of _api_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].getApiHolder().players) {
            table.addColumn({
                title: player.emoji,
                field: player.name,
                headerHozAlign: "center",
                hozAlign: "center",
                headerFilter:"input",
            });
            player.api.account().achievements().get().then((accountAchievements) => {
                let aa = accountAchievements.reduce((map,obj)=>{ map[obj.id] = obj; return map; });

                for(let r of table.getData()) {
                    let a = aa[r.id];
                    let d = {};

                    let txt = "-";
                    if(a?.done) txt = "✅"
                    else {
                        if(a?.max) txt = `${a?.current??0}/${a?.max}`;
                    }

                    d[player.name] = txt;
                    table.updateRow(r.id, d)
                }

            });
        }
    });

    return table;
}

function createDataTable(tableElement) {
    let table = new tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.Tabulator(tableElement, {
        layout: "fitDataFill",
    });

    table.on("tableBuilt", function(){
        for(let player of _api_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].getApiHolder().players) {
            table.addColumn({
                title: player.emoji,
                field: player.name,
                headerHozAlign: "center",
                hozAlign: "center",
                headerFilter:"input",
            });
            player.api.account().achievements().get().then((accountAchievements) => {
                let aa = accountAchievements.reduce((map,obj)=>{ map[obj.id] = obj; return map; });

                for(let r of table.getData()) {
                    let a = aa[r.id];
                    let d = {};

                    let txt = "-";
                    if(a?.done) txt = "✅"
                    else {
                        if(a?.max) txt = `${a?.current??0}/${a?.max}`;
                    }

                    d[player.name] = txt;
                    table.updateRow(r.id, d)
                }

            });
        }
    });

    return table;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    tabulator: tabulator_tables__WEBPACK_IMPORTED_MODULE_0__.Tabulator,
    createDataTable: createDataTable,
    createTableFromData: createTableFromData,
});


/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

class Coins {
    g;
    s;
    c;
    // use n in calculations
    n;
    // n, but absolute
    nAbsolute;
    sign;
    constructor(n) {
        this.n         = n;
        this.nAbsolute = Math.abs(n);
        this.sign      = Math.sign(n);
        this.g = Math.floor(this.nAbsolute / 10000);
        this.s = Math.floor(this.nAbsolute / 100) % 100;
        this.c = this.nAbsolute % 100;
        
        let txtSign = "";
        let txtG = "";
        let txtS = "";
        if(this.sign < 0)      txtSign = "-";
        if(this.g>0)           txtG = `${this.g}🟡 `;
        if(this.g>0||this.s>0) txtS = `${this.s}⚪ `;
        let                    txtC = `${this.c}🟠`;

        this.txt = `${txtSign}${txtG}${txtS}${txtC}`;
    }
}

function createSpinner() {
    let i = document.createElement("i");
    i.setAttribute("class", "fas fa-spinner fa-pulse");
    return i;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    int2coins: (n)=>new Coins(n),
    createSpinner: createSpinner,
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _print_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./print.js */ "./src/print.js");
/* harmony import */ var _api_holder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api-holder.js */ "./src/api-holder.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./src/util.js");







console.log("HELLO!");

function hello() {
    console.log("Hello from function!");
}

window.gw2 = {
    apiHolder: _api_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    tables: _tables_js__WEBPACK_IMPORTED_MODULE_2__["default"],
    util: _util_js__WEBPACK_IMPORTED_MODULE_3__["default"],
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBZTs7Ozs7Ozs7Ozs7O0FDeENmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7O0FDMUNhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5Q0FBeUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLElBQThCO0FBQ3RDLFlBQVksS0FBNkI7QUFDekM7QUFDQTtBQUNBLFFBQVEsYUFBYTtBQUNyQixNQUFNLEtBQUs7QUFBQSxFQUVOO0FBQ0w7QUFDQSxDQUFDOzs7Ozs7Ozs7OztBQ25DRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscUJBQU0sb0JBQW9CLHFCQUFNO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUJBQU0sb0JBQW9CLHFCQUFNO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RCxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1YsOEVBQThFO0FBQzlFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QixxQkFBcUI7QUFDbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsdUNBQXVDLDRCQUE0QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtCQUErQiwwQkFBMEIsZUFBZTtBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpREFBaUQsYUFBYTs7QUFFOUQ7O0FBRUEsQ0FBQyxJQUFJO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YsYUFBYSxtQ0FBbUMsT0FBTztBQUN2RCxlQUFlO0FBQ2YsZUFBZTtBQUNmLGdCQUFnQjtBQUNoQjs7Ozs7Ozs7Ozs7QUM3cUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7Ozs7OztBQ3JFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7O0FDL0JBLGlCQUFpQixtQkFBTyxDQUFDLGtEQUFVO0FBQ25DLGtCQUFrQixtQkFBTyxDQUFDLGlFQUFZOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7Ozs7Ozs7Ozs7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7Ozs7Ozs7Ozs7O0FDaEVBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN2QkEsY0FBYyxtQkFBTyxDQUFDLDBEQUFZO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLG9FQUFjO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLHdFQUFhO0FBQ3ZDLGFBQWEsbUJBQU8sQ0FBQyx3REFBUTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLE9BQU87QUFDbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsS0FBSztBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLE9BQU87QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDalRBLFdBQVcsbUJBQU8sQ0FBQyw4REFBZ0I7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDBEQUFjO0FBQ3JDLGNBQWMsbUJBQU8sQ0FBQyxnREFBTztBQUM3QixtQkFBbUIsbUJBQU8sQ0FBQyx3REFBUTs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLE9BQU87QUFDbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsS0FBSztBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkJBQTZCLFNBQVM7O0FBRXRDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxTQUFTO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixTQUFTOztBQUV0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsU0FBUztBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkIsU0FBUzs7QUFFdEM7QUFDQTtBQUNBLDhCQUE4QixTQUFTLE1BQU0sR0FBRztBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QixTQUFTLFlBQVksWUFBWTs7QUFFL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsU0FBUztBQUMzQztBQUNBOztBQUVBLGdDQUFnQyxTQUFTLG9DQUFvQyxlQUFlO0FBQzVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QixTQUFTLHlCQUF5QixZQUFZOztBQUU1RTtBQUNBO0FBQ0EsMENBQTBDLFNBQVMsT0FBTyxlQUFlOztBQUV6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOEJBQThCLFNBQVM7O0FBRXZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdFQUF3RSxpQkFBaUIsUUFBUSxLQUFLO0FBQ3RHOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBUztBQUN2Qyw0QkFBNEIsU0FBUyxRQUFRLEtBQUssYUFBYSxLQUFLO0FBQ3BFOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkIsU0FBUzs7QUFFdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFNBQVM7QUFDMUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixTQUFTOztBQUV0QztBQUNBO0FBQ0EsOEJBQThCLFNBQVM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QixTQUFTLG9CQUFvQixpQkFBaUI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCLG1EQUFtRDtBQUM5RSwyQkFBMkIsU0FBUyxRQUFRLEtBQUssYUFBYSxpQkFBaUI7QUFDL0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSwwQkFBMEI7QUFDbkcsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLHNCQUFzQjtBQUM3RixPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0NBQW9DLG1CQUFtQjtBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQ0FBbUMsbUJBQW1CO0FBQ3REOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ25oQkEsYUFBYSxtQkFBTyxDQUFDLHNEQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyw0REFBWTs7QUFFakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTSxHQUFHLE9BQU87QUFDckQ7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsbUJBQW1COzs7Ozs7Ozs7OztBQ3hKbkIseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7QUFDOUMsMkJBQTJCLG1CQUFPLENBQUMsOEVBQWM7QUFDakQsb0JBQW9CLG1CQUFPLENBQUMsZ0VBQU87QUFDbkMseUJBQXlCLG1CQUFPLENBQUMsMEVBQVk7QUFDN0MsNkJBQTZCLG1CQUFPLENBQUMsa0ZBQWdCO0FBQ3JELG9CQUFvQixtQkFBTyxDQUFDLHFGQUFtQjtBQUMvQyxrQkFBa0IsbUJBQU8sQ0FBQyxtRkFBc0I7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7QUM3bUJBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNsRUEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNsQ0EseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNaQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1ZBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDhCQUE4QjtBQUMvRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDhCQUE4QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzFNQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUMsU0FBUztBQUNoRDs7QUFFQTtBQUNBLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUssR0FBRyxLQUFLO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDN0ZBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFlBQVk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzFCQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDVkEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixNQUFNO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDcEJBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxHQUFHO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLG1CQUFtQjtBQUNyQyxxQ0FBcUMsYUFBYTtBQUNsRDs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQzVCQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1ZBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixHQUFHO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIseUJBQXlCO0FBQ3ZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtCQUErQixNQUFNO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix1QkFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix1QkFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMxS0EseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDOUJBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDL0NBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsd0VBQVc7QUFDdEMsd0JBQXdCLG1CQUFPLENBQUMsa0ZBQWdCO0FBQ2hELHFCQUFxQixtQkFBTyxDQUFDLDRFQUFhO0FBQzFDLGlCQUFpQixtQkFBTyxDQUFDLG9FQUFTO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFRO0FBQ2hDLHNCQUFzQixtQkFBTyxDQUFDLDhFQUFjO0FBQzVDLGtCQUFrQixtQkFBTyxDQUFDLHNFQUFVO0FBQ3BDLG9CQUFvQixtQkFBTyxDQUFDLDBFQUFZO0FBQ3hDLHNCQUFzQixtQkFBTyxDQUFDLDhFQUFjO0FBQzVDLHNCQUFzQixtQkFBTyxDQUFDLDhFQUFjO0FBQzVDLHlCQUF5QixtQkFBTyxDQUFDLG9GQUFpQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQywwRUFBWTtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBVTtBQUNwQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBVTtBQUNwQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBVTtBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBUztBQUNsQyxxQkFBcUIsbUJBQU8sQ0FBQyw0RUFBYTtBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQyx3RUFBVztBQUN0QyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBUztBQUNsQyxnQkFBZ0IsbUJBQU8sQ0FBQyxrRUFBUTtBQUNoQyxxQkFBcUIsbUJBQU8sQ0FBQyw0RUFBYTtBQUMxQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBUztBQUNsQyxxQkFBcUIsbUJBQU8sQ0FBQyw0RUFBYTtBQUMxQyxvQkFBb0IsbUJBQU8sQ0FBQywwRUFBWTtBQUN4QywyQkFBMkIsbUJBQU8sQ0FBQyx3RkFBbUI7QUFDdEQsbUJBQW1CLG1CQUFPLENBQUMsd0VBQVc7QUFDdEMsd0JBQXdCLG1CQUFPLENBQUMsa0ZBQWdCO0FBQ2hELHFCQUFxQixtQkFBTyxDQUFDLDRFQUFhO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFRO0FBQ2hDLHFCQUFxQixtQkFBTyxDQUFDLDRFQUFhO0FBQzFDLHFCQUFxQixtQkFBTyxDQUFDLDRFQUFhO0FBQzFDLGlCQUFpQixtQkFBTyxDQUFDLG9FQUFTO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHNFQUFVO0FBQ3BDLGlCQUFpQixtQkFBTyxDQUFDLG9FQUFTO0FBQ2xDLHFCQUFxQixtQkFBTyxDQUFDLDRFQUFhO0FBQzFDLG1CQUFtQixtQkFBTyxDQUFDLHdFQUFXO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFRO0FBQ2hDLHVCQUF1QixtQkFBTyxDQUFDLGdGQUFlO0FBQzlDLGVBQWUsbUJBQU8sQ0FBQyxnRUFBTztBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQywwRUFBWTtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBVTtBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBUztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBUztBQUNsQyxtQkFBbUIsbUJBQU8sQ0FBQyx3RUFBVztBQUN0QyxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBVTtBQUNwQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBVTtBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBUztBQUNsQywyQkFBMkIsbUJBQU8sQ0FBQyx3RkFBbUI7QUFDdEQsbUJBQW1CLG1CQUFPLENBQUMsd0VBQVc7QUFDdEMsa0JBQWtCLG1CQUFPLENBQUMsc0VBQVU7QUFDcEMscUJBQXFCLG1CQUFPLENBQUMsNEVBQWE7QUFDMUMsa0JBQWtCLG1CQUFPLENBQUMsc0VBQVU7QUFDcEMsd0JBQXdCLG1CQUFPLENBQUMsa0ZBQWdCO0FBQ2hELHVCQUF1QixtQkFBTyxDQUFDLGdGQUFlO0FBQzlDLGtCQUFrQixtQkFBTyxDQUFDLHNFQUFVO0FBQ3BDLGVBQWUsbUJBQU8sQ0FBQyxnRUFBTztBQUM5Qjs7Ozs7Ozs7Ozs7QUN6REEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWkEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1ZBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDVkEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2hDQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1ZBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxHQUFHO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxHQUFHLGdCQUFnQixNQUFNLEdBQUcsT0FBTztBQUNyRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDeEpBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDVkEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1ZBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7O0FBRUE7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQztBQUNBOzs7Ozs7Ozs7OztBQy9CQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1pBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzFCQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDVEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1hBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdkNBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFhOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQSx5QkFBeUIsbUJBQU8sQ0FBQyxpRUFBYTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEEseUJBQXlCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsUUFBUTtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsR0FBRztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxHQUFHLFNBQVMsS0FBSyxPQUFPLE1BQU07QUFDdEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsUUFBUTtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNoS0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsSUFBSTtBQUNQOztBQUVBLG1CQUFtQjs7Ozs7Ozs7Ozs7QUNsQm5CLG9CQUFvQix1SUFBeUQ7O0FBRTdFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7O0FDWkE7O0FBRUE7QUFDQSx5REFBeUQsS0FBSztBQUM5RDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDNURBLGVBQWUsbUJBQU8sQ0FBQyw0REFBVTs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFNkM7Ozs7Ozs7Ozs7O0FDL0Q3QztBQUNBOztBQUVBLGtCQUFrQixvQkFBb0I7QUFDdEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNqQkEsY0FBYyxtQkFBTyxDQUFDLHdFQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyx3REFBVzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQjs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUIsb0VBQW9FOztBQUU3RjtBQUNBLE9BQU87QUFDUDtBQUNBLHlCQUF5QiwyR0FBMkc7O0FBRXBJO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxxQkFBcUI7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsaUNBQWlDO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7Ozs7Ozs7Ozs7O0FDdklhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsYUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JIYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZOztBQUU3Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCO0FBQ3RCOztBQUVBO0FBQ0EscURBQXFEO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMERBQTBEOztBQUUxRCxtQkFBbUIsY0FBYzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvRkFBb0Y7O0FBRXBGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsZUFBZSx1QkFBdUI7QUFDdEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsZUFBZSx1QkFBdUI7QUFDdEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixpQkFBaUI7QUFDakI7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsMkNBQTJDLElBQUk7QUFDL0MsaURBQWlEO0FBQ2pELHVEQUF1RDtBQUN2RCxzREFBc0Q7QUFDdEQ7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixnQ0FBZ0M7O0FBRWhDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQixtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCOztBQUV2QixnREFBZ0Q7QUFDaEQseURBQXlEO0FBQ3pELDBEQUEwRDtBQUMxRCw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELDZEQUE2RDtBQUM3RCw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLHVCQUF1Qjs7QUFFdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4QixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekIsd0JBQXdCO0FBQ3hCLDRCQUE0QjtBQUM1QjtBQUNBLHdCQUF3QjtBQUN4Qiw0QkFBNEI7QUFDNUIsMkJBQTJCO0FBQzNCO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQsS0FBSztBQUNMLElBQUk7QUFDSiw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0Esb0ZBQW9GO0FBQ3BGLEtBQUs7QUFDTCxJQUFJO0FBQ0osMEVBQTBFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZUFBZTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsbUJBQW1CO0FBQ25CLDBCQUEwQjtBQUMxQiw2QkFBNkI7QUFDN0Isd0JBQXdCO0FBQ3hCLDRCQUE0QjtBQUM1QixrQ0FBa0M7QUFDbEMscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QywyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0EsaURBQWlEO0FBQ2pELG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsOERBQThEO0FBQzlELHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLCtDQUErQztBQUMvQyxvREFBb0Q7QUFDcEQsa0RBQWtEO0FBQ2xEO0FBQ0EsMERBQTBEO0FBQzFELHNEQUFzRDtBQUN0RCw4REFBOEQ7QUFDOUQsNkRBQTZEO0FBQzdELDJEQUEyRDtBQUMzRDtBQUNBLDhEQUE4RDtBQUM5RCw2REFBNkQ7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUNBQXlDOztBQUV6Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixrQ0FBa0M7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOzs7QUFHQTtBQUNBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QywyQ0FBMkM7QUFDcEY7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsV0FBVyxJQUFJLFNBQVMsTUFBTTs7QUFFOUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixHQUFHLFFBQVEsSUFBSSwwQ0FBMEM7QUFDN0U7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBLGNBQWMsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLGNBQWM7QUFDekMsR0FBRyxHQUFHO0FBQ04sK0NBQStDLEdBQUc7QUFDbEQsMERBQTBEOztBQUUxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscURBQXFEO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTs7QUFFQTtBQUNBLDZCQUE2QjtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixvQkFBb0I7QUFDcEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBCQUEwQjtBQUN6QztBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMEJBQTBCO0FBQ3pDO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBCQUEwQjtBQUN6QztBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0JBQW9CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msc0RBQXNEO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxXQUFXO0FBQ3RELDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLGFBQWE7QUFDMUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQSxpQkFBaUIsb0JBQW9CO0FBQ3JDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GO0FBQ3BGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLDJCQUEyQjtBQUMzQiwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsT0FBTztBQUNQO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9CQUFvQjtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG9CQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxQkFBcUI7QUFDM0M7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7Ozs7QUFJSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFtQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrQkFBa0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLDJDQUEyQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIsMkJBQTJCO0FBQzNCLGlDQUFpQzs7QUFFakM7QUFDQSx3Q0FBd0M7O0FBRXhDLHdCQUF3QjtBQUN4Qjs7QUFFQSxtREFBbUQ7O0FBRW5ELG9EQUFvRDtBQUNwRCwwREFBMEQ7QUFDMUQsZ0VBQWdFO0FBQ2hFLDhEQUE4RDs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEMsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLG1EQUFtRDtBQUNoRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsbURBQW1EO0FBQ2hFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSwrQ0FBK0MsRUFBRTtBQUNqRDtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDRHQUE0RztBQUM1RztBQUNBLEtBQUs7QUFDTDtBQUNBLG9HQUFvRztBQUNwRztBQUNBOzs7QUFHQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixrRkFBa0Y7QUFDbEc7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9DQUFvQztBQUNqRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTs7QUFFQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSixHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLEVBQUU7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxFQUFFO0FBQ0YsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGFBQWEsYUFBYTtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsNENBQTRDLGVBQWU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4REFBOEQ7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGNBQWM7QUFDZCxjQUFjO0FBQ2QsZ0JBQWdCO0FBQ2hCLGVBQWU7QUFDZixnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRCxpREFBaUQ7QUFDakQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLCtCQUErQixjQUFjLEdBQUc7QUFDaEQscUNBQXFDLFdBQVc7QUFDaEQsdUJBQXVCO0FBQ3ZCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsV0FBVztBQUNqRCxnQ0FBZ0MsY0FBYyxHQUFHO0FBQ2pEO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLHVFQUF1RTtBQUN2Rzs7QUFFQTtBQUNBLDhCQUE4QixnQ0FBZ0M7QUFDOUQ7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsNENBQTRDO0FBQzdFOztBQUVBO0FBQ0EsaUNBQWlDLDRDQUE0QztBQUM3RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixxQkFBcUI7QUFDMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQix3QkFBd0I7QUFDN0M7QUFDQSxVQUFVOztBQUVWOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzQkFBc0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsV0FBVztBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDQUE0QyxHQUFHO0FBQy9DLG1EQUFtRDtBQUNuRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNILHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLDBCQUEwQjtBQUMxQix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLDJCQUEyQjtBQUMzQixtQkFBbUI7QUFDbkIsOEJBQThCO0FBQzlCLDJCQUEyQjtBQUMzQixrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHLEdBQUcsY0FBYztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLEdBQUcsY0FBYztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkIsbUJBQW1COztBQUVuQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtEQUFrRDtBQUNsRCxpRUFBaUU7QUFDakUsbUVBQW1FO0FBQ25FO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0osR0FBRyxHQUFHLGNBQWM7QUFDcEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtRUFBbUU7QUFDbkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELHVEQUF1RDtBQUN2RCxxREFBcUQ7QUFDckQsd0RBQXdEO0FBQ3hELHlEQUF5RDtBQUN6RCxnRUFBZ0U7QUFDaEUseURBQXlEO0FBQ3pELDZEQUE2RDtBQUM3RCx3REFBd0Q7QUFDeEQsc0RBQXNELEdBQUc7QUFDekQsMERBQTBELEdBQUc7QUFDN0Qsd0RBQXdEO0FBQ3hELDJEQUEyRDtBQUMzRDtBQUNBLHNEQUFzRDtBQUN0RCx1REFBdUQ7QUFDdkQsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLEdBQUc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFVBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsU0FBUztBQUMvQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUEsc0VBQXNFO0FBQ3RFO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQ7QUFDakQscURBQXFEO0FBQ3JELDREQUE0RDtBQUM1RCw0REFBNEQ7QUFDNUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrREFBa0Q7QUFDbEQscURBQXFEO0FBQ3JELGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFDbEQsaURBQWlEO0FBQ2pELHdEQUF3RDtBQUN4RCw0Q0FBNEMsR0FBRzs7QUFFL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4Qix1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxjQUFjO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsY0FBYztBQUNqRTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9EQUFvRDtBQUNwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFEQUFxRCxjQUFjOztBQUVuRTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0REFBNEQsY0FBYzs7QUFFMUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUI7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtREFBbUQsY0FBYztBQUNqRTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdURBQXVEO0FBQ3ZELHVFQUF1RTtBQUN2RSwyRUFBMkU7QUFDM0Usd0VBQXdFOztBQUV4RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCO0FBQy9COztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLElBQUk7O0FBRUo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLCtCQUErQjtBQUMvQix3QkFBd0I7QUFDeEIsMEJBQTBCO0FBQzFCLHFDQUFxQztBQUNyQztBQUNBLDJEQUEyRDtBQUMzRCxnRUFBZ0U7QUFDaEUsb0VBQW9FO0FBQ3BFLCtEQUErRDtBQUMvRCxzRUFBc0UsYUFBYSxHQUFHO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0osSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3RELDZEQUE2RDtBQUM3RCwwREFBMEQ7QUFDMUQsZ0VBQWdFO0FBQ2hFLHlFQUF5RTtBQUN6RSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNFQUFzRSx5Q0FBeUM7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRFQUE0RSx5Q0FBeUM7QUFDckg7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qix3QkFBd0I7QUFDeEI7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQSxrREFBa0Q7QUFDbEQsMkRBQTJEO0FBQzNELHVEQUF1RDtBQUN2RCx3RkFBd0Y7QUFDeEYsZ0VBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsOEVBQThFO0FBQ2hHO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0Esa0JBQWtCO0FBQ2xCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixxQkFBcUI7O0FBRXJCLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQywrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTCxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDJCQUEyQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw2QkFBNkIsb0JBQW9CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIscUJBQXFCO0FBQ3JCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSwyQkFBMkI7O0FBRTNCLG9CQUFvQjtBQUNwQix1QkFBdUI7O0FBRXZCLDZCQUE2QjtBQUM3QixnQ0FBZ0M7O0FBRWhDLHVCQUF1QjtBQUN2QiwwQkFBMEI7O0FBRTFCLGdDQUFnQzs7QUFFaEMsNkJBQTZCOztBQUU3QixvQ0FBb0M7QUFDcEMsb0NBQW9DOztBQUVwQyw0QkFBNEI7QUFDNUIsK0JBQStCO0FBQy9COztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLDRCQUE0QixzQkFBc0I7O0FBRWxEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCw2QkFBNkIsc0JBQXNCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0FBQ047QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MsaURBQWlEO0FBQ2pELGdEQUFnRDtBQUNoRCwyQkFBMkI7QUFDM0IsbUNBQW1DO0FBQ25DO0FBQ0EsNEJBQTRCO0FBQzVCLCtCQUErQjtBQUMvQiw0QkFBNEI7QUFDNUI7QUFDQSxrQkFBa0I7QUFDbEIsZ0NBQWdDO0FBQ2hDLHdCQUF3QjtBQUN4Qiw0QkFBNEI7QUFDNUI7QUFDQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLHlDQUF5QztBQUN6Qyw0Q0FBNEM7QUFDNUM7QUFDQSwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLFdBQVc7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFVBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0JBQWtCO0FBQzdDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQkFBa0I7QUFDaEQ7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4QkFBOEI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlDQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDO0FBQ3ZDLHlEQUF5RDtBQUN6RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELGNBQWM7QUFDdkU7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsY0FBYztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QixtQkFBbUI7O0FBRTVDO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx3QkFBd0Isc0JBQXNCLHdCQUF3Qjs7QUFFakg7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLDJDQUEyQyx3QkFBd0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlJQUF5SSxzQkFBc0Isd0JBQXdCO0FBQ3ZMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrRUFBK0U7QUFDL0UscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2Qiw4QkFBOEI7QUFDOUIsMEJBQTBCO0FBQzFCLHdCQUF3QjtBQUN4QixrQkFBa0I7O0FBRWxCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKOztBQUVBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsaURBQWlEO0FBQ2pELDZEQUE2RDs7QUFFN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0Qjs7QUFFQSw2Q0FBNkM7QUFDN0Msc0NBQXNDO0FBQ3RDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDJEQUEyRDs7QUFFM0Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsOEJBQThCO0FBQzlCLHdCQUF3QjtBQUN4QixtQ0FBbUM7QUFDbkMscUJBQXFCO0FBQ3JCLDRCQUE0QjtBQUM1Qiw4QkFBOEI7QUFDOUIsb0JBQW9CO0FBQ3BCLCtCQUErQjtBQUMvQjtBQUNBLG9FQUFvRTtBQUNwRSwyQkFBMkI7QUFDM0I7QUFDQSxxQkFBcUI7QUFDckIseUJBQXlCO0FBQ3pCLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQSxLQUFLLG1EQUFtRDtBQUN4RDtBQUNBO0FBQ0EsSUFBSSxnQ0FBZ0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsTUFBTTtBQUNOO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRTB3QztBQUMxd0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0KzVCbUM7QUFDeUI7QUFDUztBQUNyRTtBQUNBO0FBQ0EsY0FBYywwQ0FBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsOERBQVcsR0FBRyx1QkFBdUI7QUFDN0MsUUFBUSwrREFBbUI7QUFDM0Isd0NBQXdDLElBQUk7QUFDNUM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsTUFBTTtBQUNsQywwQkFBMEIsTUFBTTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Qsa0NBQWtDLG9CQUFvQjtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlO0FBQ2Y7QUFDQTtBQUNBLEM7Ozs7Ozs7Ozs7Ozs7OztBQ3RJZTtBQUNmO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0ZBO0FBQ0E7QUFDNko7QUFDckg7QUFDeEM7QUFDQSx1REFBUyxpQkFBaUIsbUVBQXFCLEVBQUUsMERBQVksRUFBRSx3REFBVSxFQUFFLDBEQUFZLEVBQUUsK0RBQWlCLEVBQUUsMkRBQWEsRUFBRSw2REFBZTtBQUMxSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVEQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdURBQVM7QUFDN0I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHNEQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGlFQUFpRSxtQkFBbUIsYUFBYTtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGNBQWMsR0FBRyxPQUFPO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVEQUFTO0FBQzdCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwwQkFBMEIsc0RBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsaUVBQWlFLG1CQUFtQixhQUFhO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsY0FBYyxHQUFHLE9BQU87QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWU7QUFDZixlQUFlLHVEQUFTO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FDeEhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE9BQU87QUFDaEQseUNBQXlDLE9BQU87QUFDaEQseUNBQXlDLE9BQU87QUFDaEQ7QUFDQSxzQkFBc0IsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZTtBQUNmO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7O1VDdkNEO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDdEJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0EsRTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLEdBQUc7V0FDSDtXQUNBO1dBQ0EsQ0FBQyxJOzs7OztXQ1BELHdGOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RCxFOzs7Ozs7Ozs7Ozs7Ozs7O0FDTmlDO0FBQ2pDO0FBQ3lCO0FBQ2U7QUFDUDtBQUNKO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFTO0FBQ3hCLFlBQVksa0RBQU07QUFDbEIsVUFBVSxnREFBSTtBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvaGFzaC5icm93c2VyLmNqcy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2FycmF5LXVuaXF1ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2NodW5rL3NyYy9jaHVuay5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3QvYnJvd3Nlci1wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2RlYm91bmNlL2luZGV4LmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZmFzdC1nZXQvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvY2FjaGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2NhY2hlL21lbW9yeS5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2NhY2hlL251bGwuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludC5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9hY2NvdW50LWJsb2IuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvYWNjb3VudC5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9hY2hpZXZlbWVudHMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvYmFja3N0b3J5LmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL2J1aWxkLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL2NhdHMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvY2hhcmFjdGVycy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9jb2xvcnMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvY29tbWVyY2UuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvY29udGluZW50cy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9jdXJyZW5jaWVzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL2RhaWx5Y3JhZnRpbmcuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvZHVuZ2VvbnMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvZW1ibGVtLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL2Vtb3Rlcy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvZmlsZXMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvZmluaXNoZXJzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL2dsaWRlcnMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvZ3VpbGQuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvaG9tZS5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9ob21lc3RlYWQuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvaXRlbXMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvaXRlbXN0YXRzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL2phZGVib3RzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL2xlZ2VuZGFyeWFybW9yeS5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9sZWdlbmRzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL21haWxjYXJyaWVycy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9tYXBjaGVzdHMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvbWFwcy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9tYXN0ZXJpZXMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvbWF0ZXJpYWxzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL21pbmlzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL21vdW50cy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9ub2Rlcy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9ub3ZlbHRpZXMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvb3V0Zml0cy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9wZXRzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL3Byb2Zlc3Npb25zLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL3B2cC5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9xdWFnZ2Fucy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9xdWVzdHMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvcmFjZXMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvcmFpZHMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvcmVjaXBlcy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9za2lmZnMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvc2tpbGxzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL3NraW5zLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL3NwZWNpYWxpemF0aW9ucy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy9zdG9yaWVzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL3RpdGxlcy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy90b2tlbmluZm8uanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvdHJhaXRzLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZW5kcG9pbnRzL3dpemFyZHN2YXVsdC5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy93b3JsZGJvc3Nlcy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2VuZHBvaW50cy93b3JsZHMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9lbmRwb2ludHMvd3Z3LmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvZ3cyYXBpLWNsaWVudC9zcmMvZmxvdy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2hhc2guanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9ndzJhcGktY2xpZW50L3NyYy9oZWxwZXJzL3Jlc2V0VGltZS5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2d3MmFwaS1jbGllbnQvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvaWRiLWtleXZhbC9kaXN0L2lkYi1rZXl2YWwubWpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvbGV0cy1mZXRjaC9zcmMvZmxvdy5qcyIsIndlYnBhY2s6Ly9zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL2xldHMtZmV0Y2gvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmdpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL25vZGVfbW9kdWxlcy90YWJ1bGF0b3ItdGFibGVzL2Rpc3QvanMvdGFidWxhdG9yX2VzbS5tanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL3NyYy9hcGktaG9sZGVyLmpzIiwid2VicGFjazovL3NjcmlwdHMvLi9zcmMvcHJpbnQuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL3NyYy90YWJsZXMuanMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL3NyYy91dGlsLmpzIiwid2VicGFjazovL3NjcmlwdHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3NjcmlwdHMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zY3JpcHRzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc2NyaXB0cy8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBtdXJtdXJoYXNoMiB2aWEgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzL2Jsb2IvbWFzdGVyL211cm11cmhhc2gyX2djLmpzXG5mdW5jdGlvbiBtdXJtdXJoYXNoMl8zMl9nYyhzdHIpIHtcbiAgdmFyIGwgPSBzdHIubGVuZ3RoLFxuICAgICAgaCA9IGwgXiBsLFxuICAgICAgaSA9IDAsXG4gICAgICBrO1xuXG4gIHdoaWxlIChsID49IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9IChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChrID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gICAgayBePSBrID4+PiAyNDtcbiAgICBrID0gKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KSBeIGs7XG4gICAgbCAtPSA0O1xuICAgICsraTtcbiAgfVxuXG4gIHN3aXRjaCAobCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9IChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChoID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gIH1cblxuICBoIF49IGggPj4+IDEzO1xuICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgaCBePSBoID4+PiAxNTtcbiAgcmV0dXJuIChoID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG11cm11cmhhc2gyXzMyX2djO1xuIiwiLyohXG4gKiBhcnJheS11bmlxdWUgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2FycmF5LXVuaXF1ZT5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHVuaXF1ZShhcnIpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcnJheS11bmlxdWUgZXhwZWN0cyBhbiBhcnJheS4nKTtcbiAgfVxuXG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgaSA9IC0xO1xuXG4gIHdoaWxlIChpKysgPCBsZW4pIHtcbiAgICB2YXIgaiA9IGkgKyAxO1xuXG4gICAgZm9yICg7IGogPCBhcnIubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChhcnJbaV0gPT09IGFycltqXSkge1xuICAgICAgICBhcnIuc3BsaWNlKGotLSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pbW11dGFibGUgPSBmdW5jdGlvbiB1bmlxdWVJbW11dGFibGUoYXJyKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJyYXktdW5pcXVlIGV4cGVjdHMgYW4gYXJyYXkuJyk7XG4gIH1cblxuICB2YXIgYXJyTGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIG5ld0FyciA9IG5ldyBBcnJheShhcnJMZW4pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyTGVuOyBpKyspIHtcbiAgICBuZXdBcnJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gbW9kdWxlLmV4cG9ydHMobmV3QXJyKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gY2h1bmsgKGNvbGxlY3Rpb24sIHNpemUpIHtcclxuICAgIFxyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBkZWZhdWx0IHNpemUgdG8gdHdvIGl0ZW1cclxuICAgICAgICBzaXplID0gcGFyc2VJbnQoc2l6ZSkgfHwgMjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBhZGQgZWFjaCBjaHVuayB0byB0aGUgcmVzdWx0XHJcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBNYXRoLmNlaWwoY29sbGVjdGlvbi5sZW5ndGggLyBzaXplKTsgeCsrKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB4ICogc2l6ZTtcclxuICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgc2l6ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbGxlY3Rpb24uc2xpY2Uoc3RhcnQsIGVuZCkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICBcclxuICAgIH07XHJcblxyXG4gICAgLy8gZXhwb3J0IGluIG5vZGUgb3IgYnJvd3NlclxyXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjaHVuaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZXhwb3J0cy5jaHVuayA9IGNodW5rO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmNodW5rID0gY2h1bms7XHJcbiAgICB9XHJcblxyXG59LmNhbGwodGhpcykpO1xyXG4iLCIvLyBTYXZlIGdsb2JhbCBvYmplY3QgaW4gYSB2YXJpYWJsZVxudmFyIF9fZ2xvYmFsX18gPVxuKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCk7XG4vLyBDcmVhdGUgYW4gb2JqZWN0IHRoYXQgZXh0ZW5kcyBmcm9tIF9fZ2xvYmFsX18gd2l0aG91dCB0aGUgZmV0Y2ggZnVuY3Rpb25cbnZhciBfX2dsb2JhbFRoaXNfXyA9IChmdW5jdGlvbiAoKSB7XG5mdW5jdGlvbiBGKCkge1xudGhpcy5mZXRjaCA9IGZhbHNlO1xudGhpcy5ET01FeGNlcHRpb24gPSBfX2dsb2JhbF9fLkRPTUV4Y2VwdGlvblxufVxuRi5wcm90b3R5cGUgPSBfX2dsb2JhbF9fOyAvLyBOZWVkZWQgZm9yIGZlYXR1cmUgZGV0ZWN0aW9uIG9uIHdoYXR3Zy1mZXRjaCdzIGNvZGVcbnJldHVybiBuZXcgRigpO1xufSkoKTtcbi8vIFdyYXBzIHdoYXR3Zy1mZXRjaCB3aXRoIGEgZnVuY3Rpb24gc2NvcGUgdG8gaGlqYWNrIHRoZSBnbG9iYWwgb2JqZWN0XG4vLyBcImdsb2JhbFRoaXNcIiB0aGF0J3MgZ29pbmcgdG8gYmUgcGF0Y2hlZFxuKGZ1bmN0aW9uKGdsb2JhbFRoaXMpIHtcblxudmFyIGlycmVsZXZhbnQgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cbiAgdmFyIGcgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICB7fTtcblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGcsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGcgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjpcbiAgICAgICdGaWxlUmVhZGVyJyBpbiBnICYmXG4gICAgICAnQmxvYicgaW4gZyAmJlxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5ldyBCbG9iKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIGcsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gZ1xuICB9O1xuXG4gIGZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gIH1cblxuICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICAgIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICAgIF07XG5cbiAgICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIGlmIChoZWFkZXIubGVuZ3RoICE9IDIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIZWFkZXJzIGNvbnN0cnVjdG9yOiBleHBlY3RlZCBuYW1lL3ZhbHVlIHBhaXIgdG8gYmUgbGVuZ3RoIDIsIGZvdW5kJyArIGhlYWRlci5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpO1xuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdO1xuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV07XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgaXRlbXMucHVzaChuYW1lKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH07XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5fbm9Cb2R5KSByZXR1cm5cbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XG4gICAgICB9O1xuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKTtcbiAgICB2YXIgbWF0Y2ggPSAvY2hhcnNldD0oW0EtWmEtejAtOV8tXSspLy5leGVjKGJsb2IudHlwZSk7XG4gICAgdmFyIGVuY29kaW5nID0gbWF0Y2ggPyBtYXRjaFsxXSA6ICd1dGYtOCc7XG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYiwgZW5jb2RpbmcpO1xuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSk7XG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgLypcbiAgICAgICAgZmV0Y2gtbW9jayB3cmFwcyB0aGUgUmVzcG9uc2Ugb2JqZWN0IGluIGFuIEVTNiBQcm94eSB0b1xuICAgICAgICBwcm92aWRlIHVzZWZ1bCB0ZXN0IGhhcm5lc3MgZmVhdHVyZXMgc3VjaCBhcyBmbHVzaC4gSG93ZXZlciwgb25cbiAgICAgICAgRVM1IGJyb3dzZXJzIHdpdGhvdXQgZmV0Y2ggb3IgUHJveHkgc3VwcG9ydCBwb2xseWZpbGxzIG11c3QgYmUgdXNlZDtcbiAgICAgICAgdGhlIHByb3h5LXBvbGx5ZmlsbCBpcyB1bmFibGUgdG8gcHJveHkgYW4gYXR0cmlidXRlIHVubGVzcyBpdCBleGlzdHNcbiAgICAgICAgb24gdGhlIG9iamVjdCBiZWZvcmUgdGhlIFByb3h5IGlzIGNyZWF0ZWQuIFRoaXMgY2hhbmdlIGVuc3VyZXNcbiAgICAgICAgUmVzcG9uc2UuYm9keVVzZWQgZXhpc3RzIG9uIHRoZSBpbnN0YW5jZSwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlXG4gICAgICAgIHNlbWFudGljIG9mIHNldHRpbmcgUmVxdWVzdC5ib2R5VXNlZCBpbiB0aGUgY29uc3RydWN0b3IgYmVmb3JlXG4gICAgICAgIF9pbml0Qm9keSBpcyBjYWxsZWQuXG4gICAgICAqL1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICB0aGlzLmJvZHlVc2VkID0gdGhpcy5ib2R5VXNlZDtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keTtcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ub0JvZHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKTtcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcyk7XG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHZhciBpc0NvbnN1bWVkID0gY29uc3VtZWQodGhpcyk7XG4gICAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodGhpcy5fYm9keUFycmF5QnVmZmVyKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnVmZmVyLnNsaWNlKFxuICAgICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZU9mZnNldCxcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQgKyB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBhcyBBcnJheUJ1ZmZlcicpXG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcyk7XG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0NPTk5FQ1QnLCAnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUEFUQ0gnLCAnUE9TVCcsICdQVVQnLCAnVFJBQ0UnXTtcblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlcXVlc3QpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gICAgfVxuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHk7XG5cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsO1xuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzO1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycyk7XG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZDtcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGU7XG4gICAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbDtcbiAgICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0O1xuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbic7XG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpO1xuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJyk7XG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsO1xuICAgIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWwgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgnQWJvcnRDb250cm9sbGVyJyBpbiBnKSB7XG4gICAgICAgIHZhciBjdHJsID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICByZXR1cm4gY3RybC5zaWduYWw7XG4gICAgICB9XG4gICAgfSgpKTtcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbDtcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSk7XG5cbiAgICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICAgIGlmIChvcHRpb25zLmNhY2hlID09PSAnbm8tc3RvcmUnIHx8IG9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcbiAgICAgICAgLy8gU2VhcmNoIGZvciBhICdfJyBwYXJhbWV0ZXIgaW4gdGhlIHF1ZXJ5IHN0cmluZ1xuICAgICAgICB2YXIgcmVQYXJhbVNlYXJjaCA9IC8oWz8mXSlfPVteJl0qLztcbiAgICAgICAgaWYgKHJlUGFyYW1TZWFyY2gudGVzdCh0aGlzLnVybCkpIHtcbiAgICAgICAgICAvLyBJZiBpdCBhbHJlYWR5IGV4aXN0cyB0aGVuIHNldCB0aGUgdmFsdWUgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5yZXBsYWNlKHJlUGFyYW1TZWFyY2gsICckMV89JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGEgbmV3ICdfJyBwYXJhbWV0ZXIgdG8gdGhlIGVuZCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgICB2YXIgcmVRdWVyeVN0cmluZyA9IC9cXD8vO1xuICAgICAgICAgIHRoaXMudXJsICs9IChyZVF1ZXJ5U3RyaW5nLnRlc3QodGhpcy51cmwpID8gJyYnIDogJz8nKSArICdfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG4gIH07XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGJvZHlcbiAgICAgIC50cmltKClcbiAgICAgIC5zcGxpdCgnJicpXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpO1xuICAgICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICAgIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpO1xuICAgIC8vIEF2b2lkaW5nIHNwbGl0IHZpYSByZWdleCB0byB3b3JrIGFyb3VuZCBhIGNvbW1vbiBJRTExIGJ1ZyB3aXRoIHRoZSBjb3JlLWpzIDMuNi4wIHJlZ2V4IHBvbHlmaWxsXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9mZXRjaC9pc3N1ZXMvNzQ4XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzc1MVxuICAgIHByZVByb2Nlc3NlZEhlYWRlcnNcbiAgICAgIC5zcGxpdCgnXFxyJylcbiAgICAgIC5tYXAoZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXIuaW5kZXhPZignXFxuJykgPT09IDAgPyBoZWFkZXIuc3Vic3RyKDEsIGhlYWRlci5sZW5ndGgpIDogaGVhZGVyXG4gICAgICB9KVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6Jyk7XG4gICAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1Jlc3BvbnNlICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc3BvbnNlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGxlYXNlIHVzZSB0aGUgXCJuZXdcIiBvcGVyYXRvciwgdGhpcyBET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi4nKVxuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCc7XG4gICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXM7XG4gICAgaWYgKHRoaXMuc3RhdHVzIDwgMjAwIHx8IHRoaXMuc3RhdHVzID4gNTk5KSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Jlc3BvbnNlJzogVGhlIHN0YXR1cyBwcm92aWRlZCAoMCkgaXMgb3V0c2lkZSB0aGUgcmFuZ2UgWzIwMCwgNTk5XS5cIilcbiAgICB9XG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMDtcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHQgPT09IHVuZGVmaW5lZCA/ICcnIDogJycgKyBvcHRpb25zLnN0YXR1c1RleHQ7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKTtcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnO1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KTtcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpO1xuXG4gIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgICAgdXJsOiB0aGlzLnVybFxuICAgIH0pXG4gIH07XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMjAwLCBzdGF0dXNUZXh0OiAnJ30pO1xuICAgIHJlc3BvbnNlLm9rID0gZmFsc2U7XG4gICAgcmVzcG9uc2Uuc3RhdHVzID0gMDtcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJztcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfTtcblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF07XG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfTtcblxuICBleHBvcnRzLkRPTUV4Y2VwdGlvbiA9IGcuRE9NRXhjZXB0aW9uO1xuICB0cnkge1xuICAgIG5ldyBleHBvcnRzLkRPTUV4Y2VwdGlvbigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XG4gICAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gICAgfTtcbiAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gZXhwb3J0cy5ET01FeGNlcHRpb247XG4gIH1cblxuICBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBleHBvcnRzLkRPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgICB9XG5cbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgfVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH07XG4gICAgICAgIC8vIFRoaXMgY2hlY2sgaWYgc3BlY2lmaWNhbGx5IGZvciB3aGVuIGEgdXNlciBmZXRjaGVzIGEgZmlsZSBsb2NhbGx5IGZyb20gdGhlIGZpbGUgc3lzdGVtXG4gICAgICAgIC8vIE9ubHkgaWYgdGhlIHN0YXR1cyBpcyBvdXQgb2YgYSBub3JtYWwgcmFuZ2VcbiAgICAgICAgaWYgKHJlcXVlc3QudXJsLmluZGV4T2YoJ2ZpbGU6Ly8nKSA9PT0gMCAmJiAoeGhyLnN0YXR1cyA8IDIwMCB8fCB4aHIuc3RhdHVzID4gNTk5KSkge1xuICAgICAgICAgIG9wdGlvbnMuc3RhdHVzID0gMjAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMuc3RhdHVzID0geGhyLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpO1xuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCB0aW1lZCBvdXQnKSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZWplY3QobmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiB1cmwgPT09ICcnICYmIGcubG9jYXRpb24uaHJlZiA/IGcubG9jYXRpb24uaHJlZiA6IHVybFxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIHVybFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCBmaXhVcmwocmVxdWVzdC51cmwpLCB0cnVlKTtcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhocikge1xuICAgICAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJztcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBzdXBwb3J0LmFycmF5QnVmZmVyXG4gICAgICAgICkge1xuICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpbml0ICYmIHR5cGVvZiBpbml0LmhlYWRlcnMgPT09ICdvYmplY3QnICYmICEoaW5pdC5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycyB8fCAoZy5IZWFkZXJzICYmIGluaXQuaGVhZGVycyBpbnN0YW5jZW9mIGcuSGVhZGVycykpKSB7XG4gICAgICAgIHZhciBuYW1lcyA9IFtdO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbml0LmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgIG5hbWVzLnB1c2gobm9ybWFsaXplTmFtZShuYW1lKSk7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgbm9ybWFsaXplVmFsdWUoaW5pdC5oZWFkZXJzW25hbWVdKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICAgIGlmIChuYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKTtcblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KTtcbiAgICB9KVxuICB9XG5cbiAgZmV0Y2gucG9seWZpbGwgPSB0cnVlO1xuXG4gIGlmICghZy5mZXRjaCkge1xuICAgIGcuZmV0Y2ggPSBmZXRjaDtcbiAgICBnLkhlYWRlcnMgPSBIZWFkZXJzO1xuICAgIGcuUmVxdWVzdCA9IFJlcXVlc3Q7XG4gICAgZy5SZXNwb25zZSA9IFJlc3BvbnNlO1xuICB9XG5cbiAgZXhwb3J0cy5IZWFkZXJzID0gSGVhZGVycztcbiAgZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgZXhwb3J0cy5SZXNwb25zZSA9IFJlc3BvbnNlO1xuICBleHBvcnRzLmZldGNoID0gZmV0Y2g7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZXhwb3J0cztcblxufSkoe30pO1xufSkoX19nbG9iYWxUaGlzX18pO1xuLy8gVGhpcyBpcyBhIHBvbnlmaWxsLCBzby4uLlxuX19nbG9iYWxUaGlzX18uZmV0Y2gucG9ueWZpbGwgPSB0cnVlO1xuZGVsZXRlIF9fZ2xvYmFsVGhpc19fLmZldGNoLnBvbHlmaWxsO1xuLy8gQ2hvb3NlIGJldHdlZW4gbmF0aXZlIGltcGxlbWVudGF0aW9uIChfX2dsb2JhbF9fKSBvciBjdXN0b20gaW1wbGVtZW50YXRpb24gKF9fZ2xvYmFsVGhpc19fKVxudmFyIGN0eCA9IF9fZ2xvYmFsX18uZmV0Y2ggPyBfX2dsb2JhbF9fIDogX19nbG9iYWxUaGlzX187XG5leHBvcnRzID0gY3R4LmZldGNoIC8vIFRvIGVuYWJsZTogaW1wb3J0IGZldGNoIGZyb20gJ2Nyb3NzLWZldGNoJ1xuZXhwb3J0cy5kZWZhdWx0ID0gY3R4LmZldGNoIC8vIEZvciBUeXBlU2NyaXB0IGNvbnN1bWVycyB3aXRob3V0IGVzTW9kdWxlSW50ZXJvcC5cbmV4cG9ydHMuZmV0Y2ggPSBjdHguZmV0Y2ggLy8gVG8gZW5hYmxlOiBpbXBvcnQge2ZldGNofSBmcm9tICdjcm9zcy1mZXRjaCdcbmV4cG9ydHMuSGVhZGVycyA9IGN0eC5IZWFkZXJzXG5leHBvcnRzLlJlcXVlc3QgPSBjdHguUmVxdWVzdFxuZXhwb3J0cy5SZXNwb25zZSA9IGN0eC5SZXNwb25zZVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzXG4iLCIvKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAqIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAqIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICogbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy4gVGhlIGZ1bmN0aW9uIGFsc28gaGFzIGEgcHJvcGVydHkgJ2NsZWFyJyBcbiAqIHRoYXQgaXMgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGNsZWFyIHRoZSB0aW1lciB0byBwcmV2ZW50IHByZXZpb3VzbHkgc2NoZWR1bGVkIGV4ZWN1dGlvbnMuIFxuICpcbiAqIEBzb3VyY2UgdW5kZXJzY29yZS5qc1xuICogQHNlZSBodHRwOi8vdW5zY3JpcHRhYmxlLmNvbS8yMDA5LzAzLzIwL2RlYm91bmNpbmctamF2YXNjcmlwdC1tZXRob2RzL1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb24gdG8gd3JhcFxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXQgaW4gbXMgKGAxMDBgKVxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRvIGV4ZWN1dGUgYXQgdGhlIGJlZ2lubmluZyAoYGZhbHNlYClcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSl7XG4gIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcbiAgaWYgKG51bGwgPT0gd2FpdCkgd2FpdCA9IDEwMDtcblxuICBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICB2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cbiAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGRlYm91bmNlZCA9IGZ1bmN0aW9uKCl7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgIGlmIChjYWxsTm93KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZGVib3VuY2VkLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgXG4gIGRlYm91bmNlZC5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn07XG5cbi8vIEFkZHMgY29tcGF0aWJpbGl0eSBmb3IgRVMgbW9kdWxlc1xuZGVib3VuY2UuZGVib3VuY2UgPSBkZWJvdW5jZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcbiIsImNvbnN0IHJlZ2V4Q2xvc2VTcXVhcmVCcmFja2V0ID0gL118XlxcWy9nXG5jb25zdCByZWdleE9wZW5TcXVhcmVCcmFja2V0ID0gL1xcLj9cXFsvZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB0aGUgb2JqZWN0IGlzIHVuZGVmaW5lZCBvciBub3QgYW4gb2JqZWN0XG4gIGlmICghb2JqZWN0IHx8IE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlXG4gIH1cblxuICAvLyBBKSBJZiB0aGUgcGF0aCBpcyBhbiBhcnJheSwgd2UgY2FuIGp1c3QgdXNlIHRoYXRcbiAgLy8gQikgSWYgdGhlIHBhdGggaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgaW50byBhbiBhcnJheSBieSBtaWdyYXRpbmdcbiAgLy8gICAgYXJyYXktc3R5bGUgYFtmb29dYCBhY2Nlc3NvcnMgaW50byBvYmplY3Qtc3R5bGUgYC5mb29gIGFjY2Vzc29yc1xuICBjb25zdCBjbGVhblBhdGggPSBBcnJheS5pc0FycmF5KHBhdGgpXG4gICAgPyBwYXRoXG4gICAgOiBwYXRoLnJlcGxhY2UocmVnZXhDbG9zZVNxdWFyZUJyYWNrZXQsICcnKS5yZXBsYWNlKHJlZ2V4T3BlblNxdWFyZUJyYWNrZXQsICcuJykuc3BsaXQoJy4nKVxuXG4gIHJldHVybiBnZXQob2JqZWN0LCBjbGVhblBhdGgsIGRlZmF1bHRWYWx1ZSlcbn1cblxuZnVuY3Rpb24gZ2V0IChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICBsZXQgY3VycmVudCA9IG9iamVjdFxuXG4gIGZvciAoY29uc3Qgc2VnbWVudCBvZiBwYXRoKSB7XG4gICAgY3VycmVudCA9IGN1cnJlbnRbc2VnbWVudF1cblxuICAgIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3VycmVudFxufVxuIiwiY29uc3QgZGVib3VuY2UgPSByZXF1aXJlKCdkZWJvdW5jZScpXG5jb25zdCBpZGJLZXl2YWwgPSByZXF1aXJlKCdpZGIta2V5dmFsJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7XG4gICAgc3RvcmFnZUtleTogJ2d3MmFwaS1jYWNoZScsXG4gICAgZ2NUaWNrOiA1ICogNjAgKiAxMDAwLFxuICAgIHBlcnNpc3REZWJvdW5jZTogMyAqIDEwMDAsXG4gICAgc3RvcmFnZUVuZ2luZTogaWRiS2V5dmFsXG4gIH0sIGNvbmZpZ3VyYXRpb24pXG5cbiAgbGV0IF9zdG9yYWdlID0ge31cbiAgY29uc3Qgc3RvcmFnZUVuZ2luZSA9IGNvbmZpZ3VyYXRpb24uc3RvcmFnZUVuZ2luZVxuICBjb25zdCBzdG9yYWdlS2V5ID0gY29uZmlndXJhdGlvbi5zdG9yYWdlS2V5XG4gIGNvbnN0IHBlcnNpc3QgPSBkZWJvdW5jZShfcGVyc2lzdCwgY29uZmlndXJhdGlvbi5wZXJzaXN0RGVib3VuY2UpXG5cbiAgZnVuY3Rpb24gZ2V0IChrZXkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF9nZXQoa2V5KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldCAoa2V5LCB2YWx1ZSwgZXhwaXJ5KSB7XG4gICAgX3NldChrZXksIHZhbHVlLCBleHBpcnkpXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gbWdldCAoa2V5cykge1xuICAgIGxldCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gX2dldChrZXkpKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWVzKVxuICB9XG5cbiAgZnVuY3Rpb24gbXNldCAodmFsdWVzKSB7XG4gICAgdmFsdWVzLm1hcCh2YWx1ZSA9PiB7XG4gICAgICBfc2V0KHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0pXG4gICAgfSlcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXQgKGtleSkge1xuICAgIGxldCB2YWx1ZSA9IF9zdG9yYWdlW2tleV1cbiAgICBsZXQgbm93ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5leHBpcnkgPiBub3cgPyB2YWx1ZS52YWx1ZSA6IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXQgKGtleSwgdmFsdWUsIGV4cGlyeSkge1xuICAgIF9zdG9yYWdlW2tleV0gPSB7IHZhbHVlLCBleHBpcnk6IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgKyBleHBpcnkgKiAxMDAwIH1cbiAgICBwZXJzaXN0KClcbiAgfVxuXG4gIGZ1bmN0aW9uIF9wZXJzaXN0ICgpIHtcbiAgICBzdG9yYWdlRW5naW5lLnNldChzdG9yYWdlS2V5LCBfc3RvcmFnZSlcbiAgICAgIC5jYXRjaCgvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCBwZXJzaXN0aW5nIGNhY2hlJywgZXJyKVxuICAgICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKCkge1xuICAgIHN0b3JhZ2VFbmdpbmUuZ2V0KHN0b3JhZ2VLZXkpXG4gICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIF9zdG9yYWdlID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoICgpIHtcbiAgICBfc3RvcmFnZSA9IHt9XG4gICAgc3RvcmFnZUVuZ2luZS5kZWxldGUoc3RvcmFnZUtleSlcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpXG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0U3RvcmFnZSAoKSB7XG4gICAgcmV0dXJuIF9zdG9yYWdlXG4gIH1cblxuICBmdW5jdGlvbiBnYXJiYWdlQ29sbGVjdGlvbiAoKSB7XG4gICAgY29uc3Qgbm93ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhfc3RvcmFnZSlcblxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoX3N0b3JhZ2Vba2V5c1tpXV0uZXhwaXJ5IDwgbm93KSB7XG4gICAgICAgIGRlbGV0ZSBfc3RvcmFnZVtrZXlzW2ldXVxuICAgICAgfVxuICAgIH1cblxuICAgIHBlcnNpc3QoKVxuICB9XG5cbiAgc2V0SW50ZXJ2YWwoZ2FyYmFnZUNvbGxlY3Rpb24sIGNvbmZpZ3VyYXRpb24uZ2NUaWNrKVxuICBoeWRyYXRlKClcbiAgZ2FyYmFnZUNvbGxlY3Rpb24oKVxuXG4gIHJldHVybiB7IGdldCwgc2V0LCBtZ2V0LCBtc2V0LCBmbHVzaCwgX2dldFN0b3JhZ2UgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7XG4gICAgZ2NUaWNrOiA1ICogNjAgKiAxMDAwXG4gIH0sIGNvbmZpZ3VyYXRpb24pXG5cbiAgLy8gU2NvcGUgdGhlIHN0b3JhZ2UgdG8gdGhlIGZ1bmN0aW9uLCBzbyBtdWx0aXBsZSBpbnN0YW5jZXMgZG9uJ3QgaW50ZXJmZXJlXG4gIGxldCBfc3RvcmFnZSA9IHt9XG5cbiAgZnVuY3Rpb24gZ2V0IChrZXkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF9nZXQoa2V5KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXQgKGtleSkge1xuICAgIGxldCB2YWx1ZSA9IF9zdG9yYWdlW2tleV1cbiAgICBsZXQgbm93ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5leHBpcnkgPiBub3cgPyB2YWx1ZS52YWx1ZSA6IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldCAoa2V5LCB2YWx1ZSwgZXhwaXJ5KSB7XG4gICAgX3NldChrZXksIHZhbHVlLCBleHBpcnkpXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gX3NldCAoa2V5LCB2YWx1ZSwgZXhwaXJ5KSB7XG4gICAgX3N0b3JhZ2Vba2V5XSA9IHsgdmFsdWUsIGV4cGlyeTogKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArIGV4cGlyeSAqIDEwMDAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWdldCAoa2V5cykge1xuICAgIGxldCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gX2dldChrZXkpKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWVzKVxuICB9XG5cbiAgZnVuY3Rpb24gbXNldCAodmFsdWVzKSB7XG4gICAgdmFsdWVzLm1hcCh2YWx1ZSA9PiB7XG4gICAgICBfc2V0KHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0pXG4gICAgfSlcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoICgpIHtcbiAgICBfc3RvcmFnZSA9IHt9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gX2dldFN0b3JhZ2UgKCkge1xuICAgIHJldHVybiBfc3RvcmFnZVxuICB9XG5cbiAgZnVuY3Rpb24gZ2FyYmFnZUNvbGxlY3Rpb24gKCkge1xuICAgIGNvbnN0IG5vdyA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoX3N0b3JhZ2UpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSAhPT0ga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKF9zdG9yYWdlW2tleXNbaV1dLmV4cGlyeSA8IG5vdykge1xuICAgICAgICBkZWxldGUgX3N0b3JhZ2Vba2V5c1tpXV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRJbnRlcnZhbChnYXJiYWdlQ29sbGVjdGlvbiwgY29uZmlndXJhdGlvbi5nY1RpY2spXG4gIGdhcmJhZ2VDb2xsZWN0aW9uKClcblxuICByZXR1cm4geyBnZXQsIHNldCwgbWdldCwgbXNldCwgZmx1c2gsIF9nZXRTdG9yYWdlIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geyBnZXQsIHNldCwgbWdldCwgbXNldCwgZmx1c2ggfVxufVxuXG5mdW5jdGlvbiBnZXQgKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpXG59XG5cbmZ1bmN0aW9uIHNldCAoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSlcbn1cblxuZnVuY3Rpb24gbWdldCAoa2V5cykge1xuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcCh4ID0+IG51bGwpXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWVzKVxufVxuXG5mdW5jdGlvbiBtc2V0ICgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKVxufVxuXG5mdW5jdGlvbiBmbHVzaCAoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSlcbn1cbiIsImNvbnN0IGZldGNoID0gcmVxdWlyZSgnbGV0cy1mZXRjaCcpXG5jb25zdCBudWxsQ2FjaGUgPSByZXF1aXJlKCcuL2NhY2hlL251bGwnKVxuY29uc3QgZW5kcG9pbnRzID0gcmVxdWlyZSgnLi9lbmRwb2ludHMnKVxuY29uc3QgZmxvdyA9IHJlcXVpcmUoJy4vZmxvdycpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuc2NoZW1hVmVyc2lvbiA9ICcyMDE5LTAzLTIwVDAwOjAwOjAwLjAwMFonXG4gICAgdGhpcy5sYW5nID0gJ2VuJ1xuICAgIHRoaXMuYXBpS2V5ID0gZmFsc2VcbiAgICB0aGlzLmZldGNoID0gZmV0Y2hcbiAgICB0aGlzLmNhY2hlcyA9IFtudWxsQ2FjaGUoKV1cbiAgICB0aGlzLmRlYnVnID0gZmFsc2VcbiAgICB0aGlzLmNsaWVudCA9IHRoaXNcbiAgfVxuXG4gIC8vIFNldCB0aGUgc2NoZW1hIHZlcnNpb25cbiAgc2NoZW1hIChzY2hlbWEpIHtcbiAgICB0aGlzLnNjaGVtYVZlcnNpb24gPSBzY2hlbWFcbiAgICB0aGlzLmRlYnVnTWVzc2FnZShgc2V0IHRoZSBzY2hlbWEgdG8gJHtzY2hlbWF9YClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gU2V0IHRoZSBsYW5ndWFnZSBmb3IgbG9jYWxlLWF3YXJlIGVuZHBvaW50c1xuICBsYW5ndWFnZSAobGFuZykge1xuICAgIHRoaXMubGFuZyA9IGxhbmdcbiAgICB0aGlzLmRlYnVnTWVzc2FnZShgc2V0IHRoZSBsYW5ndWFnZSB0byAke2xhbmd9YClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gU2V0IHRoZSBhcGkga2V5IGZvciBhdXRoZW50aWNhdGVkIGVuZHBvaW50c1xuICBhdXRoZW50aWNhdGUgKGFwaUtleSkge1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5XG4gICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYHNldCB0aGUgYXBpIGtleSB0byAke2FwaUtleX1gKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBTZXQgdGhlIGNhY2hpbmcgc3RvcmFnZSBtZXRob2QocylcbiAgY2FjaGVTdG9yYWdlIChjYWNoZXMpIHtcbiAgICB0aGlzLmNhY2hlcyA9IFtdLmNvbmNhdChjYWNoZXMpXG4gICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYHVwZGF0ZWQgdGhlIGNhY2hlIHN0b3JhZ2VgKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBTZXQgdGhlIGRlYnVnZ2luZyBmbGFnXG4gIGRlYnVnZ2luZyAoZmxhZykge1xuICAgIHRoaXMuZGVidWcgPSBmbGFnXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIFByaW50IG91dCBhIGRlYnVnIG1lc3NhZ2UgaWYgZGVidWdnaW5nIGlzIGVuYWJsZWRcbiAgZGVidWdNZXNzYWdlIChzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coYFtndzJhcGktY2xpZW50XSAke3N0cmluZ31gKVxuICAgIH1cbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBnZXQgdGhlIG5ldyBjb250ZW50IGlmIHRoZSBnYW1lIHVwZGF0ZXNcbiAgZmx1c2hDYWNoZUlmR2FtZVVwZGF0ZWQgKCkge1xuICAgIGNvbnN0IGJ1aWxkRW5kcG9pbnQgPSB0aGlzLmJ1aWxkKClcbiAgICBjb25zdCBwcm9taXNlcyA9IHtcbiAgICAgIGNhY2hlQnVpbGRJZDogKCkgPT4gYnVpbGRFbmRwb2ludC5fY2FjaGVHZXRTaW5nbGUoJ2NhY2hlQnVpbGRJZCcpLFxuICAgICAgYnVpbGRJZDogKCkgPT4gYnVpbGRFbmRwb2ludC5saXZlKCkuZ2V0KClcbiAgICB9XG5cbiAgICByZXR1cm4gZmxvdy5wYXJhbGxlbChwcm9taXNlcykudGhlbihyZXNwID0+IHtcbiAgICAgIGxldCBmbHVzaFByb21pc2VzID0gW11cblxuICAgICAgLy8gRmx1c2ggdGhlIGNhY2hlcyBpZiB0aGUgY2FjaGVkIGJ1aWxkIGlkIGlzIHNldCAoYXMgYSBzYWZldHkgbWVhc3VyZSlcbiAgICAgIC8vIGFuZCB0aGUgY2FjaGVkIGJ1aWxkIGlkIGlzIG9sZGVyIHRoYW4gdGhlIGN1cnJlbnQgb25lXG4gICAgICBpZiAocmVzcC5jYWNoZUJ1aWxkSWQgJiYgcmVzcC5jYWNoZUJ1aWxkSWQgPCByZXNwLmJ1aWxkSWQpIHtcbiAgICAgICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYGZsdXNoaW5nIHRoZSBjYWNoZSBiZWNhdXNlIG9mIGEgbmV3IGJ1aWxkYClcbiAgICAgICAgZmx1c2hQcm9taXNlcyA9IHRoaXMuY2FjaGVzLm1hcChjYWNoZSA9PiAoKSA9PiBjYWNoZS5mbHVzaCgpKVxuICAgICAgfVxuXG4gICAgICAvLyBGbHVzaCB0aGUgY2FjaGVzIChpZiBuZWVkZWQpIGFuZCBzYXZlIHRoZSBjdXJyZW50IGJ1aWxkIGlkXG4gICAgICByZXR1cm4gZmxvdy5wYXJhbGxlbChmbHVzaFByb21pc2VzKVxuICAgICAgICAudGhlbigoKSA9PiBidWlsZEVuZHBvaW50Ll9jYWNoZVNldFNpbmdsZSgnY2FjaGVCdWlsZElkJywgcmVzcC5idWlsZElkKSlcbiAgICB9KVxuICB9XG5cbiAgLy8gQWxsIHRoZSBkaWZmZXJlbnQgQVBJIGVuZHBvaW50c1xuICBhY2NvdW50ICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5BY2NvdW50RW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGFjaGlldmVtZW50cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuQWNoaWV2ZW1lbnRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGJhY2tzdG9yeSAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuQmFja3N0b3J5RW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGJ1aWxkICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5CdWlsZEVuZHBvaW50KHRoaXMpXG4gIH1cblxuICBjYXRzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5DYXRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGNoYXJhY3RlcnMgKG5hbWUpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5DaGFyYWN0ZXJzRW5kcG9pbnQodGhpcywgbmFtZSlcbiAgfVxuXG4gIGNvbG9ycyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuQ29sb3JzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGNvbW1lcmNlICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5Db21tZXJjZUVuZHBvaW50KHRoaXMpXG4gIH1cblxuICBjb250aW5lbnRzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5Db250aW5lbnRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGN1cnJlbmNpZXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLkN1cnJlbmNpZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZGFpbHljcmFmdGluZyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuRGFpbHljcmFmdGluZ0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBkdW5nZW9ucyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuRHVuZ2VvbnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZW1ibGVtICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5FbWJsZW1FbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZW1vdGVzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5FbW90ZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZXZlbnRzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5FdmVudHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZmlsZXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLkZpbGVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGZpbmlzaGVycyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuRmluaXNoZXJzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGdsaWRlcnMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLkdsaWRlcnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZ3VpbGQgKGlkKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuR3VpbGRFbmRwb2ludCh0aGlzLCBpZClcbiAgfVxuXG4gIGhvbWUgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLkhvbWVFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgaG9tZXN0ZWFkICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5Ib21lc3RlYWRFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgaXRlbXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLkl0ZW1zRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGl0ZW1zdGF0cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuSXRlbXN0YXRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGphZGVib3RzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5KYWRlYm90c0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBsZWdlbmRhcnlhcm1vcnkgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLkxlZ2VuZGFyeWFybW9yeUVuZHBvaW50KHRoaXMpXG4gIH1cblxuICBsZWdlbmRzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5MZWdlbmRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIG1haWxjYXJyaWVycyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuTWFpbGNhcnJpZXJzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIG1hcGNoZXN0cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuTWFwY2hlc3RzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIG1hcHMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLk1hcHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbWFzdGVyaWVzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5NYXN0ZXJpZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbWF0ZXJpYWxzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5NYXRlcmlhbHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbWluaXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLk1pbmlzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIG1vdW50cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuTW91bnRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIG5vZGVzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5Ob2Rlc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBub3ZlbHRpZXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLk5vdmVsdGllc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBvdXRmaXRzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5PdXRmaXRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHBldHMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLlBldHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgcHJvZmVzc2lvbnMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLlByb2Zlc3Npb25zRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHB2cCAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuUHZwRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHF1YWdnYW5zICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5RdWFnZ2Fuc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBxdWVzdHMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLlF1ZXN0c0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICByYWNlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuUmFjZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgcmFpZHMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLlJhaWRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHJlY2lwZXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLlJlY2lwZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgc2tpZmZzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5Ta2lmZnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgc2tpbGxzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5Ta2lsbHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgc2tpbnMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLlNraW5zRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHNwZWNpYWxpemF0aW9ucyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuU3BlY2lhbGl6YXRpb25zRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHN0b3JpZXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLlN0b3JpZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgdGl0bGVzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5UaXRsZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgdG9rZW5pbmZvICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5Ub2tlbmluZm9FbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgdHJhaXRzICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5UcmFpdHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgd2l6YXJkc3ZhdWx0ICgpIHtcbiAgICByZXR1cm4gbmV3IGVuZHBvaW50cy5XaXphcmRzdmF1bHRFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgd29ybGRib3NzZXMgKCkge1xuICAgIHJldHVybiBuZXcgZW5kcG9pbnRzLldvcmxkYm9zc2VzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHdvcmxkcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuV29ybGRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHd2dyAoKSB7XG4gICAgcmV0dXJuIG5ldyBlbmRwb2ludHMuV3Z3RW5kcG9pbnQodGhpcylcbiAgfVxufVxuIiwiY29uc3QgcXMgPSByZXF1aXJlKCdxdWVyeXN0cmluZ2lmeScpXG5jb25zdCB1bmlxdWUgPSByZXF1aXJlKCdhcnJheS11bmlxdWUnKVxuY29uc3QgY2h1bmsgPSByZXF1aXJlKCdjaHVuaycpXG5jb25zdCBoYXNoU3RyaW5nID0gcmVxdWlyZSgnLi9oYXNoJylcblxuY29uc3QgY2xvbmUgPSAoeCkgPT4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh4KSlcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKHBhcmVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gcGFyZW50LmNsaWVudFxuICAgIHRoaXMuc2NoZW1hVmVyc2lvbiA9IHBhcmVudC5zY2hlbWFWZXJzaW9uIHx8ICcyMDE5LTAzLTIwVDAwOjAwOjAwLjAwMFonXG4gICAgdGhpcy5sYW5nID0gcGFyZW50LmxhbmdcbiAgICB0aGlzLmFwaUtleSA9IHBhcmVudC5hcGlLZXlcbiAgICB0aGlzLmZldGNoID0gcGFyZW50LmZldGNoXG4gICAgdGhpcy5jYWNoZXMgPSBwYXJlbnQuY2FjaGVzXG4gICAgdGhpcy5kZWJ1ZyA9IHBhcmVudC5kZWJ1Z1xuXG4gICAgdGhpcy5iYXNlVXJsID0gJ2h0dHBzOi8vYXBpLmd1aWxkd2FyczIuY29tJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSBmYWxzZVxuICAgIHRoaXMubWF4UGFnZVNpemUgPSAyMDBcbiAgICB0aGlzLmlzQnVsayA9IGZhbHNlXG4gICAgdGhpcy5idWxrSWQgPSAnaWQnXG4gICAgdGhpcy5zdXBwb3J0c0J1bGtBbGwgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IGZhbHNlXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSBmYWxzZVxuICAgIHRoaXMuaXNPcHRpb25hbGx5QXV0aGVudGljYXRlZCA9IGZhbHNlXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGZhbHNlXG5cbiAgICB0aGlzLl9za2lwQ2FjaGUgPSBmYWxzZVxuICB9XG5cbiAgLy8gU2V0IHRoZSBzY2hlbWEgdmVyc2lvblxuICBzY2hlbWEgKHNjaGVtYSkge1xuICAgIHRoaXMuc2NoZW1hVmVyc2lvbiA9IHNjaGVtYVxuICAgIHRoaXMuZGVidWdNZXNzYWdlKGBzZXQgdGhlIHNjaGVtYSB0byAke3NjaGVtYX1gKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgc2NoZW1hIHZlcnNpb24gaW5jbHVkZXMgYSBzcGVjaWZpYyB2ZXJzaW9uXG4gIF9zY2hlbWFJbmNsdWRlcyAoZGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnNjaGVtYVZlcnNpb24gPj0gZGF0ZVxuICB9XG5cbiAgLy8gU2V0IHRoZSBsYW5ndWFnZSBmb3IgbG9jYWxlLWF3YXJlIGVuZHBvaW50c1xuICBsYW5ndWFnZSAobGFuZykge1xuICAgIHRoaXMubGFuZyA9IGxhbmdcbiAgICB0aGlzLmRlYnVnTWVzc2FnZShgc2V0IHRoZSBsYW5ndWFnZSB0byAke2xhbmd9YClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gU2V0IHRoZSBhcGkga2V5IGZvciBhdXRoZW50aWNhdGVkIGVuZHBvaW50c1xuICBhdXRoZW50aWNhdGUgKGFwaUtleSkge1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5XG4gICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYHNldCB0aGUgYXBpIGtleSB0byAke2FwaUtleX1gKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBTZXQgdGhlIGRlYnVnZ2luZyBmbGFnXG4gIGRlYnVnZ2luZyAoZmxhZykge1xuICAgIHRoaXMuZGVidWcgPSBmbGFnXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIFByaW50IG91dCBhIGRlYnVnIG1lc3NhZ2UgaWYgZGVidWdnaW5nIGlzIGVuYWJsZWRcbiAgZGVidWdNZXNzYWdlIChzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coYFtndzJhcGktY2xpZW50XSAke3N0cmluZ31gKVxuICAgIH1cbiAgfVxuXG4gIC8vIFNraXAgY2FjaGluZyBhbmQgZ2V0IHRoZSBsaXZlIGRhdGFcbiAgbGl2ZSAoKSB7XG4gICAgdGhpcy5fc2tpcENhY2hlID0gdHJ1ZVxuICAgIHRoaXMuZGVidWdNZXNzYWdlKGBza2lwcGluZyBjYWNoZWApXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEdldCBhbGwgaWRzXG4gIGlkcyAoKSB7XG4gICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYGlkcygke3RoaXMudXJsfSkgY2FsbGVkYClcblxuICAgIGlmICghdGhpcy5pc0J1bGspIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1wiaWRzXCIgaXMgb25seSBhdmFpbGFibGUgZm9yIGJ1bGsgZXhwYW5kaW5nIGVuZHBvaW50cycpKVxuICAgIH1cblxuICAgIC8vIFRoZXJlIGlzIG5vIGNhY2hlIHRpbWUgc2V0LCBzbyBhbHdheXMgdXNlIHRoZSBsaXZlIGRhdGFcbiAgICBpZiAoIXRoaXMuY2FjaGVUaW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWRzKClcbiAgICB9XG5cbiAgICAvLyBHZXQgYXMgbXVjaCBhcyBwb3NzaWJsZSBvdXQgb2YgdGhlIGNhY2hlXG4gICAgY29uc3QgaGFzaCA9IHRoaXMuX2NhY2hlSGFzaCgnaWRzJylcbiAgICBjb25zdCBoYW5kbGVDYWNoZUNvbnRlbnQgPSAoY2FjaGVkKSA9PiB7XG4gICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHRoaXMuZGVidWdNZXNzYWdlKGBpZHMoJHt0aGlzLnVybH0pIHJlc29sdmluZyBmcm9tIGNhY2hlYClcbiAgICAgICAgcmV0dXJuIGNhY2hlZFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5faWRzKCkudGhlbihjb250ZW50ID0+IHtcbiAgICAgICAgdGhpcy5fY2FjaGVTZXRTaW5nbGUoaGFzaCwgY29udGVudClcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBjb250ZW50IGVpdGhlciBmcm9tIHRoZSBjYWNoZSBvciBBUEksIHdyaXRlIGl0IGludG8gdGhlIGNhY2hlIGFuZCByZXR1cm4gYSBjbG9uZVxuICAgIGNvbnN0IGNvbnRlbnRQcm9taXNlID0gdGhpcy5fc2tpcENhY2hlXG4gICAgICA/IFByb21pc2UucmVzb2x2ZShmYWxzZSkudGhlbihoYW5kbGVDYWNoZUNvbnRlbnQpXG4gICAgICA6IHRoaXMuX2NhY2hlR2V0U2luZ2xlKGhhc2gpLnRoZW4oaGFuZGxlQ2FjaGVDb250ZW50KVxuXG4gICAgcmV0dXJuIGNvbnRlbnRQcm9taXNlLnRoZW4oY2xvbmUpXG4gIH1cblxuICAvLyBHZXQgYWxsIGlkcyBmcm9tIHRoZSBsaXZlIEFQSVxuICBfaWRzICgpIHtcbiAgICB0aGlzLmRlYnVnTWVzc2FnZShgaWRzKCR7dGhpcy51cmx9KSByZXF1ZXN0aW5nIGZyb20gYXBpYClcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdCh0aGlzLnVybClcbiAgfVxuXG4gIC8vIEdldCBhIHNpbmdsZSBlbnRyeSBieSBpZFxuICBnZXQgKGlkLCB1cmwgPSBmYWxzZSkge1xuICAgIHRoaXMuZGVidWdNZXNzYWdlKGBnZXQoJHt0aGlzLnVybH0pIGNhbGxlZGApXG5cbiAgICBpZiAoIWlkICYmIHRoaXMuaXNCdWxrICYmICF1cmwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1wiZ2V0XCIgcmVxdWlyZXMgYW4gaWQnKSlcbiAgICB9XG5cbiAgICAvLyBUaGVyZSBpcyBubyBjYWNoZSB0aW1lIHNldCwgc28gYWx3YXlzIHVzZSB0aGUgbGl2ZSBkYXRhXG4gICAgaWYgKCF0aGlzLmNhY2hlVGltZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdXJsKVxuICAgIH1cblxuICAgIC8vIEdldCBhcyBtdWNoIGFzIHBvc3NpYmxlIG91dCBvZiB0aGUgY2FjaGVcbiAgICBjb25zdCBoYXNoID0gdGhpcy5fY2FjaGVIYXNoKGlkKVxuICAgIGNvbnN0IGhhbmRsZUNhY2hlQ29udGVudCA9IChjYWNoZWQpID0+IHtcbiAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYGdldCgke3RoaXMudXJsfSkgcmVzb2x2aW5nIGZyb20gY2FjaGVgKVxuICAgICAgICByZXR1cm4gY2FjaGVkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHVybCkudGhlbihjb250ZW50ID0+IHtcbiAgICAgICAgdGhpcy5fY2FjaGVTZXRTaW5nbGUoaGFzaCwgY29udGVudClcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBjb250ZW50IGVpdGhlciBmcm9tIHRoZSBjYWNoZSBvciBBUEksIHdyaXRlIGl0IGludG8gdGhlIGNhY2hlIGFuZCByZXR1cm4gYSBjbG9uZVxuICAgIGNvbnN0IGNvbnRlbnRQcm9taXNlID0gdGhpcy5fc2tpcENhY2hlXG4gICAgICA/IFByb21pc2UucmVzb2x2ZShmYWxzZSkudGhlbihoYW5kbGVDYWNoZUNvbnRlbnQpXG4gICAgICA6IHRoaXMuX2NhY2hlR2V0U2luZ2xlKGhhc2gpLnRoZW4oaGFuZGxlQ2FjaGVDb250ZW50KVxuXG4gICAgcmV0dXJuIGNvbnRlbnRQcm9taXNlLnRoZW4oY2xvbmUpXG4gIH1cblxuICAvLyBHZXQgYSBzaW5nbGUgZW50cnkgYnkgaWQgZnJvbSB0aGUgbGl2ZSBBUElcbiAgX2dldCAoaWQsIHVybCkge1xuICAgIHRoaXMuZGVidWdNZXNzYWdlKGBnZXQoJHt0aGlzLnVybH0pIHJlcXVlc3RpbmcgZnJvbSBhcGlgKVxuXG4gICAgLy8gUmVxdWVzdCB0aGUgc2luZ2xlIGlkIGlmIHRoZSBlbmRwb2ludCBhIGJ1bGsgZW5kcG9pbnRcbiAgICBpZiAodGhpcy5pc0J1bGsgJiYgIXVybCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy51cmx9P2lkPSR7aWR9YClcbiAgICB9XG5cbiAgICAvLyBXZSBhcmUgZGVhbGluZyB3aXRoIGEgY3VzdG9tIHVybCBpbnN0ZWFkXG4gICAgaWYgKHVybCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QodGhpcy51cmwgKyBpZClcbiAgICB9XG5cbiAgICAvLyBKdXN0IHJlcXVlc3QgdGhlIGJhc2UgdXJsXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QodGhpcy51cmwpXG4gIH1cblxuICAvLyBHZXQgbXVsdGlwbGUgZW50cmllcyBieSBpZHNcbiAgbWFueSAoaWRzKSB7XG4gICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYG1hbnkoJHt0aGlzLnVybH0pIGNhbGxlZCAoJHtpZHMubGVuZ3RofSBpZHMpYClcblxuICAgIGlmICghdGhpcy5pc0J1bGspIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1wibWFueVwiIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBidWxrIGV4cGFuZGluZyBlbmRwb2ludHMnKSlcbiAgICB9XG5cbiAgICAvLyBFeGl0IG91dCBlYXJseSBpZiB3ZSBkb24ndCByZXF1ZXN0IGFueSBpZHNcbiAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSlcbiAgICB9XG5cbiAgICAvLyBBbHdheXMgb25seSB3b3JrIG9uIHVuaXF1ZSBpZHMsIHNpbmNlIHRoYXQncyBob3cgdGhlIEFQSSB3b3Jrc1xuICAgIGlkcyA9IHVuaXF1ZS5pbW11dGFibGUoaWRzKVxuXG4gICAgLy8gVGhlcmUgaXMgbm8gY2FjaGUgdGltZSBzZXQsIHNvIGFsd2F5cyB1c2UgdGhlIGxpdmUgZGF0YVxuICAgIGlmICghdGhpcy5jYWNoZVRpbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYW55KGlkcylcbiAgICB9XG5cbiAgICAvLyBHZXQgYXMgbXVjaCBhcyBwb3NzaWJsZSBvdXQgb2YgdGhlIGNhY2hlXG4gICAgY29uc3QgaGFzaGVzID0gaWRzLm1hcChpZCA9PiB0aGlzLl9jYWNoZUhhc2goaWQpKVxuICAgIGNvbnN0IGhhbmRsZUNhY2hlQ29udGVudCA9IChjYWNoZWQpID0+IHtcbiAgICAgIGNhY2hlZCA9IGNhY2hlZC5maWx0ZXIoeCA9PiB4KVxuXG4gICAgICBpZiAoY2FjaGVkLmxlbmd0aCA9PT0gaWRzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRlYnVnTWVzc2FnZShgbWFueSgke3RoaXMudXJsfSkgcmVzb2x2aW5nIGZ1bGx5IGZyb20gY2FjaGVgKVxuICAgICAgICByZXR1cm4gY2FjaGVkXG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGVidWdNZXNzYWdlKGBtYW55KCR7dGhpcy51cmx9KSByZXNvbHZpbmcgcGFydGlhbGx5IGZyb20gY2FjaGUgKCR7Y2FjaGVkLmxlbmd0aH0gaWRzKWApXG4gICAgICBjb25zdCBtaXNzaW5nSWRzID0gZ2V0TWlzc2luZ0lkcyhpZHMsIGNhY2hlZClcbiAgICAgIHJldHVybiB0aGlzLl9tYW55KG1pc3NpbmdJZHMsIGNhY2hlZC5sZW5ndGggPiAwKS50aGVuKGNvbnRlbnQgPT4ge1xuICAgICAgICBjb25zdCBjYWNoZUNvbnRlbnQgPSBjb250ZW50Lm1hcCh2YWx1ZSA9PiBbdGhpcy5fY2FjaGVIYXNoKHZhbHVlW3RoaXMuYnVsa0lkXSksIHZhbHVlXSlcbiAgICAgICAgdGhpcy5fY2FjaGVTZXRNYW55KGNhY2hlQ29udGVudClcblxuICAgICAgICAvLyBNZXJnZSB0aGUgbmV3IGNvbnRlbnQgd2l0aCB0aGUgY2FjaGVkIGNvbnRlbnQgYW5kIGd1YXJhbnRlZSBlbGVtZW50IG9yZGVyXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmNvbmNhdChjYWNoZWQpXG4gICAgICAgIHJldHVybiB0aGlzLl9zb3J0QnlJZExpc3QoY29udGVudCwgaWRzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBpZHMgdGhhdCBhcmUgbWlzc2luZyBpbiB0aGUgY2FjaGVkIGRhdGFcbiAgICBjb25zdCBnZXRNaXNzaW5nSWRzID0gKGlkcywgY2FjaGVkKSA9PiB7XG4gICAgICBjb25zdCBjYWNoZWRJZHMgPSB7fVxuICAgICAgY2FjaGVkLm1hcCh4ID0+IHtcbiAgICAgICAgY2FjaGVkSWRzW3hbdGhpcy5idWxrSWRdXSA9IDFcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBpZHMuZmlsdGVyKHggPT4gY2FjaGVkSWRzW3hdICE9PSAxKVxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgY29udGVudCBlaXRoZXIgZnJvbSB0aGUgY2FjaGUgb3IgQVBJLCB3cml0ZSBpdCBpbnRvIHRoZSBjYWNoZSBhbmQgcmV0dXJuIGEgY2xvbmVcbiAgICBjb25zdCBjb250ZW50UHJvbWlzZSA9IHRoaXMuX3NraXBDYWNoZVxuICAgICAgPyBQcm9taXNlLnJlc29sdmUoW10pLnRoZW4oaGFuZGxlQ2FjaGVDb250ZW50KVxuICAgICAgOiB0aGlzLl9jYWNoZUdldE1hbnkoaGFzaGVzKS50aGVuKGhhbmRsZUNhY2hlQ29udGVudClcblxuICAgIHJldHVybiBjb250ZW50UHJvbWlzZS50aGVuKGNsb25lKVxuICB9XG5cbiAgLy8gR2V0IG11bHRpcGxlIGVudHJpZXMgYnkgaWRzIGZyb20gdGhlIGxpdmUgQVBJXG4gIF9tYW55IChpZHMsIHBhcnRpYWxSZXF1ZXN0ID0gZmFsc2UpIHtcbiAgICB0aGlzLmRlYnVnTWVzc2FnZShgbWFueSgke3RoaXMudXJsfSkgcmVxdWVzdGluZyBmcm9tIGFwaSAoJHtpZHMubGVuZ3RofSBpZHMpYClcblxuICAgIC8vIENodW5rIHRoZSByZXF1ZXN0cyB0byB0aGUgbWF4IHBhZ2Ugc2l6ZVxuICAgIGNvbnN0IHBhZ2VzID0gY2h1bmsoaWRzLCB0aGlzLm1heFBhZ2VTaXplKVxuICAgIGNvbnN0IHJlcXVlc3RzID0gcGFnZXMubWFwKHBhZ2UgPT4gYCR7dGhpcy51cmx9P2lkcz0ke3BhZ2Uuam9pbignLCcpfWApXG5cbiAgICAvLyBJZiB3ZSBhcmUgcGFydGlhbGx5IGNhY2hpbmcgYW5kIGFsbCBub3QtY2FjaGVkIGlkcyBhcmUgYWxsIGludmFsaWQsXG4gICAgLy8gc2ltdWxhdGUgdGhlIEFQSSBiZWhhdmlvdXIgYnkgc2lsZW50bHkgc3dhbGxvd2luZyBlcnJvcnMuXG4gICAgbGV0IGhhbmRsZU1pc3NpbmdJZHMgPSAoZXJyKSA9PiB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHBhcnRpYWxSZXF1ZXN0ICYmIGVyci5yZXNwb25zZSAmJiBlcnIucmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSlcbiAgICAgIH1cblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gICAgfVxuXG4gICAgLy8gV29yayBvbiBhbGwgcmVxdWVzdHMgaW4gcGFyYWxsZWwgYW5kIHRoZW4gZmxhdHRlbiB0aGUgcmVzcG9uc2VzIGludG8gb25lXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RNYW55KHJlcXVlc3RzKVxuICAgICAgLnRoZW4ocmVzcG9uc2VzID0+IHJlc3BvbnNlcy5yZWR1Y2UoKHgsIHkpID0+IHguY29uY2F0KHkpLCBbXSkpXG4gICAgICAuY2F0Y2goaGFuZGxlTWlzc2luZ0lkcylcbiAgfVxuXG4gIC8vIEdldCBhIHNpbmdsZSBwYWdlXG4gIHBhZ2UgKHBhZ2UsIHNpemUgPSB0aGlzLm1heFBhZ2VTaXplKSB7XG4gICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYHBhZ2UoJHt0aGlzLnVybH0pIGNhbGxlZGApXG5cbiAgICBpZiAoIXRoaXMuaXNCdWxrICYmICF0aGlzLmlzUGFnaW5hdGVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdcInBhZ2VcIiBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgYnVsayBleHBhbmRpbmcgb3IgcGFnaW5hdGVkIGVuZHBvaW50cycpKVxuICAgIH1cblxuICAgIGlmIChzaXplID4gdGhpcy5tYXhQYWdlU2l6ZSB8fCBzaXplIDw9IDApIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYFwic2l6ZVwiIGhhcyB0byBiZSBiZXR3ZWVuIDAgYW5kICR7dGhpcy5tYXhQYWdlU2l6ZX0sIHdhcyAke3NpemV9YCkpXG4gICAgfVxuXG4gICAgaWYgKHBhZ2UgPCAwKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdwYWdlIGhhcyB0byBiZSAwIG9yIGdyZWF0ZXInKSlcbiAgICB9XG5cbiAgICAvLyBUaGVyZSBpcyBubyBjYWNoZSB0aW1lIHNldCwgc28gYWx3YXlzIHVzZSB0aGUgbGl2ZSBkYXRhXG4gICAgaWYgKCF0aGlzLmNhY2hlVGltZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhZ2UocGFnZSwgc2l6ZSlcbiAgICB9XG5cbiAgICAvLyBHZXQgYXMgbXVjaCBhcyBwb3NzaWJsZSBvdXQgb2YgdGhlIGNhY2hlXG4gICAgY29uc3QgaGFzaCA9IHRoaXMuX2NhY2hlSGFzaCgncGFnZS0nICsgcGFnZSArICcvJyArIHNpemUpXG4gICAgY29uc3QgaGFuZGxlQ2FjaGVDb250ZW50ID0gKGNhY2hlZCkgPT4ge1xuICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICB0aGlzLmRlYnVnTWVzc2FnZShgcGFnZSgke3RoaXMudXJsfSkgcmVzb2x2aW5nIGZyb20gY2FjaGVgKVxuICAgICAgICByZXR1cm4gY2FjaGVkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9wYWdlKHBhZ2UsIHNpemUpLnRoZW4oY29udGVudCA9PiB7XG4gICAgICAgIGxldCBjYWNoZUNvbnRlbnQgPSBbW2hhc2gsIGNvbnRlbnRdXVxuXG4gICAgICAgIGlmICh0aGlzLmlzQnVsaykge1xuICAgICAgICAgIGNhY2hlQ29udGVudCA9IGNhY2hlQ29udGVudC5jb25jYXQoY29udGVudC5tYXAodmFsdWUgPT4gW3RoaXMuX2NhY2hlSGFzaCh2YWx1ZVt0aGlzLmJ1bGtJZF0pLCB2YWx1ZV0pKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2FjaGVTZXRNYW55KGNhY2hlQ29udGVudClcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBjb250ZW50IGVpdGhlciBmcm9tIHRoZSBjYWNoZSBvciBBUEksIHdyaXRlIGl0IGludG8gdGhlIGNhY2hlIGFuZCByZXR1cm4gYSBjbG9uZVxuICAgIGNvbnN0IGNvbnRlbnRQcm9taXNlID0gdGhpcy5fc2tpcENhY2hlXG4gICAgICA/IFByb21pc2UucmVzb2x2ZShmYWxzZSkudGhlbihoYW5kbGVDYWNoZUNvbnRlbnQpXG4gICAgICA6IHRoaXMuX2NhY2hlR2V0U2luZ2xlKGhhc2gpLnRoZW4oaGFuZGxlQ2FjaGVDb250ZW50KVxuXG4gICAgcmV0dXJuIGNvbnRlbnRQcm9taXNlLnRoZW4oY2xvbmUpXG4gIH1cblxuICAvLyBHZXQgYSBzaW5nbGUgcGFnZSBmcm9tIHRoZSBsaXZlIEFQSVxuICBfcGFnZSAocGFnZSwgc2l6ZSkge1xuICAgIHRoaXMuZGVidWdNZXNzYWdlKGBwYWdlKCR7dGhpcy51cmx9KSByZXF1ZXN0aW5nIGZyb20gYXBpYClcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLnVybH0/cGFnZT0ke3BhZ2V9JnBhZ2Vfc2l6ZT0ke3NpemV9YClcbiAgfVxuXG4gIC8vIEdldCBhbGwgZW50cmllc1xuICBhbGwgKCkge1xuICAgIHRoaXMuZGVidWdNZXNzYWdlKGBhbGwoJHt0aGlzLnVybH0pIGNhbGxlZGApXG5cbiAgICBpZiAoIXRoaXMuaXNCdWxrICYmICF0aGlzLmlzUGFnaW5hdGVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdcImFsbFwiIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBidWxrIGV4cGFuZGluZyBvciBwYWdpbmF0ZWQgZW5kcG9pbnRzJykpXG4gICAgfVxuXG4gICAgLy8gVGhlcmUgaXMgbm8gY2FjaGUgdGltZSBzZXQsIHNvIGFsd2F5cyB1c2UgdGhlIGxpdmUgZGF0YVxuICAgIGlmICghdGhpcy5jYWNoZVRpbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hbGwoKVxuICAgIH1cblxuICAgIC8vIEdldCBhcyBtdWNoIGFzIHBvc3NpYmxlIG91dCBvZiB0aGUgY2FjaGVcbiAgICBjb25zdCBoYXNoID0gdGhpcy5fY2FjaGVIYXNoKCdhbGwnKVxuICAgIGNvbnN0IGhhbmRsZUNhY2hlQ29udGVudCA9IChjYWNoZWQpID0+IHtcbiAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgdGhpcy5kZWJ1Z01lc3NhZ2UoYGFsbCgke3RoaXMudXJsfSkgcmVzb2x2aW5nIGZyb20gY2FjaGVgKVxuICAgICAgICByZXR1cm4gY2FjaGVkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9hbGwoKS50aGVuKGNvbnRlbnQgPT4ge1xuICAgICAgICBsZXQgY2FjaGVDb250ZW50ID0gW1toYXNoLCBjb250ZW50XV1cblxuICAgICAgICBpZiAodGhpcy5pc0J1bGspIHtcbiAgICAgICAgICBjYWNoZUNvbnRlbnQgPSBjYWNoZUNvbnRlbnQuY29uY2F0KGNvbnRlbnQubWFwKHZhbHVlID0+IFt0aGlzLl9jYWNoZUhhc2godmFsdWVbdGhpcy5idWxrSWRdKSwgdmFsdWVdKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NhY2hlU2V0TWFueShjYWNoZUNvbnRlbnQpXG4gICAgICAgIHJldHVybiBjb250ZW50XG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgY29udGVudCBlaXRoZXIgZnJvbSB0aGUgY2FjaGUgb3IgQVBJLCB3cml0ZSBpdCBpbnRvIHRoZSBjYWNoZSBhbmQgcmV0dXJuIGEgY2xvbmVcbiAgICBjb25zdCBjb250ZW50UHJvbWlzZSA9IHRoaXMuX3NraXBDYWNoZVxuICAgICAgPyBQcm9taXNlLnJlc29sdmUoZmFsc2UpLnRoZW4oaGFuZGxlQ2FjaGVDb250ZW50KVxuICAgICAgOiB0aGlzLl9jYWNoZUdldFNpbmdsZShoYXNoKS50aGVuKGhhbmRsZUNhY2hlQ29udGVudClcblxuICAgIHJldHVybiBjb250ZW50UHJvbWlzZS50aGVuKGNsb25lKVxuICB9XG5cbiAgLy8gR2V0IGFsbCBlbnRyaWVzIGZyb20gdGhlIGxpdmUgQVBJXG4gIF9hbGwgKCkge1xuICAgIHRoaXMuZGVidWdNZXNzYWdlKGBhbGwoJHt0aGlzLnVybH0pIHJlcXVlc3RpbmcgZnJvbSBhcGlgKVxuXG4gICAgLy8gVXNlIGJ1bGsgZXhwYW5zaW9uIGlmIHRoZSBlbmRwb2ludCBzdXBwb3J0cyB0aGUgXCJhbGxcIiBrZXl3b3JkXG4gICAgaWYgKHRoaXMuaXNCdWxrICYmIHRoaXMuc3VwcG9ydHNCdWxrQWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLnVybH0/aWRzPWFsbGApXG4gICAgfVxuXG4gICAgLy8gR2V0IGV2ZXJ5dGhpbmcgdmlhIGFsbCBwYWdlcyBpbnN0ZWFkXG4gICAgbGV0IHRvdGFsRW50cmllc1xuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMudXJsfT9wYWdlPTAmcGFnZV9zaXplPSR7dGhpcy5tYXhQYWdlU2l6ZX1gLCAncmVzcG9uc2UnKVxuICAgICAgLnRoZW4oZmlyc3RQYWdlID0+IHtcbiAgICAgICAgLy8gR2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgZW50cmllcyBvZmYgdGhlIGZpcnN0IHBhZ2UncyBoZWFkZXJzXG4gICAgICAgIHRvdGFsRW50cmllcyA9IGZpcnN0UGFnZS5oZWFkZXJzLmdldCgnWC1SZXN1bHQtVG90YWwnKVxuICAgICAgICByZXR1cm4gZmlyc3RQYWdlLmpzb24oKVxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIC8vIFJldHVybiBlYXJseSBpZiB0aGUgZmlyc3QgcGFnZSBhbHJlYWR5IGluY2x1ZGVzIGFsbCBlbnRyaWVzXG4gICAgICAgIGlmICh0b3RhbEVudHJpZXMgPD0gdGhpcy5tYXhQYWdlU2l6ZSkge1xuICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcXVlc3QgYWxsIG1pc3NpbmcgcGFnZXMgaW4gcGFyYWxsZWxcbiAgICAgICAgbGV0IHJlcXVlc3RzID0gW11cbiAgICAgICAgZm9yIChsZXQgcGFnZSA9IDE7IHBhZ2UgPCBNYXRoLmNlaWwodG90YWxFbnRyaWVzIC8gdGhpcy5tYXhQYWdlU2l6ZSk7IHBhZ2UrKykge1xuICAgICAgICAgIHJlcXVlc3RzLnB1c2goYCR7dGhpcy51cmx9P3BhZ2U9JHtwYWdlfSZwYWdlX3NpemU9JHt0aGlzLm1heFBhZ2VTaXplfWApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdE1hbnkocmVxdWVzdHMpLnRoZW4ocmVzcG9uc2VzID0+IHtcbiAgICAgICAgICByZXNwb25zZXMgPSByZXNwb25zZXMucmVkdWNlKCh4LCB5KSA9PiB4LmNvbmNhdCh5KSwgW10pXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5jb25jYXQocmVzcG9uc2VzKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgfVxuXG4gIC8vIFNldCBhIHNpbmdsZSBjYWNoZSBrZXkgaW4gYWxsIGNvbm5lY3RlZCBjYWNoZSBzdG9yYWdlc1xuICBfY2FjaGVTZXRTaW5nbGUgKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLmNhY2hlcy5tYXAoY2FjaGUgPT4ge1xuICAgICAgY2FjaGUuc2V0KGtleSwgdmFsdWUsIHRoaXMuY2FjaGVUaW1lKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybignW2d3MmFwaS1jbGllbnRdIEVycm9yZWQgZHVyaW5nIF9jYWNoZVNldFNpbmdsZScsIHsgZXJyb3IsIGNhY2hlLCBrZXksIHZhbHVlIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBTZXQgbXVsdGlwbGVzIGNhY2hlIGtleSBpbiBhbGwgY29ubmVjdGVkIGNhY2hlIHN0b3JhZ2VzXG4gIF9jYWNoZVNldE1hbnkgKHZhbHVlcykge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gW3ZhbHVlWzBdLCB2YWx1ZVsxXSwgdGhpcy5jYWNoZVRpbWVdKVxuICAgIHRoaXMuY2FjaGVzLm1hcChjYWNoZSA9PiB7XG4gICAgICBjYWNoZS5tc2V0KHZhbHVlcykuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1tndzJhcGktY2xpZW50XSBFcnJvcmVkIGR1cmluZyBfY2FjaGVTZXRNYW55JywgeyBlcnJvciwgY2FjaGUsIHZhbHVlcyB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLy8gR2V0IGEgY2FjaGVkIHZhbHVlIG91dCBvZiB0aGUgZmlyc3QgcG9zc2libGUgY29ubmVjdGVkIGNhY2hlIHN0b3JhZ2VzXG4gIF9jYWNoZUdldFNpbmdsZSAoa2V5LCBpbmRleCA9IDApIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZXNbaW5kZXhdLmdldChrZXkpLnRoZW4odmFsdWUgPT4ge1xuICAgICAgaWYgKHZhbHVlIHx8IGluZGV4ID09PSB0aGlzLmNhY2hlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVHZXRTaW5nbGUoa2V5LCArK2luZGV4KVxuICAgIH0pXG4gIH1cblxuICAvLyBHZXQgbXVsdGlwbGUgY2FjaGVkIHZhbHVlcyBvdXQgb2YgdGhlIGZpcnN0IHBvc3NpYmxlIGNvbm5lY3RlZCBjYWNoZSBzdG9yYWdlc1xuICBfY2FjaGVHZXRNYW55IChrZXlzLCBpbmRleCA9IDApIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZXNbaW5kZXhdLm1nZXQoa2V5cykudGhlbih2YWx1ZXMgPT4ge1xuICAgICAgY29uc3QgY2xlYW5WYWx1ZXMgPSB2YWx1ZXMuZmlsdGVyKHggPT4geClcblxuICAgICAgLy8gV2UgZ290IGFsbCB0aGUgcmVxdWVzdGVkIGtleXMgb3IgYXJlIHRocm91Z2ggYWxsIHN0b3JhZ2VzXG4gICAgICBpZiAoY2xlYW5WYWx1ZXMubGVuZ3RoID09PSBrZXlzLmxlbmd0aCB8fCBpbmRleCA9PT0gdGhpcy5jYWNoZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gdmFsdWVzXG4gICAgICB9XG5cbiAgICAgIC8vIFRyeSB0byBhc2sgdGhlIG5leHQgc3RvcmFnZSBmb3IgdGhlIGtleXMgdGhhdCB3ZSBkaWRuJ3QgZ2V0XG4gICAgICBsZXQgbWlzc2luZ0tleXMgPSB2YWx1ZXNcbiAgICAgICAgLm1hcCgodmFsdWUsIGkpID0+IHZhbHVlID8gZmFsc2UgOiBrZXlzW2ldKVxuICAgICAgICAuZmlsdGVyKHZhbHVlID0+IHZhbHVlKVxuXG4gICAgICAvLyBUaGVuIG1lcmdlIHRoZSB2YWx1ZXMgb2YgdGhlIG5leHQgc3RvcmFnZSBpbnRvIHRoZSBtaXNzaW5nIHNsb3RzXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVHZXRNYW55KG1pc3NpbmdLZXlzLCArK2luZGV4KS50aGVuKG1pc3NpbmdWYWx1ZXMgPT4ge1xuICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAodmFsdWUgPT4gdmFsdWUgfHwgbWlzc2luZ1ZhbHVlc1tpKytdKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLy8gR2V0IGEgY2FjaGUgaGFzaCBmb3IgYW4gaWRlbnRpZmllclxuICBfY2FjaGVIYXNoIChpZCkge1xuICAgIGxldCBoYXNoID0gaGFzaFN0cmluZyh0aGlzLmJhc2VVcmwgKyB0aGlzLnVybCArICc6JyArIHRoaXMuc2NoZW1hVmVyc2lvbilcblxuICAgIGlmIChpZCkge1xuICAgICAgaGFzaCArPSAnOicgKyBpZFxuICAgIH1cblxuICAgIGlmICh0aGlzLmlzTG9jYWxpemVkKSB7XG4gICAgICBoYXNoICs9ICc6JyArIHRoaXMubGFuZ1xuICAgIH1cblxuICAgIGlmICh0aGlzLl91c2VzQXBpS2V5KCkpIHtcbiAgICAgIGhhc2ggKz0gJzonICsgaGFzaFN0cmluZyh0aGlzLmFwaUtleSArICcnKVxuICAgIH1cblxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICAvLyBFeGVjdXRlIGEgc2luZ2xlIHJlcXVlc3RcbiAgX3JlcXVlc3QgKHVybCwgdHlwZSA9ICdqc29uJykge1xuICAgIHVybCA9IHRoaXMuX2J1aWxkVXJsKHVybClcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSB0aGlzLmNyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogdW5kZWZpbmVkXG5cbiAgICByZXR1cm4gdGhpcy5mZXRjaC5zaW5nbGUodXJsLCB7IHR5cGUsIGNyZWRlbnRpYWxzIH0pXG4gIH1cblxuICAvLyBFeGVjdXRlIG11bHRpcGxlIHJlcXVlc3RzIGluIHBhcmFsbGVsXG4gIF9yZXF1ZXN0TWFueSAodXJscywgdHlwZSA9ICdqc29uJykge1xuICAgIHVybHMgPSB1cmxzLm1hcCh1cmwgPT4gdGhpcy5fYnVpbGRVcmwodXJsKSlcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSB0aGlzLmNyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogdW5kZWZpbmVkXG5cbiAgICByZXR1cm4gdGhpcy5mZXRjaC5tYW55KHVybHMsIHsgdHlwZSwgY3JlZGVudGlhbHMgfSlcbiAgfVxuXG4gIC8vIEJ1aWxkIHRoZSBoZWFkZXJzIGZvciBsb2NhbGl6YXRpb24gYW5kIGF1dGhlbnRpY2F0aW9uXG4gIF9idWlsZFVybCAodXJsKSB7XG4gICAgLy8gQWRkIHRoZSBiYXNlIHVybFxuICAgIHVybCA9IHRoaXMuYmFzZVVybCArIHVybFxuXG4gICAgLy8gUGFyc2UgYSBwb3NzaWJseSBleGlzdGluZyBxdWVyeVxuICAgIGNvbnN0IHBhcnNlZFVybCA9IHVybC5zcGxpdCgnPycpXG4gICAgbGV0IHBhcnNlZFF1ZXJ5ID0gcXMucGFyc2UocGFyc2VkVXJsWzFdIHx8ICcnKVxuXG4gICAgbGV0IHF1ZXJ5ID0ge31cblxuICAgIC8vIFNldCB0aGUgc2NoZW1hIHZlcnNpb25cbiAgICBxdWVyeVsndiddID0gdGhpcy5zY2hlbWFWZXJzaW9uXG5cbiAgICAvLyBPbmx5IHNldCB0aGUgQVBJIGtleSBmb3IgYXV0aGVudGljYXRlZCBlbmRwb2ludHMsXG4gICAgLy8gd2hlbiBpdCBpcyByZXF1aXJlZCBvciBvcHRpb25hbCBhbmQgc2V0IG9uIHRoZSBjbGllbnRcbiAgICBpZiAodGhpcy5fdXNlc0FwaUtleSgpKSB7XG4gICAgICBxdWVyeVsnYWNjZXNzX3Rva2VuJ10gPSB0aGlzLmFwaUtleVxuICAgIH1cblxuICAgIC8vIFNldCB0aGUgbGFuZ3VhZ2UgZm9yIGxvY2FsaXplZCBlbmRwb2ludHNcbiAgICBpZiAodGhpcy5pc0xvY2FsaXplZCkge1xuICAgICAgcXVlcnlbJ2xhbmcnXSA9IHRoaXMubGFuZ1xuICAgIH1cblxuICAgIC8vIE1lcmdlIHRoZSBwYXJzZWQgcXVlcnkgcGFydHMgb3V0IG9mIHRoZSB1cmxcbiAgICBxdWVyeSA9IE9iamVjdC5hc3NpZ24ocXVlcnksIHBhcnNlZFF1ZXJ5KVxuXG4gICAgLy8gQnVpbGQgdGhlIHVybCB3aXRoIHRoZSBmaW5pc2hlZCBxdWVyeVxuICAgIHF1ZXJ5ID0gcXMuc3RyaW5naWZ5KHF1ZXJ5LCB0cnVlKS5yZXBsYWNlKC8lMkMvZywgJywnKVxuICAgIHJldHVybiBwYXJzZWRVcmxbMF0gKyBxdWVyeVxuICB9XG5cbiAgLy8gR3VhcmFudGVlIHRoZSBlbGVtZW50IG9yZGVyIG9mIGJ1bGsgcmVzdWx0c1xuICBfc29ydEJ5SWRMaXN0IChlbnRyaWVzLCBpZHMpIHtcbiAgICAvLyBIYXNoIG1hcCBvZiB0aGUgaW5kZXhlcyBmb3IgYmV0dGVyIHRpbWUgY29tcGxleGl0eSBvbiBiaWcgYXJyYXlzXG4gICAgbGV0IGluZGV4TWFwID0ge31cbiAgICBpZHMubWFwKCh4LCBpKSA9PiB7XG4gICAgICBpbmRleE1hcFt4XSA9IGlcbiAgICB9KVxuXG4gICAgLy8gU29ydCBieSB0aGUgaW5kZXhlc1xuICAgIGVudHJpZXMuc29ydCgoYSwgYikgPT4gaW5kZXhNYXBbYVt0aGlzLmJ1bGtJZF1dIC0gaW5kZXhNYXBbYlt0aGlzLmJ1bGtJZF1dKVxuICAgIHJldHVybiBlbnRyaWVzXG4gIH1cblxuICBfdXNlc0FwaUtleSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNBdXRoZW50aWNhdGVkICYmICghdGhpcy5pc09wdGlvbmFsbHlBdXRoZW50aWNhdGVkIHx8IHRoaXMuYXBpS2V5KVxuICB9XG59XG4iLCJjb25zdCBfZ2V0ID0gcmVxdWlyZSgnZmFzdC1nZXQnKVxuY29uc3QgZmxvdyA9IHJlcXVpcmUoJy4uL2Zsb3cuanMnKVxuXG5mdW5jdGlvbiBibG9iIChwYXJlbnQpIHtcbiAgY29uc3QgY2xpZW50ID0gcGFyZW50LmNsaWVudFxuXG4gIGNvbnN0IHJlcXVlc3RzID0ge1xuICAgIGFjY291bnQ6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5nZXQoKSksXG4gICAgYWNoaWV2ZW1lbnRzOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuYWNoaWV2ZW1lbnRzKCkuZ2V0KCkpLFxuICAgIGJhbms6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5iYW5rKCkuZ2V0KCkpLFxuICAgIGNoYXJhY3RlcnM6IHdyYXAoKCkgPT4gY2xpZW50LmNoYXJhY3RlcnMoKS5hbGwoKSksXG4gICAgJ2NvbW1lcmNlLmJ1eXMnOiB3cmFwKCgpID0+IGNsaWVudC5jb21tZXJjZSgpLnRyYW5zYWN0aW9ucygpLmN1cnJlbnQoKS5idXlzKCkuYWxsKCkpLFxuICAgICdjb21tZXJjZS5kZWxpdmVyeSc6IHdyYXAoKCkgPT4gY2xpZW50LmNvbW1lcmNlKCkuZGVsaXZlcnkoKS5nZXQoKSksXG4gICAgJ2NvbW1lcmNlLnNlbGxzJzogd3JhcCgoKSA9PiBjbGllbnQuY29tbWVyY2UoKS50cmFuc2FjdGlvbnMoKS5jdXJyZW50KCkuc2VsbHMoKS5hbGwoKSksXG4gICAgZHVuZ2VvbnM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5kdW5nZW9ucygpLmdldCgpKSxcbiAgICBkeWVzOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuZHllcygpLmdldCgpKSxcbiAgICBlbW90ZXM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5lbW90ZXMoKS5nZXQoKSksXG4gICAgZmluaXNoZXJzOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuZmluaXNoZXJzKCkuZ2V0KCkpLFxuICAgIGdsaWRlcnM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5nbGlkZXJzKCkuZ2V0KCkpLFxuICAgIGd1aWxkczogd3JhcCgoKSA9PiBhY2NvdW50R3VpbGRzKGNsaWVudCkpLFxuICAgICdob21lLmNhdHMnOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuaG9tZSgpLmNhdHMoKS5nZXQoKSksXG4gICAgJ2hvbWUubm9kZXMnOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuaG9tZSgpLm5vZGVzKCkuZ2V0KCkpLFxuICAgICdob21lc3RlYWQuZGVjb3JhdGlvbnMnOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuaG9tZXN0ZWFkKCkuZGVjb3JhdGlvbnMoKS5nZXQoKSksXG4gICAgJ2hvbWVzdGVhZC5nbHlwaHMnOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuaG9tZXN0ZWFkKCkuZ2x5cGhzKCkuZ2V0KCkpLFxuICAgIGphZGVib3RzOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkuamFkZWJvdHMoKS5nZXQoKSksXG4gICAgbGVnZW5kYXJ5YXJtb3J5OiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkubGVnZW5kYXJ5YXJtb3J5KCkuZ2V0KCkpLFxuICAgIGx1Y2s6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5sdWNrKCkuZ2V0KCkpLFxuICAgIG1haWxjYXJyaWVyczogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLm1haWxjYXJyaWVycygpLmdldCgpKSxcbiAgICBtYXN0ZXJpZXM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5tYXN0ZXJpZXMoKS5nZXQoKSksXG4gICAgJ21hc3RlcnkucG9pbnRzJzogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLm1hc3RlcnkoKS5wb2ludHMoKS5nZXQoKSksXG4gICAgbWF0ZXJpYWxzOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkubWF0ZXJpYWxzKCkuZ2V0KCkpLFxuICAgIG1pbmlzOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkubWluaXMoKS5nZXQoKSksXG4gICAgJ21vdW50cy5za2lucyc6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5tb3VudHMoKS5za2lucygpLmdldCgpKSxcbiAgICAnbW91bnRzLnR5cGVzJzogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLm1vdW50cygpLnR5cGVzKCkuZ2V0KCkpLFxuICAgIG5vdmVsdGllczogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLm5vdmVsdGllcygpLmdldCgpKSxcbiAgICBvdXRmaXRzOiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkub3V0Zml0cygpLmdldCgpKSxcbiAgICAncHZwLmdhbWVzJzogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLnB2cCgpLmdhbWVzKCkuYWxsKCkpLFxuICAgICdwdnAuaGVyb2VzJzogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLnB2cCgpLmhlcm9lcygpLmdldCgpKSxcbiAgICAncHZwLnN0YW5kaW5ncyc6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5wdnAoKS5zdGFuZGluZ3MoKS5nZXQoKSksXG4gICAgJ3B2cC5zdGF0cyc6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5wdnAoKS5zdGF0cygpLmdldCgpKSxcbiAgICByYWlkczogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLnJhaWRzKCkuZ2V0KCkpLFxuICAgIHJlY2lwZXM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5yZWNpcGVzKCkuZ2V0KCkpLFxuICAgIHNoYXJlZDogd3JhcCgoKSA9PiBjbGllbnQuYWNjb3VudCgpLmludmVudG9yeSgpLmdldCgpKSxcbiAgICBza2lmZnM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5za2lmZnMoKS5nZXQoKSksXG4gICAgc2tpbnM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS5za2lucygpLmdldCgpKSxcbiAgICB0aXRsZXM6IHdyYXAoKCkgPT4gY2xpZW50LmFjY291bnQoKS50aXRsZXMoKS5nZXQoKSksXG4gICAgd2FsbGV0OiB3cmFwKCgpID0+IGNsaWVudC5hY2NvdW50KCkud2FsbGV0KCkuZ2V0KCkpXG4gIH1cblxuICByZXR1cm4gZmxvdy5wYXJhbGxlbChyZXF1ZXN0cykudGhlbihkYXRhID0+IHtcbiAgICBkYXRhID0gdW5mbGF0dGVuKGRhdGEpXG4gICAgZGF0YS5jaGFyYWN0ZXJzID0gZmlsdGVyQmV0YUNoYXJhY3RlcnMoZGF0YS5jaGFyYWN0ZXJzKVxuICAgIHJldHVybiBkYXRhXG4gIH0pXG59XG5cbi8vIEdldCB0aGUgZ3VpbGQgZGF0YSBhY2Nlc3NpYmxlIGZvciB0aGUgYWNjb3VudFxuZnVuY3Rpb24gYWNjb3VudEd1aWxkcyAoY2xpZW50KSB7XG4gIHJldHVybiBjbGllbnQuYWNjb3VudCgpLmdldCgpLnRoZW4oYWNjb3VudCA9PiB7XG4gICAgaWYgKCFhY2NvdW50Lmd1aWxkX2xlYWRlcikge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RzID0gYWNjb3VudC5ndWlsZF9sZWFkZXIubWFwKGlkID0+IHdyYXAoKCkgPT4gZ3VpbGREYXRhKGlkKSkpXG4gICAgcmV0dXJuIGZsb3cucGFyYWxsZWwocmVxdWVzdHMpXG4gIH0pXG5cbiAgZnVuY3Rpb24gZ3VpbGREYXRhIChpZCkge1xuICAgIGxldCByZXF1ZXN0cyA9IHtcbiAgICAgIGRhdGE6IHdyYXAoKCkgPT4gY2xpZW50Lmd1aWxkKCkuZ2V0KGlkKSksXG4gICAgICBtZW1iZXJzOiB3cmFwKCgpID0+IGNsaWVudC5ndWlsZChpZCkubWVtYmVycygpLmdldCgpKSxcbiAgICAgIHJhbmtzOiB3cmFwKCgpID0+IGNsaWVudC5ndWlsZChpZCkucmFua3MoKS5nZXQoKSksXG4gICAgICBzdGFzaDogd3JhcCgoKSA9PiBjbGllbnQuZ3VpbGQoaWQpLnN0YXNoKCkuZ2V0KCkpLFxuICAgICAgdGVhbXM6IHdyYXAoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcbiAgICAgIHRyZWFzdXJ5OiB3cmFwKCgpID0+IGNsaWVudC5ndWlsZChpZCkudHJlYXN1cnkoKS5nZXQoKSksXG4gICAgICB1cGdyYWRlczogd3JhcCgoKSA9PiBjbGllbnQuZ3VpbGQoaWQpLnVwZ3JhZGVzKCkuZ2V0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZsb3cucGFyYWxsZWwocmVxdWVzdHMpXG4gIH1cbn1cblxuLy8gRmlsdGVyIG91dCBiZXRhIGNoYXJhY3RlcnMgZnJvbSB0aGUgdG90YWwgYWNjb3VudCBibG9iLCBzaW5jZSB0aGV5IGFyZVxuLy8gdGVjaG5pY2FsbHkgbm90IHBhcnQgb2YgdGhlIGFjdHVhbCBsaXZlIGFjY291bnQgYW5kIGxpdmUgb24gYSBkaWZmZXJlbnQgc2VydmVyXG5mdW5jdGlvbiBmaWx0ZXJCZXRhQ2hhcmFjdGVycyAoY2hhcmFjdGVycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIWNoYXJhY3RlcnMpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIGNoYXJhY3RlcnMuZmlsdGVyKHggPT4gIXguZmxhZ3MgfHwgIXguZmxhZ3MuaW5jbHVkZXMoJ0JldGEnKSlcbn1cblxuLy8gV3JhcCBhIHByb21pc2UgZnVuY3Rpb24gc28gYWxsIGVycm9ycyB0aGF0IGhhdmUgdG8gZG8gd2l0aCB0aGUgQVBJXG4vLyBqdXN0IHJlc3VsdCBpbiBhbiBlbXB0eSByZXNwb25zZSBpbnN0ZWFkIG9mIHRocm93aW5nIGFuIGVycm9yXG4vLyBUaGlzIHByZXZlbnRzIEFQSSBlcnJvcnMgLyBjaGFuZ2VzIGJyZWFraW5nIHRoZSBlbnRpcmUgaW5mcmFzdHJ1Y3R1cmVcbmZ1bmN0aW9uIHdyYXAgKGZ1bmMpIHtcbiAgcmV0dXJuICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmdW5jKClcbiAgICAgIC50aGVuKHggPT4gcmVzb2x2ZSh4KSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBsZXQgc3RhdHVzID0gX2dldChlcnIsICdyZXNwb25zZS5zdGF0dXMnKVxuICAgICAgICBsZXQgdGV4dCA9IF9nZXQoZXJyLCAnY29udGVudC50ZXh0JylcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgc3RhdHVzIHx8XG4gICAgICAgICAgdGV4dCB8fFxuICAgICAgICAgIFsnbmV0d29yaycsICdmZXRjaCddLnNvbWUoeCA9PiBlcnIubWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHgpKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYEFQSSBlcnJvcjogJHt0ZXh0fSAoJHtzdGF0dXN9KWApXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbClcbiAgICAgICAgfVxuXG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9KVxuICB9KVxufVxuXG4vLyBVbmZsYXR0ZW4gYW4gb2JqZWN0IHdpdGgga2V5cyBkZXNjcmliaW5nIGEgbmVzdGVkIHN0cnVjdHVyZVxuZnVuY3Rpb24gdW5mbGF0dGVuIChvYmplY3QpIHtcbiAgbGV0IHJlc3VsdCA9IHt9XG5cbiAgZm9yIChsZXQga2V5IGluIG9iamVjdCkge1xuICAgIF9zZXQocmVzdWx0LCBrZXksIG9iamVjdFtrZXldKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vLyBTZXQgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBiYXNlZCBvbiBhIGZsYXQga2V5IChcImEuYi5jXCIpXG5mdW5jdGlvbiBfc2V0IChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgY29uc3Qga2V5UGFydHMgPSBrZXkuc3BsaXQoJy4nKVxuXG4gIGxldCB3YWxraW5nID0gb2JqZWN0XG4gIGtleVBhcnRzLmZvckVhY2goKGtleSwgaW5kZXgpID0+IHtcbiAgICAvLyBDcmVhdGUgdGhlIG5lc3RlZCBvYmplY3QgaWYgaXQgZG9lcyBub3QgZXhpc3RcbiAgICBpZiAoIXdhbGtpbmdba2V5XSkge1xuICAgICAgd2Fsa2luZ1trZXldID0ge31cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSByZWFjaGVkIHRoZSBsYXN0IHBhcnQsIHNldCB0aGUgdmFsdWUgYW5kIGV4aXQgb3V0XG4gICAgaWYgKGluZGV4ID09PSBrZXlQYXJ0cy5sZW5ndGggLSAxKSB7XG4gICAgICB3YWxraW5nW2tleV0gPSB2YWx1ZVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBuZXh0IHBhcnQgb2YgdGhlIGtleVxuICAgIHdhbGtpbmcgPSB3YWxraW5nW2tleV1cbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBibG9iXG5tb2R1bGUuZXhwb3J0cy53cmFwID0gd3JhcFxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcbmNvbnN0IENoYXJhY3RlcnNFbmRwb2ludCA9IHJlcXVpcmUoJy4vY2hhcmFjdGVycycpXG5jb25zdCBQdnBFbmRwb2ludCA9IHJlcXVpcmUoJy4vcHZwJylcbmNvbnN0IENvbW1lcmNlRW5kcG9pbnQgPSByZXF1aXJlKCcuL2NvbW1lcmNlJylcbmNvbnN0IFdpemFyZHN2YXVsdEVuZHBvaW50ID0gcmVxdWlyZSgnLi93aXphcmRzdmF1bHQnKVxuY29uc3QgYWNjb3VudEJsb2IgPSByZXF1aXJlKCcuL2FjY291bnQtYmxvYi5qcycpXG5jb25zdCByZXNldFRpbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3Jlc2V0VGltZScpXG5cbmNsYXNzIEFjY291bnRFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50J1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cblxuICBhY2hpZXZlbWVudHMgKCkge1xuICAgIHJldHVybiBuZXcgQWNoaWV2ZW1lbnRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGJhbmsgKCkge1xuICAgIHJldHVybiBuZXcgQmFua0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBjaGFyYWN0ZXJzIChuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBDaGFyYWN0ZXJzRW5kcG9pbnQodGhpcywgbmFtZSlcbiAgfVxuXG4gIGRhaWx5Y3JhZnRpbmcgKCkge1xuICAgIHJldHVybiBuZXcgRGFpbHljcmFmdGluZ0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBkZWxpdmVyeSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb21tZXJjZUVuZHBvaW50KHRoaXMpLmRlbGl2ZXJ5KClcbiAgfVxuXG4gIGR1bmdlb25zICgpIHtcbiAgICByZXR1cm4gbmV3IER1bmdlb25zRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGR5ZXMgKCkge1xuICAgIHJldHVybiBuZXcgRHllc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBlbW90ZXMgKCkge1xuICAgIHJldHVybiBuZXcgRW1vdGVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGZpbmlzaGVycyAoKSB7XG4gICAgcmV0dXJuIG5ldyBGaW5pc2hlcnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZ2xpZGVycyAoKSB7XG4gICAgcmV0dXJuIG5ldyBHbGlkZXJzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGhvbWUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjYXRzOiAoKSA9PiBuZXcgSG9tZUNhdHNFbmRwb2ludCh0aGlzKSxcbiAgICAgIG5vZGVzOiAoKSA9PiBuZXcgSG9tZU5vZGVzRW5kcG9pbnQodGhpcylcbiAgICB9XG4gIH1cblxuICBob21lc3RlYWQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZWNvcmF0aW9uczogKCkgPT4gbmV3IEhvbWVzdGVhZERlY29yYXRpb25zRW5kcG9pbnQodGhpcyksXG4gICAgICBnbHlwaHM6ICgpID0+IG5ldyBIb21lc3RlYWRHbHlwaHNFbmRwb2ludCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGludmVudG9yeSAoKSB7XG4gICAgcmV0dXJuIG5ldyBJbnZlbnRvcnlFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgamFkZWJvdHMgKCkge1xuICAgIHJldHVybiBuZXcgSmFkZWJvdHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbGVnZW5kYXJ5YXJtb3J5ICgpIHtcbiAgICByZXR1cm4gbmV3IExlZ2VuZGFyeWFybW9yeUVuZHBvaW50KHRoaXMpXG4gIH1cblxuICBsdWNrICgpIHtcbiAgICByZXR1cm4gbmV3IEx1Y2tFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbWFpbGNhcnJpZXJzICgpIHtcbiAgICByZXR1cm4gbmV3IE1haWxjYXJyaWVyc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBtYXN0ZXJpZXMgKCkge1xuICAgIHJldHVybiBuZXcgTWFzdGVyaWVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIG1hcGNoZXN0cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXBjaGVzdHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbWFzdGVyeSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvaW50czogKCkgPT4gbmV3IE1hc3RlcnlQb2ludHNFbmRwb2ludCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIG1hdGVyaWFscyAoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRlcmlhbHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbWluaXMgKCkge1xuICAgIHJldHVybiBuZXcgTWluaXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgbW91bnRzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2tpbnM6ICgpID0+IG5ldyBNb3VudFNraW5zRW5kcG9pbnQodGhpcyksXG4gICAgICB0eXBlczogKCkgPT4gbmV3IE1vdW50VHlwZXNFbmRwb2ludCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIG5vdmVsdGllcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBOb3ZlbHRpZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgb3V0Zml0cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBPdXRmaXRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHB2cCAoKSB7XG4gICAgcmV0dXJuIG5ldyBQdnBFbmRwb2ludCh0aGlzLCB0cnVlKVxuICB9XG5cbiAgcmFpZHMgKCkge1xuICAgIHJldHVybiBuZXcgUmFpZHNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgcmVjaXBlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZWNpcGVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHNraWZmcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBTa2lmZnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgc2tpbnMgKCkge1xuICAgIHJldHVybiBuZXcgU2tpbnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgdGl0bGVzICgpIHtcbiAgICByZXR1cm4gbmV3IFRpdGxlc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICB0cmFuc2FjdGlvbnMgKCkge1xuICAgIHJldHVybiBuZXcgQ29tbWVyY2VFbmRwb2ludCh0aGlzKS50cmFuc2FjdGlvbnMoKVxuICB9XG5cbiAgd2FsbGV0ICgpIHtcbiAgICByZXR1cm4gbmV3IFdhbGxldEVuZHBvaW50KHRoaXMpXG4gIH1cblxuICB3aXphcmRzdmF1bHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaXN0aW5nczogKCkgPT4gbmV3IFdpemFyZHN2YXVsdExpc3RpbmdzRW5kcG9pbnQodGhpcyksXG4gICAgICBkYWlseTogKCkgPT4gbmV3IFdpemFyZHN2YXVsdERhaWx5RW5kcG9pbnQodGhpcyksXG4gICAgICB3ZWVrbHk6ICgpID0+IG5ldyBXaXphcmRzdmF1bHRXZWVrbHlFbmRwb2ludCh0aGlzKSxcbiAgICAgIHNwZWNpYWw6ICgpID0+IG5ldyBXaXphcmRzdmF1bHRTcGVjaWFsRW5kcG9pbnQodGhpcylcbiAgICB9XG4gIH1cblxuICB3b3JsZGJvc3NlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBXb3JsZGJvc3Nlc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICAvLyBBbGwgZGF0YSBhdmFpbGFibGUgZm9yIHRoZSBhY2NvdW50IGluIGEgc2luZ2xlIG9iamVjdFxuICBibG9iICgpIHtcbiAgICByZXR1cm4gYWNjb3VudEJsb2IodGhpcylcbiAgfVxufVxuXG5jbGFzcyBBY2hpZXZlbWVudHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L2FjaGlldmVtZW50cydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cblxuICBpZHMgKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ21ldGhvZCBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGVuZHBvaW50JykpXG4gIH1cblxuICBnZXQgKGlkKSB7XG4gICAgaWYgKGlkKSB7XG4gICAgICByZXR1cm4gc3VwZXIuZ2V0KGlkKVxuICAgIH1cblxuICAgIC8vIFRoaXMgZW5kcG9pbnQgcmV0dXJucyBhbGwgZW50cmllcyBpZiB0aGUgdXJsIGdldHMgcmVxdWVzdGVkXG4gICAgLy8gd2l0aG91dCBhbnkgcGFyYW1ldGVycywgYW5hbG9ndWUgdG8gdGhlIG90aGVyIGFjY291bnQgZW5kcG9pbnRzXG4gICAgcmV0dXJuIHRoaXMuYWxsKClcbiAgfVxuXG4gIGFsbCAoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldCgnJywgdHJ1ZSlcbiAgfVxufVxuXG5jbGFzcyBCYW5rRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9iYW5rJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgRGFpbHljcmFmdGluZ0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvZGFpbHljcmFmdGluZydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgYXN5bmMgZ2V0ICgpIHtcbiAgICByZXR1cm4gYXdhaXQgaXNTdGFsZURhaWx5RGF0YSh0aGlzKSA/IFtdIDogc3VwZXIuZ2V0KClcbiAgfVxufVxuXG5jbGFzcyBEdW5nZW9uc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvZHVuZ2VvbnMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxuXG4gIGFzeW5jIGdldCAoKSB7XG4gICAgcmV0dXJuIGF3YWl0IGlzU3RhbGVEYWlseURhdGEodGhpcykgPyBbXSA6IHN1cGVyLmdldCgpXG4gIH1cbn1cblxuY2xhc3MgRHllc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvZHllcydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIEVtb3Rlc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvZW1vdGVzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgRmluaXNoZXJzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9maW5pc2hlcnMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBHbGlkZXJzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9nbGlkZXJzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgSG9tZUNhdHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L2hvbWUvY2F0cydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIEhvbWVOb2Rlc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvaG9tZS9ub2RlcydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIEhvbWVzdGVhZERlY29yYXRpb25zRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9ob21lc3RlYWQvZGVjb3JhdGlvbnMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBIb21lc3RlYWRHbHlwaHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L2hvbWVzdGVhZC9nbHlwaHMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBJbnZlbnRvcnlFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L2ludmVudG9yeSdcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIEphZGVib3RzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9qYWRlYm90cydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIExlZ2VuZGFyeWFybW9yeUVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvbGVnZW5kYXJ5YXJtb3J5J1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgTHVja0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvbHVjaydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgYXN5bmMgZ2V0ICgpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmdldCgpXG4gICAgLy8gW0FQSSBQQVRDSCAjMF0gSWYgdGhlIGFjY291bnQgZG9lcyBub3QgaGF2ZSBhbnkgbHVjaywgdGhlIEFQSSBlcnJvbmVvdXNseSByZXR1cm5zIGBbXWBcbiAgICBpZiAocmVzcG9uc2UubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuICAgIHJldHVybiByZXNwb25zZVswXS52YWx1ZVxuICB9XG59XG5cbmNsYXNzIE1haWxjYXJyaWVyc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvbWFpbGNhcnJpZXJzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgTWFwY2hlc3RzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9tYXBjaGVzdHMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxuXG4gIGFzeW5jIGdldCAoKSB7XG4gICAgcmV0dXJuIGF3YWl0IGlzU3RhbGVEYWlseURhdGEodGhpcykgPyBbXSA6IHN1cGVyLmdldCgpXG4gIH1cbn1cblxuY2xhc3MgTWFzdGVyaWVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9tYXN0ZXJpZXMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBNYXN0ZXJ5UG9pbnRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9tYXN0ZXJ5L3BvaW50cydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIE1hdGVyaWFsc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvbWF0ZXJpYWxzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgTWluaXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L21pbmlzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgTW91bnRTa2luc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvbW91bnRzL3NraW5zJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgTW91bnRUeXBlc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvbW91bnRzL3R5cGVzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgTm92ZWx0aWVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9ub3ZlbHRpZXMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBPdXRmaXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9vdXRmaXRzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgUmFpZHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L3JhaWRzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cblxuICBhc3luYyBnZXQgKCkge1xuICAgIHJldHVybiBhd2FpdCBpc1N0YWxlV2Vla2x5RGF0YSh0aGlzKSA/IFtdIDogc3VwZXIuZ2V0KClcbiAgfVxufVxuXG5jbGFzcyBSZWNpcGVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9yZWNpcGVzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgU2tpZmZzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC9za2lmZnMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBTa2luc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvc2tpbnMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBUaXRsZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L3RpdGxlcydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIFdhbGxldEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvd2FsbGV0J1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgV29ybGRib3NzZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L3dvcmxkYm9zc2VzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cblxuICBhc3luYyBnZXQgKCkge1xuICAgIHJldHVybiBhd2FpdCBpc1N0YWxlRGFpbHlEYXRhKHRoaXMpID8gW10gOiBzdXBlci5nZXQoKVxuICB9XG59XG5cbmNsYXNzIFdpemFyZHN2YXVsdExpc3RpbmdzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC93aXphcmRzdmF1bHQvbGlzdGluZ3MnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBXaXphcmRzdmF1bHREYWlseUVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjY291bnQvd2l6YXJkc3ZhdWx0L2RhaWx5J1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxuXG4gIGFzeW5jIGdldCAoKSB7XG4gICAgY29uc3QgW3Jlc3BvbnNlLCBpc1N0YWxlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHN1cGVyLmdldCgpLFxuICAgICAgaXNTdGFsZURhaWx5RGF0YSh0aGlzKVxuICAgIF0pXG5cbiAgICBpZiAoaXNTdGFsZSkge1xuICAgICAgcmVzcG9uc2UubWV0YV9wcm9ncmVzc19jdXJyZW50ID0gMFxuICAgICAgcmVzcG9uc2UubWV0YV9yZXdhcmRfY2xhaW1lZCA9IGZhbHNlXG4gICAgICByZXNwb25zZS5vYmplY3RpdmVzID0gW11cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxufVxuXG5jbGFzcyBXaXphcmRzdmF1bHRXZWVrbHlFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L3dpemFyZHN2YXVsdC93ZWVrbHknXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgYXN5bmMgZ2V0ICgpIHtcbiAgICBjb25zdCBbcmVzcG9uc2UsIGlzU3RhbGVdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgc3VwZXIuZ2V0KCksXG4gICAgICBpc1N0YWxlV2Vla2x5RGF0YSh0aGlzKVxuICAgIF0pXG5cbiAgICBpZiAoaXNTdGFsZSkge1xuICAgICAgcmVzcG9uc2UubWV0YV9wcm9ncmVzc19jdXJyZW50ID0gMFxuICAgICAgcmVzcG9uc2UubWV0YV9yZXdhcmRfY2xhaW1lZCA9IGZhbHNlXG4gICAgICByZXNwb25zZS5vYmplY3RpdmVzID0gW11cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxufVxuXG5jbGFzcyBXaXphcmRzdmF1bHRTcGVjaWFsRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNjb3VudC93aXphcmRzdmF1bHQvc3BlY2lhbCdcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cblxuICBhc3luYyBnZXQgKCkge1xuICAgIGNvbnN0IHNlYXNvbiA9IGF3YWl0IG5ldyBXaXphcmRzdmF1bHRFbmRwb2ludCh0aGlzKS5nZXQoKVxuXG4gICAgY29uc3QgW3Jlc3BvbnNlLCBpc1N0YWxlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHN1cGVyLmdldCgpLFxuICAgICAgaXNTdGFsZURhdGEodGhpcywgbmV3IERhdGUoc2Vhc29uLnN0YXJ0KSlcbiAgICBdKVxuXG4gICAgaWYgKGlzU3RhbGUpIHtcbiAgICAgIHJlc3BvbnNlLm9iamVjdGl2ZXMgPSBbXVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG59XG5cbi8vIFN0YWxlIGRhdGEgY2FuIGhhcHBlbiBpZiB0aGUgbGFzdCBhY2NvdW50IHVwZGF0ZSB3YXMgYmVmb3JlIHRoZSBsYXN0IGRhaWx5IHJlc2V0XG5hc3luYyBmdW5jdGlvbiBpc1N0YWxlRGFpbHlEYXRhIChlbmRwb2ludEluc3RhbmNlKSB7XG4gIHJldHVybiBpc1N0YWxlRGF0YShlbmRwb2ludEluc3RhbmNlLCByZXNldFRpbWUuZ2V0TGFzdERhaWx5UmVzZXQoKSlcbn1cblxuLy8gU3RhbGUgZGF0YSBjYW4gaGFwcGVuIGlmIHRoZSBsYXN0IGFjY291bnQgdXBkYXRlIHdhcyBiZWZvcmUgdGhlIGxhc3Qgd2Vla2x5IHJlc2V0XG5hc3luYyBmdW5jdGlvbiBpc1N0YWxlV2Vla2x5RGF0YSAoZW5kcG9pbnRJbnN0YW5jZSkge1xuICByZXR1cm4gaXNTdGFsZURhdGEoZW5kcG9pbnRJbnN0YW5jZSwgcmVzZXRUaW1lLmdldExhc3RXZWVrbHlSZXNldCgpKVxufVxuXG5hc3luYyBmdW5jdGlvbiBpc1N0YWxlRGF0YSAoZW5kcG9pbnRJbnN0YW5jZSwgcmVzZXREYXRlKSB7XG4gIGNvbnN0IGFjY291bnQgPSBhd2FpdCBuZXcgQWNjb3VudEVuZHBvaW50KGVuZHBvaW50SW5zdGFuY2UpLnNjaGVtYSgnMjAxOS0wMy0yNicpLmdldCgpXG4gIHJldHVybiBuZXcgRGF0ZShhY2NvdW50Lmxhc3RfbW9kaWZpZWQpIDwgcmVzZXREYXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWNjb3VudEVuZHBvaW50XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEFjaGlldmVtZW50c0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2FjaGlldmVtZW50cydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuc3VwcG9ydHNCdWxrQWxsID0gZmFsc2VcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cblxuICBjYXRlZ29yaWVzICgpIHtcbiAgICByZXR1cm4gbmV3IENhdGVnb3JpZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgZ3JvdXBzICgpIHtcbiAgICByZXR1cm4gbmV3IEdyb3Vwc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBkYWlseSAoKSB7XG4gICAgcmV0dXJuIG5ldyBEYWlseUVuZHBvaW50KHRoaXMpXG4gIH1cblxuICBkYWlseVRvbW9ycm93ICgpIHtcbiAgICByZXR1cm4gbmV3IERhaWx5VG9tb3Jyb3dFbmRwb2ludCh0aGlzKVxuICB9XG59XG5cbmNsYXNzIENhdGVnb3JpZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2hpZXZlbWVudHMvY2F0ZWdvcmllcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuXG5jbGFzcyBHcm91cHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2hpZXZlbWVudHMvZ3JvdXBzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIERhaWx5RW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYWNoaWV2ZW1lbnRzL2RhaWx5J1xuICAgIHRoaXMuY2FjaGVUaW1lID0gNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIERhaWx5VG9tb3Jyb3dFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2hpZXZlbWVudHMvZGFpbHkvdG9tb3Jyb3cnXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQmFja3N0b3J5RW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgYW5zd2VycyAoKSB7XG4gICAgcmV0dXJuIG5ldyBBbnN3ZXJzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHF1ZXN0aW9ucyAoKSB7XG4gICAgcmV0dXJuIG5ldyBRdWVzdGlvbnNFbmRwb2ludCh0aGlzKVxuICB9XG59XG5cbmNsYXNzIEFuc3dlcnNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9iYWNrc3RvcnkvYW5zd2VycydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuc3VwcG9ydHNCdWxrQWxsID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuXG5jbGFzcyBRdWVzdGlvbnNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9iYWNrc3RvcnkvcXVlc3Rpb25zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5zdXBwb3J0c0J1bGtBbGwgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEJ1aWxkRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvYnVpbGQnXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA2MFxuICB9XG5cbiAgZ2V0ICgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LmlkKVxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIENhdHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9jYXRzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDaGFyYWN0ZXJzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgbmFtZSkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy51cmwgPSAnL3YyL2NoYXJhY3RlcnMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmJ1bGtJZCA9ICduYW1lJ1xuICAgIHRoaXMuc3VwcG9ydHNCdWxrQWxsID0gZmFsc2VcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgYmFja3N0b3J5ICgpIHtcbiAgICByZXR1cm4gbmV3IEJhY2tzdG9yeUVuZHBvaW50KHRoaXMsIHRoaXMubmFtZSlcbiAgfVxuXG4gIGNvcmUgKCkge1xuICAgIHJldHVybiBuZXcgQ29yZUVuZHBvaW50KHRoaXMsIHRoaXMubmFtZSlcbiAgfVxuXG4gIGNyYWZ0aW5nICgpIHtcbiAgICByZXR1cm4gbmV3IENyYWZ0aW5nRW5kcG9pbnQodGhpcywgdGhpcy5uYW1lKVxuICB9XG5cbiAgZXF1aXBtZW50ICgpIHtcbiAgICByZXR1cm4gbmV3IEVxdWlwbWVudEVuZHBvaW50KHRoaXMsIHRoaXMubmFtZSlcbiAgfVxuXG4gIGhlcm9wb2ludHMgKCkge1xuICAgIHJldHVybiBuZXcgSGVyb3BvaW50c0VuZHBvaW50KHRoaXMsIHRoaXMubmFtZSlcbiAgfVxuXG4gIGludmVudG9yeSAoKSB7XG4gICAgcmV0dXJuIG5ldyBJbnZlbnRvcnlFbmRwb2ludCh0aGlzLCB0aGlzLm5hbWUpXG4gIH1cblxuICBxdWVzdHMgKCkge1xuICAgIHJldHVybiBuZXcgUXVlc3RzRW5kcG9pbnQodGhpcywgdGhpcy5uYW1lKVxuICB9XG5cbiAgcmVjaXBlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZWNpcGVzRW5kcG9pbnQodGhpcywgdGhpcy5uYW1lKVxuICB9XG5cbiAgc2FiICgpIHtcbiAgICByZXR1cm4gbmV3IFNhYkVuZHBvaW50KHRoaXMsIHRoaXMubmFtZSlcbiAgfVxuXG4gIHNraWxscyAoKSB7XG4gICAgcmV0dXJuIG5ldyBTa2lsbHNFbmRwb2ludCh0aGlzLCB0aGlzLm5hbWUpXG4gIH1cblxuICBzcGVjaWFsaXphdGlvbnMgKCkge1xuICAgIHJldHVybiBuZXcgU3BlY2lhbGl6YXRpb25zRW5kcG9pbnQodGhpcywgdGhpcy5uYW1lKVxuICB9XG5cbiAgdHJhaW5pbmcgKCkge1xuICAgIHJldHVybiBuZXcgVHJhaW5pbmdFbmRwb2ludCh0aGlzLCB0aGlzLm5hbWUpXG4gIH1cbn1cblxuY2xhc3MgQmFja3N0b3J5RW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9jaGFyYWN0ZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNoYXJhY3Rlcil9L2JhY2tzdG9yeWBcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgZ2V0ICgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LmJhY2tzdG9yeSlcbiAgfVxufVxuXG5jbGFzcyBDb3JlRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9jaGFyYWN0ZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNoYXJhY3Rlcil9L2NvcmVgXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBDcmFmdGluZ0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGNoYXJhY3Rlcikge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvY2hhcmFjdGVycy8ke2VuY29kZVVSSUNvbXBvbmVudChjaGFyYWN0ZXIpfS9jcmFmdGluZ2BcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgZ2V0ICgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LmNyYWZ0aW5nKVxuICB9XG59XG5cbmNsYXNzIEVxdWlwbWVudEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGNoYXJhY3Rlcikge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvY2hhcmFjdGVycy8ke2VuY29kZVVSSUNvbXBvbmVudChjaGFyYWN0ZXIpfS9lcXVpcG1lbnRgXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxuXG4gIGdldCAoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldCgpLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5lcXVpcG1lbnQpXG4gIH1cbn1cblxuY2xhc3MgSGVyb3BvaW50c0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGNoYXJhY3Rlcikge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvY2hhcmFjdGVycy8ke2VuY29kZVVSSUNvbXBvbmVudChjaGFyYWN0ZXIpfS9oZXJvcG9pbnRzYFxuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgSW52ZW50b3J5RW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9jaGFyYWN0ZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNoYXJhY3Rlcil9L2ludmVudG9yeWBcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgZ2V0ICgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LmJhZ3MpXG4gIH1cbn1cblxuY2xhc3MgUXVlc3RzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9jaGFyYWN0ZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNoYXJhY3Rlcil9L3F1ZXN0c2BcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIFJlY2lwZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50LCBjaGFyYWN0ZXIpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSBgL3YyL2NoYXJhY3RlcnMvJHtlbmNvZGVVUklDb21wb25lbnQoY2hhcmFjdGVyKX0vcmVjaXBlc2BcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgZ2V0ICgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LnJlY2lwZXMpXG4gIH1cbn1cblxuY2xhc3MgU2FiRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9jaGFyYWN0ZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNoYXJhY3Rlcil9L3NhYmBcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIFNraWxsc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGNoYXJhY3Rlcikge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvY2hhcmFjdGVycy8ke2VuY29kZVVSSUNvbXBvbmVudChjaGFyYWN0ZXIpfS9za2lsbHNgXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxuXG4gIGdldCAoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldCgpLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5za2lsbHMpXG4gIH1cbn1cblxuY2xhc3MgU3BlY2lhbGl6YXRpb25zRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9jaGFyYWN0ZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNoYXJhY3Rlcil9L3NwZWNpYWxpemF0aW9uc2BcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgZ2V0ICgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LnNwZWNpYWxpemF0aW9ucylcbiAgfVxufVxuXG5jbGFzcyBUcmFpbmluZ0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGNoYXJhY3Rlcikge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvY2hhcmFjdGVycy8ke2VuY29kZVVSSUNvbXBvbmVudChjaGFyYWN0ZXIpfS90cmFpbmluZ2BcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgZ2V0ICgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KCkudGhlbihyZXN1bHQgPT4gcmVzdWx0LnRyYWluaW5nKVxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIENvbG9yc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2NvbG9ycydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDb21tZXJjZUVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIC8vIEN1cnJlbnQgdGhpbmdzIHRvIGdyYWIgaW4gdGhlIGRlbGl2ZXJ5IGJveFxuICBkZWxpdmVyeSAoKSB7XG4gICAgcmV0dXJuIG5ldyBEZWxpdmVyeUVuZHBvaW50KHRoaXMpXG4gIH1cblxuICAvLyBDdXJyZW50IGdlbS9jb2luIGV4Y2hhbmdlIHJhdGVzXG4gIGV4Y2hhbmdlICgpIHtcbiAgICByZXR1cm4gbmV3IEV4Y2hhbmdlRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdHJhZGluZ3Bvc3QgbGlzdGluZ3NcbiAgbGlzdGluZ3MgKCkge1xuICAgIHJldHVybiBuZXcgTGlzdGluZ3NFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgLy8gQ3VycmVudCB0cmFkaW5ncG9zdCBwcmljZXNcbiAgcHJpY2VzICgpIHtcbiAgICByZXR1cm4gbmV3IFByaWNlc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICAvLyBDdXJyZW50IGFuZCBjb21wbGV0ZWQgdHJhbnNhY3Rpb25zXG4gIHRyYW5zYWN0aW9ucyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQ6ICgpID0+ICh7XG4gICAgICAgIGJ1eXM6ICgpID0+IG5ldyBUcmFuc2FjdGlvbnNFbmRwb2ludCh0aGlzLCAnY3VycmVudCcsICdidXlzJyksXG4gICAgICAgIHNlbGxzOiAoKSA9PiBuZXcgVHJhbnNhY3Rpb25zRW5kcG9pbnQodGhpcywgJ2N1cnJlbnQnLCAnc2VsbHMnKVxuICAgICAgfSksXG4gICAgICBoaXN0b3J5OiAoKSA9PiAoe1xuICAgICAgICBidXlzOiAoKSA9PiBuZXcgVHJhbnNhY3Rpb25zRW5kcG9pbnQodGhpcywgJ2hpc3RvcnknLCAnYnV5cycpLFxuICAgICAgICBzZWxsczogKCkgPT4gbmV3IFRyYW5zYWN0aW9uc0VuZHBvaW50KHRoaXMsICdoaXN0b3J5JywgJ3NlbGxzJylcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmNsYXNzIERlbGl2ZXJ5RW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvY29tbWVyY2UvZGVsaXZlcnlgXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBFeGNoYW5nZUVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2NvbW1lcmNlL2V4Y2hhbmdlJ1xuICAgIHRoaXMuY2FjaGVUaW1lID0gMTAgKiA2MFxuICB9XG5cbiAgZ2VtcyAocXVhbnRpdHkpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KGAvZ2Vtcz9xdWFudGl0eT0ke3F1YW50aXR5fWAsIHRydWUpXG4gIH1cblxuICBjb2lucyAocXVhbnRpdHkpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KGAvY29pbnM/cXVhbnRpdHk9JHtxdWFudGl0eX1gLCB0cnVlKVxuICB9XG59XG5cbmNsYXNzIExpc3RpbmdzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvY29tbWVyY2UvbGlzdGluZ3MnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLnN1cHBvcnRzQnVsa0FsbCA9IGZhbHNlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyICogNjBcbiAgfVxufVxuXG5jbGFzcyBQcmljZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9jb21tZXJjZS9wcmljZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLnN1cHBvcnRzQnVsa0FsbCA9IGZhbHNlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA2MFxuICB9XG59XG5cbmNsYXNzIFRyYW5zYWN0aW9uc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIHR5cGUsIGxpc3QpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSBgL3YyL2NvbW1lcmNlL3RyYW5zYWN0aW9ucy8ke3R5cGV9LyR7bGlzdH1gXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDEwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDb250aW5lbnRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvY29udGluZW50cydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxuXG4gIGZsb29ycyAoaWQpIHtcbiAgICByZXR1cm4gbmV3IEZsb29yc0VuZHBvaW50KHRoaXMsIGlkKVxuICB9XG59XG5cbmNsYXNzIEZsb29yc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGNvbnRpbmVudElkKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9jb250aW5lbnRzLyR7Y29udGluZW50SWR9L2Zsb29yc2BcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDdXJyZW5jaWVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvY3VycmVuY2llcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBEYWlseWNyYWZ0aW5nRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvZGFpbHljcmFmdGluZydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBEdW5nZW9uc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2R1bmdlb25zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBFbWJsZW1FbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBiYWNrZ3JvdW5kcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBMYXllcnNFbmRwb2ludCh0aGlzLCAnYmFja2dyb3VuZHMnKVxuICB9XG5cbiAgZm9yZWdyb3VuZHMgKCkge1xuICAgIHJldHVybiBuZXcgTGF5ZXJzRW5kcG9pbnQodGhpcywgJ2ZvcmVncm91bmRzJylcbiAgfVxufVxuXG5jbGFzcyBMYXllcnNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50LCBsYXllcikge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvZW1ibGVtLyR7bGF5ZXJ9YFxuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBFbW90ZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9lbW90ZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRXZlbnRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjEvZXZlbnRfZGV0YWlscy5qc29uJ1xuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cblxuICBhbGwgKCkge1xuICAgIHJldHVybiBzdXBlci5nZXQoKS50aGVuKHRyYW5zZm9ybVYxRm9ybWF0KVxuICB9XG5cbiAgZ2V0IChpZCkge1xuICAgIHJldHVybiBzdXBlci5nZXQoYD9ldmVudF9pZD0ke2lkfWAsIHRydWUpLnRoZW4oanNvbiA9PiB0cmFuc2Zvcm1WMUZvcm1hdChqc29uKVswXSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1WMUZvcm1hdCAoanNvbikge1xuICBsZXQgZXZlbnRzID0ganNvbi5ldmVudHNcbiAgbGV0IHRyYW5zZm9ybWVkID0gW11cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cylcblxuICBmb3IgKGxldCBpID0gMDsgaSAhPT0ga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHRyYW5zZm9ybWVkLnB1c2goT2JqZWN0LmFzc2lnbih7IGlkOiBrZXlzW2ldIH0sIGV2ZW50c1trZXlzW2ldXSkpXG4gIH1cblxuICByZXR1cm4gdHJhbnNmb3JtZWRcbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRmlsZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9maWxlcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRmluaXNoZXJzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvZmluaXNoZXJzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEdsaWRlcnNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9nbGlkZXJzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEd1aWxkRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgaWQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy51cmwgPSAnL3YyL2d1aWxkJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNPcHRpb25hbGx5QXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDYwICogNjBcbiAgfVxuXG4gIGdldCAoaWQpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KGAvJHtpZH1gLCB0cnVlKVxuICB9XG5cbiAgcGVybWlzc2lvbnMgKCkge1xuICAgIHJldHVybiBuZXcgUGVybWlzc2lvbnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgc2VhcmNoIChuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBTZWFyY2hFbmRwb2ludCh0aGlzLCBuYW1lKVxuICB9XG5cbiAgdXBncmFkZXMgKCkge1xuICAgIGlmICh0aGlzLmlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuZXcgQWxsVXBncmFkZXNFbmRwb2ludCh0aGlzKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVXBncmFkZXNFbmRwb2ludCh0aGlzLCB0aGlzLmlkKVxuICB9XG5cbiAgbG9nICgpIHtcbiAgICByZXR1cm4gbmV3IExvZ0VuZHBvaW50KHRoaXMsIHRoaXMuaWQpXG4gIH1cblxuICBtZW1iZXJzICgpIHtcbiAgICByZXR1cm4gbmV3IE1lbWJlcnNFbmRwb2ludCh0aGlzLCB0aGlzLmlkKVxuICB9XG5cbiAgcmFua3MgKCkge1xuICAgIHJldHVybiBuZXcgUmFua3NFbmRwb2ludCh0aGlzLCB0aGlzLmlkKVxuICB9XG5cbiAgc3Rhc2ggKCkge1xuICAgIHJldHVybiBuZXcgU3Rhc2hFbmRwb2ludCh0aGlzLCB0aGlzLmlkKVxuICB9XG5cbiAgc3RvcmFnZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlRW5kcG9pbnQodGhpcywgdGhpcy5pZClcbiAgfVxuXG4gIHRlYW1zICgpIHtcbiAgICByZXR1cm4gbmV3IFRlYW1zRW5kcG9pbnQodGhpcywgdGhpcy5pZClcbiAgfVxuXG4gIHRyZWFzdXJ5ICgpIHtcbiAgICByZXR1cm4gbmV3IFRyZWFzdXJ5RW5kcG9pbnQodGhpcywgdGhpcy5pZClcbiAgfVxufVxuXG5jbGFzcyBQZXJtaXNzaW9uc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2d1aWxkL3Blcm1pc3Npb25zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIFNlYXJjaEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2d1aWxkL3NlYXJjaCdcbiAgICB0aGlzLmNhY2hlVGltZSA9IDYwICogNjBcbiAgfVxuXG4gIG5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0KGA/bmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudChuYW1lKX1gLCB0cnVlKVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHJlc3VsdFswXSlcbiAgfVxufVxuXG5jbGFzcyBBbGxVcGdyYWRlc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2d1aWxkL3VwZ3JhZGVzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIExvZ0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGlkKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9ndWlsZC8ke2VuY29kZVVSSUNvbXBvbmVudChpZCl9L2xvZ2BcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG5cbiAgc2luY2UgKGxvZ0lkKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldChgP3NpbmNlPSR7bG9nSWR9YCwgdHJ1ZSlcbiAgfVxufVxuXG5jbGFzcyBNZW1iZXJzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgaWQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSBgL3YyL2d1aWxkLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGlkKX0vbWVtYmVyc2BcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIFJhbmtzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgaWQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSBgL3YyL2d1aWxkLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGlkKX0vcmFua3NgXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBTdGFzaEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGlkKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9ndWlsZC8ke2VuY29kZVVSSUNvbXBvbmVudChpZCl9L3N0YXNoYFxuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgU3RvcmFnZUVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGlkKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9ndWlsZC8ke2VuY29kZVVSSUNvbXBvbmVudChpZCl9L3N0b3JhZ2VgXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBUZWFtc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGlkKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9ndWlsZC8ke2VuY29kZVVSSUNvbXBvbmVudChpZCl9L3RlYW1zYFxuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgVHJlYXN1cnlFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50LCBpZCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9IGAvdjIvZ3VpbGQvJHtlbmNvZGVVUklDb21wb25lbnQoaWQpfS90cmVhc3VyeWBcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIFVwZ3JhZGVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgaWQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSBgL3YyL2d1aWxkLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGlkKX0vdXBncmFkZXNgXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBIb21lRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY2F0cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBDYXRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIG5vZGVzICgpIHtcbiAgICByZXR1cm4gbmV3IE5vZGVzRW5kcG9pbnQodGhpcylcbiAgfVxufVxuXG5jbGFzcyBDYXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvaG9tZS9jYXRzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuXG5jbGFzcyBOb2Rlc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL2hvbWUvbm9kZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEhvbWVzdGVhZEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGRlY29yYXRpb25zICgpIHtcbiAgICByZXR1cm4gbmV3IERlY29yYXRpb25zRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGdseXBocyAoKSB7XG4gICAgcmV0dXJuIG5ldyBHbHlwaHNFbmRwb2ludCh0aGlzKVxuICB9XG59XG5cbmNsYXNzIERlY29yYXRpb25zRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvaG9tZXN0ZWFkL2RlY29yYXRpb25zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLnN1cHBvcnRzQnVsa0FsbCA9IGZhbHNlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxuXG4gIGNhdGVnb3JpZXMgKCkge1xuICAgIHJldHVybiBuZXcgRGVjb3JhdGlvbnNDYXRlZ29yaWVzRW5kcG9pbnQodGhpcylcbiAgfVxufVxuXG5jbGFzcyBHbHlwaHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9ob21lc3RlYWQvZ2x5cGhzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuXG5jbGFzcyBEZWNvcmF0aW9uc0NhdGVnb3JpZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9ob21lc3RlYWQvZGVjb3JhdGlvbnMvY2F0ZWdvcmllcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFjY291bnRFbmRwb2ludDogcmVxdWlyZSgnLi9hY2NvdW50JyksXG4gIEFjaGlldmVtZW50c0VuZHBvaW50OiByZXF1aXJlKCcuL2FjaGlldmVtZW50cycpLFxuICBCYWNrc3RvcnlFbmRwb2ludDogcmVxdWlyZSgnLi9iYWNrc3RvcnknKSxcbiAgQnVpbGRFbmRwb2ludDogcmVxdWlyZSgnLi9idWlsZCcpLFxuICBDYXRzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vY2F0cycpLFxuICBDaGFyYWN0ZXJzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vY2hhcmFjdGVycycpLFxuICBDb2xvcnNFbmRwb2ludDogcmVxdWlyZSgnLi9jb2xvcnMnKSxcbiAgQ29tbWVyY2VFbmRwb2ludDogcmVxdWlyZSgnLi9jb21tZXJjZScpLFxuICBDb250aW5lbnRzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vY29udGluZW50cycpLFxuICBDdXJyZW5jaWVzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vY3VycmVuY2llcycpLFxuICBEYWlseWNyYWZ0aW5nRW5kcG9pbnQ6IHJlcXVpcmUoJy4vZGFpbHljcmFmdGluZycpLFxuICBEdW5nZW9uc0VuZHBvaW50OiByZXF1aXJlKCcuL2R1bmdlb25zJyksXG4gIEVtYmxlbUVuZHBvaW50OiByZXF1aXJlKCcuL2VtYmxlbScpLFxuICBFbW90ZXNFbmRwb2ludDogcmVxdWlyZSgnLi9lbW90ZXMnKSxcbiAgRXZlbnRzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vZXZlbnRzJyksXG4gIEZpbGVzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vZmlsZXMnKSxcbiAgRmluaXNoZXJzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vZmluaXNoZXJzJyksXG4gIEdsaWRlcnNFbmRwb2ludDogcmVxdWlyZSgnLi9nbGlkZXJzJyksXG4gIEd1aWxkRW5kcG9pbnQ6IHJlcXVpcmUoJy4vZ3VpbGQnKSxcbiAgSG9tZUVuZHBvaW50OiByZXF1aXJlKCcuL2hvbWUnKSxcbiAgSG9tZXN0ZWFkRW5kcG9pbnQ6IHJlcXVpcmUoJy4vaG9tZXN0ZWFkJyksXG4gIEl0ZW1zRW5kcG9pbnQ6IHJlcXVpcmUoJy4vaXRlbXMnKSxcbiAgSXRlbXN0YXRzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vaXRlbXN0YXRzJyksXG4gIEphZGVib3RzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vamFkZWJvdHMnKSxcbiAgTGVnZW5kYXJ5YXJtb3J5RW5kcG9pbnQ6IHJlcXVpcmUoJy4vbGVnZW5kYXJ5YXJtb3J5JyksXG4gIExlZ2VuZHNFbmRwb2ludDogcmVxdWlyZSgnLi9sZWdlbmRzJyksXG4gIE1haWxjYXJyaWVyc0VuZHBvaW50OiByZXF1aXJlKCcuL21haWxjYXJyaWVycycpLFxuICBNYXBjaGVzdHNFbmRwb2ludDogcmVxdWlyZSgnLi9tYXBjaGVzdHMnKSxcbiAgTWFwc0VuZHBvaW50OiByZXF1aXJlKCcuL21hcHMnKSxcbiAgTWFzdGVyaWVzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vbWFzdGVyaWVzJyksXG4gIE1hdGVyaWFsc0VuZHBvaW50OiByZXF1aXJlKCcuL21hdGVyaWFscycpLFxuICBNaW5pc0VuZHBvaW50OiByZXF1aXJlKCcuL21pbmlzJyksXG4gIE1vdW50c0VuZHBvaW50OiByZXF1aXJlKCcuL21vdW50cycpLFxuICBOb2Rlc0VuZHBvaW50OiByZXF1aXJlKCcuL25vZGVzJyksXG4gIE5vdmVsdGllc0VuZHBvaW50OiByZXF1aXJlKCcuL25vdmVsdGllcycpLFxuICBPdXRmaXRzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vb3V0Zml0cycpLFxuICBQZXRzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vcGV0cycpLFxuICBQcm9mZXNzaW9uc0VuZHBvaW50OiByZXF1aXJlKCcuL3Byb2Zlc3Npb25zJyksXG4gIFB2cEVuZHBvaW50OiByZXF1aXJlKCcuL3B2cCcpLFxuICBRdWFnZ2Fuc0VuZHBvaW50OiByZXF1aXJlKCcuL3F1YWdnYW5zJyksXG4gIFF1ZXN0c0VuZHBvaW50OiByZXF1aXJlKCcuL3F1ZXN0cycpLFxuICBSYWNlc0VuZHBvaW50OiByZXF1aXJlKCcuL3JhY2VzJyksXG4gIFJhaWRzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vcmFpZHMnKSxcbiAgUmVjaXBlc0VuZHBvaW50OiByZXF1aXJlKCcuL3JlY2lwZXMnKSxcbiAgU2tpZmZzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vc2tpZmZzJyksXG4gIFNraWxsc0VuZHBvaW50OiByZXF1aXJlKCcuL3NraWxscycpLFxuICBTa2luc0VuZHBvaW50OiByZXF1aXJlKCcuL3NraW5zJyksXG4gIFNwZWNpYWxpemF0aW9uc0VuZHBvaW50OiByZXF1aXJlKCcuL3NwZWNpYWxpemF0aW9ucycpLFxuICBTdG9yaWVzRW5kcG9pbnQ6IHJlcXVpcmUoJy4vc3RvcmllcycpLFxuICBUaXRsZXNFbmRwb2ludDogcmVxdWlyZSgnLi90aXRsZXMnKSxcbiAgVG9rZW5pbmZvRW5kcG9pbnQ6IHJlcXVpcmUoJy4vdG9rZW5pbmZvJyksXG4gIFRyYWl0c0VuZHBvaW50OiByZXF1aXJlKCcuL3RyYWl0cycpLFxuICBXaXphcmRzdmF1bHRFbmRwb2ludDogcmVxdWlyZSgnLi93aXphcmRzdmF1bHQnKSxcbiAgV29ybGRib3NzZXNFbmRwb2ludDogcmVxdWlyZSgnLi93b3JsZGJvc3NlcycpLFxuICBXb3JsZHNFbmRwb2ludDogcmVxdWlyZSgnLi93b3JsZHMnKSxcbiAgV3Z3RW5kcG9pbnQ6IHJlcXVpcmUoJy4vd3Z3Jylcbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSXRlbXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9pdGVtcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuc3VwcG9ydHNCdWxrQWxsID0gZmFsc2VcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSXRlbXN0YXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvaXRlbXN0YXRzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEphZGVib3RzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvamFkZWJvdHMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgTGVnZW5kYXJ5YXJtb3J5RW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbGVnZW5kYXJ5YXJtb3J5J1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBMZWdlbmRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbGVnZW5kcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgTWFpbGNhcnJpZXJzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbWFpbGNhcnJpZXJzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIE1hcGNoZXN0c0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL21hcGNoZXN0cydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBNYXBzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbWFwcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBNYXN0ZXJpZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9tYXN0ZXJpZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgTWF0ZXJpYWxzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbWF0ZXJpYWxzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIE1pbmlzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbWluaXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgTW91bnRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgc2tpbnMgKCkge1xuICAgIHJldHVybiBuZXcgU2tpbnNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgdHlwZXMgKCkge1xuICAgIHJldHVybiBuZXcgVHlwZXNFbmRwb2ludCh0aGlzKVxuICB9XG59XG5cbmNsYXNzIFNraW5zRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbW91bnRzL3NraW5zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIFR5cGVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbW91bnRzL3R5cGVzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIE5vZGVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvbm9kZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIE5vdmVsdGllc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL25vdmVsdGllcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBPdXRmaXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvb3V0Zml0cydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBQZXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvcGV0cydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBQcm9mZXNzaW9uc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3Byb2Zlc3Npb25zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFB2cEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGZyb21BY2NvdW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMuZnJvbUFjY291bnQgPSBmcm9tQWNjb3VudFxuICB9XG5cbiAgYW11bGV0cyAoKSB7XG4gICAgcmV0dXJuIG5ldyBBbXVsZXRzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGdhbWVzICgpIHtcbiAgICByZXR1cm4gbmV3IEdhbWVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIGhlcm9lcyAoKSB7XG4gICAgaWYgKHRoaXMuZnJvbUFjY291bnQpIHtcbiAgICAgIHJldHVybiBuZXcgQWNjb3VudEhlcm9lc0VuZHBvaW50KHRoaXMpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIZXJvZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgcmFua3MgKCkge1xuICAgIHJldHVybiBuZXcgUmFua3NFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgc2Vhc29ucyAoaWQpIHtcbiAgICByZXR1cm4gbmV3IFNlYXNvbnNFbmRwb2ludCh0aGlzLCBpZClcbiAgfVxuXG4gIHN0YW5kaW5ncyAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdGFuZGluZ3NFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgc3RhdHMgKCkge1xuICAgIHJldHVybiBuZXcgU3RhdHNFbmRwb2ludCh0aGlzKVxuICB9XG59XG5cbmNsYXNzIEFjY291bnRIZXJvZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9hY2NvdW50L3B2cC9oZXJvZXMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBBbXVsZXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvcHZwL2FtdWxldHMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cblxuY2xhc3MgR2FtZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9wdnAvZ2FtZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDUgKiA2MFxuICB9XG59XG5cbmNsYXNzIEhlcm9lc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3B2cC9oZXJvZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cblxuY2xhc3MgUmFua3NFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9wdnAvcmFua3MnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cblxuY2xhc3MgU2Vhc29uc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGlkKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMuaWQgPSBpZFxuICAgIHRoaXMudXJsID0gJy92Mi9wdnAvc2Vhc29ucydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxuXG4gIGxlYWRlcmJvYXJkcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBTZWFzb25MZWFkZXJib2FyZEVuZHBvaW50KHRoaXMsIHRoaXMuaWQpXG4gIH1cbn1cblxuY2xhc3MgU2Vhc29uTGVhZGVyYm9hcmRFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50LCBpZCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLmlkID0gaWRcbiAgICB0aGlzLnVybCA9IGAvdjIvcHZwL3NlYXNvbnMvJHtpZH0vbGVhZGVyYm9hcmRzYFxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cblxuICBpZHMgKCkge1xuICAgIHJldHVybiBzdXBlci5nZXQoJycsIHRydWUpXG4gIH1cblxuICBib2FyZCAoYm9hcmQsIHJlZ2lvbikge1xuICAgIHJldHVybiBuZXcgU2Vhc29uTGVhZGVyYm9hcmRCb2FyZEVuZHBvaW50KHRoaXMsIHRoaXMuaWQsIGJvYXJkLCByZWdpb24pXG4gIH1cbn1cblxuY2xhc3MgU2Vhc29uTGVhZGVyYm9hcmRCb2FyZEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQsIGlkLCBib2FyZCwgcmVnaW9uKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gYC92Mi9wdnAvc2Vhc29ucy8ke2lkfS9sZWFkZXJib2FyZHMvJHtib2FyZH0vJHtyZWdpb259YFxuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuXG5jbGFzcyBTdGFuZGluZ3NFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9wdnAvc3RhbmRpbmdzJ1xuICAgIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNSAqIDYwXG4gIH1cbn1cblxuY2xhc3MgU3RhdHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9wdnAvc3RhdHMnXG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA1ICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBRdWFnZ2Fuc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3F1YWdnYW5zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBRdWVzdHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9xdWVzdHMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUmFjZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9yYWNlcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBSYWlkc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3JhaWRzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBSZWNpcGVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvcmVjaXBlcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuc3VwcG9ydHNCdWxrQWxsID0gZmFsc2VcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG5cbiAgc2VhcmNoICgpIHtcbiAgICByZXR1cm4gbmV3IFNlYXJjaEVuZHBvaW50KHRoaXMpXG4gIH1cbn1cblxuY2xhc3MgU2VhcmNoRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvcmVjaXBlcy9zZWFyY2gnXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxuXG4gIGlucHV0IChpZCkge1xuICAgIHJldHVybiBzdXBlci5nZXQoYD9pbnB1dD0ke2lkfWAsIHRydWUpXG4gIH1cblxuICBvdXRwdXQgKGlkKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldChgP291dHB1dD0ke2lkfWAsIHRydWUpXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgU2tpZmZzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvc2tpZmZzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFNraWxsc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3NraWxscydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBTa2luc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3NraW5zJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5zdXBwb3J0c0J1bGtBbGwgPSBmYWxzZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBTcGVjaWFsaXphdGlvbnNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9zcGVjaWFsaXphdGlvbnMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgU3Rvcmllc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3N0b3JpZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cblxuICBzZWFzb25zICgpIHtcbiAgICByZXR1cm4gbmV3IFNlYXNvbnNFbmRwb2ludCh0aGlzKVxuICB9XG59XG5cbmNsYXNzIFNlYXNvbnNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi9zdG9yaWVzL3NlYXNvbnMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgVGl0bGVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvdGl0bGVzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFRva2VuaW5mb0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3Rva2VuaW5mbydcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgVHJhaXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvdHJhaXRzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJjb25zdCBBYnN0cmFjdEVuZHBvaW50ID0gcmVxdWlyZSgnLi4vZW5kcG9pbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFdpemFyZHN2YXVsdEVuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3dpemFyZHN2YXVsdCdcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNjAgKiA2MFxuICB9XG5cbiAgbGlzdGluZ3MgKCkge1xuICAgIHJldHVybiBuZXcgTGlzdGluZ3NFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgb2JqZWN0aXZlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RpdmVzRW5kcG9pbnQodGhpcylcbiAgfVxufVxuXG5jbGFzcyBMaXN0aW5nc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3dpemFyZHN2YXVsdC9saXN0aW5ncydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSBmYWxzZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIE9iamVjdGl2ZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi93aXphcmRzdmF1bHQvb2JqZWN0aXZlcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgV29ybGRib3NzZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi93b3JsZGJvc3NlcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuaXNMb2NhbGl6ZWQgPSB0cnVlXG4gICAgdGhpcy5jYWNoZVRpbWUgPSAyNCAqIDYwICogNjBcbiAgfVxufVxuIiwiY29uc3QgQWJzdHJhY3RFbmRwb2ludCA9IHJlcXVpcmUoJy4uL2VuZHBvaW50JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBXb3JsZHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi93b3JsZHMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmlzTG9jYWxpemVkID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMjQgKiA2MCAqIDYwXG4gIH1cbn1cbiIsImNvbnN0IEFic3RyYWN0RW5kcG9pbnQgPSByZXF1aXJlKCcuLi9lbmRwb2ludCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgV3Z3RW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgYWJpbGl0aWVzICgpIHtcbiAgICByZXR1cm4gbmV3IEFiaWxpdGllc0VuZHBvaW50KHRoaXMpXG4gIH1cblxuICBtYXRjaGVzICgpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoZXNFbmRwb2ludCh0aGlzKVxuICB9XG5cbiAgb2JqZWN0aXZlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RpdmVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHVwZ3JhZGVzICgpIHtcbiAgICByZXR1cm4gbmV3IFVwZ3JhZGVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHJhbmtzICgpIHtcbiAgICByZXR1cm4gbmV3IFJhbmtzRW5kcG9pbnQodGhpcylcbiAgfVxufVxuXG5jbGFzcyBBYmlsaXRpZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi93dncvYWJpbGl0aWVzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIE1hdGNoZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi93dncvbWF0Y2hlcydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMzBcbiAgfVxuXG4gIHdvcmxkICh3b3JsZElkKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldChgP3dvcmxkPSR7d29ybGRJZH1gLCB0cnVlKVxuICB9XG5cbiAgb3ZlcnZpZXcgKCkge1xuICAgIHJldHVybiBuZXcgTWF0Y2hlc092ZXJ2aWV3RW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHNjb3JlcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaGVzU2NvcmVzRW5kcG9pbnQodGhpcylcbiAgfVxuXG4gIHN0YXRzIChpZCkge1xuICAgIHJldHVybiBuZXcgTWF0Y2hlc1N0YXRzRW5kcG9pbnQodGhpcywgaWQpXG4gIH1cbn1cblxuY2xhc3MgVGVhbXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50LCBpZCwgdGVhbSkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnRlYW0gPSB0ZWFtXG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy51cmwgPSBgL3YyL3d2dy9tYXRjaGVzL3N0YXRzLyR7aWR9L3RlYW1zYFxuICB9XG5cbiAgdG9wICh3aGljaCkge1xuICAgIHJldHVybiBuZXcgVG9wU3RhdHNFbmRwb2ludCh0aGlzLCB0aGlzLmlkLCB0aGlzLnRlYW0sIHdoaWNoKVxuICB9XG59XG5cbmNsYXNzIFRvcFN0YXRzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCwgaWQsIHRlYW0sIHdoaWNoKSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMud2hpY2ggPSB3aGljaFxuICAgIHRoaXMudXJsID0gYC92Mi93dncvbWF0Y2hlcy9zdGF0cy8ke2lkfS90ZWFtcy8ke3RlYW19L3RvcC8ke3doaWNofWBcbiAgfVxufVxuXG5jbGFzcyBNYXRjaGVzT3ZlcnZpZXdFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi93dncvbWF0Y2hlcy9vdmVydmlldydcbiAgICB0aGlzLmlzUGFnaW5hdGVkID0gdHJ1ZVxuICAgIHRoaXMuaXNCdWxrID0gdHJ1ZVxuICAgIHRoaXMuY2FjaGVUaW1lID0gMzBcbiAgfVxuXG4gIHdvcmxkICh3b3JsZElkKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldChgP3dvcmxkPSR7d29ybGRJZH1gLCB0cnVlKVxuICB9XG59XG5cbmNsYXNzIE1hdGNoZXNTY29yZXNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KVxuICAgIHRoaXMudXJsID0gJy92Mi93dncvbWF0Y2hlcy9zY29yZXMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDMwXG4gIH1cblxuICB3b3JsZCAod29ybGRJZCkge1xuICAgIHJldHVybiBzdXBlci5nZXQoYD93b3JsZD0ke3dvcmxkSWR9YCwgdHJ1ZSlcbiAgfVxufVxuXG5jbGFzcyBNYXRjaGVzU3RhdHNFbmRwb2ludCBleHRlbmRzIEFic3RyYWN0RW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvciAoY2xpZW50LCBpZCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLmlkID0gaWRcbiAgICB0aGlzLnVybCA9ICcvdjIvd3Z3L21hdGNoZXMvc3RhdHMnXG4gICAgdGhpcy5pc1BhZ2luYXRlZCA9IHRydWVcbiAgICB0aGlzLmlzQnVsayA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDMwXG4gIH1cblxuICB3b3JsZCAod29ybGRJZCkge1xuICAgIHJldHVybiBzdXBlci5nZXQoYD93b3JsZD0ke3dvcmxkSWR9YCwgdHJ1ZSlcbiAgfVxuXG4gIHRlYW1zICh0ZWFtKSB7XG4gICAgcmV0dXJuIG5ldyBUZWFtc0VuZHBvaW50KHRoaXMsIHRoaXMuaWQsIHRlYW0pXG4gIH1cbn1cblxuY2xhc3MgT2JqZWN0aXZlc0VuZHBvaW50IGV4dGVuZHMgQWJzdHJhY3RFbmRwb2ludCB7XG4gIGNvbnN0cnVjdG9yIChjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpXG4gICAgdGhpcy51cmwgPSAnL3YyL3d2dy9vYmplY3RpdmVzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIFVwZ3JhZGVzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvd3Z3L3VwZ3JhZGVzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG5cbmNsYXNzIFJhbmtzRW5kcG9pbnQgZXh0ZW5kcyBBYnN0cmFjdEVuZHBvaW50IHtcbiAgY29uc3RydWN0b3IgKGNsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnVybCA9ICcvdjIvd3Z3L3JhbmtzJ1xuICAgIHRoaXMuaXNQYWdpbmF0ZWQgPSB0cnVlXG4gICAgdGhpcy5pc0J1bGsgPSB0cnVlXG4gICAgdGhpcy5pc0xvY2FsaXplZCA9IHRydWVcbiAgICB0aGlzLmNhY2hlVGltZSA9IDI0ICogNjAgKiA2MFxuICB9XG59XG4iLCJhc3luYyBmdW5jdGlvbiBwYXJhbGxlbCAocHJvbWlzZXMpIHtcbiAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIE9iamVjdC52YWx1ZXMocHJvbWlzZXMpLm1hcChmdW5jID0+IGZ1bmMoKSlcbiAgKVxuXG4gIC8vIElmIHRoZSBpbml0aWFsIHN0cnVjdHVyZSB3YXMgYW4gYXJyYXksIGp1c3QgcmV0dXJuIHRoZSBhcnJheSBvZiByZXN1bHRzXG4gIGlmIChBcnJheS5pc0FycmF5KHByb21pc2VzKSkge1xuICAgIHJldHVybiByZXN1bHRzXG4gIH1cblxuICAvLyBJZiB0aGUgaW5pdGlhbCBzdHJ1Y3R1cmUgd2FzIGFuIG9iamVjdCwgcmVidWlsZCBhbiBvYmplY3Qgd2l0aCB0aGUgcmVzdWx0c1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvbWlzZXMpXG4gIHJldHVybiByZXN1bHRzLnJlZHVjZSgob2JqZWN0LCByZXN1bHRQYXJ0LCBpbmRleCkgPT4ge1xuICAgIG9iamVjdFtrZXlzW2luZGV4XV0gPSByZXN1bHRQYXJ0XG4gICAgcmV0dXJuIG9iamVjdFxuICB9LCB7fSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHBhcmFsbGVsIH1cbiIsImNvbnN0IGVtb3Rpb25IYXNoID0gcmVxdWlyZSgnQGVtb3Rpb24vaGFzaC9kaXN0L2hhc2guYnJvd3Nlci5janMuanMnKS5kZWZhdWx0XG5cbmxldCBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIGhhc2ggKHN0cmluZykge1xuICBpZiAoIWNhY2hlW3N0cmluZ10pIHtcbiAgICBjYWNoZVtzdHJpbmddID0gZW1vdGlvbkhhc2goc3RyaW5nKVxuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3N0cmluZ11cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoXG4iLCJjb25zdCBEQVlfTVMgPSAyNCAqIDYwICogNjAgKiAxMDAwXG5cbmZ1bmN0aW9uIGdldERhdGVBdFRpbWUgKGRhdGUsIHRpbWUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGRhdGUudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9ULipaLywgYFQke3RpbWV9LjAwMFpgKSlcbn1cblxuZnVuY3Rpb24gZ2V0RGFpbHlSZXNldCAoZGF0ZSkge1xuICBkYXRlID0gZGF0ZSA/IG5ldyBEYXRlKGRhdGUpIDogbmV3IERhdGUoKVxuXG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSArIERBWV9NUylcbiAgcmV0dXJuIGdldERhdGVBdFRpbWUoZGF0ZSwgJzAwOjAwOjAwJylcbn1cblxuZnVuY3Rpb24gZ2V0TGFzdERhaWx5UmVzZXQgKGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGdldERhaWx5UmVzZXQoZGF0ZSkuZ2V0VGltZSgpIC0gREFZX01TKVxufVxuXG5mdW5jdGlvbiBnZXRXZWVrbHlSZXNldCAoZGF0ZSkge1xuICBkYXRlID0gZGF0ZSA/IG5ldyBEYXRlKGRhdGUpIDogbmV3IERhdGUoKVxuXG4gIGNvbnN0IHdlZWtkYXkgPSBkYXRlLmdldFVUQ0RheSgpXG4gIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpXG4gIGNvbnN0IG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKVxuICBsZXQgZGF5RGlmZiA9IDBcblxuICBzd2l0Y2ggKHdlZWtkYXkpIHtcbiAgICBjYXNlIDA6XG4gICAgICAvLyAwIC0+IDEgc3VuZGF5XG4gICAgICBkYXlEaWZmID0gMVxuICAgICAgYnJlYWtcbiAgICBjYXNlIDE6XG4gICAgICAvLyAxIC0+IDAgbW9uZGF5IChpZiBiZWZvcmUgcmVzZXQpXG4gICAgICAvLyAxIC0+IDcgbW9uZGF5IChpZiBhZnRlciByZXNldClcbiAgICAgIGNvbnN0IHBhc3RSZXNldCA9IGhvdXJzID4gNyB8fCAoaG91cnMgPT09IDcgJiYgbWludXRlcyA+PSAzMClcbiAgICAgIGRheURpZmYgPSBwYXN0UmVzZXQgPyA3IDogMFxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gMiAtPiA2IHR1ZXNkYXlcbiAgICAgIC8vIDMgLT4gNSB3ZWRuZXNkYXlcbiAgICAgIC8vIDQgLT4gNCB0aHVyc2RheVxuICAgICAgLy8gNSAtPiAzIGZyaWRheVxuICAgICAgLy8gNiAtPiAyIHNhdHVyZGF5XG4gICAgICBkYXlEaWZmID0gOCAtIHdlZWtkYXlcbiAgICAgIGJyZWFrXG4gIH1cblxuICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgKyBkYXlEaWZmICogREFZX01TKVxuICByZXR1cm4gZ2V0RGF0ZUF0VGltZShkYXRlLCAnMDc6MzA6MDAnKVxufVxuXG5mdW5jdGlvbiBnZXRMYXN0V2Vla2x5UmVzZXQgKGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGdldFdlZWtseVJlc2V0KGRhdGUpLmdldFRpbWUoKSAtIDcgKiBEQVlfTVMpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXREYXRlQXRUaW1lLFxuICBnZXREYWlseVJlc2V0LFxuICBnZXRMYXN0RGFpbHlSZXNldCxcbiAgZ2V0V2Vla2x5UmVzZXQsXG4gIGdldExhc3RXZWVrbHlSZXNldFxufVxuIiwiY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQnKVxuXG4vLyBFYWNoIHRpbWUgdGhlIGFwaSB3cmFwcGVyIGlzIGNhbGxlZCwgd2UgZ2l2ZSBiYWNrIGEgbmV3IGluc3RhbmNlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBDbGllbnQoKVxufVxuIiwiY2xhc3MgU3RvcmUge1xyXG4gICAgY29uc3RydWN0b3IoZGJOYW1lID0gJ2tleXZhbC1zdG9yZScsIHN0b3JlTmFtZSA9ICdrZXl2YWwnKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yZU5hbWUgPSBzdG9yZU5hbWU7XHJcbiAgICAgICAgdGhpcy5fZGJwID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvcGVucmVxID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCAxKTtcclxuICAgICAgICAgICAgb3BlbnJlcS5vbmVycm9yID0gKCkgPT4gcmVqZWN0KG9wZW5yZXEuZXJyb3IpO1xyXG4gICAgICAgICAgICBvcGVucmVxLm9uc3VjY2VzcyA9ICgpID0+IHJlc29sdmUob3BlbnJlcS5yZXN1bHQpO1xyXG4gICAgICAgICAgICAvLyBGaXJzdCB0aW1lIHNldHVwOiBjcmVhdGUgYW4gZW1wdHkgb2JqZWN0IHN0b3JlXHJcbiAgICAgICAgICAgIG9wZW5yZXEub251cGdyYWRlbmVlZGVkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb3BlbnJlcS5yZXN1bHQuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF93aXRoSURCU3RvcmUodHlwZSwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGJwLnRoZW4oZGIgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKHRoaXMuc3RvcmVOYW1lLCB0eXBlKTtcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9ICgpID0+IHJlc29sdmUoKTtcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25hYm9ydCA9IHRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoKSA9PiByZWplY3QodHJhbnNhY3Rpb24uZXJyb3IpO1xyXG4gICAgICAgICAgICBjYWxsYmFjayh0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSh0aGlzLnN0b3JlTmFtZSkpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5sZXQgc3RvcmU7XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRTdG9yZSgpIHtcclxuICAgIGlmICghc3RvcmUpXHJcbiAgICAgICAgc3RvcmUgPSBuZXcgU3RvcmUoKTtcclxuICAgIHJldHVybiBzdG9yZTtcclxufVxyXG5mdW5jdGlvbiBnZXQoa2V5LCBzdG9yZSA9IGdldERlZmF1bHRTdG9yZSgpKSB7XHJcbiAgICBsZXQgcmVxO1xyXG4gICAgcmV0dXJuIHN0b3JlLl93aXRoSURCU3RvcmUoJ3JlYWRvbmx5Jywgc3RvcmUgPT4ge1xyXG4gICAgICAgIHJlcSA9IHN0b3JlLmdldChrZXkpO1xyXG4gICAgfSkudGhlbigoKSA9PiByZXEucmVzdWx0KTtcclxufVxyXG5mdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSwgc3RvcmUgPSBnZXREZWZhdWx0U3RvcmUoKSkge1xyXG4gICAgcmV0dXJuIHN0b3JlLl93aXRoSURCU3RvcmUoJ3JlYWR3cml0ZScsIHN0b3JlID0+IHtcclxuICAgICAgICBzdG9yZS5wdXQodmFsdWUsIGtleSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBkZWwoa2V5LCBzdG9yZSA9IGdldERlZmF1bHRTdG9yZSgpKSB7XHJcbiAgICByZXR1cm4gc3RvcmUuX3dpdGhJREJTdG9yZSgncmVhZHdyaXRlJywgc3RvcmUgPT4ge1xyXG4gICAgICAgIHN0b3JlLmRlbGV0ZShrZXkpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXIoc3RvcmUgPSBnZXREZWZhdWx0U3RvcmUoKSkge1xyXG4gICAgcmV0dXJuIHN0b3JlLl93aXRoSURCU3RvcmUoJ3JlYWR3cml0ZScsIHN0b3JlID0+IHtcclxuICAgICAgICBzdG9yZS5jbGVhcigpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24ga2V5cyhzdG9yZSA9IGdldERlZmF1bHRTdG9yZSgpKSB7XHJcbiAgICBjb25zdCBrZXlzID0gW107XHJcbiAgICByZXR1cm4gc3RvcmUuX3dpdGhJREJTdG9yZSgncmVhZG9ubHknLCBzdG9yZSA9PiB7XHJcbiAgICAgICAgLy8gVGhpcyB3b3VsZCBiZSBzdG9yZS5nZXRBbGxLZXlzKCksIGJ1dCBpdCBpc24ndCBzdXBwb3J0ZWQgYnkgRWRnZSBvciBTYWZhcmkuXHJcbiAgICAgICAgLy8gQW5kIG9wZW5LZXlDdXJzb3IgaXNuJ3Qgc3VwcG9ydGVkIGJ5IFNhZmFyaS5cclxuICAgICAgICAoc3RvcmUub3BlbktleUN1cnNvciB8fCBzdG9yZS5vcGVuQ3Vyc29yKS5jYWxsKHN0b3JlKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5yZXN1bHQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGtleXMucHVzaCh0aGlzLnJlc3VsdC5rZXkpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5jb250aW51ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KS50aGVuKCgpID0+IGtleXMpO1xyXG59XG5cbmV4cG9ydCB7IFN0b3JlLCBnZXQsIHNldCwgZGVsLCBjbGVhciwga2V5cyB9O1xuIiwiYXN5bmMgZnVuY3Rpb24gc2VyaWVzIChhcnJheSkge1xuICBsZXQgcmVzdWx0cyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgIT09IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0cy5wdXNoKGF3YWl0IGFycmF5W2ldKCkpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0c1xufVxuXG5mdW5jdGlvbiBwYXJhbGxlbCAoYXJyYXkpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKGFycmF5Lm1hcChmdW5jID0+IGZ1bmMoKSkpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXJpZXMsXG4gIHBhcmFsbGVsXG59XG4iLCJjb25zdCBmZXRjaCA9IHJlcXVpcmUoJ2Nyb3NzLWZldGNoJylcbmNvbnN0IGZsb3cgPSByZXF1aXJlKCcuL2Zsb3cuanMnKVxuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgdHlwZTogJ2pzb24nLFxuICBtZXRob2Q6ICdHRVQnLFxuICBoZWFkZXJzOiB7fSxcbiAgYm9keTogdW5kZWZpbmVkXG59XG5cbmxldCBpbnRlcm5hbFJldHJ5ID0gKCkgPT4gZmFsc2VcbmxldCBpbnRlcm5hbFJldHJ5V2FpdCA9ICgpID0+IGZhbHNlXG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5sZXQgaW50ZXJuYWxMb2dnZXIgPSAoKSA9PiBmYWxzZVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmV0cnksIHJldHJ5V2FpdCwgbG9nZ2VyLCBzaW5nbGUsIG1hbnkgfVxuXG4vLyBTZXQgYSBjdXN0b20gZGVjaWRlciBmdW5jdGlvbiB0aGF0IGRlY2lkZXMgdG8gcmV0cnlcbi8vIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgdHJpZXMgYW5kIHRoZSBwcmV2aW91cyBlcnJvclxuZnVuY3Rpb24gcmV0cnkgKGRlY2lkZXIpIHtcbiAgaW50ZXJuYWxSZXRyeSA9IGRlY2lkZXJcbn1cblxuLy8gU2V0IGEgY3VzdG9tIGZ1bmN0aW9uIHRoYXQgc2V0cyBob3cgbG9uZyB3ZSBzaG91bGRcbi8vIHNsZWVwIGJldHdlZW4gZWFjaCBmYWlsZWQgcmVxdWVzdFxuZnVuY3Rpb24gcmV0cnlXYWl0IChjYWxsYmFjaykge1xuICBpbnRlcm5hbFJldHJ5V2FpdCA9IGNhbGxiYWNrXG59XG5cbi8vIFNldCBhIGN1c3RvbSBmdW5jdGlvbiB0aGF0IGxvZ3Mgb3V0IGluZm9ybWF0aW9uIGFib3V0IGVhY2ggcmVxdWVzdFxuZnVuY3Rpb24gbG9nZ2VyIChjYWxsYmFjaykge1xuICBpbnRlcm5hbExvZ2dlciA9IGNhbGxiYWNrXG59XG5cbi8vIFJlcXVlc3QgYSBzaW5nbGUgdXJsXG5mdW5jdGlvbiBzaW5nbGUgKHVybCwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB0cmllcyA9IDFcblxuICAvLyBFeGVjdXRlIHRoZSByZXF1ZXN0IGFuZCByZXRyeSBpZiB0aGVyZSBhcmUgZXJyb3JzIChhbmQgdGhlXG4gIC8vIHJldHJ5IGRlY2lkZXIgZGVjaWRlZCB0aGF0IHdlIHNob3VsZCB0cnkgb3VyIGx1Y2sgYWdhaW4pXG4gIGNvbnN0IGNhbGxSZXF1ZXN0ID0gKCkgPT4ge1xuICAgIGxldCBzdGFydCA9IG5ldyBEYXRlKClcblxuICAgIHJldHVybiByZXF1ZXN0KHVybCwgb3B0aW9ucylcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGludGVybmFsTG9nZ2VyKHsgdXJsLCBkdXJhdGlvbjogbmV3IERhdGUoKSAtIHN0YXJ0LCBzdGF0dXM6IDIwMCwgcmV0cmllczogdHJpZXMgLSAxIH0pXG5cbiAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgaW50ZXJuYWxMb2dnZXIoeyB1cmwsIGR1cmF0aW9uOiBuZXcgRGF0ZSgpIC0gc3RhcnQsIHN0YXR1czogZXJyICYmIGVyci5yZXNwb25zZSAmJiBlcnIucmVzcG9uc2Uuc3RhdHVzLCByZXRyaWVzOiB0cmllcyAtIDEgfSlcblxuICAgICAgICBpZiAoaW50ZXJuYWxSZXRyeSgrK3RyaWVzLCBlcnIpKSB7XG4gICAgICAgICAgcmV0dXJuIHdhaXQoY2FsbFJlcXVlc3QsIGludGVybmFsUmV0cnlXYWl0KHRyaWVzKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSlcbiAgfVxuXG4gIHJldHVybiBjYWxsUmVxdWVzdCgpXG59XG5cbi8vIFNlbmQgYSByZXF1ZXN0IHVzaW5nIHRoZSB1bmRlcmx5aW5nIGZldGNoIEFQSVxuZnVuY3Rpb24gcmVxdWVzdCAodXJsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucylcbiAgbGV0IHNhdmVkQ29udGVudFxuICBsZXQgc2F2ZWRSZXNwb25zZVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZmV0Y2godXJsLCBvcHRpb25zKVxuICAgICAgLnRoZW4oaGFuZGxlUmVzcG9uc2UpXG4gICAgICAudGhlbihoYW5kbGVCb2R5KVxuICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UgKHJlc3BvbnNlKSB7XG4gICAgICAvLyBTYXZlIHRoZSByZXNwb25zZSBmb3IgY2hlY2tpbmcgdGhlIHN0YXR1cyBsYXRlclxuICAgICAgc2F2ZWRSZXNwb25zZSA9IHJlc3BvbnNlXG5cbiAgICAgIC8vIERlY29kZSB0aGUgcmVzcG9uc2UgYm9keVxuICAgICAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVzcG9uc2UnOlxuICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUJvZHkgKGNvbnRlbnQpIHtcbiAgICAgIC8vIEJ1YmJsZSBhbiBlcnJvciBpZiB0aGUgcmVzcG9uc2Ugc3RhdHVzIGlzIG5vdCBva2F5XG4gICAgICBpZiAoc2F2ZWRSZXNwb25zZSAmJiBzYXZlZFJlc3BvbnNlLnN0YXR1cyA+PSA0MDApIHtcbiAgICAgICAgc2F2ZWRDb250ZW50ID0gY29udGVudFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlc3BvbnNlIHN0YXR1cyBpbmRpY2F0ZXMgZXJyb3JgKVxuICAgICAgfVxuXG4gICAgICAvLyBBbGwgaXMgd2VsbCFcbiAgICAgIHJlc29sdmUoY29udGVudClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyKSB7XG4gICAgICAvLyBPdmVyd3JpdGUgcG90ZW50aWFsIGRlY29kaW5nIGVycm9ycyB3aGVuIHRoZSBhY3R1YWwgcHJvYmxlbSB3YXMgdGhlIHJlc3BvbnNlXG4gICAgICBpZiAoc2F2ZWRSZXNwb25zZSAmJiBzYXZlZFJlc3BvbnNlLnN0YXR1cyA+PSA0MDApIHtcbiAgICAgICAgZXJyID0gbmV3IEVycm9yKGBTdGF0dXMgJHtzYXZlZFJlc3BvbnNlLnN0YXR1c31gKVxuICAgICAgfVxuXG4gICAgICAvLyBFbnJpY2ggdGhlIGVycm9yIG1lc3NhZ2Ugd2l0aCB0aGUgcmVzcG9uc2UgYW5kIHRoZSBjb250ZW50XG4gICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoZXJyLm1lc3NhZ2UpXG4gICAgICBlcnJvci5yZXNwb25zZSA9IHNhdmVkUmVzcG9uc2VcbiAgICAgIGVycm9yLmNvbnRlbnQgPSBzYXZlZENvbnRlbnRcbiAgICAgIHJlamVjdChlcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbi8vIFJlcXVlc3QgbXVsdGlwbGUgcGFnZXNcbmZ1bmN0aW9uIG1hbnkgKHVybHMsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgZmxvd01ldGhvZCA9IChvcHRpb25zLndhaXRUaW1lKSA/IGZsb3cuc2VyaWVzIDogZmxvdy5wYXJhbGxlbFxuXG4gIC8vIENhbGwgdGhlIHNpbmdsZSBtZXRob2Qgd2hpbGUgcmVzcGVjdGluZyB0aGUgd2FpdCB0aW1lIGluIGJldHdlZW4gdGFza3NcbiAgY29uc3QgY2FsbFNpbmdsZSA9ICh1cmwpID0+IHNpbmdsZSh1cmwsIG9wdGlvbnMpXG4gICAgLnRoZW4oY29udGVudCA9PiB3YWl0KCgpID0+IGNvbnRlbnQsIG9wdGlvbnMud2FpdFRpbWUpKVxuXG4gIC8vIE1hcCBvdmVyIHRoZSB1cmxzIGFuZCBjYWxsIHRoZW0gdXNpbmcgdGhlIG1ldGhvZCB0aGUgdXNlciBjaG9zZVxuICBsZXQgcHJvbWlzZXMgPSB1cmxzLm1hcCh1cmwgPT4gKCkgPT4gY2FsbFNpbmdsZSh1cmwpKVxuICByZXR1cm4gZmxvd01ldGhvZChwcm9taXNlcylcbn1cblxuLy8gV2FpdCBhIHNwZWNpZmljIHRpbWUgYmVmb3JlIGV4ZWN1dGluZyBhIGNhbGxiYWNrXG5mdW5jdGlvbiB3YWl0IChjYWxsYmFjaywgbXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZShjYWxsYmFjaygpKSwgbXMgfHwgMClcbiAgfSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCB1bmRlZjtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBlbmNvZGVkLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8jJl0rKT0/KFteJl0qKS9nXG4gICAgLCByZXN1bHQgPSB7fVxuICAgICwgcGFydDtcblxuICB3aGlsZSAocGFydCA9IHBhcnNlci5leGVjKHF1ZXJ5KSkge1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydFsxXSlcbiAgICAgICwgdmFsdWUgPSBkZWNvZGUocGFydFsyXSk7XG5cbiAgICAvL1xuICAgIC8vIFByZXZlbnQgb3ZlcnJpZGluZyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzLiBUaGlzIGVuc3VyZXMgdGhhdCBidWlsZC1pblxuICAgIC8vIG1ldGhvZHMgbGlrZSBgdG9TdHJpbmdgIG9yIF9fcHJvdG9fXyBhcmUgbm90IG92ZXJyaWRlbiBieSBtYWxpY2lvdXNcbiAgICAvLyBxdWVyeXN0cmluZ3MuXG4gICAgLy9cbiAgICAvLyBJbiB0aGUgY2FzZSBpZiBmYWlsZWQgZGVjb2RpbmcsIHdlIHdhbnQgdG8gb21pdCB0aGUga2V5L3ZhbHVlIHBhaXJzXG4gICAgLy8gZnJvbSB0aGUgcmVzdWx0LlxuICAgIC8vXG4gICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBrZXkgaW4gcmVzdWx0KSBjb250aW51ZTtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkLlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBPcHRpb25hbCBwcmVmaXguXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmdpZnkob2JqLCBwcmVmaXgpIHtcbiAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuXG4gIHZhciBwYWlycyA9IFtdXG4gICAgLCB2YWx1ZVxuICAgICwga2V5O1xuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nO1xuXG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgIC8vXG4gICAgICAvLyBFZGdlIGNhc2VzIHdoZXJlIHdlIGFjdHVhbGx5IHdhbnQgdG8gZW5jb2RlIHRoZSB2YWx1ZSB0byBhbiBlbXB0eVxuICAgICAgLy8gc3RyaW5nIGluc3RlYWQgb2YgdGhlIHN0cmluZ2lmaWVkIHZhbHVlLlxuICAgICAgLy9cbiAgICAgIGlmICghdmFsdWUgJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZiB8fCBpc05hTih2YWx1ZSkpKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGtleSA9IGVuY29kZShrZXkpO1xuICAgICAgdmFsdWUgPSBlbmNvZGUodmFsdWUpO1xuXG4gICAgICAvL1xuICAgICAgLy8gSWYgd2UgZmFpbGVkIHRvIGVuY29kZSB0aGUgc3RyaW5ncywgd2Ugc2hvdWxkIGJhaWwgb3V0IGFzIHdlIGRvbid0XG4gICAgICAvLyB3YW50IHRvIGFkZCBpbnZhbGlkIHN0cmluZ3MgdG8gdGhlIHF1ZXJ5LlxuICAgICAgLy9cbiAgICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcGFpcnMucHVzaChrZXkgKyc9JysgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJztcbn1cblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmV4cG9ydHMuc3RyaW5naWZ5ID0gcXVlcnlzdHJpbmdpZnk7XG5leHBvcnRzLnBhcnNlID0gcXVlcnlzdHJpbmc7XG4iLCIvKiBUYWJ1bGF0b3IgdjYuMy4xIChjKSBPbGl2ZXIgRm9sa2VyZCAyMDI1ICovXG5jbGFzcyBDb3JlRmVhdHVyZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0dGhpcy50YWJsZSA9IHRhYmxlO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLyBEYXRhTG9hZCAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRyZWxvYWREYXRhKGRhdGEsIHNpbGVudCwgY29sdW1uc0NoYW5nZWQpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmRhdGFMb2FkZXIubG9hZChkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzaWxlbnQsIGNvbHVtbnNDaGFuZ2VkKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vIExvY2FsaXphdGlvbiAvLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0bGFuZ1RleHQoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmdldFRleHQoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGxhbmdCaW5kKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5iaW5kKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRsYW5nTG9jYWxlKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5nZXRMb2NhbGUoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8gSW50ZXIgVGFibGUgQ29tbXMgLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRjb21tc0Nvbm5lY3Rpb25zKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5jb21tcy5nZXRDb25uZWN0aW9ucyguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Y29tbXNTZW5kKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5jb21tcy5zZW5kKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLyBMYXlvdXQgIC8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGxheW91dE1vZGUoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGVzLmxheW91dC5nZXRNb2RlKCk7XG5cdH1cblxuXHRsYXlvdXRSZWZyZXNoKGZvcmNlKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGVzLmxheW91dC5sYXlvdXQoZm9yY2UpO1xuXHR9XG5cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vIEV2ZW50IEJ1cyAvLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHN1YnNjcmliZSgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLnN1YnNjcmliZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0dW5zdWJzY3JpYmUoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy51bnN1YnNjcmliZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0c3Vic2NyaWJlZChrZXkpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLnN1YnNjcmliZWQoa2V5KTtcblx0fVxuXG5cdHN1YnNjcmlwdGlvbkNoYW5nZSgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLnN1YnNjcmlwdGlvbkNoYW5nZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0ZGlzcGF0Y2goKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5kaXNwYXRjaCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Y2hhaW4oKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5jaGFpbiguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Y29uZmlybSgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLmNvbmZpcm0oLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGRpc3BhdGNoRXh0ZXJuYWwoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0c3Vic2NyaWJlZEV4dGVybmFsKGtleSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZXh0ZXJuYWxFdmVudHMuc3Vic2NyaWJlZChrZXkpO1xuXHR9XG5cblx0c3Vic2NyaXB0aW9uQ2hhbmdlRXh0ZXJuYWwoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5leHRlcm5hbEV2ZW50cy5zdWJzY3JpcHRpb25DaGFuZ2UoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vIE9wdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0b3B0aW9ucyhrZXkpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm9wdGlvbnNba2V5XTtcblx0fVxuXG5cdHNldE9wdGlvbihrZXksIHZhbHVlKXtcblx0XHRpZih0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy50YWJsZS5vcHRpb25zW2tleV0gPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zW2tleV07XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8gRGVwcmVjYXRpb24gQ2hlY2tzIC8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGRlcHJlY2F0aW9uQ2hlY2sob2xkT3B0aW9uLCBuZXdPcHRpb24sICBjb252ZXJ0KXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5kZXByZWNhdGlvbkFkdmlzb3IuY2hlY2sob2xkT3B0aW9uLCBuZXdPcHRpb24sICBjb252ZXJ0KTtcblx0fVxuXG5cdGRlcHJlY2F0aW9uQ2hlY2tNc2cob2xkT3B0aW9uLCBtc2cpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmRlcHJlY2F0aW9uQWR2aXNvci5jaGVja01zZyhvbGRPcHRpb24sIG1zZyk7XG5cdH1cblxuXHRkZXByZWNhdGlvbk1zZyhtc2cpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmRlcHJlY2F0aW9uQWR2aXNvci5tc2cobXNnKTtcblx0fVxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLyBNb2R1bGVzIC8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdG1vZHVsZShrZXkpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm1vZHVsZShrZXkpO1xuXHR9XG59XG5cbmNsYXNzIEhlbHBlcnN7XG5cblx0c3RhdGljIGVsVmlzaWJsZShlbCl7XG5cdFx0cmV0dXJuICEoZWwub2Zmc2V0V2lkdGggPD0gMCAmJiBlbC5vZmZzZXRIZWlnaHQgPD0gMCk7XG5cdH1cblxuXHRzdGF0aWMgZWxPZmZzZXQoZWwpe1xuXHRcdHZhciBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IGJveC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50TGVmdFxuXHRcdH07XG5cdH1cblxuXHRzdGF0aWMgcmV0cmlldmVOZXN0ZWREYXRhKHNlcGFyYXRvciwgZmllbGQsIGRhdGEpe1xuXHRcdHZhciBzdHJ1Y3R1cmUgPSBzZXBhcmF0b3IgPyBmaWVsZC5zcGxpdChzZXBhcmF0b3IpIDogW2ZpZWxkXSxcblx0XHRsZW5ndGggPSBzdHJ1Y3R1cmUubGVuZ3RoLFxuXHRcdG91dHB1dDtcblxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7XG5cblx0XHRcdGRhdGEgPSBkYXRhW3N0cnVjdHVyZVtpXV07XG5cblx0XHRcdG91dHB1dCA9IGRhdGE7XG5cblx0XHRcdGlmKCFkYXRhKXtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdHN0YXRpYyBkZWVwQ2xvbmUob2JqLCBjbG9uZSwgbGlzdCA9IFtdKXtcblx0XHR2YXIgb2JqZWN0UHJvdG8gPSB7fS5fX3Byb3RvX18sXG5cdFx0YXJyYXlQcm90byA9IFtdLl9fcHJvdG9fXztcblxuXHRcdGlmICghY2xvbmUpe1xuXHRcdFx0Y2xvbmUgPSBPYmplY3QuYXNzaWduKEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge30sIG9iaik7XG5cdFx0fVxuXG5cdFx0Zm9yKHZhciBpIGluIG9iaikge1xuXHRcdFx0bGV0IHN1YmplY3QgPSBvYmpbaV0sXG5cdFx0XHRtYXRjaCwgY29weTtcblxuXHRcdFx0aWYoc3ViamVjdCAhPSBudWxsICYmIHR5cGVvZiBzdWJqZWN0ID09PSBcIm9iamVjdFwiICYmIChzdWJqZWN0Ll9fcHJvdG9fXyA9PT0gb2JqZWN0UHJvdG8gfHwgc3ViamVjdC5fX3Byb3RvX18gPT09IGFycmF5UHJvdG8pKXtcblx0XHRcdFx0bWF0Y2ggPSBsaXN0LmZpbmRJbmRleCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtLnN1YmplY3QgPT09IHN1YmplY3Q7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKG1hdGNoID4gLTEpe1xuXHRcdFx0XHRcdGNsb25lW2ldID0gbGlzdFttYXRjaF0uY29weTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvcHkgPSBPYmplY3QuYXNzaWduKEFycmF5LmlzQXJyYXkoc3ViamVjdCkgPyBbXSA6IHt9LCBzdWJqZWN0KTtcblxuXHRcdFx0XHRcdGxpc3QudW5zaGlmdCh7c3ViamVjdCwgY29weX0pO1xuXG5cdFx0XHRcdFx0Y2xvbmVbaV0gPSB0aGlzLmRlZXBDbG9uZShzdWJqZWN0LCBjb3B5LCBsaXN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbG9uZTtcblx0fVxufVxuXG5sZXQgUG9wdXAkMSA9IGNsYXNzIFBvcHVwIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdGNvbnN0cnVjdG9yKHRhYmxlLCBlbGVtZW50LCBwYXJlbnQpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXHRcdHRoaXMuY29udGFpbmVyID0gdGhpcy5fbG9va3VwQ29udGFpbmVyKCk7XG5cdFx0XG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0XG5cdFx0dGhpcy5yZXZlcnNlZFggPSBmYWxzZTtcblx0XHR0aGlzLmNoaWxkUG9wdXAgPSBudWxsO1xuXHRcdHRoaXMuYmx1cmFibGUgPSBmYWxzZTtcblx0XHR0aGlzLmJsdXJDYWxsYmFjayA9IG51bGw7XG5cdFx0dGhpcy5ibHVyRXZlbnRzQm91bmQgPSBmYWxzZTtcblx0XHR0aGlzLnJlbmRlcmVkQ2FsbGJhY2sgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXHRcdHRoaXMuaGlkZWFibGUgPSB0cnVlO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBvcHVwLWNvbnRhaW5lclwiKTtcblx0XHRcblx0XHR0aGlzLmJsdXJFdmVudCA9IHRoaXMuaGlkZS5iaW5kKHRoaXMsIGZhbHNlKTtcblx0XHR0aGlzLmVzY0V2ZW50ID0gdGhpcy5fZXNjYXBlQ2hlY2suYmluZCh0aGlzKTtcblx0XHRcblx0XHR0aGlzLmRlc3Ryb3lCaW5kaW5nID0gdGhpcy50YWJsZURlc3Ryb3llZC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cdH1cblx0XG5cdHRhYmxlRGVzdHJveWVkKCl7XG5cdFx0dGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuXHRcdHRoaXMuaGlkZSh0cnVlKTtcblx0fVxuXHRcblx0X2xvb2t1cENvbnRhaW5lcigpe1xuXHRcdHZhciBjb250YWluZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMucG9wdXBDb250YWluZXI7XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbnRhaW5lciA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG5cdFx0XHRcblx0XHRcdGlmKCFjb250YWluZXIpe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJNZW51IEVycm9yIC0gbm8gY29udGFpbmVyIGVsZW1lbnQgZm91bmQgbWF0Y2hpbmcgc2VsZWN0b3I6XCIsICB0aGlzLnRhYmxlLm9wdGlvbnMucG9wdXBDb250YWluZXIgLCBcIihkZWZhdWx0aW5nIHRvIGRvY3VtZW50IGJvZHkpXCIpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIGlmIChjb250YWluZXIgPT09IHRydWUpe1xuXHRcdFx0Y29udGFpbmVyID0gdGhpcy50YWJsZS5lbGVtZW50O1xuXHRcdH1cblx0XHRcblx0XHRpZihjb250YWluZXIgJiYgIXRoaXMuX2NoZWNrQ29udGFpbmVySXNQYXJlbnQoY29udGFpbmVyKSl7XG5cdFx0XHRjb250YWluZXIgPSBmYWxzZTtcblx0XHRcdGNvbnNvbGUud2FybihcIk1lbnUgRXJyb3IgLSBjb250YWluZXIgZWxlbWVudCBkb2VzIG5vdCBjb250YWluIHRoaXMgdGFibGU6XCIsICB0aGlzLnRhYmxlLm9wdGlvbnMucG9wdXBDb250YWluZXIgLCBcIihkZWZhdWx0aW5nIHRvIGRvY3VtZW50IGJvZHkpXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZighY29udGFpbmVyKXtcblx0XHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBjb250YWluZXI7XG5cdH1cblx0XG5cdF9jaGVja0NvbnRhaW5lcklzUGFyZW50KGNvbnRhaW5lciwgZWxlbWVudCA9IHRoaXMudGFibGUuZWxlbWVudCl7XG5cdFx0aWYoY29udGFpbmVyID09PSBlbGVtZW50KXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgPyB0aGlzLl9jaGVja0NvbnRhaW5lcklzUGFyZW50KGNvbnRhaW5lciwgZWxlbWVudC5wYXJlbnROb2RlKSA6IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0cmVuZGVyQ2FsbGJhY2soY2FsbGJhY2spe1xuXHRcdHRoaXMucmVuZGVyZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHR9XG5cdFxuXHRjb250YWluZXJFdmVudENvb3JkcyhlKXtcblx0XHR2YXIgdG91Y2ggPSAhKGUgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KTtcblx0XHRcblx0XHR2YXIgeCA9IHRvdWNoID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcblx0XHR2YXIgeSA9IHRvdWNoID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblx0XHRcblx0XHRpZih0aGlzLmNvbnRhaW5lciAhPT0gZG9jdW1lbnQuYm9keSl7XG5cdFx0XHRsZXQgcGFyZW50T2Zmc2V0ID0gSGVscGVycy5lbE9mZnNldCh0aGlzLmNvbnRhaW5lcik7XG5cdFx0XHRcblx0XHRcdHggLT0gcGFyZW50T2Zmc2V0LmxlZnQ7XG5cdFx0XHR5IC09IHBhcmVudE9mZnNldC50b3A7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB7eCwgeX07XG5cdH1cblx0XG5cdGVsZW1lbnRQb3NpdGlvbkNvb3JkcyhlbGVtZW50LCBwb3NpdGlvbiA9IFwicmlnaHRcIil7XG5cdFx0dmFyIG9mZnNldCA9IEhlbHBlcnMuZWxPZmZzZXQoZWxlbWVudCksXG5cdFx0Y29udGFpbmVyT2Zmc2V0LCB4LCB5O1xuXHRcdFxuXHRcdGlmKHRoaXMuY29udGFpbmVyICE9PSBkb2N1bWVudC5ib2R5KXtcblx0XHRcdGNvbnRhaW5lck9mZnNldCA9IEhlbHBlcnMuZWxPZmZzZXQodGhpcy5jb250YWluZXIpO1xuXHRcdFx0XG5cdFx0XHRvZmZzZXQubGVmdCAtPSBjb250YWluZXJPZmZzZXQubGVmdDtcblx0XHRcdG9mZnNldC50b3AgLT0gY29udGFpbmVyT2Zmc2V0LnRvcDtcblx0XHR9XG5cdFx0XG5cdFx0c3dpdGNoKHBvc2l0aW9uKXtcblx0XHRcdGNhc2UgXCJyaWdodFwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQgKyBlbGVtZW50Lm9mZnNldFdpZHRoO1xuXHRcdFx0XHR5ID0gb2Zmc2V0LnRvcCAtIDE7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiYm90dG9tXCI6XG5cdFx0XHRcdHggPSBvZmZzZXQubGVmdDtcblx0XHRcdFx0eSA9IG9mZnNldC50b3AgKyBlbGVtZW50Lm9mZnNldEhlaWdodDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJsZWZ0XCI6XG5cdFx0XHRcdHggPSBvZmZzZXQubGVmdDtcblx0XHRcdFx0eSA9IG9mZnNldC50b3AgLSAxO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcInRvcFwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQ7XG5cdFx0XHRcdHkgPSBvZmZzZXQudG9wO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImNlbnRlclwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQgKyAoZWxlbWVudC5vZmZzZXRXaWR0aCAvIDIpO1xuXHRcdFx0XHR5ID0gb2Zmc2V0LnRvcCArIChlbGVtZW50Lm9mZnNldEhlaWdodCAvIDIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4ge3gsIHksIG9mZnNldH07XG5cdH1cblx0XG5cdHNob3cob3JpZ2luLCBwb3NpdGlvbil7XG5cdFx0dmFyIHgsIHksIHBhcmVudEVsLCBwYXJlbnRPZmZzZXQsIGNvb3Jkcztcblx0XHRcblx0XHRpZih0aGlzLmRlc3Ryb3llZCB8fCB0aGlzLnRhYmxlLmRlc3Ryb3llZCl7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0XG5cdFx0aWYob3JpZ2luIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0cGFyZW50RWwgPSBvcmlnaW47XG5cdFx0XHRjb29yZHMgPSB0aGlzLmVsZW1lbnRQb3NpdGlvbkNvb3JkcyhvcmlnaW4sIHBvc2l0aW9uKTtcblx0XHRcdFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0gY29vcmRzLm9mZnNldDtcblx0XHRcdHggPSBjb29yZHMueDtcblx0XHRcdHkgPSBjb29yZHMueTtcblx0XHRcdFxuXHRcdH1lbHNlIGlmKHR5cGVvZiBvcmlnaW4gPT09IFwibnVtYmVyXCIpe1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OjB9O1xuXHRcdFx0eCA9IG9yaWdpbjtcblx0XHRcdHkgPSBwb3NpdGlvbjtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb29yZHMgPSB0aGlzLmNvbnRhaW5lckV2ZW50Q29vcmRzKG9yaWdpbik7XG5cdFx0XHRcblx0XHRcdHggPSBjb29yZHMueDtcblx0XHRcdHkgPSBjb29yZHMueTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZXZlcnNlZFggPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmxlZnQgPSB4ICsgXCJweFwiO1xuXHRcdFxuXHRcdHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0XG5cdFx0aWYodHlwZW9mIHRoaXMucmVuZGVyZWRDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHRoaXMucmVuZGVyZWRDYWxsYmFjaygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLl9maXRUb1NjcmVlbih4LCB5LCBwYXJlbnRFbCwgcGFyZW50T2Zmc2V0LCBwb3NpdGlvbik7XG5cdFx0XG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5kZXN0cm95QmluZGluZyk7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0XG5cdF9maXRUb1NjcmVlbih4LCB5LCBwYXJlbnRFbCwgcGFyZW50T2Zmc2V0LCBwb3NpdGlvbil7XG5cdFx0dmFyIHNjcm9sbFRvcCA9IHRoaXMuY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcDtcblx0XHRcblx0XHQvL21vdmUgbWVudSB0byBzdGFydCBvbiByaWdodCBlZGdlIGlmIGl0IGlzIHRvbyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgc2NyZWVuXG5cdFx0aWYoKHggKyB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGgpID49IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoIHx8IHRoaXMucmV2ZXJzZWRYKXtcblx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0ID0gXCJcIjtcblx0XHRcdFxuXHRcdFx0aWYocGFyZW50RWwpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUucmlnaHQgPSAodGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGggLSBwYXJlbnRPZmZzZXQubGVmdCkgKyBcInB4XCI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5yaWdodCA9ICh0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aCAtIHgpICsgXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJldmVyc2VkWCA9IHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdC8vbW92ZSBtZW51IHRvIHN0YXJ0IG9uIGJvdHRvbSBlZGdlIGlmIGl0IGlzIHRvbyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgc2NyZWVuXG5cdFx0bGV0IG9mZnNldEhlaWdodCA9IE1hdGgubWF4KHRoaXMuY29udGFpbmVyLm9mZnNldEhlaWdodCwgc2Nyb2xsVG9wID8gdGhpcy5jb250YWluZXIuc2Nyb2xsSGVpZ2h0IDogMCk7XG5cdFx0aWYoKHkgKyB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0KSA+IG9mZnNldEhlaWdodCkge1xuXHRcdFx0aWYocGFyZW50RWwpe1xuXHRcdFx0XHRzd2l0Y2gocG9zaXRpb24pe1xuXHRcdFx0XHRcdGNhc2UgXCJib3R0b21cIjpcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS50b3AgPSAocGFyc2VJbnQodGhpcy5lbGVtZW50LnN0eWxlLnRvcCkgLSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gcGFyZW50RWwub2Zmc2V0SGVpZ2h0IC0gMSkgKyBcInB4XCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IChwYXJzZUludCh0aGlzLmVsZW1lbnQuc3R5bGUudG9wKSAtIHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQgKyBwYXJlbnRFbC5vZmZzZXRIZWlnaHQgKyAxKSArIFwicHhcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IG9mZnNldEhlaWdodCArIFwicHhcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGlzVmlzaWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLnZpc2libGU7XG5cdH1cblx0XG5cdGhpZGVPbkJsdXIoY2FsbGJhY2spe1xuXHRcdHRoaXMuYmx1cmFibGUgPSB0cnVlO1xuXHRcdFxuXHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0aWYodGhpcy52aXNpYmxlKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZWRpdGluZ1wiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuZXNjRXZlbnQpO1xuXG5cdFx0XHRcdFx0dGhpcy5ibHVyRXZlbnRzQm91bmQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxMDApO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmJsdXJDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRcblx0X2VzY2FwZUNoZWNrKGUpe1xuXHRcdGlmKGUua2V5Q29kZSA9PSAyNyl7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHR9XG5cdH1cblx0XG5cdGJsb2NrSGlkZSgpe1xuXHRcdHRoaXMuaGlkZWFibGUgPSBmYWxzZTtcblx0fVxuXHRcblx0cmVzdG9yZUhpZGUoKXtcblx0XHR0aGlzLmhpZGVhYmxlID0gdHJ1ZTtcblx0fVxuXHRcblx0aGlkZShzaWxlbnQgPSBmYWxzZSl7XG5cdFx0aWYodGhpcy52aXNpYmxlICYmIHRoaXMuaGlkZWFibGUpe1xuXHRcdFx0aWYodGhpcy5ibHVyYWJsZSAmJiB0aGlzLmJsdXJFdmVudHNCb3VuZCl7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5lc2NFdmVudCk7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHR0aGlzLnVuc3Vic2NyaWJlKFwiY2VsbC1lZGl0aW5nXCIsIHRoaXMuYmx1ckV2ZW50KTtcblxuXHRcdFx0XHR0aGlzLmJsdXJFdmVudHNCb3VuZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmNoaWxkUG9wdXApe1xuXHRcdFx0XHR0aGlzLmNoaWxkUG9wdXAuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBhcmVudCl7XG5cdFx0XHRcdHRoaXMucGFyZW50LmNoaWxkUG9wdXAgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmJsdXJDYWxsYmFjayAmJiAhc2lsZW50KXtcblx0XHRcdFx0dGhpcy5ibHVyQ2FsbGJhY2soKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy51bnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5kZXN0cm95QmluZGluZyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdFxuXHRjaGlsZChlbGVtZW50KXtcblx0XHRpZih0aGlzLmNoaWxkUG9wdXApe1xuXHRcdFx0dGhpcy5jaGlsZFBvcHVwLmhpZGUoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jaGlsZFBvcHVwID0gbmV3IFBvcHVwKHRoaXMudGFibGUsIGVsZW1lbnQsIHRoaXMpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNoaWxkUG9wdXA7XG5cdH1cbn07XG5cbmNsYXNzIE1vZHVsZSBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUsIG5hbWUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLl9oYW5kbGVyID0gbnVsbDtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdC8vIHNldHVwIG1vZHVsZSB3aGVuIHRhYmxlIGlzIGluaXRpYWxpemVkLCB0byBiZSBvdmVycmlkZGVuIGluIG1vZHVsZVxuXHR9XG5cdFxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vIE9wdGlvbnMgUmVnaXN0cmF0aW9uIC8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHJlZ2lzdGVyVGFibGVPcHRpb24oa2V5LCB2YWx1ZSl7XG5cdFx0dGhpcy50YWJsZS5vcHRpb25zTGlzdC5yZWdpc3RlcihrZXksIHZhbHVlKTtcblx0fVxuXHRcblx0cmVnaXN0ZXJDb2x1bW5PcHRpb24oa2V5LCB2YWx1ZSl7XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLm9wdGlvbnNMaXN0LnJlZ2lzdGVyKGtleSwgdmFsdWUpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8gUHVibGljIEZ1bmN0aW9uIFJlZ2lzdHJhdGlvbiAvLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHJlZ2lzdGVyVGFibGVGdW5jdGlvbihuYW1lLCBmdW5jKXtcblx0XHRpZih0eXBlb2YgdGhpcy50YWJsZVtuYW1lXSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHR0aGlzLnRhYmxlW25hbWVdID0gKC4uLmFyZ3MpID0+IHtcblx0XHRcdFx0dGhpcy50YWJsZS5pbml0R3VhcmQobmFtZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gZnVuYyguLi5hcmdzKTtcblx0XHRcdH07XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGJpbmQgdGFibGUgZnVuY3Rpb24sIG5hbWUgYWxyZWFkeSBpbiB1c2VcIiwgbmFtZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKGNvbXBvbmVudCwgZnVuYywgaGFuZGxlcil7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIuYmluZChjb21wb25lbnQsIGZ1bmMsIGhhbmRsZXIpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vIERhdGEgUGlwZWxpbmUgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cmVnaXN0ZXJEYXRhSGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSl7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZ2lzdGVyRGF0YVBpcGVsaW5lSGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSk7XG5cdFx0dGhpcy5faGFuZGxlciA9IGhhbmRsZXI7XG5cdH1cblx0XG5cdHJlZ2lzdGVyRGlzcGxheUhhbmRsZXIoaGFuZGxlciwgcHJpb3JpdHkpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWdpc3RlckRpc3BsYXlQaXBlbGluZUhhbmRsZXIoaGFuZGxlciwgcHJpb3JpdHkpO1xuXHRcdHRoaXMuX2hhbmRsZXIgPSBoYW5kbGVyO1xuXHR9XG5cdFxuXHRkaXNwbGF5Um93cyhhZGp1c3Qpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMudGFibGUucm93TWFuYWdlci5kaXNwbGF5Um93cy5sZW5ndGggLSAxLCBcblx0XHRsb29rdXBJbmRleDtcblx0XHRcblx0XHRpZih0aGlzLl9oYW5kbGVyKXtcblx0XHRcdGxvb2t1cEluZGV4ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmRpc3BsYXlQaXBlbGluZS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uaGFuZGxlciA9PT0gdGhpcy5faGFuZGxlcjtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZihsb29rdXBJbmRleCA+IC0xKXtcblx0XHRcdFx0aW5kZXggPSBsb29rdXBJbmRleDtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoYWRqdXN0KXtcblx0XHRcdGluZGV4ID0gaW5kZXggKyBhZGp1c3Q7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5faGFuZGxlcil7XG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cyhpbmRleCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmFjdGl2ZVJvd3MoKTtcblx0XHRcdH1cblx0XHR9XHRcblx0fVxuXHRcblx0YWN0aXZlUm93cygpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWN0aXZlUm93cztcblx0fVxuXHRcblx0cmVmcmVzaERhdGEocmVuZGVySW5Qb3NpdGlvbiwgaGFuZGxlcil7XG5cdFx0aWYoIWhhbmRsZXIpe1xuXHRcdFx0aGFuZGxlciA9IHRoaXMuX2hhbmRsZXI7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGhhbmRsZXIpe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZnJlc2hBY3RpdmVEYXRhKGhhbmRsZXIsIGZhbHNlLCByZW5kZXJJblBvc2l0aW9uKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIEZvb3RlciBNYW5hZ2VtZW50IC8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRmb290ZXJBcHBlbmQoZWxlbWVudCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5hcHBlbmQoZWxlbWVudCk7XG5cdH1cblx0XG5cdGZvb3RlclByZXBlbmQoZWxlbWVudCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5wcmVwZW5kKGVsZW1lbnQpO1xuXHR9XG5cdFxuXHRmb290ZXJSZW1vdmUoZWxlbWVudCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5yZW1vdmUoZWxlbWVudCk7XG5cdH0gXG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLyBQb3B1cHMgTWFuYWdlbWVudCAvLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cG9wdXAobWVudUVsLCBtZW51Q29udGFpbmVyKXtcblx0XHRyZXR1cm4gbmV3IFBvcHVwJDEodGhpcy50YWJsZSwgbWVudUVsLCBtZW51Q29udGFpbmVyKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8gQWxlcnQgTWFuYWdlbWVudCAvLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0YWxlcnQoY29udGVudCwgdHlwZSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuYWxlcnRNYW5hZ2VyLmFsZXJ0KGNvbnRlbnQsIHR5cGUpO1xuXHR9XG5cdFxuXHRjbGVhckFsZXJ0KCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuYWxlcnRNYW5hZ2VyLmNsZWFyKCk7XG5cdH1cblx0XG59XG5cbnZhciBkZWZhdWx0QWNjZXNzb3JzID0ge1xyXG5cdHJvd251bTpmdW5jdGlvbih2YWx1ZSwgZGF0YSwgdHlwZSwgcGFyYW1zLCBjb2x1bW4sIHJvdyl7XHJcblx0XHRyZXR1cm4gcm93LmdldFBvc2l0aW9uKCk7XHJcblx0fVxyXG59O1xuXG5jbGFzcyBBY2Nlc3NvciBleHRlbmRzIE1vZHVsZXtcblx0XG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJhY2Nlc3NvclwiO1xuXG5cdC8vbG9hZCBkZWZhdWx0c1xuXHRzdGF0aWMgYWNjZXNzb3JzID0gZGVmYXVsdEFjY2Vzc29ycztcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5hbGxvd2VkVHlwZXMgPSBbXCJcIiwgXCJkYXRhXCIsIFwiZG93bmxvYWRcIiwgXCJjbGlwYm9hcmRcIiwgXCJwcmludFwiLCBcImh0bWxPdXRwdXRcIl07IC8vbGlzdCBvZiBhY2Nlc3NvciB0eXBlc1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvclBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JEYXRhXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvckRhdGFQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yRG93bmxvYWRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yRG93bmxvYWRQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yQ2xpcGJvYXJkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvckNsaXBib2FyZFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JQcmludFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JQcmludFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JIdG1sT3V0cHV0XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3Nvckh0bWxPdXRwdXRQYXJhbXNcIik7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbGF5b3V0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYXRhLXJldHJpZXZlXCIsIHRoaXMudHJhbnNmb3JtUm93LmJpbmQodGhpcykpO1xuXHR9XG5cblx0Ly9pbml0aWFsaXplIGNvbHVtbiBhY2Nlc3NvclxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2UsXG5cdFx0Y29uZmlnID0ge307XG5cblx0XHR0aGlzLmFsbG93ZWRUeXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG5cdFx0XHR2YXIga2V5ID0gXCJhY2Nlc3NvclwiICsgKHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpKSxcblx0XHRcdGFjY2Vzc29yO1xuXG5cdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbltrZXldKXtcblx0XHRcdFx0YWNjZXNzb3IgPSB0aGlzLmxvb2t1cEFjY2Vzc29yKGNvbHVtbi5kZWZpbml0aW9uW2tleV0pO1xuXG5cdFx0XHRcdGlmKGFjY2Vzc29yKXtcblx0XHRcdFx0XHRtYXRjaCA9IHRydWU7XG5cblx0XHRcdFx0XHRjb25maWdba2V5XSA9IHtcblx0XHRcdFx0XHRcdGFjY2Vzc29yOmFjY2Vzc29yLFxuXHRcdFx0XHRcdFx0cGFyYW1zOiBjb2x1bW4uZGVmaW5pdGlvbltrZXkgKyBcIlBhcmFtc1wiXSB8fCB7fSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZihtYXRjaCl7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5hY2Nlc3NvciA9IGNvbmZpZztcblx0XHR9XG5cdH1cblxuXHRsb29rdXBBY2Nlc3Nvcih2YWx1ZSl7XG5cdFx0dmFyIGFjY2Vzc29yID0gZmFsc2U7XG5cblx0XHQvL3NldCBjb2x1bW4gYWNjZXNzb3Jcblx0XHRzd2l0Y2godHlwZW9mIHZhbHVlKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0aWYoQWNjZXNzb3IuYWNjZXNzb3JzW3ZhbHVlXSl7XG5cdFx0XHRcdFx0YWNjZXNzb3IgPSBBY2Nlc3Nvci5hY2Nlc3NvcnNbdmFsdWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQWNjZXNzb3IgRXJyb3IgLSBObyBzdWNoIGFjY2Vzc29yIGZvdW5kLCBpZ25vcmluZzogXCIsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdGFjY2Vzc29yID0gdmFsdWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3Nvcjtcblx0fVxuXG5cdC8vYXBwbHkgYWNjZXNzb3IgdG8gcm93XG5cdHRyYW5zZm9ybVJvdyhyb3csIHR5cGUpe1xuXHRcdHZhciBrZXkgPSBcImFjY2Vzc29yXCIgKyAodHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSkpLFxuXHRcdHJvd0NvbXBvbmVudCA9IHJvdy5nZXRDb21wb25lbnQoKTtcblxuXHRcdC8vY2xvbmUgZGF0YSBvYmplY3Qgd2l0aCBkZWVwIGNvcHkgdG8gaXNvbGF0ZSBpbnRlcm5hbCBkYXRhIGZyb20gcmV0dXJuZWQgcmVzdWx0XG5cdFx0dmFyIGRhdGEgPSBIZWxwZXJzLmRlZXBDbG9uZShyb3cuZGF0YSB8fCB7fSk7XG5cblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIudHJhdmVyc2UoZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdHZhciB2YWx1ZSwgYWNjZXNzb3IsIHBhcmFtcywgY29sQ29tcG9uZW50O1xuXG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5hY2Nlc3Nvcil7XG5cblx0XHRcdFx0YWNjZXNzb3IgPSBjb2x1bW4ubW9kdWxlcy5hY2Nlc3NvcltrZXldIHx8IGNvbHVtbi5tb2R1bGVzLmFjY2Vzc29yLmFjY2Vzc29yIHx8IGZhbHNlO1xuXG5cdFx0XHRcdGlmKGFjY2Vzc29yKXtcblx0XHRcdFx0XHR2YWx1ZSA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXG5cdFx0XHRcdFx0aWYodmFsdWUgIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRjb2xDb21wb25lbnQgPSBjb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgYWNjZXNzb3IucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBhY2Nlc3Nvci5wYXJhbXModmFsdWUsIGRhdGEsIHR5cGUsIGNvbENvbXBvbmVudCwgcm93Q29tcG9uZW50KSA6IGFjY2Vzc29yLnBhcmFtcztcblx0XHRcdFx0XHRcdGNvbHVtbi5zZXRGaWVsZFZhbHVlKGRhdGEsIGFjY2Vzc29yLmFjY2Vzc29yKHZhbHVlLCBkYXRhLCB0eXBlLCBwYXJhbXMsIGNvbENvbXBvbmVudCwgcm93Q29tcG9uZW50KSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxufVxuXG52YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0bWV0aG9kOiBcIkdFVFwiLFxufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXJhbXNMaXN0JDEoZGF0YSwgcHJlZml4KXtcblx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdHByZWZpeCA9IHByZWZpeCB8fCBcIlwiO1xuXG5cdGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpe1xuXHRcdGRhdGEuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuXHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChnZW5lcmF0ZVBhcmFtc0xpc3QkMShpdGVtLCBwcmVmaXggPyBwcmVmaXggKyBcIltcIiArIGkgKyBcIl1cIiA6IGkpKTtcblx0XHR9KTtcblx0fWVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKHZhciBrZXkgaW4gZGF0YSl7XG5cdFx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KGdlbmVyYXRlUGFyYW1zTGlzdCQxKGRhdGFba2V5XSwgcHJlZml4ID8gcHJlZml4ICsgXCJbXCIgKyBrZXkgKyBcIl1cIiA6IGtleSkpO1xuXHRcdH1cblx0fWVsc2Uge1xuXHRcdG91dHB1dC5wdXNoKHtrZXk6cHJlZml4LCB2YWx1ZTpkYXRhfSk7XG5cdH1cblxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVQYXJhbXMocGFyYW1zKXtcblx0dmFyIG91dHB1dCA9IGdlbmVyYXRlUGFyYW1zTGlzdCQxKHBhcmFtcyksXG5cdGVuY29kZWQgPSBbXTtcblxuXHRvdXRwdXQuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRlbmNvZGVkLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0ua2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0udmFsdWUpKTtcblx0fSk7XG5cblx0cmV0dXJuIGVuY29kZWQuam9pbihcIiZcIik7XG59XG5cbmZ1bmN0aW9uIHVybEJ1aWxkZXIodXJsLCBjb25maWcsIHBhcmFtcyl7XG5cdGlmKHVybCl7XG5cdFx0aWYocGFyYW1zICYmIE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoKXtcblx0XHRcdGlmKCFjb25maWcubWV0aG9kIHx8IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKSA9PSBcImdldFwiKXtcblx0XHRcdFx0Y29uZmlnLm1ldGhvZCA9IFwiZ2V0XCI7XG5cblx0XHRcdFx0dXJsICs9ICh1cmwuaW5jbHVkZXMoXCI/XCIpID8gXCImXCIgOiBcIj9cIikgKyBzZXJpYWxpemVQYXJhbXMocGFyYW1zKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0TG9hZGVyUHJvbWlzZSh1cmwsIGNvbmZpZywgcGFyYW1zKXtcblx0dmFyIGNvbnRlbnRUeXBlO1xuXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0Ly9zZXQgdXJsXG5cdFx0dXJsID0gdGhpcy51cmxHZW5lcmF0b3IuY2FsbCh0aGlzLnRhYmxlLCB1cmwsIGNvbmZpZywgcGFyYW1zKTtcblxuXHRcdC8vc2V0IGJvZHkgY29udGVudCBpZiBub3QgR0VUIHJlcXVlc3Rcblx0XHRpZihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCkgIT0gXCJHRVRcIil7XG5cdFx0XHRjb250ZW50VHlwZSA9IHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMuYWpheENvbnRlbnRUeXBlID09PSBcIm9iamVjdFwiID8gIHRoaXMudGFibGUub3B0aW9ucy5hamF4Q29udGVudFR5cGUgOiB0aGlzLmNvbnRlbnRUeXBlRm9ybWF0dGVyc1t0aGlzLnRhYmxlLm9wdGlvbnMuYWpheENvbnRlbnRUeXBlXTtcblx0XHRcdGlmKGNvbnRlbnRUeXBlKXtcblxuXHRcdFx0XHRmb3IodmFyIGtleSBpbiBjb250ZW50VHlwZS5oZWFkZXJzKXtcblx0XHRcdFx0XHRpZighY29uZmlnLmhlYWRlcnMpe1xuXHRcdFx0XHRcdFx0Y29uZmlnLmhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZih0eXBlb2YgY29uZmlnLmhlYWRlcnNba2V5XSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRjb25maWcuaGVhZGVyc1trZXldID0gY29udGVudFR5cGUuaGVhZGVyc1trZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbmZpZy5ib2R5ID0gY29udGVudFR5cGUuYm9keS5jYWxsKHRoaXMsIHVybCwgY29uZmlnLCBwYXJhbXMpO1xuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkFqYXggRXJyb3IgLSBJbnZhbGlkIGFqYXhDb250ZW50VHlwZSB2YWx1ZTpcIiwgdGhpcy50YWJsZS5vcHRpb25zLmFqYXhDb250ZW50VHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYodXJsKXtcblx0XHRcdC8vY29uZmlndXJlIGhlYWRlcnNcblx0XHRcdGlmKHR5cGVvZiBjb25maWcuaGVhZGVycyA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdGNvbmZpZy5oZWFkZXJzID0ge307XG5cdFx0XHR9XG5cblx0XHRcdGlmKHR5cGVvZiBjb25maWcuaGVhZGVycy5BY2NlcHQgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRjb25maWcuaGVhZGVycy5BY2NlcHQgPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcblx0XHRcdH1cblxuXHRcdFx0aWYodHlwZW9mIGNvbmZpZy5oZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdGNvbmZpZy5oZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYodHlwZW9mIGNvbmZpZy5tb2RlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0Y29uZmlnLm1vZGUgPSBcImNvcnNcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYoY29uZmlnLm1vZGUgPT0gXCJjb3JzXCIpe1xuXHRcdFx0XHRpZih0eXBlb2YgY29uZmlnLmhlYWRlcnNbXCJPcmlnaW5cIl0gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdGNvbmZpZy5oZWFkZXJzW1wiT3JpZ2luXCJdID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcblx0XHRcdFx0fVxuICAgICAgICBcblx0XHRcdFx0aWYodHlwZW9mIGNvbmZpZy5jcmVkZW50aWFscyA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0Y29uZmlnLmNyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJztcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZih0eXBlb2YgY29uZmlnLmNyZWRlbnRpYWxzID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRjb25maWcuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9zZW5kIHJlcXVlc3Rcblx0XHRcdGZldGNoKHVybCwgY29uZmlnKVxuXHRcdFx0XHQudGhlbigocmVzcG9uc2UpPT57XG5cdFx0XHRcdFx0aWYocmVzcG9uc2Uub2spIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlLmpzb24oKVxuXHRcdFx0XHRcdFx0XHQudGhlbigoZGF0YSk9Pntcblx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKGRhdGEpO1xuXHRcdFx0XHRcdFx0XHR9KS5jYXRjaCgoZXJyb3IpPT57XG5cdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJBamF4IExvYWQgRXJyb3IgLSBJbnZhbGlkIEpTT04gcmV0dXJuZWRcIiwgZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQWpheCBMb2FkIEVycm9yIC0gQ29ubmVjdGlvbiBFcnJvcjogXCIgKyByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdFx0XHRcdFx0cmVqZWN0KHJlc3BvbnNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaCgoZXJyb3IpPT57XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkFqYXggTG9hZCBFcnJvciAtIENvbm5lY3Rpb24gRXJyb3I6IFwiLCBlcnJvcik7XG5cdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQWpheCBMb2FkIEVycm9yIC0gTm8gVVJMIFNldFwiKTtcblx0XHRcdHJlc29sdmUoW10pO1xuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGFyYW1zTGlzdChkYXRhLCBwcmVmaXgpe1xuXHR2YXIgb3V0cHV0ID0gW107XG5cblx0cHJlZml4ID0gcHJlZml4IHx8IFwiXCI7XG5cblx0aWYoQXJyYXkuaXNBcnJheShkYXRhKSl7XG5cdFx0ZGF0YS5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG5cdFx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KGdlbmVyYXRlUGFyYW1zTGlzdChpdGVtLCBwcmVmaXggPyBwcmVmaXggKyBcIltcIiArIGkgKyBcIl1cIiA6IGkpKTtcblx0XHR9KTtcblx0fWVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKHZhciBrZXkgaW4gZGF0YSl7XG5cdFx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KGdlbmVyYXRlUGFyYW1zTGlzdChkYXRhW2tleV0sIHByZWZpeCA/IHByZWZpeCArIFwiW1wiICsga2V5ICsgXCJdXCIgOiBrZXkpKTtcblx0XHR9XG5cdH1lbHNlIHtcblx0XHRvdXRwdXQucHVzaCh7a2V5OnByZWZpeCwgdmFsdWU6ZGF0YX0pO1xuXHR9XG5cblx0cmV0dXJuIG91dHB1dDtcbn1cblxudmFyIGRlZmF1bHRDb250ZW50VHlwZUZvcm1hdHRlcnMgPSB7XG5cdFwianNvblwiOntcblx0XHRoZWFkZXJzOntcblx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0fSxcblx0XHRib2R5OmZ1bmN0aW9uKHVybCwgY29uZmlnLCBwYXJhbXMpe1xuXHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG5cdFx0fSxcblx0fSxcblx0XCJmb3JtXCI6e1xuXHRcdGhlYWRlcnM6e1xuXHRcdH0sXG5cdFx0Ym9keTpmdW5jdGlvbih1cmwsIGNvbmZpZywgcGFyYW1zKXtcblxuXHRcdFx0dmFyIG91dHB1dCA9IGdlbmVyYXRlUGFyYW1zTGlzdChwYXJhbXMpLFxuXHRcdFx0Zm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuXG5cdFx0XHRvdXRwdXQuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0Zm9ybS5hcHBlbmQoaXRlbS5rZXksIGl0ZW0udmFsdWUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBmb3JtO1xuXHRcdH0sXG5cdH0sXG59O1xuXG5jbGFzcyBBamF4IGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJhamF4XCI7XG5cblx0Ly9sb2FkIGRlZmF1bHRzXG5cdHN0YXRpYyBkZWZhdWx0Q29uZmlnID0gZGVmYXVsdENvbmZpZztcblx0c3RhdGljIGRlZmF1bHRVUkxHZW5lcmF0b3IgPSB1cmxCdWlsZGVyO1xuXHRzdGF0aWMgZGVmYXVsdExvYWRlclByb21pc2UgPSBkZWZhdWx0TG9hZGVyUHJvbWlzZTtcblx0c3RhdGljIGNvbnRlbnRUeXBlRm9ybWF0dGVycyA9IGRlZmF1bHRDb250ZW50VHlwZUZvcm1hdHRlcnM7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuY29uZmlnID0ge307IC8vaG9sZCBjb25maWcgb2JqZWN0IGZvciBhamF4IHJlcXVlc3Rcblx0XHR0aGlzLnVybCA9IFwiXCI7IC8vcmVxdWVzdCBVUkxcblx0XHR0aGlzLnVybEdlbmVyYXRvciA9IGZhbHNlO1xuXHRcdHRoaXMucGFyYW1zID0gZmFsc2U7IC8vcmVxdWVzdCBwYXJhbWV0ZXJzXG5cdFx0XG5cdFx0dGhpcy5sb2FkZXJQcm9taXNlID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheFVSTFwiLCBmYWxzZSk7IC8vdXJsIGZvciBhamF4IGxvYWRpbmdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4VVJMR2VuZXJhdG9yXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4UGFyYW1zXCIsIHt9KTsgIC8vcGFyYW1zIGZvciBhamF4IGxvYWRpbmdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4Q29uZmlnXCIsIFwiZ2V0XCIpOyAvL2FqYXggcmVxdWVzdCB0eXBlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheENvbnRlbnRUeXBlXCIsIFwiZm9ybVwiKTsgLy9hamF4IHJlcXVlc3QgdHlwZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImFqYXhSZXF1ZXN0RnVuY1wiLCBmYWxzZSk7IC8vcHJvbWlzZSBmdW5jdGlvblxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImFqYXhSZXF1ZXN0aW5nXCIsIGZ1bmN0aW9uKCl7fSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheFJlc3BvbnNlXCIsIGZhbHNlKTtcblx0XHRcblx0XHR0aGlzLmNvbnRlbnRUeXBlRm9ybWF0dGVycyA9IEFqYXguY29udGVudFR5cGVGb3JtYXR0ZXJzO1xuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgc2V0dXAgb3B0aW9uc1xuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5sb2FkZXJQcm9taXNlID0gdGhpcy50YWJsZS5vcHRpb25zLmFqYXhSZXF1ZXN0RnVuYyB8fCBBamF4LmRlZmF1bHRMb2FkZXJQcm9taXNlO1xuXHRcdHRoaXMudXJsR2VuZXJhdG9yID0gdGhpcy50YWJsZS5vcHRpb25zLmFqYXhVUkxHZW5lcmF0b3IgfHwgQWpheC5kZWZhdWx0VVJMR2VuZXJhdG9yO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hamF4VVJMKXtcblx0XHRcdHRoaXMuc2V0VXJsKHRoaXMudGFibGUub3B0aW9ucy5hamF4VVJMKTtcblx0XHR9XG5cblxuXHRcdHRoaXMuc2V0RGVmYXVsdENvbmZpZyh0aGlzLnRhYmxlLm9wdGlvbnMuYWpheENvbmZpZyk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRBamF4VXJsXCIsIHRoaXMuZ2V0VXJsLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1sb2FkaW5nXCIsIHRoaXMucmVxdWVzdERhdGFDaGVjay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcGFyYW1zXCIsIHRoaXMucmVxdWVzdFBhcmFtcy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtbG9hZFwiLCB0aGlzLnJlcXVlc3REYXRhLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRyZXF1ZXN0UGFyYW1zKGRhdGEsIGNvbmZpZywgc2lsZW50LCBwYXJhbXMpe1xuXHRcdHZhciBhamF4UGFyYW1zID0gdGhpcy50YWJsZS5vcHRpb25zLmFqYXhQYXJhbXM7XG5cdFx0XG5cdFx0aWYoYWpheFBhcmFtcyl7XG5cdFx0XHRpZih0eXBlb2YgYWpheFBhcmFtcyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0YWpheFBhcmFtcyA9IGFqYXhQYXJhbXMuY2FsbCh0aGlzLnRhYmxlKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cGFyYW1zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhamF4UGFyYW1zKSwgcGFyYW1zKTtcblx0XHR9XHRcdFxuXHRcdFxuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblx0XG5cdHJlcXVlc3REYXRhQ2hlY2soZGF0YSwgcGFyYW1zLCBjb25maWcsIHNpbGVudCl7XG5cdFx0cmV0dXJuICEhKCghZGF0YSAmJiB0aGlzLnVybCkgfHwgdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpO1xuXHR9XG5cdFxuXHRyZXF1ZXN0RGF0YSh1cmwsIHBhcmFtcywgY29uZmlnLCBzaWxlbnQsIHByZXZpb3VzRGF0YSl7XG5cdFx0dmFyIGFqYXhDb25maWc7XG5cdFx0XG5cdFx0aWYoIXByZXZpb3VzRGF0YSAmJiB0aGlzLnJlcXVlc3REYXRhQ2hlY2sodXJsKSl7XG5cdFx0XHRpZih1cmwpe1xuXHRcdFx0XHR0aGlzLnNldFVybCh1cmwpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRhamF4Q29uZmlnID0gdGhpcy5nZW5lcmF0ZUNvbmZpZyhjb25maWcpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdGhpcy5zZW5kUmVxdWVzdCh0aGlzLnVybCwgcGFyYW1zLCBhamF4Q29uZmlnKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gcHJldmlvdXNEYXRhO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0RGVmYXVsdENvbmZpZyhjb25maWcgPSB7fSl7XG5cdFx0dGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBBamF4LmRlZmF1bHRDb25maWcpO1xuXG5cdFx0aWYodHlwZW9mIGNvbmZpZyA9PSBcInN0cmluZ1wiKXtcblx0XHRcdHRoaXMuY29uZmlnLm1ldGhvZCA9IGNvbmZpZztcblx0XHR9ZWxzZSB7XG5cdFx0XHRPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnLCBjb25maWcpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9sb2FkIGNvbmZpZyBvYmplY3Rcblx0Z2VuZXJhdGVDb25maWcoY29uZmlnID0ge30pe1xuXHRcdHZhciBhamF4Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBjb25maWcgPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRhamF4Q29uZmlnLm1ldGhvZCA9IGNvbmZpZztcblx0XHR9ZWxzZSB7XG5cdFx0XHRPYmplY3QuYXNzaWduKGFqYXhDb25maWcsIGNvbmZpZyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBhamF4Q29uZmlnO1xuXHR9XG5cdFxuXHQvL3NldCByZXF1ZXN0IHVybFxuXHRzZXRVcmwodXJsKXtcblx0XHR0aGlzLnVybCA9IHVybDtcblx0fVxuXHRcblx0Ly9nZXQgcmVxdWVzdCB1cmxcblx0Z2V0VXJsKCl7XG5cdFx0cmV0dXJuIHRoaXMudXJsO1xuXHR9XG5cdFxuXHQvL3NlbmQgYWpheCByZXF1ZXN0XG5cdHNlbmRSZXF1ZXN0KHVybCwgcGFyYW1zLCBjb25maWcpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hamF4UmVxdWVzdGluZy5jYWxsKHRoaXMudGFibGUsIHVybCwgcGFyYW1zKSAhPT0gZmFsc2Upe1xuXHRcdFx0cmV0dXJuIHRoaXMubG9hZGVyUHJvbWlzZSh1cmwsIGNvbmZpZywgcGFyYW1zKVxuXHRcdFx0XHQudGhlbigoZGF0YSk9Pntcblx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuYWpheFJlc3BvbnNlKXtcblx0XHRcdFx0XHRcdGRhdGEgPSB0aGlzLnRhYmxlLm9wdGlvbnMuYWpheFJlc3BvbnNlLmNhbGwodGhpcy50YWJsZSwgdXJsLCBwYXJhbXMsIGRhdGEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxufVxuXG52YXIgZGVmYXVsdFBhc3RlQWN0aW9ucyA9IHtcblx0cmVwbGFjZTpmdW5jdGlvbihkYXRhKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5zZXREYXRhKGRhdGEpO1xuXHR9LFxuXHR1cGRhdGU6ZnVuY3Rpb24oZGF0YSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUudXBkYXRlT3JBZGREYXRhKGRhdGEpO1xuXHR9LFxuXHRpbnNlcnQ6ZnVuY3Rpb24oZGF0YSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuYWRkRGF0YShkYXRhKTtcblx0fSxcbn07XG5cbnZhciBkZWZhdWx0UGFzdGVQYXJzZXJzID0ge1xuXHR0YWJsZTpmdW5jdGlvbihjbGlwYm9hcmQpe1xuXHRcdHZhciBkYXRhID0gW10sXG5cdFx0aGVhZGVyRmluZFN1Y2Nlc3MgPSB0cnVlLFxuXHRcdGNvbHVtbnMgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1ucyxcblx0XHRjb2x1bW5NYXAgPSBbXSxcblx0XHRyb3dzID0gW107XG5cdFx0XG5cdFx0Ly9nZXQgZGF0YSBmcm9tIGNsaXBib2FyZCBpbnRvIGFycmF5IG9mIGNvbHVtbnMgYW5kIHJvd3MuXG5cdFx0Y2xpcGJvYXJkID0gY2xpcGJvYXJkLnNwbGl0KFwiXFxuXCIpO1xuXHRcdFxuXHRcdGNsaXBib2FyZC5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRkYXRhLnB1c2gocm93LnNwbGl0KFwiXFx0XCIpKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZihkYXRhLmxlbmd0aCAmJiAhKGRhdGEubGVuZ3RoID09PSAxICYmIGRhdGFbMF0ubGVuZ3RoIDwgMikpe1xuXHRcdFx0XG5cdFx0XHQvL2NoZWNrIGlmIGhlYWRlcnMgYXJlIHByZXNlbnQgYnkgdGl0bGVcblx0XHRcdGRhdGFbMF0uZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdHZhciBjb2x1bW4gPSBjb2x1bW5zLmZpbmQoZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgJiYgY29sdW1uLmRlZmluaXRpb24udGl0bGUgJiYgdmFsdWUudHJpbSgpICYmIGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlLnRyaW0oKSA9PT0gdmFsdWUudHJpbSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0Y29sdW1uTWFwLnB1c2goY29sdW1uKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGhlYWRlckZpbmRTdWNjZXNzID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHQvL2NoZWNrIGlmIGNvbHVtbiBoZWFkZXJzIGFyZSBwcmVzZW50IGJ5IGZpZWxkXG5cdFx0XHRpZighaGVhZGVyRmluZFN1Y2Nlc3Mpe1xuXHRcdFx0XHRoZWFkZXJGaW5kU3VjY2VzcyA9IHRydWU7XG5cdFx0XHRcdGNvbHVtbk1hcCA9IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0ZGF0YVswXS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0XHR2YXIgY29sdW1uID0gY29sdW1ucy5maW5kKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgJiYgY29sdW1uLmZpZWxkICYmIHZhbHVlLnRyaW0oKSAmJiBjb2x1bW4uZmllbGQudHJpbSgpID09PSB2YWx1ZS50cmltKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHRcdGNvbHVtbk1hcC5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0aGVhZGVyRmluZFN1Y2Nlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIWhlYWRlckZpbmRTdWNjZXNzKXtcblx0XHRcdFx0XHRjb2x1bW5NYXAgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9yZW1vdmUgaGVhZGVyIHJvdyBpZiBmb3VuZFxuXHRcdFx0aWYoaGVhZGVyRmluZFN1Y2Nlc3Mpe1xuXHRcdFx0XHRkYXRhLnNoaWZ0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0dmFyIHJvdyA9IHt9O1xuXHRcdFx0XHRcblx0XHRcdFx0aXRlbS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBpKXtcblx0XHRcdFx0XHRpZihjb2x1bW5NYXBbaV0pe1xuXHRcdFx0XHRcdFx0cm93W2NvbHVtbk1hcFtpXS5maWVsZF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cm93cy5wdXNoKHJvdyk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHJvd3M7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcbn07XG5cbnZhciBiaW5kaW5ncyQyID0ge1xyXG5cdGNvcHlUb0NsaXBib2FyZDpbXCJjdHJsICsgNjdcIiwgXCJtZXRhICsgNjdcIl0sXHJcbn07XG5cbnZhciBhY3Rpb25zJDIgPSB7XHJcblx0Y29weVRvQ2xpcGJvYXJkOmZ1bmN0aW9uKGUpe1xyXG5cdFx0aWYoIXRoaXMudGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsKXtcclxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjbGlwYm9hcmRcIiwgdHJ1ZSkpe1xyXG5cdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jbGlwYm9hcmQuY29weShmYWxzZSwgdHJ1ZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG59O1xuXG52YXIgZXh0ZW5zaW9ucyQ0ID0ge1xyXG5cdGtleWJpbmRpbmdzOntcclxuXHRcdGJpbmRpbmdzOmJpbmRpbmdzJDIsXHJcblx0XHRhY3Rpb25zOmFjdGlvbnMkMlxyXG5cdH0sXHJcbn07XG5cbmNsYXNzIENsaXBib2FyZCBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwiY2xpcGJvYXJkXCI7XG5cdHN0YXRpYyBtb2R1bGVFeHRlbnNpb25zID0gZXh0ZW5zaW9ucyQ0O1xuXG5cdC8vbG9hZCBkZWZhdWx0c1xuXHRzdGF0aWMgcGFzdGVBY3Rpb25zID0gZGVmYXVsdFBhc3RlQWN0aW9ucztcblx0c3RhdGljIHBhc3RlUGFyc2VycyA9IGRlZmF1bHRQYXN0ZVBhcnNlcnM7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMubW9kZSA9IHRydWU7XG5cdFx0dGhpcy5wYXN0ZVBhcnNlciA9IGZ1bmN0aW9uKCl7fTtcblx0XHR0aGlzLnBhc3RlQWN0aW9uID0gZnVuY3Rpb24oKXt9O1xuXHRcdHRoaXMuY3VzdG9tU2VsZWN0aW9uID0gZmFsc2U7XG5cdFx0dGhpcy5yb3dSYW5nZSA9IGZhbHNlO1xuXHRcdHRoaXMuYmxvY2tlZCA9IHRydWU7IC8vYmxvY2sgY29weSBhY3Rpb25zIG5vdCBvcmlnaW5hdGluZyBmcm9tIHRoaXMgY29tbWFuZFxuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY2xpcGJvYXJkXCIsIGZhbHNlKTsgLy9lbmFibGUgY2xpcGJvYXJkXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY2xpcGJvYXJkQ29weVN0eWxlZFwiLCB0cnVlKTsgLy9mb3JtYXR0ZWQgdGFibGUgZGF0YVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNsaXBib2FyZENvcHlDb25maWdcIiwgZmFsc2UpOyAvL2NsaXBib2FyZCBjb25maWdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRDb3B5Rm9ybWF0dGVyXCIsIGZhbHNlKTsgLy9ERVBSRUNBVEVEIC0gUkVNT1ZFIGluIDUuMFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNsaXBib2FyZENvcHlSb3dSYW5nZVwiLCBcImFjdGl2ZVwiKTsgLy9yZXN0cmljdCBjbGlwYm9hcmQgdG8gdmlzaWJsZSByb3dzIG9ubHlcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRQYXN0ZVBhcnNlclwiLCBcInRhYmxlXCIpOyAvL2NvbnZlcnQgcGFzdGVkIGNsaXBib2FyZCBkYXRhIHRvIHJvd3Ncblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRQYXN0ZUFjdGlvblwiLCBcImluc2VydFwiKTsgLy9ob3cgdG8gaW5zZXJ0IHBhc3RlZCBkYXRhIGludG8gdGhlIHRhYmxlXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2xpcGJvYXJkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0aXRsZUNsaXBib2FyZFwiKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLm1vZGUgPSB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkO1xuXG5cdFx0dGhpcy5yb3dSYW5nZSA9IHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Um93UmFuZ2U7XG5cblx0XHRpZih0aGlzLm1vZGUgPT09IHRydWUgfHwgdGhpcy5tb2RlID09PSBcImNvcHlcIil7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgKGUpID0+IHtcblx0XHRcdFx0dmFyIHBsYWluLCBodG1sLCBsaXN0O1xuXG5cdFx0XHRcdGlmKCF0aGlzLmJsb2NrZWQpe1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdGlmKHRoaXMuY3VzdG9tU2VsZWN0aW9uKXtcblx0XHRcdFx0XHRcdHBsYWluID0gdGhpcy5jdXN0b21TZWxlY3Rpb247XG5cblx0XHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Rm9ybWF0dGVyKXtcblx0XHRcdFx0XHRcdFx0cGxhaW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUZvcm1hdHRlcihcInBsYWluXCIsIHBsYWluKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cblx0XHRcdFx0XHRcdGxpc3QgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZXhwb3J0LmdlbmVyYXRlRXhwb3J0TGlzdCh0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUNvbmZpZywgdGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZENvcHlTdHlsZWQsIHRoaXMucm93UmFuZ2UsIFwiY2xpcGJvYXJkXCIpO1xuXG5cdFx0XHRcdFx0XHRodG1sID0gdGhpcy50YWJsZS5tb2R1bGVzLmV4cG9ydC5nZW5lcmF0ZUhUTUxUYWJsZShsaXN0KTtcblx0XHRcdFx0XHRcdHBsYWluID0gaHRtbCA/IHRoaXMuZ2VuZXJhdGVQbGFpbkNvbnRlbnQobGlzdCkgOiBcIlwiO1xuXG5cdFx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUZvcm1hdHRlcil7XG5cdFx0XHRcdFx0XHRcdHBsYWluID0gdGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZENvcHlGb3JtYXR0ZXIoXCJwbGFpblwiLCBwbGFpbik7XG5cdFx0XHRcdFx0XHRcdGh0bWwgPSB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUZvcm1hdHRlcihcImh0bWxcIiwgaHRtbCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHdpbmRvdy5jbGlwYm9hcmREYXRhICYmIHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEpIHtcblx0XHRcdFx0XHRcdHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEoJ1RleHQnLCBwbGFpbik7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmNsaXBib2FyZERhdGEgJiYgZS5jbGlwYm9hcmREYXRhLnNldERhdGEpIHtcblx0XHRcdFx0XHRcdGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L3BsYWluJywgcGxhaW4pO1xuXHRcdFx0XHRcdFx0aWYoaHRtbCl7XG5cdFx0XHRcdFx0XHRcdGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L2h0bWwnLCBodG1sKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKSB7XG5cdFx0XHRcdFx0XHRlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L3BsYWluJywgcGxhaW4pO1xuXHRcdFx0XHRcdFx0aWYoaHRtbCl7XG5cdFx0XHRcdFx0XHRcdGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvaHRtbCcsIGh0bWwpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNsaXBib2FyZENvcGllZFwiLCBwbGFpbiwgaHRtbCk7XG5cblx0XHRcdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMubW9kZSA9PT0gdHJ1ZSB8fCB0aGlzLm1vZGUgPT09IFwicGFzdGVcIil7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBhc3RlXCIsIChlKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFzdGUoZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR0aGlzLnNldFBhc3RlUGFyc2VyKHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRQYXN0ZVBhcnNlcik7XG5cdFx0dGhpcy5zZXRQYXN0ZUFjdGlvbih0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkUGFzdGVBY3Rpb24pO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjb3B5VG9DbGlwYm9hcmRcIiwgdGhpcy5jb3B5LmJpbmQodGhpcykpO1xuXHR9XG5cblx0cmVzZXQoKXtcblx0XHR0aGlzLmJsb2NrZWQgPSB0cnVlO1xuXHRcdHRoaXMuY3VzdG9tU2VsZWN0aW9uID0gZmFsc2U7XG5cdH1cblxuXHRnZW5lcmF0ZVBsYWluQ29udGVudCAobGlzdCkge1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR2YXIgcm93RGF0YSA9IFtdO1xuXG5cdFx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0dmFyIHZhbHVlID0gXCJcIjtcblxuXHRcdFx0XHRpZihjb2wpe1xuXG5cdFx0XHRcdFx0aWYocm93LnR5cGUgPT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRjb2wudmFsdWUgPSBjb2wuY29tcG9uZW50LmdldEtleSgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGNvbC52YWx1ZSA9PT0gbnVsbCl7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0c3dpdGNoKHR5cGVvZiBjb2wudmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBKU09OLnN0cmluZ2lmeShjb2wudmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IGNvbC52YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyb3dEYXRhLnB1c2godmFsdWUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdG91dHB1dC5wdXNoKHJvd0RhdGEuam9pbihcIlxcdFwiKSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oXCJcXG5cIik7XG5cdH1cblxuXHRjb3B5IChyYW5nZSwgaW50ZXJuYWwpIHtcblx0XHR2YXIgc2VsLCB0ZXh0UmFuZ2U7XG5cdFx0dGhpcy5ibG9ja2VkID0gZmFsc2U7XG5cdFx0dGhpcy5jdXN0b21TZWxlY3Rpb24gPSBmYWxzZTtcblx0XG5cblx0XHRpZiAodGhpcy5tb2RlID09PSB0cnVlIHx8IHRoaXMubW9kZSA9PT0gXCJjb3B5XCIpIHtcblxuXHRcdFx0dGhpcy5yb3dSYW5nZSA9IHJhbmdlIHx8IHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Um93UmFuZ2U7XG5cblx0XHRcdGlmICh0eXBlb2Ygd2luZG93LmdldFNlbGVjdGlvbiAhPSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVSYW5nZSAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcblx0XHRcdFx0cmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRoaXMudGFibGUuZWxlbWVudCk7XG5cdFx0XHRcdHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuXHRcdFx0XHRpZiAoc2VsLnRvU3RyaW5nKCkgJiYgaW50ZXJuYWwpIHtcblx0XHRcdFx0XHR0aGlzLmN1c3RvbVNlbGVjdGlvbiA9IHNlbC50b1N0cmluZygpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcdFx0XHRzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQuc2VsZWN0aW9uICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlICE9IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0dGV4dFJhbmdlID0gZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtcblx0XHRcdFx0dGV4dFJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHRoaXMudGFibGUuZWxlbWVudCk7XG5cdFx0XHRcdHRleHRSYW5nZS5zZWxlY3QoKTtcblx0XHRcdH1cblxuXHRcdFx0ZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcblxuXHRcdFx0aWYgKHNlbCkge1xuXHRcdFx0XHRzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9QQVNURSBFVkVOVCBIQU5ETElOR1xuXHRzZXRQYXN0ZUFjdGlvbihhY3Rpb24pe1xuXG5cdFx0c3dpdGNoKHR5cGVvZiBhY3Rpb24pe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHR0aGlzLnBhc3RlQWN0aW9uID0gQ2xpcGJvYXJkLnBhc3RlQWN0aW9uc1thY3Rpb25dO1xuXG5cdFx0XHRcdGlmKCF0aGlzLnBhc3RlQWN0aW9uKXtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJDbGlwYm9hcmQgRXJyb3IgLSBObyBzdWNoIHBhc3RlIGFjdGlvbiBmb3VuZDpcIiwgYWN0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdHRoaXMucGFzdGVBY3Rpb24gPSBhY3Rpb247XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHNldFBhc3RlUGFyc2VyKHBhcnNlcil7XG5cdFx0c3dpdGNoKHR5cGVvZiBwYXJzZXIpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHR0aGlzLnBhc3RlUGFyc2VyID0gQ2xpcGJvYXJkLnBhc3RlUGFyc2Vyc1twYXJzZXJdO1xuXG5cdFx0XHRcdGlmKCF0aGlzLnBhc3RlUGFyc2VyKXtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJDbGlwYm9hcmQgRXJyb3IgLSBObyBzdWNoIHBhc3RlIHBhcnNlciBmb3VuZDpcIiwgcGFyc2VyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdHRoaXMucGFzdGVQYXJzZXIgPSBwYXJzZXI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHBhc3RlKGUpe1xuXHRcdHZhciBkYXRhLCByb3dEYXRhLCByb3dzO1xuXG5cdFx0aWYodGhpcy5jaGVja1Bhc3RlT3JpZ2luKGUpKXtcblxuXHRcdFx0ZGF0YSA9IHRoaXMuZ2V0UGFzdGVEYXRhKGUpO1xuXG5cdFx0XHRyb3dEYXRhID0gdGhpcy5wYXN0ZVBhcnNlci5jYWxsKHRoaXMsIGRhdGEpO1xuXG5cdFx0XHRpZihyb3dEYXRhKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwibXV0YXRvclwiKSl7XG5cdFx0XHRcdFx0cm93RGF0YSA9IHRoaXMubXV0YXRlRGF0YShyb3dEYXRhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJvd3MgPSB0aGlzLnBhc3RlQWN0aW9uLmNhbGwodGhpcywgcm93RGF0YSk7XG5cblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY2xpcGJvYXJkUGFzdGVkXCIsIGRhdGEsIHJvd0RhdGEsIHJvd3MpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjbGlwYm9hcmRQYXN0ZUVycm9yXCIsIGRhdGEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdG11dGF0ZURhdGEoZGF0YSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoQXJyYXkuaXNBcnJheShkYXRhKSl7XG5cdFx0XHRkYXRhLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLnRhYmxlLm1vZHVsZXMubXV0YXRvci50cmFuc2Zvcm1Sb3cocm93LCBcImNsaXBib2FyZFwiKSk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRvdXRwdXQgPSBkYXRhO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXG5cdGNoZWNrUGFzdGVPcmlnaW4oZSl7XG5cdFx0dmFyIHZhbGlkID0gdHJ1ZTtcblx0XHR2YXIgYmxvY2tlZCA9IHRoaXMuY29uZmlybShcImNsaXBib2FyZC1wYXN0ZVwiLCBbZV0pO1xuXG5cdFx0aWYoYmxvY2tlZCB8fCAhW1wiRElWXCIsIFwiU1BBTlwiXS5pbmNsdWRlcyhlLnRhcmdldC50YWdOYW1lKSl7XG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblx0fVxuXG5cdGdldFBhc3RlRGF0YShlKXtcblx0XHR2YXIgZGF0YTtcblxuXHRcdGlmICh3aW5kb3cuY2xpcGJvYXJkRGF0YSAmJiB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG5cdFx0XHRkYXRhID0gd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgnVGV4dCcpO1xuXHRcdH0gZWxzZSBpZiAoZS5jbGlwYm9hcmREYXRhICYmIGUuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG5cdFx0XHRkYXRhID0gZS5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcblx0XHR9IGVsc2UgaWYgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG5cdFx0XHRkYXRhID0gZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG59XG5cbmNsYXNzIENhbGNDb21wb25lbnR7XG5cdGNvbnN0cnVjdG9yIChyb3cpe1xuXHRcdHRoaXMuX3JvdyA9IHJvdztcblxuXHRcdHJldHVybiBuZXcgUHJveHkodGhpcywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIHJlY2VpdmVyKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldFtuYW1lXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXQuX3Jvdy50YWJsZS5jb21wb25lbnRGdW5jdGlvbkJpbmRlci5oYW5kbGUoXCJyb3dcIiwgdGFyZ2V0Ll9yb3csIG5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRnZXREYXRhKHRyYW5zZm9ybSl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy5nZXREYXRhKHRyYW5zZm9ybSk7XG5cdH1cblxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy5nZXRFbGVtZW50KCk7XG5cdH1cblxuXHRnZXRUYWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cudGFibGU7XG5cdH1cblxuXHRnZXRDZWxscygpe1xuXHRcdHZhciBjZWxscyA9IFtdO1xuXG5cdFx0dGhpcy5fcm93LmdldENlbGxzKCkuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdGNlbGxzLnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY2VsbHM7XG5cdH1cblxuXHRnZXRDZWxsKGNvbHVtbil7XG5cdFx0dmFyIGNlbGwgPSB0aGlzLl9yb3cuZ2V0Q2VsbChjb2x1bW4pO1xuXHRcdHJldHVybiBjZWxsID8gY2VsbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93O1xuXHR9XG59XG5cbi8vcHVibGljIGNlbGwgb2JqZWN0XG5jbGFzcyBDZWxsQ29tcG9uZW50IHtcblxuXHRjb25zdHJ1Y3RvciAoY2VsbCl7XG5cdFx0dGhpcy5fY2VsbCA9IGNlbGw7XG5cblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcblx0XHRcdGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Ll9jZWxsLnRhYmxlLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyLmhhbmRsZShcImNlbGxcIiwgdGFyZ2V0Ll9jZWxsLCBuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0VmFsdWUoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5nZXRWYWx1ZSgpO1xuXHR9XG5cblx0Z2V0T2xkVmFsdWUoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5nZXRPbGRWYWx1ZSgpO1xuXHR9XG5cblx0Z2V0SW5pdGlhbFZhbHVlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwuaW5pdGlhbFZhbHVlO1xuXHR9XG5cblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLmdldEVsZW1lbnQoKTtcblx0fVxuXG5cdGdldFJvdygpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLnJvdy5nZXRDb21wb25lbnQoKTtcblx0fVxuXG5cdGdldERhdGEodHJhbnNmb3JtKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5yb3cuZ2V0RGF0YSh0cmFuc2Zvcm0pO1xuXHR9XG5cdGdldFR5cGUoKXtcblx0XHRyZXR1cm4gXCJjZWxsXCI7XG5cdH1cblx0Z2V0RmllbGQoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5jb2x1bW4uZ2V0RmllbGQoKTtcblx0fVxuXG5cdGdldENvbHVtbigpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLmNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0fVxuXG5cdHNldFZhbHVlKHZhbHVlLCBtdXRhdGUpe1xuXHRcdGlmKHR5cGVvZiBtdXRhdGUgPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRtdXRhdGUgPSB0cnVlO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NlbGwuc2V0VmFsdWUodmFsdWUsIG11dGF0ZSk7XG5cdH1cblxuXHRyZXN0b3JlT2xkVmFsdWUoKXtcblx0XHR0aGlzLl9jZWxsLnNldFZhbHVlQWN0dWFsKHRoaXMuX2NlbGwuZ2V0T2xkVmFsdWUoKSk7XG5cdH1cblxuXHRyZXN0b3JlSW5pdGlhbFZhbHVlKCl7XG5cdFx0dGhpcy5fY2VsbC5zZXRWYWx1ZUFjdHVhbCh0aGlzLl9jZWxsLmluaXRpYWxWYWx1ZSk7XG5cdH1cblxuXHRjaGVja0hlaWdodCgpe1xuXHRcdHRoaXMuX2NlbGwuY2hlY2tIZWlnaHQoKTtcblx0fVxuXG5cdGdldFRhYmxlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwudGFibGU7XG5cdH1cblxuXHRfZ2V0U2VsZigpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsO1xuXHR9XG59XG5cbmNsYXNzIENlbGwgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IoY29sdW1uLCByb3cpe1xuXHRcdHN1cGVyKGNvbHVtbi50YWJsZSk7XG5cblx0XHR0aGlzLnRhYmxlID0gY29sdW1uLnRhYmxlO1xuXHRcdHRoaXMuY29sdW1uID0gY29sdW1uO1xuXHRcdHRoaXMucm93ID0gcm93O1xuXHRcdHRoaXMuZWxlbWVudCA9IG51bGw7XG5cdFx0dGhpcy52YWx1ZSA9IG51bGw7XG5cdFx0dGhpcy5pbml0aWFsVmFsdWU7XG5cdFx0dGhpcy5vbGRWYWx1ZSA9IG51bGw7XG5cdFx0dGhpcy5tb2R1bGVzID0ge307XG5cblx0XHR0aGlzLmhlaWdodCA9IG51bGw7XG5cdFx0dGhpcy53aWR0aCA9IG51bGw7XG5cdFx0dGhpcy5taW5XaWR0aCA9IG51bGw7XG5cblx0XHR0aGlzLmNvbXBvbmVudCA9IG51bGw7XG5cblx0XHR0aGlzLmxvYWRlZCA9IGZhbHNlOyAvL3RyYWNrIGlmIHRoZSBjZWxsIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBET00geWV0XG5cblx0XHR0aGlzLmJ1aWxkKCk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vIFNldHVwIEZ1bmN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvL2dlbmVyYXRlIGVsZW1lbnRcblx0YnVpbGQoKXtcblx0XHR0aGlzLmdlbmVyYXRlRWxlbWVudCgpO1xuXG5cdFx0dGhpcy5zZXRXaWR0aCgpO1xuXG5cdFx0dGhpcy5fY29uZmlndXJlQ2VsbCgpO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZUFjdHVhbCh0aGlzLmNvbHVtbi5nZXRGaWVsZFZhbHVlKHRoaXMucm93LmRhdGEpKTtcblxuXHRcdHRoaXMuaW5pdGlhbFZhbHVlID0gdGhpcy52YWx1ZTtcblx0fVxuXG5cdGdlbmVyYXRlRWxlbWVudCgpe1xuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBcInRhYnVsYXRvci1jZWxsXCI7XG5cdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJncmlkY2VsbFwiKTtcblxuXHRcdGlmKHRoaXMuY29sdW1uLmlzUm93SGVhZGVyKXtcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1oZWFkZXJcIik7XG5cdFx0fVxuXHR9XG5cblx0X2NvbmZpZ3VyZUNlbGwoKXtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcblx0XHRmaWVsZCA9IHRoaXMuY29sdW1uLmdldEZpZWxkKCksXG5cdFx0dmVydEFsaWducyA9IHtcblx0XHRcdHRvcDpcImZsZXgtc3RhcnRcIixcblx0XHRcdGJvdHRvbTpcImZsZXgtZW5kXCIsXG5cdFx0XHRtaWRkbGU6XCJjZW50ZXJcIixcblx0XHR9LFxuXHRcdGhvekFsaWducyA9IHtcblx0XHRcdGxlZnQ6XCJmbGV4LXN0YXJ0XCIsXG5cdFx0XHRyaWdodDpcImZsZXgtZW5kXCIsXG5cdFx0XHRjZW50ZXI6XCJjZW50ZXJcIixcblx0XHR9O1xuXG5cdFx0Ly9zZXQgdGV4dCBhbGlnbm1lbnRcblx0XHRlbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9IHRoaXMuY29sdW1uLmhvekFsaWduO1xuXG5cdFx0aWYodGhpcy5jb2x1bW4udmVydEFsaWduKXtcblx0XHRcdGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWZsZXhcIjtcblxuXHRcdFx0ZWxlbWVudC5zdHlsZS5hbGlnbkl0ZW1zID0gdmVydEFsaWduc1t0aGlzLmNvbHVtbi52ZXJ0QWxpZ25dIHx8IFwiXCI7XG5cblx0XHRcdGlmKHRoaXMuY29sdW1uLmhvekFsaWduKXtcblx0XHRcdFx0ZWxlbWVudC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IGhvekFsaWduc1t0aGlzLmNvbHVtbi5ob3pBbGlnbl0gfHwgXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihmaWVsZCl7XG5cdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYnVsYXRvci1maWVsZFwiLCBmaWVsZCk7XG5cdFx0fVxuXG5cdFx0Ly9hZGQgY2xhc3MgdG8gY2VsbCBpZiBuZWVkZWRcblx0XHRpZih0aGlzLmNvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzKXtcblx0XHRcdHZhciBjbGFzc05hbWVzID0gdGhpcy5jb2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcy5zcGxpdChcIiBcIik7XG5cdFx0XHRjbGFzc05hbWVzLmZvckVhY2goKGNsYXNzTmFtZSkgPT4ge1xuXHRcdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLWluaXRcIiwgdGhpcyk7XG5cblx0XHQvL2hpZGUgY2VsbCBpZiBub3QgdmlzaWJsZVxuXHRcdGlmKCF0aGlzLmNvbHVtbi52aXNpYmxlKXtcblx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdH1cblx0fVxuXG5cdC8vZ2VuZXJhdGUgY2VsbCBjb250ZW50c1xuXHRfZ2VuZXJhdGVDb250ZW50cygpe1xuXHRcdHZhciB2YWw7XG5cblx0XHR2YWwgPSB0aGlzLmNoYWluKFwiY2VsbC1mb3JtYXRcIiwgdGhpcywgbnVsbCwgKCkgPT4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLnZhbHVlO1xuXHRcdH0pO1xuXG5cdFx0c3dpdGNoKHR5cGVvZiB2YWwpe1xuXHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRpZih2YWwgaW5zdGFuY2VvZiBOb2RlKXtcblxuXHRcdFx0XHRcdC8vY2xlYXIgcHJldmlvdXMgY2VsbCBjb250ZW50c1xuXHRcdFx0XHRcdHdoaWxlKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKSB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xuXG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHZhbCk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcblxuXHRcdFx0XHRcdGlmKHZhbCAhPSBudWxsKXtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkZvcm1hdCBFcnJvciAtIEZvcm1hdHRlciBoYXMgcmV0dXJuZWQgYSB0eXBlIG9mIG9iamVjdCwgdGhlIG9ubHkgdmFsaWQgZm9ybWF0dGVyIG9iamVjdCByZXR1cm4gaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgdGhlIGZvcm1hdHRlciByZXR1cm5lZDpcIiwgdmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSB2YWw7XG5cdFx0fVxuXHR9XG5cblx0Y2VsbFJlbmRlcmVkKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtcmVuZGVyZWRcIiwgdGhpcyk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLyBHZXR0ZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGdldEVsZW1lbnQoY29udGFpbmVyT25seSl7XG5cdFx0aWYoIXRoaXMubG9hZGVkKXtcblx0XHRcdHRoaXMubG9hZGVkID0gdHJ1ZTtcblx0XHRcdGlmKCFjb250YWluZXJPbmx5KXtcblx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXG5cdGdldFZhbHVlKCl7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWU7XG5cdH1cblxuXHRnZXRPbGRWYWx1ZSgpe1xuXHRcdHJldHVybiB0aGlzLm9sZFZhbHVlO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8gQWN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRzZXRWYWx1ZSh2YWx1ZSwgbXV0YXRlLCBmb3JjZSl7XG5cdFx0dmFyIGNoYW5nZWQgPSB0aGlzLnNldFZhbHVlUHJvY2Vzc0RhdGEodmFsdWUsIG11dGF0ZSwgZm9yY2UpO1xuXG5cdFx0aWYoY2hhbmdlZCl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC12YWx1ZS11cGRhdGVkXCIsIHRoaXMpO1xuXG5cdFx0XHR0aGlzLmNlbGxSZW5kZXJlZCgpO1xuXG5cdFx0XHRpZih0aGlzLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxFZGl0ZWQpe1xuXHRcdFx0XHR0aGlzLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxFZGl0ZWQuY2FsbCh0aGlzLnRhYmxlLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY2VsbEVkaXRlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblxuXHRcdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiKSl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFDaGFuZ2VkXCIsIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREYXRhKCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHNldFZhbHVlUHJvY2Vzc0RhdGEodmFsdWUsIG11dGF0ZSwgZm9yY2Upe1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRpZih0aGlzLnZhbHVlICE9PSB2YWx1ZSB8fCBmb3JjZSl7XG5cblx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0XHRpZihtdXRhdGUpe1xuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuY2hhaW4oXCJjZWxsLXZhbHVlLWNoYW5naW5nXCIsIFt0aGlzLCB2YWx1ZV0sIG51bGwsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnNldFZhbHVlQWN0dWFsKHZhbHVlKTtcblxuXHRcdGlmKGNoYW5nZWQpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtdmFsdWUtY2hhbmdlZFwiLCB0aGlzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY2hhbmdlZDtcblx0fVxuXG5cdHNldFZhbHVlQWN0dWFsKHZhbHVlKXtcblx0XHR0aGlzLm9sZFZhbHVlID0gdGhpcy52YWx1ZTtcblxuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLXZhbHVlLXNhdmUtYmVmb3JlXCIsIHRoaXMpO1xuXG5cdFx0dGhpcy5jb2x1bW4uc2V0RmllbGRWYWx1ZSh0aGlzLnJvdy5kYXRhLCB2YWx1ZSk7XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC12YWx1ZS1zYXZlLWFmdGVyXCIsIHRoaXMpO1xuXG5cdFx0aWYodGhpcy5sb2FkZWQpe1xuXHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KCk7XG5cdFx0fVxuXHR9XG5cblx0bGF5b3V0RWxlbWVudCgpe1xuXHRcdHRoaXMuX2dlbmVyYXRlQ29udGVudHMoKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLWxheW91dFwiLCB0aGlzKTtcblx0fVxuXG5cdHNldFdpZHRoKCl7XG5cdFx0dGhpcy53aWR0aCA9IHRoaXMuY29sdW1uLndpZHRoO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuY29sdW1uLndpZHRoU3R5bGVkO1xuXHR9XG5cblx0Y2xlYXJXaWR0aCgpe1xuXHRcdHRoaXMud2lkdGggPSBcIlwiO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IFwiXCI7XG5cdH1cblxuXHRnZXRXaWR0aCgpe1xuXHRcdHJldHVybiB0aGlzLndpZHRoIHx8IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcblx0fVxuXG5cdHNldE1pbldpZHRoKCl7XG5cdFx0dGhpcy5taW5XaWR0aCA9IHRoaXMuY29sdW1uLm1pbldpZHRoO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IHRoaXMuY29sdW1uLm1pbldpZHRoU3R5bGVkO1xuXHR9XG5cblx0c2V0TWF4V2lkdGgoKXtcblx0XHR0aGlzLm1heFdpZHRoID0gdGhpcy5jb2x1bW4ubWF4V2lkdGg7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLm1heFdpZHRoID0gdGhpcy5jb2x1bW4ubWF4V2lkdGhTdHlsZWQ7XG5cdH1cblxuXHRjaGVja0hlaWdodCgpe1xuXHRcdC8vIHZhciBoZWlnaHQgPSB0aGlzLmVsZW1lbnQuY3NzKFwiaGVpZ2h0XCIpO1xuXHRcdHRoaXMucm93LnJlaW5pdGlhbGl6ZUhlaWdodCgpO1xuXHR9XG5cblx0Y2xlYXJIZWlnaHQoKXtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCJcIjtcblx0XHR0aGlzLmhlaWdodCA9IG51bGw7XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC1oZWlnaHRcIiwgdGhpcywgXCJcIik7XG5cdH1cblxuXHRzZXRIZWlnaHQoKXtcblx0XHR0aGlzLmhlaWdodCA9IHRoaXMucm93LmhlaWdodDtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5yb3cuaGVpZ2h0U3R5bGVkO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtaGVpZ2h0XCIsIHRoaXMsIHRoaXMucm93LmhlaWdodFN0eWxlZCk7XG5cdH1cblxuXHRnZXRIZWlnaHQoKXtcblx0XHRyZXR1cm4gdGhpcy5oZWlnaHQgfHwgdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcblx0fVxuXG5cdHNob3coKXtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHRoaXMuY29sdW1uLnZlcnRBbGlnbiA/IFwiaW5saW5lLWZsZXhcIiA6IFwiXCI7XG5cdH1cblxuXHRoaWRlKCl7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0fVxuXG5cdGRlbGV0ZSgpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLWRlbGV0ZVwiLCB0aGlzKTtcblxuXHRcdGlmKCF0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVkcmF3QmxvY2sgJiYgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcblx0XHR9XG5cblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLmNvbHVtbi5kZWxldGVDZWxsKHRoaXMpO1xuXHRcdHRoaXMucm93LmRlbGV0ZUNlbGwodGhpcyk7XG5cdFx0dGhpcy5jYWxjcyA9IHt9O1xuXHR9XG5cblx0Z2V0SW5kZXgoKXtcblx0XHRyZXR1cm4gdGhpcy5yb3cuZ2V0Q2VsbEluZGV4KHRoaXMpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLyBPYmplY3QgR2VuZXJhdGlvbiAvLy8vLy8vLy8vLy8vLy8vL1xuXHRnZXRDb21wb25lbnQoKXtcblx0XHRpZighdGhpcy5jb21wb25lbnQpe1xuXHRcdFx0dGhpcy5jb21wb25lbnQgPSBuZXcgQ2VsbENvbXBvbmVudCh0aGlzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5jb21wb25lbnQ7XG5cdH1cbn1cblxuLy9wdWJsaWMgY29sdW1uIG9iamVjdFxuY2xhc3MgQ29sdW1uQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKGNvbHVtbil7XG5cdFx0dGhpcy5fY29sdW1uID0gY29sdW1uO1xuXHRcdHRoaXMudHlwZSA9IFwiQ29sdW1uQ29tcG9uZW50XCI7XG5cblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcblx0XHRcdGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Ll9jb2x1bW4udGFibGUuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIuaGFuZGxlKFwiY29sdW1uXCIsIHRhcmdldC5fY29sdW1uLCBuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4uZ2V0RWxlbWVudCgpO1xuXHR9XG5cblx0Z2V0RGVmaW5pdGlvbigpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4uZ2V0RGVmaW5pdGlvbigpO1xuXHR9XG5cblx0Z2V0RmllbGQoKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLmdldEZpZWxkKCk7XG5cdH1cblxuXHRnZXRUaXRsZURvd25sb2FkKCkge1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4uZ2V0VGl0bGVEb3dubG9hZCgpO1xuXHR9XG5cblx0Z2V0Q2VsbHMoKXtcblx0XHR2YXIgY2VsbHMgPSBbXTtcblxuXHRcdHRoaXMuX2NvbHVtbi5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0Y2VsbHMucHVzaChjZWxsLmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBjZWxscztcblx0fVxuXG5cdGlzVmlzaWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4udmlzaWJsZTtcblx0fVxuXG5cdHNob3coKXtcblx0XHRpZih0aGlzLl9jb2x1bW4uaXNHcm91cCl7XG5cdFx0XHR0aGlzLl9jb2x1bW4uY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGNvbHVtbi5zaG93KCk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLl9jb2x1bW4uc2hvdygpO1xuXHRcdH1cblx0fVxuXG5cdGhpZGUoKXtcblx0XHRpZih0aGlzLl9jb2x1bW4uaXNHcm91cCl7XG5cdFx0XHR0aGlzLl9jb2x1bW4uY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGNvbHVtbi5oaWRlKCk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLl9jb2x1bW4uaGlkZSgpO1xuXHRcdH1cblx0fVxuXG5cdHRvZ2dsZSgpe1xuXHRcdGlmKHRoaXMuX2NvbHVtbi52aXNpYmxlKXtcblx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuc2hvdygpO1xuXHRcdH1cblx0fVxuXG5cdGRlbGV0ZSgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4uZGVsZXRlKCk7XG5cdH1cblxuXHRnZXRTdWJDb2x1bW5zKCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0aWYodGhpcy5fY29sdW1uLmNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdHRoaXMuX2NvbHVtbi5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0b3V0cHV0LnB1c2goY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHRnZXRQYXJlbnRDb2x1bW4oKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLmdldFBhcmVudENvbXBvbmVudCgpO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uO1xuXHR9XG5cblx0c2Nyb2xsVG8ocG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi50YWJsZS5jb2x1bW5NYW5hZ2VyLnNjcm9sbFRvQ29sdW1uKHRoaXMuX2NvbHVtbiwgcG9zaXRpb24sIGlmVmlzaWJsZSk7XG5cdH1cblxuXHRnZXRUYWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4udGFibGU7XG5cdH1cblxuXHRtb3ZlKHRvLCBhZnRlcil7XG5cdFx0dmFyIHRvQ29sdW1uID0gdGhpcy5fY29sdW1uLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbih0byk7XG5cblx0XHRpZih0b0NvbHVtbil7XG5cdFx0XHR0aGlzLl9jb2x1bW4udGFibGUuY29sdW1uTWFuYWdlci5tb3ZlQ29sdW1uKHRoaXMuX2NvbHVtbiwgdG9Db2x1bW4sIGFmdGVyKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCB0b0NvbHVtbik7XG5cdFx0fVxuXHR9XG5cblx0Z2V0TmV4dENvbHVtbigpe1xuXHRcdHZhciBuZXh0Q29sID0gdGhpcy5fY29sdW1uLm5leHRDb2x1bW4oKTtcblxuXHRcdHJldHVybiBuZXh0Q29sID8gbmV4dENvbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0Z2V0UHJldkNvbHVtbigpe1xuXHRcdHZhciBwcmV2Q29sID0gdGhpcy5fY29sdW1uLnByZXZDb2x1bW4oKTtcblxuXHRcdHJldHVybiBwcmV2Q29sID8gcHJldkNvbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0dXBkYXRlRGVmaW5pdGlvbih1cGRhdGVzKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLnVwZGF0ZURlZmluaXRpb24odXBkYXRlcyk7XG5cdH1cblxuXHRnZXRXaWR0aCgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4uZ2V0V2lkdGgoKTtcblx0fVxuXG5cdHNldFdpZHRoKHdpZHRoKXtcblx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0aWYod2lkdGggPT09IHRydWUpe1xuXHRcdFx0cmVzdWx0ID0gIHRoaXMuX2NvbHVtbi5yZWluaXRpYWxpemVXaWR0aCh0cnVlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSAgdGhpcy5fY29sdW1uLnNldFdpZHRoKHdpZHRoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9jb2x1bW4udGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59XG5cbnZhciBkZWZhdWx0Q29sdW1uT3B0aW9ucyA9IHtcblx0XCJ0aXRsZVwiOiB1bmRlZmluZWQsXG5cdFwiZmllbGRcIjogdW5kZWZpbmVkLFxuXHRcImNvbHVtbnNcIjogdW5kZWZpbmVkLFxuXHRcInZpc2libGVcIjogdW5kZWZpbmVkLFxuXHRcImhvekFsaWduXCI6IHVuZGVmaW5lZCxcblx0XCJ2ZXJ0QWxpZ25cIjogdW5kZWZpbmVkLFxuXHRcIndpZHRoXCI6IHVuZGVmaW5lZCxcblx0XCJtaW5XaWR0aFwiOiA0MCxcblx0XCJtYXhXaWR0aFwiOiB1bmRlZmluZWQsXG5cdFwibWF4SW5pdGlhbFdpZHRoXCI6IHVuZGVmaW5lZCxcblx0XCJjc3NDbGFzc1wiOiB1bmRlZmluZWQsXG5cdFwidmFyaWFibGVIZWlnaHRcIjogdW5kZWZpbmVkLFxuXHRcImhlYWRlclZlcnRpY2FsXCI6IHVuZGVmaW5lZCxcblx0XCJoZWFkZXJIb3pBbGlnblwiOiB1bmRlZmluZWQsXG5cdFwiaGVhZGVyV29yZFdyYXBcIjogZmFsc2UsXG5cdFwiZWRpdGFibGVUaXRsZVwiOiB1bmRlZmluZWQsXG59O1xuXG5jbGFzcyBDb2x1bW4gZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0XG5cdHN0YXRpYyBkZWZhdWx0T3B0aW9uTGlzdCA9IGRlZmF1bHRDb2x1bW5PcHRpb25zO1xuXHRcblx0Y29uc3RydWN0b3IoZGVmLCBwYXJlbnQsIHJvd0hlYWRlcil7XG5cdFx0c3VwZXIocGFyZW50LnRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmRlZmluaXRpb24gPSBkZWY7IC8vY29sdW1uIGRlZmluaXRpb25cblx0XHR0aGlzLnBhcmVudCA9IHBhcmVudDsgLy9ob2xkIHBhcmVudCBvYmplY3Rcblx0XHR0aGlzLnR5cGUgPSBcImNvbHVtblwiOyAvL3R5cGUgb2YgZWxlbWVudFxuXHRcdHRoaXMuY29sdW1ucyA9IFtdOyAvL2NoaWxkIGNvbHVtbnNcblx0XHR0aGlzLmNlbGxzID0gW107IC8vY2VsbHMgYm91bmQgdG8gdGhpcyBjb2x1bW5cblx0XHR0aGlzLmlzR3JvdXAgPSBmYWxzZTtcblx0XHR0aGlzLmlzUm93SGVhZGVyID0gcm93SGVhZGVyO1xuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpOyAvL2NvbHVtbiBoZWFkZXIgZWxlbWVudFxuXHRcdHRoaXMuY29udGVudEVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLnRpdGxlSG9sZGVyRWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMudGl0bGVFbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5ncm91cEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUdyb3VwRWxlbWVudCgpOyAvL2NvbHVtbiBncm91cCBob2xkZXIgZWxlbWVudFxuXHRcdHRoaXMuaG96QWxpZ24gPSBcIlwiOyAvL2hvcml6b250YWwgdGV4dCBhbGlnbm1lbnRcblx0XHR0aGlzLnZlcnRBbGlnbiA9IFwiXCI7IC8vdmVydCB0ZXh0IGFsaWdubWVudFxuXHRcdFxuXHRcdC8vbXVsdGkgZGltZW5zaW9uYWwgZmlsZWQgaGFuZGxpbmdcblx0XHR0aGlzLmZpZWxkID1cIlwiO1xuXHRcdHRoaXMuZmllbGRTdHJ1Y3R1cmUgPSBcIlwiO1xuXHRcdHRoaXMuZ2V0RmllbGRWYWx1ZSA9IFwiXCI7XG5cdFx0dGhpcy5zZXRGaWVsZFZhbHVlID0gXCJcIjtcblx0XHRcblx0XHR0aGlzLnRpdGxlRG93bmxvYWQgPSBudWxsO1xuXHRcdHRoaXMudGl0bGVGb3JtYXR0ZXJSZW5kZXJlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMubWFwRGVmaW5pdGlvbnMoKTtcblx0XHRcblx0XHR0aGlzLnNldEZpZWxkKHRoaXMuZGVmaW5pdGlvbi5maWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5tb2R1bGVzID0ge307IC8vaG9sZCBtb2R1bGUgdmFyaWFibGVzO1xuXHRcdFxuXHRcdHRoaXMud2lkdGggPSBudWxsOyAvL2NvbHVtbiB3aWR0aFxuXHRcdHRoaXMud2lkdGhTdHlsZWQgPSBcIlwiOyAvL2NvbHVtbiB3aWR0aCBwcmUtc3R5bGVkIHRvIGltcHJvdmUgcmVuZGVyIGVmZmljaWVuY3lcblx0XHR0aGlzLm1heFdpZHRoID0gbnVsbDsgLy9jb2x1bW4gbWF4aW11bSB3aWR0aFxuXHRcdHRoaXMubWF4V2lkdGhTdHlsZWQgPSBcIlwiOyAvL2NvbHVtbiBtYXhpbXVtIHByZS1zdHlsZWQgdG8gaW1wcm92ZSByZW5kZXIgZWZmaWNpZW5jeVxuXHRcdHRoaXMubWF4SW5pdGlhbFdpZHRoID0gbnVsbDtcblx0XHR0aGlzLm1pbldpZHRoID0gbnVsbDsgLy9jb2x1bW4gbWluaW11bSB3aWR0aFxuXHRcdHRoaXMubWluV2lkdGhTdHlsZWQgPSBcIlwiOyAvL2NvbHVtbiBtaW5pbXVtIHByZS1zdHlsZWQgdG8gaW1wcm92ZSByZW5kZXIgZWZmaWNpZW5jeVxuXHRcdHRoaXMud2lkdGhGaXhlZCA9IGZhbHNlOyAvL3VzZXIgaGFzIHNwZWNpZmllZCBhIHdpZHRoIGZvciB0aGlzIGNvbHVtblxuXHRcdFxuXHRcdHRoaXMudmlzaWJsZSA9IHRydWU7IC8vZGVmYXVsdCB2aXNpYmxlIHN0YXRlXG5cdFx0XG5cdFx0dGhpcy5jb21wb25lbnQgPSBudWxsO1xuXHRcdFxuXHRcdC8vaW5pdGlhbGl6ZSBjb2x1bW5cblx0XHRpZih0aGlzLmRlZmluaXRpb24uY29sdW1ucyl7XG5cdFx0XHRcblx0XHRcdHRoaXMuaXNHcm91cCA9IHRydWU7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGVmaW5pdGlvbi5jb2x1bW5zLmZvckVhY2goKGRlZiwgaSkgPT4ge1xuXHRcdFx0XHR2YXIgbmV3Q29sID0gbmV3IENvbHVtbihkZWYsIHRoaXMpO1xuXHRcdFx0XHR0aGlzLmF0dGFjaENvbHVtbihuZXdDb2wpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuY2hlY2tDb2x1bW5WaXNpYmlsaXR5KCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cGFyZW50LnJlZ2lzdGVyQ29sdW1uRmllbGQodGhpcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuX2luaXRpYWxpemUoKTtcblx0fVxuXHRcblx0Y3JlYXRlRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJjb2x1bW5oZWFkZXJcIik7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKFwiYXJpYS1zb3J0XCIsIFwibm9uZVwiKTtcblxuXHRcdGlmKHRoaXMuaXNSb3dIZWFkZXIpe1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3ctaGVhZGVyXCIpO1xuXHRcdH1cblx0XHRcblx0XHRzd2l0Y2godGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkhlYWRlclZlcnRBbGlnbil7XG5cdFx0XHRjYXNlIFwibWlkZGxlXCI6XG5cdFx0XHRcdGVsLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiYm90dG9tXCI6XG5cdFx0XHRcdGVsLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LWVuZFwiO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cdFxuXHRjcmVhdGVHcm91cEVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1ncm91cC1jb2xzXCIpO1xuXHRcdFxuXHRcdHJldHVybiBlbDtcblx0fVxuXHRcblx0bWFwRGVmaW5pdGlvbnMoKXtcblx0XHR2YXIgZGVmYXVsdHMgPSB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uRGVmYXVsdHM7XG5cdFx0XG5cdFx0Ly9tYXAgY29sdW1uRGVmYXVsdHMgb250byBjb2x1bW4gZGVmaW5pdGlvbnNcblx0XHRpZihkZWZhdWx0cyl7XG5cdFx0XHRmb3IobGV0IGtleSBpbiBkZWZhdWx0cyl7XG5cdFx0XHRcdGlmKHR5cGVvZiB0aGlzLmRlZmluaXRpb25ba2V5XSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0dGhpcy5kZWZpbml0aW9uW2tleV0gPSBkZWZhdWx0c1trZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGVmaW5pdGlvbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5vcHRpb25zTGlzdC5nZW5lcmF0ZShDb2x1bW4uZGVmYXVsdE9wdGlvbkxpc3QsIHRoaXMuZGVmaW5pdGlvbik7XG5cdH1cblx0XG5cdGNoZWNrRGVmaW5pdGlvbigpe1xuXHRcdE9iamVjdC5rZXlzKHRoaXMuZGVmaW5pdGlvbikuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRpZihDb2x1bW4uZGVmYXVsdE9wdGlvbkxpc3QuaW5kZXhPZihrZXkpID09PSAtMSl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkludmFsaWQgY29sdW1uIGRlZmluaXRpb24gb3B0aW9uIGluICdcIiArICh0aGlzLmZpZWxkIHx8IHRoaXMuZGVmaW5pdGlvbi50aXRsZSkgKyBcIicgY29sdW1uOlwiLCBrZXkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0c2V0RmllbGQoZmllbGQpe1xuXHRcdHRoaXMuZmllbGQgPSBmaWVsZDtcblx0XHR0aGlzLmZpZWxkU3RydWN0dXJlID0gZmllbGQgPyAodGhpcy50YWJsZS5vcHRpb25zLm5lc3RlZEZpZWxkU2VwYXJhdG9yID8gZmllbGQuc3BsaXQodGhpcy50YWJsZS5vcHRpb25zLm5lc3RlZEZpZWxkU2VwYXJhdG9yKSA6IFtmaWVsZF0pIDogW107XG5cdFx0dGhpcy5nZXRGaWVsZFZhbHVlID0gdGhpcy5maWVsZFN0cnVjdHVyZS5sZW5ndGggPiAxID8gdGhpcy5fZ2V0TmVzdGVkRGF0YSA6IHRoaXMuX2dldEZsYXREYXRhO1xuXHRcdHRoaXMuc2V0RmllbGRWYWx1ZSA9IHRoaXMuZmllbGRTdHJ1Y3R1cmUubGVuZ3RoID4gMSA/IHRoaXMuX3NldE5lc3RlZERhdGEgOiB0aGlzLl9zZXRGbGF0RGF0YTtcblx0fVxuXHRcblx0Ly9yZWdpc3RlciBjb2x1bW4gcG9zaXRpb24gd2l0aCBjb2x1bW4gbWFuYWdlclxuXHRyZWdpc3RlckNvbHVtblBvc2l0aW9uKGNvbHVtbil7XG5cdFx0dGhpcy5wYXJlbnQucmVnaXN0ZXJDb2x1bW5Qb3NpdGlvbihjb2x1bW4pO1xuXHR9XG5cdFxuXHQvL3JlZ2lzdGVyIGNvbHVtbiBwb3NpdGlvbiB3aXRoIGNvbHVtbiBtYW5hZ2VyXG5cdHJlZ2lzdGVyQ29sdW1uRmllbGQoY29sdW1uKXtcblx0XHR0aGlzLnBhcmVudC5yZWdpc3RlckNvbHVtbkZpZWxkKGNvbHVtbik7XG5cdH1cblx0XG5cdC8vdHJpZ2dlciBwb3NpdGlvbiByZWdpc3RyYXRpb25cblx0cmVSZWdpc3RlclBvc2l0aW9uKCl7XG5cdFx0aWYodGhpcy5pc0dyb3VwKXtcblx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGNvbHVtbi5yZVJlZ2lzdGVyUG9zaXRpb24oKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5Qb3NpdGlvbih0aGlzKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vYnVpbGQgaGVhZGVyIGVsZW1lbnRcblx0X2luaXRpYWxpemUoKXtcblx0XHR2YXIgZGVmID0gdGhpcy5kZWZpbml0aW9uO1xuXHRcdFxuXHRcdHdoaWxlKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKSB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdGlmKGRlZi5oZWFkZXJWZXJ0aWNhbCl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdmVydGljYWxcIik7XG5cdFx0XHRcblx0XHRcdGlmKGRlZi5oZWFkZXJWZXJ0aWNhbCA9PT0gXCJmbGlwXCIpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdmVydGljYWwtZmxpcFwiKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jb250ZW50RWxlbWVudCA9IHRoaXMuX2J1aWxkQ29sdW1uSGVhZGVyQ29udGVudCgpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbGVtZW50KTtcblx0XHRcblx0XHRpZih0aGlzLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5fYnVpbGRHcm91cEhlYWRlcigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX2J1aWxkQ29sdW1uSGVhZGVyKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4taW5pdFwiLCB0aGlzKTtcblx0fVxuXHRcblx0Ly9idWlsZCBoZWFkZXIgZWxlbWVudCBmb3IgaGVhZGVyXG5cdF9idWlsZENvbHVtbkhlYWRlcigpe1xuXHRcdHZhciBkZWYgPSB0aGlzLmRlZmluaXRpb247XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1sYXlvdXRcIiwgdGhpcyk7XG5cdFx0XG5cdFx0Ly9zZXQgY29sdW1uIHZpc2liaWxpdHlcblx0XHRpZih0eXBlb2YgZGVmLnZpc2libGUgIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRpZihkZWYudmlzaWJsZSl7XG5cdFx0XHRcdHRoaXMuc2hvdyh0cnVlKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5oaWRlKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvL2Fzc2lnbiBhZGRpdGlvbmFsIGNzcyBjbGFzc2VzIHRvIGNvbHVtbiBoZWFkZXJcblx0XHRpZihkZWYuY3NzQ2xhc3Mpe1xuXHRcdFx0dmFyIGNsYXNzTmFtZXMgPSBkZWYuY3NzQ2xhc3Muc3BsaXQoXCIgXCIpO1xuXHRcdFx0Y2xhc3NOYW1lcy5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuZmllbGQpe1xuXHRcdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYnVsYXRvci1maWVsZFwiLCBkZWYuZmllbGQpO1xuXHRcdH1cblx0XHRcblx0XHQvL3NldCBtaW4gd2lkdGggaWYgcHJlc2VudFxuXHRcdHRoaXMuc2V0TWluV2lkdGgocGFyc2VJbnQoZGVmLm1pbldpZHRoKSk7XG5cdFx0XG5cdFx0aWYgKGRlZi5tYXhJbml0aWFsV2lkdGgpIHtcblx0XHRcdHRoaXMubWF4SW5pdGlhbFdpZHRoID0gcGFyc2VJbnQoZGVmLm1heEluaXRpYWxXaWR0aCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5tYXhXaWR0aCl7XG5cdFx0XHR0aGlzLnNldE1heFdpZHRoKHBhcnNlSW50KGRlZi5tYXhXaWR0aCkpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0XG5cdFx0Ly9zZXQgaG9yaXpvbnRhbCB0ZXh0IGFsaWdubWVudFxuXHRcdHRoaXMuaG96QWxpZ24gPSB0aGlzLmRlZmluaXRpb24uaG96QWxpZ247XG5cdFx0dGhpcy52ZXJ0QWxpZ24gPSB0aGlzLmRlZmluaXRpb24udmVydEFsaWduO1xuXHRcdFxuXHRcdHRoaXMudGl0bGVFbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9IHRoaXMuZGVmaW5pdGlvbi5oZWFkZXJIb3pBbGlnbjtcblx0fVxuXHRcblx0X2J1aWxkQ29sdW1uSGVhZGVyQ29udGVudCgpe1xuXHRcdHZhciBjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0Y29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtY29udGVudFwiKTtcblx0XHRcblx0XHR0aGlzLnRpdGxlSG9sZGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0dGhpcy50aXRsZUhvbGRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdGl0bGUtaG9sZGVyXCIpO1xuXHRcdFxuXHRcdGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMudGl0bGVIb2xkZXJFbGVtZW50KTtcblx0XHRcblx0XHR0aGlzLnRpdGxlRWxlbWVudCA9IHRoaXMuX2J1aWxkQ29sdW1uSGVhZGVyVGl0bGUoKTtcblx0XHRcblx0XHR0aGlzLnRpdGxlSG9sZGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRpdGxlRWxlbWVudCk7XG5cdFx0XG5cdFx0cmV0dXJuIGNvbnRlbnRFbGVtZW50O1xuXHR9XG5cdFxuXHQvL2J1aWxkIHRpdGxlIGVsZW1lbnQgb2YgY29sdW1uXG5cdF9idWlsZENvbHVtbkhlYWRlclRpdGxlKCl7XG5cdFx0dmFyIGRlZiA9IHRoaXMuZGVmaW5pdGlvbjtcblx0XHRcblx0XHR2YXIgdGl0bGVIb2xkZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aXRsZUhvbGRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdGl0bGVcIik7XG5cdFx0XG5cdFx0aWYoZGVmLmhlYWRlcldvcmRXcmFwKXtcblx0XHRcdHRpdGxlSG9sZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC10aXRsZS13cmFwXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuZWRpdGFibGVUaXRsZSl7XG5cdFx0XHR2YXIgdGl0bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0dGl0bGVFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdGl0bGUtZWRpdG9yXCIpO1xuXHRcdFx0XG5cdFx0XHR0aXRsZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdHRpdGxlRWxlbWVudC5mb2N1cygpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRpdGxlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGl0bGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuXHRcdFx0XHRkZWYudGl0bGUgPSB0aXRsZUVsZW1lbnQudmFsdWU7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNvbHVtblRpdGxlQ2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aXRsZUhvbGRlckVsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGVFbGVtZW50KTtcblx0XHRcdFxuXHRcdFx0aWYoZGVmLmZpZWxkKXtcblx0XHRcdFx0dGhpcy5sYW5nQmluZChcImNvbHVtbnN8XCIgKyBkZWYuZmllbGQsICh0ZXh0KSA9PiB7XG5cdFx0XHRcdFx0dGl0bGVFbGVtZW50LnZhbHVlID0gdGV4dCB8fCAoZGVmLnRpdGxlIHx8IFwiJm5ic3A7XCIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGl0bGVFbGVtZW50LnZhbHVlICA9IGRlZi50aXRsZSB8fCBcIiZuYnNwO1wiO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoZGVmLmZpZWxkKXtcblx0XHRcdFx0dGhpcy5sYW5nQmluZChcImNvbHVtbnN8XCIgKyBkZWYuZmllbGQsICh0ZXh0KSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fZm9ybWF0Q29sdW1uSGVhZGVyVGl0bGUodGl0bGVIb2xkZXJFbGVtZW50LCB0ZXh0IHx8IChkZWYudGl0bGUgfHwgXCImbmJzcDtcIikpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5fZm9ybWF0Q29sdW1uSGVhZGVyVGl0bGUodGl0bGVIb2xkZXJFbGVtZW50LCBkZWYudGl0bGUgfHwgXCImbmJzcDtcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aXRsZUhvbGRlckVsZW1lbnQ7XG5cdH1cblx0XG5cdF9mb3JtYXRDb2x1bW5IZWFkZXJUaXRsZShlbCwgdGl0bGUpe1xuXHRcdHZhciBjb250ZW50cyA9IHRoaXMuY2hhaW4oXCJjb2x1bW4tZm9ybWF0XCIsIFt0aGlzLCB0aXRsZSwgZWxdLCBudWxsLCAoKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGl0bGU7XG5cdFx0fSk7XG5cdFx0XG5cdFx0c3dpdGNoKHR5cGVvZiBjb250ZW50cyl7XG5cdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdGlmKGNvbnRlbnRzIGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdFx0ZWwuYXBwZW5kQ2hpbGQoY29udGVudHMpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWwuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJGb3JtYXQgRXJyb3IgLSBUaXRsZSBmb3JtYXR0ZXIgaGFzIHJldHVybmVkIGEgdHlwZSBvZiBvYmplY3QsIHRoZSBvbmx5IHZhbGlkIGZvcm1hdHRlciBvYmplY3QgcmV0dXJuIGlzIGFuIGluc3RhbmNlIG9mIE5vZGUsIHRoZSBmb3JtYXR0ZXIgcmV0dXJuZWQ6XCIsIGNvbnRlbnRzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0ZWwuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRlbC5pbm5lckhUTUwgPSBjb250ZW50cztcblx0XHR9XG5cdH1cblx0XG5cdC8vYnVpbGQgaGVhZGVyIGVsZW1lbnQgZm9yIGNvbHVtbiBncm91cFxuXHRfYnVpbGRHcm91cEhlYWRlcigpe1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1ncm91cFwiKTtcblx0XHR0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImNvbHVtbmdyb3VwXCIpO1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXRpdGxlXCIsIHRoaXMuZGVmaW5pdGlvbi50aXRsZSk7XG5cdFx0XG5cdFx0Ly9hc2lnbiBhZGRpdGlvbmFsIGNzcyBjbGFzc2VzIHRvIGNvbHVtbiBoZWFkZXJcblx0XHRpZih0aGlzLmRlZmluaXRpb24uY3NzQ2xhc3Mpe1xuXHRcdFx0dmFyIGNsYXNzTmFtZXMgPSB0aGlzLmRlZmluaXRpb24uY3NzQ2xhc3Muc3BsaXQoXCIgXCIpO1xuXHRcdFx0Y2xhc3NOYW1lcy5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnRpdGxlRWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSB0aGlzLmRlZmluaXRpb24uaGVhZGVySG96QWxpZ247XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZ3JvdXBFbGVtZW50KTtcblx0fVxuXHRcblx0Ly9mbGF0IGZpZWxkIGxvb2t1cFxuXHRfZ2V0RmxhdERhdGEoZGF0YSl7XG5cdFx0cmV0dXJuIGRhdGFbdGhpcy5maWVsZF07XG5cdH1cblx0XG5cdC8vbmVzdGVkIGZpZWxkIGxvb2t1cFxuXHRfZ2V0TmVzdGVkRGF0YShkYXRhKXtcblx0XHR2YXIgZGF0YU9iaiA9IGRhdGEsXG5cdFx0c3RydWN0dXJlID0gdGhpcy5maWVsZFN0cnVjdHVyZSxcblx0XHRsZW5ndGggPSBzdHJ1Y3R1cmUubGVuZ3RoLFxuXHRcdG91dHB1dDtcblx0XHRcblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspe1xuXHRcdFx0XG5cdFx0XHRkYXRhT2JqID0gZGF0YU9ialtzdHJ1Y3R1cmVbaV1dO1xuXHRcdFx0XG5cdFx0XHRvdXRwdXQgPSBkYXRhT2JqO1xuXHRcdFx0XG5cdFx0XHRpZighZGF0YU9iail7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHQvL2ZsYXQgZmllbGQgc2V0XG5cdF9zZXRGbGF0RGF0YShkYXRhLCB2YWx1ZSl7XG5cdFx0aWYodGhpcy5maWVsZCl7XG5cdFx0XHRkYXRhW3RoaXMuZmllbGRdID0gdmFsdWU7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL25lc3RlZCBmaWVsZCBzZXRcblx0X3NldE5lc3RlZERhdGEoZGF0YSwgdmFsdWUpe1xuXHRcdHZhciBkYXRhT2JqID0gZGF0YSxcblx0XHRzdHJ1Y3R1cmUgPSB0aGlzLmZpZWxkU3RydWN0dXJlLFxuXHRcdGxlbmd0aCA9IHN0cnVjdHVyZS5sZW5ndGg7XG5cdFx0XG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXtcblx0XHRcdFxuXHRcdFx0aWYoaSA9PSBsZW5ndGggLTEpe1xuXHRcdFx0XHRkYXRhT2JqW3N0cnVjdHVyZVtpXV0gPSB2YWx1ZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoIWRhdGFPYmpbc3RydWN0dXJlW2ldXSl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdGRhdGFPYmpbc3RydWN0dXJlW2ldXSA9IHt9O1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0ZGF0YU9iaiA9IGRhdGFPYmpbc3RydWN0dXJlW2ldXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vYXR0YWNoIGNvbHVtbiB0byB0aGlzIGdyb3VwXG5cdGF0dGFjaENvbHVtbihjb2x1bW4pe1xuXHRcdGlmKHRoaXMuZ3JvdXBFbGVtZW50KXtcblx0XHRcdHRoaXMuY29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHR0aGlzLmdyb3VwRWxlbWVudC5hcHBlbmRDaGlsZChjb2x1bW4uZ2V0RWxlbWVudCgpKTtcblx0XHRcdFxuXHRcdFx0Y29sdW1uLmNvbHVtblJlbmRlcmVkKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIFdhcm5pbmcgLSBDb2x1bW4gYmVpbmcgYXR0YWNoZWQgdG8gYW5vdGhlciBjb2x1bW4gaW5zdGVhZCBvZiBjb2x1bW4gZ3JvdXBcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3ZlcnRpY2FsbHkgYWxpZ24gaGVhZGVyIGluIGNvbHVtblxuXHR2ZXJ0aWNhbEFsaWduKGFsaWdubWVudCwgaGVpZ2h0KXtcblx0XHRcblx0XHQvL2NhbGN1bGF0ZSBoZWlnaHQgb2YgY29sdW1uIGhlYWRlciBhbmQgZ3JvdXAgaG9sZGVyIGVsZW1lbnRcblx0XHR2YXIgcGFyZW50SGVpZ2h0ID0gdGhpcy5wYXJlbnQuaXNHcm91cCA/IHRoaXMucGFyZW50LmdldEdyb3VwRWxlbWVudCgpLmNsaWVudEhlaWdodCA6IChoZWlnaHQgfHwgdGhpcy5wYXJlbnQuZ2V0SGVhZGVyc0VsZW1lbnQoKS5jbGllbnRIZWlnaHQpO1xuXHRcdC8vIHZhciBwYXJlbnRIZWlnaHQgPSB0aGlzLnBhcmVudC5pc0dyb3VwID8gdGhpcy5wYXJlbnQuZ2V0R3JvdXBFbGVtZW50KCkuY2xpZW50SGVpZ2h0IDogdGhpcy5wYXJlbnQuZ2V0SGVhZGVyc0VsZW1lbnQoKS5jbGllbnRIZWlnaHQ7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IHBhcmVudEhlaWdodCArIFwicHhcIjtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLWhlaWdodFwiLCB0aGlzLCB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0KTtcblx0XHRcblx0XHRpZih0aGlzLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5ncm91cEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gKHBhcmVudEhlaWdodCAtIHRoaXMuY29udGVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArIFwicHhcIjtcblx0XHR9XG5cdFx0XG5cdFx0Ly92ZXJ0aWNhbGx5IGFsaWduIGNlbGwgY29udGVudHNcblx0XHQvLyBpZighdGhpcy5pc0dyb3VwICYmIGFsaWdubWVudCAhPT0gXCJ0b3BcIil7XG5cdFx0Ly8gXHRpZihhbGlnbm1lbnQgPT09IFwiYm90dG9tXCIpe1xuXHRcdC8vIFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUucGFkZGluZ1RvcCA9ICh0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gdGhpcy5jb250ZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpICsgXCJweFwiO1xuXHRcdC8vIFx0fWVsc2V7XG5cdFx0Ly8gXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gKCh0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gdGhpcy5jb250ZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpIC8gMikgKyBcInB4XCI7XG5cdFx0Ly8gXHR9XG5cdFx0Ly8gfVxuXHRcdFxuXHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRjb2x1bW4udmVydGljYWxBbGlnbihhbGlnbm1lbnQpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2NsZWFyIHZlcnRpY2FsIGFsaWdubWVudFxuXHRjbGVhclZlcnRpY2FsQWxpZ24oKXtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUucGFkZGluZ1RvcCA9IFwiXCI7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiXCI7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IFwiXCI7XG5cdFx0dGhpcy5ncm91cEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gXCJcIjtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0Y29sdW1uLmNsZWFyVmVydGljYWxBbGlnbigpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4taGVpZ2h0XCIsIHRoaXMsIFwiXCIpO1xuXHR9XG5cdFxuXHQvLy8vIFJldHJpZXZlIENvbHVtbiBJbmZvcm1hdGlvbiAvLy8vXG5cdC8vcmV0dXJuIGNvbHVtbiBoZWFkZXIgZWxlbWVudFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXHRcblx0Ly9yZXR1cm4gY29sdW1uIGdyb3VwIGVsZW1lbnRcblx0Z2V0R3JvdXBFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZ3JvdXBFbGVtZW50O1xuXHR9XG5cdFxuXHQvL3JldHVybiBmaWVsZCBuYW1lXG5cdGdldEZpZWxkKCl7XG5cdFx0cmV0dXJuIHRoaXMuZmllbGQ7XG5cdH1cblx0XG5cdGdldFRpdGxlRG93bmxvYWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGl0bGVEb3dubG9hZDtcblx0fVxuXHRcblx0Ly9yZXR1cm4gdGhlIGZpcnN0IGNvbHVtbiBpbiBhIGdyb3VwXG5cdGdldEZpcnN0Q29sdW1uKCl7XG5cdFx0aWYoIXRoaXMuaXNHcm91cCl7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLmNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29sdW1uc1swXS5nZXRGaXJzdENvbHVtbigpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JldHVybiB0aGUgbGFzdCBjb2x1bW4gaW4gYSBncm91cFxuXHRnZXRMYXN0Q29sdW1uKCl7XG5cdFx0aWYoIXRoaXMuaXNHcm91cCl7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLmNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29sdW1uc1t0aGlzLmNvbHVtbnMubGVuZ3RoIC0xXS5nZXRMYXN0Q29sdW1uKCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIGFsbCBjb2x1bW5zIGluIGEgZ3JvdXBcblx0Z2V0Q29sdW1ucyh0cmF2ZXJzZSl7XG5cdFx0dmFyIGNvbHVtbnMgPSBbXTtcblx0XHRcblx0XHRpZih0cmF2ZXJzZSl7XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGNvbHVtbnMucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29sdW1ucyA9IGNvbHVtbnMuY29uY2F0KGNvbHVtbi5nZXRDb2x1bW5zKHRydWUpKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbHVtbnMgPSB0aGlzLmNvbHVtbnM7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBjb2x1bW5zO1xuXHR9XG5cdFxuXHQvL3JldHVybiBhbGwgY29sdW1ucyBpbiBhIGdyb3VwXG5cdGdldENlbGxzKCl7XG5cdFx0cmV0dXJuIHRoaXMuY2VsbHM7XG5cdH1cblx0XG5cdC8vcmV0cmlldmUgdGhlIHRvcCBjb2x1bW4gaW4gYSBncm91cCBvZiBjb2x1bW5zXG5cdGdldFRvcENvbHVtbigpe1xuXHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0cmV0dXJuIHRoaXMucGFyZW50LmdldFRvcENvbHVtbigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gY29sdW1uIGRlZmluaXRpb24gb2JqZWN0XG5cdGdldERlZmluaXRpb24odXBkYXRlQnJhbmNoZXMpe1xuXHRcdHZhciBjb2xEZWZzID0gW107XG5cdFx0XG5cdFx0aWYodGhpcy5pc0dyb3VwICYmIHVwZGF0ZUJyYW5jaGVzKXtcblx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGNvbERlZnMucHVzaChjb2x1bW4uZ2V0RGVmaW5pdGlvbih0cnVlKSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kZWZpbml0aW9uLmNvbHVtbnMgPSBjb2xEZWZzO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcy5kZWZpbml0aW9uO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLyBBY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGNoZWNrQ29sdW1uVmlzaWJpbGl0eSgpe1xuXHRcdHZhciB2aXNpYmxlID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0dmlzaWJsZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYodmlzaWJsZSl7XG5cdFx0XHR0aGlzLnNob3coKTtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNvbHVtblZpc2liaWxpdHlDaGFuZ2VkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCksIGZhbHNlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc2hvdyBjb2x1bW5cblx0c2hvdyhzaWxlbnQsIHJlc3BvbnNpdmVUb2dnbGUpe1xuXHRcdGlmKCF0aGlzLnZpc2libGUpe1xuXHRcdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQuY2hlY2tDb2x1bW5WaXNpYmlsaXR5KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdFx0Y2VsbC5zaG93KCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMuaXNHcm91cCAmJiB0aGlzLndpZHRoID09PSBudWxsKXtcblx0XHRcdFx0dGhpcy5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIudmVydGljYWxBbGlnbkhlYWRlcnMoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1zaG93XCIsIHRoaXMsIHJlc3BvbnNpdmVUb2dnbGUpO1xuXHRcdFx0XG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY29sdW1uVmlzaWJpbGl0eUNoYW5nZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5tYXRjaENoaWxkV2lkdGhzKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCF0aGlzLnNpbGVudCl7XG5cdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnMoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vaGlkZSBjb2x1bW5cblx0aGlkZShzaWxlbnQsIHJlc3BvbnNpdmVUb2dnbGUpe1xuXHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHR0aGlzLnZpc2libGUgPSBmYWxzZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5jaGVja0NvbHVtblZpc2liaWxpdHkoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0XHRjZWxsLmhpZGUoKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLWhpZGVcIiwgdGhpcywgcmVzcG9uc2l2ZVRvZ2dsZSk7XG5cdFx0XHRcblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5WaXNpYmlsaXR5Q2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5tYXRjaENoaWxkV2lkdGhzKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCF0aGlzLnNpbGVudCl7XG5cdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnMoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdG1hdGNoQ2hpbGRXaWR0aHMoKXtcblx0XHR2YXIgY2hpbGRXaWR0aCA9IDA7XG5cdFx0XG5cdFx0aWYodGhpcy5jb250ZW50RWxlbWVudCAmJiB0aGlzLmNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0XHRjaGlsZFdpZHRoICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5jb250ZW50RWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9IChjaGlsZFdpZHRoIC0gMSkgKyBcInB4XCI7XG5cdFx0XHRpZiAodGhpcy50YWJsZS5pbml0aWFsaXplZCkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSBjaGlsZFdpZHRoICsgXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQubWF0Y2hDaGlsZFdpZHRocygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVtb3ZlQ2hpbGQoY2hpbGQpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuY29sdW1ucy5pbmRleE9mKGNoaWxkKTtcblx0XHRcblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHRoaXMuY29sdW1ucy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0XHRcblx0XHRpZighdGhpcy5jb2x1bW5zLmxlbmd0aCl7XG5cdFx0XHR0aGlzLmRlbGV0ZSgpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0V2lkdGgod2lkdGgpe1xuXHRcdHRoaXMud2lkdGhGaXhlZCA9IHRydWU7XG5cdFx0dGhpcy5zZXRXaWR0aEFjdHVhbCh3aWR0aCk7XG5cdH1cblx0XG5cdHNldFdpZHRoQWN0dWFsKHdpZHRoKXtcblx0XHRpZihpc05hTih3aWR0aCkpe1xuXHRcdFx0d2lkdGggPSBNYXRoLmZsb29yKCh0aGlzLnRhYmxlLmVsZW1lbnQuY2xpZW50V2lkdGgvMTAwKSAqIHBhcnNlSW50KHdpZHRoKSk7XG5cdFx0fVxuXHRcdFxuXHRcdHdpZHRoID0gTWF0aC5tYXgodGhpcy5taW5XaWR0aCwgd2lkdGgpO1xuXHRcdFxuXHRcdGlmKHRoaXMubWF4V2lkdGgpe1xuXHRcdFx0d2lkdGggPSBNYXRoLm1pbih0aGlzLm1heFdpZHRoLCB3aWR0aCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLndpZHRoU3R5bGVkID0gd2lkdGggPyB3aWR0aCArIFwicHhcIiA6IFwiXCI7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy53aWR0aFN0eWxlZDtcblx0XHRcblx0XHRpZighdGhpcy5pc0dyb3VwKXtcblx0XHRcdHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdFx0Y2VsbC5zZXRXaWR0aCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0dGhpcy5wYXJlbnQubWF0Y2hDaGlsZFdpZHRocygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLXdpZHRoXCIsIHRoaXMpO1xuXHRcdFxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiY29sdW1uV2lkdGhcIikpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY29sdW1uV2lkdGhcIiwgdGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRjaGVja0NlbGxIZWlnaHRzKCl7XG5cdFx0dmFyIHJvd3MgPSBbXTtcblx0XHRcblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRpZihjZWxsLnJvdy5oZWlnaHRJbml0aWFsaXplZCl7XG5cdFx0XHRcdGlmKGNlbGwucm93LmdldEVsZW1lbnQoKS5vZmZzZXRQYXJlbnQgIT09IG51bGwpe1xuXHRcdFx0XHRcdHJvd3MucHVzaChjZWxsLnJvdyk7XG5cdFx0XHRcdFx0Y2VsbC5yb3cuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjZWxsLnJvdy5oZWlnaHRJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRyb3cuY2FsY0hlaWdodCgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93LnNldENlbGxIZWlnaHQoKTtcblx0XHR9KTtcblx0fVxuXHRcblx0Z2V0V2lkdGgoKXtcblx0XHR2YXIgd2lkdGggPSAwO1xuXHRcdFxuXHRcdGlmKHRoaXMuaXNHcm91cCl7XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFx0d2lkdGggKz0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHdpZHRoID0gdGhpcy53aWR0aDtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9XG5cdFxuXHRnZXRMZWZ0T2Zmc2V0KCl7XG5cdFx0dmFyIG9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXRMZWZ0O1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0b2Zmc2V0ICs9IHRoaXMucGFyZW50LmdldExlZnRPZmZzZXQoKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG9mZnNldDtcblx0fVxuXHRcblx0Z2V0SGVpZ2h0KCl7XG5cdFx0cmV0dXJuIE1hdGguY2VpbCh0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KTtcblx0fVxuXHRcblx0c2V0TWluV2lkdGgobWluV2lkdGgpe1xuXHRcdGlmKHRoaXMubWF4V2lkdGggJiYgbWluV2lkdGggPiB0aGlzLm1heFdpZHRoKXtcblx0XHRcdG1pbldpZHRoID0gdGhpcy5tYXhXaWR0aDtcblx0XHRcdFxuXHRcdFx0Y29uc29sZS53YXJuKFwidGhlIG1pbldpZHRoIChcIisgbWluV2lkdGggKyBcInB4KSBmb3IgY29sdW1uICdcIiArIHRoaXMuZmllbGQgKyBcIicgY2Fubm90IGJlIGJpZ2dlciB0aGF0IGl0cyBtYXhXaWR0aCAoXCIrIHRoaXMubWF4V2lkdGhTdHlsZWQgKyBcIilcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHR0aGlzLm1pbldpZHRoU3R5bGVkID0gbWluV2lkdGggPyBtaW5XaWR0aCArIFwicHhcIiA6IFwiXCI7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLm1pbldpZHRoID0gdGhpcy5taW5XaWR0aFN0eWxlZDtcblx0XHRcblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxsLnNldE1pbldpZHRoKCk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdHNldE1heFdpZHRoKG1heFdpZHRoKXtcblx0XHRpZih0aGlzLm1pbldpZHRoICYmIG1heFdpZHRoIDwgdGhpcy5taW5XaWR0aCl7XG5cdFx0XHRtYXhXaWR0aCA9IHRoaXMubWluV2lkdGg7XG5cdFx0XHRcblx0XHRcdGNvbnNvbGUud2FybihcInRoZSBtYXhXaWR0aCAoXCIrIG1heFdpZHRoICsgXCJweCkgZm9yIGNvbHVtbiAnXCIgKyB0aGlzLmZpZWxkICsgXCInIGNhbm5vdCBiZSBzbWFsbGVyIHRoYXQgaXRzIG1pbldpZHRoIChcIisgdGhpcy5taW5XaWR0aFN0eWxlZCArIFwiKVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdHRoaXMubWF4V2lkdGhTdHlsZWQgPSBtYXhXaWR0aCA/IG1heFdpZHRoICsgXCJweFwiIDogXCJcIjtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWF4V2lkdGggPSB0aGlzLm1heFdpZHRoU3R5bGVkO1xuXHRcdFxuXHRcdHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdGNlbGwuc2V0TWF4V2lkdGgoKTtcblx0XHR9KTtcblx0fVxuXHRcblx0ZGVsZXRlKCl7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGlmKHRoaXMuaXNHcm91cCl7XG5cdFx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdFx0Y29sdW1uLmRlbGV0ZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1kZWxldGVcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdHZhciBjZWxsQ291bnQgPSB0aGlzLmNlbGxzLmxlbmd0aDtcblx0XHRcdFxuXHRcdFx0Zm9yKGxldCBpID0gMDsgaSA8IGNlbGxDb3VudDsgaSsrKXtcblx0XHRcdFx0dGhpcy5jZWxsc1swXS5kZWxldGUoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHRcdHRoaXMuY29udGVudEVsZW1lbnQgPSBmYWxzZTtcblx0XHRcdHRoaXMudGl0bGVFbGVtZW50ID0gZmFsc2U7XG5cdFx0XHR0aGlzLmdyb3VwRWxlbWVudCA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5kZXJlZ2lzdGVyQ29sdW1uKHRoaXMpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVyZW5kZXJDb2x1bW5zKHRydWUpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLWRlbGV0ZWRcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9KTtcblx0fVxuXHRcblx0Y29sdW1uUmVuZGVyZWQoKXtcblx0XHRpZih0aGlzLnRpdGxlRm9ybWF0dGVyUmVuZGVyZWQpe1xuXHRcdFx0dGhpcy50aXRsZUZvcm1hdHRlclJlbmRlcmVkKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4tcmVuZGVyZWRcIiwgdGhpcyk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gQ2VsbCBNYW5hZ2VtZW50IC8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vZ2VuZXJhdGUgY2VsbCBmb3IgdGhpcyBjb2x1bW5cblx0Z2VuZXJhdGVDZWxsKHJvdyl7XG5cdFx0dmFyIGNlbGwgPSBuZXcgQ2VsbCh0aGlzLCByb3cpO1xuXHRcdFxuXHRcdHRoaXMuY2VsbHMucHVzaChjZWxsKTtcblx0XHRcblx0XHRyZXR1cm4gY2VsbDtcblx0fVxuXHRcblx0bmV4dENvbHVtbigpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uSW5kZXgodGhpcyk7XG5cdFx0cmV0dXJuIGluZGV4ID4gLTEgPyB0aGlzLl9uZXh0VmlzaWJsZUNvbHVtbihpbmRleCArIDEpIDogZmFsc2U7XG5cdH1cblx0XG5cdF9uZXh0VmlzaWJsZUNvbHVtbihpbmRleCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb2x1bW5CeUluZGV4KGluZGV4KTtcblx0XHRyZXR1cm4gIWNvbHVtbiB8fCBjb2x1bW4udmlzaWJsZSA/IGNvbHVtbiA6IHRoaXMuX25leHRWaXNpYmxlQ29sdW1uKGluZGV4ICsgMSk7XG5cdH1cblx0XG5cdHByZXZDb2x1bW4oKXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbkluZGV4KHRoaXMpO1xuXHRcdHJldHVybiBpbmRleCA+IC0xID8gdGhpcy5fcHJldlZpc2libGVDb2x1bW4oaW5kZXggLSAxKSA6IGZhbHNlO1xuXHR9XG5cdFxuXHRfcHJldlZpc2libGVDb2x1bW4oaW5kZXgpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlJbmRleChpbmRleCk7XG5cdFx0cmV0dXJuICFjb2x1bW4gfHwgY29sdW1uLnZpc2libGUgPyBjb2x1bW4gOiB0aGlzLl9wcmV2VmlzaWJsZUNvbHVtbihpbmRleCAtIDEpO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVXaWR0aChmb3JjZSl7XG5cdFx0dGhpcy53aWR0aEZpeGVkID0gZmFsc2U7XG5cdFx0XG5cdFx0Ly9zZXQgd2lkdGggaWYgcHJlc2VudFxuXHRcdGlmKHR5cGVvZiB0aGlzLmRlZmluaXRpb24ud2lkdGggIT09IFwidW5kZWZpbmVkXCIgJiYgIWZvcmNlKXtcblx0XHRcdC8vIG1heEluaXRpYWxXaWR0aCBpZ25vcmVkIGhlcmUgYXMgd2lkdGggc3BlY2lmaWVkXG5cdFx0XHR0aGlzLnNldFdpZHRoKHRoaXMuZGVmaW5pdGlvbi53aWR0aCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4td2lkdGgtZml0LWJlZm9yZVwiLCB0aGlzKTtcblx0XHRcblx0XHR0aGlzLmZpdFRvRGF0YShmb3JjZSk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi13aWR0aC1maXQtYWZ0ZXJcIiwgdGhpcyk7XG5cdH1cblx0XG5cdC8vc2V0IGNvbHVtbiB3aWR0aCB0byBtYXhpbXVtIGNlbGwgd2lkdGggZm9yIG5vbiBncm91cCBjb2x1bW5zXG5cdGZpdFRvRGF0YShmb3JjZSl7XG5cdFx0aWYodGhpcy5pc0dyb3VwKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoIXRoaXMud2lkdGhGaXhlZCl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSBcIlwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0Y2VsbC5jbGVhcldpZHRoKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0dmFyIG1heFdpZHRoID0gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoO1xuXHRcdFxuXHRcdGlmKCF0aGlzLndpZHRoIHx8ICF0aGlzLndpZHRoRml4ZWQpe1xuXHRcdFx0dGhpcy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRcdHZhciB3aWR0aCA9IGNlbGwuZ2V0V2lkdGgoKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHdpZHRoID4gbWF4V2lkdGgpe1xuXHRcdFx0XHRcdG1heFdpZHRoID0gd2lkdGg7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihtYXhXaWR0aCl7XG5cdFx0XHRcdHZhciBzZXRUbyA9IG1heFdpZHRoICsgMTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGZvcmNlKXtcblx0XHRcdFx0XHR0aGlzLnNldFdpZHRoKHNldFRvKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmICh0aGlzLm1heEluaXRpYWxXaWR0aCAmJiAhZm9yY2UpIHtcblx0XHRcdFx0XHRcdHNldFRvID0gTWF0aC5taW4oc2V0VG8sIHRoaXMubWF4SW5pdGlhbFdpZHRoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5zZXRXaWR0aEFjdHVhbChzZXRUbyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHVwZGF0ZURlZmluaXRpb24odXBkYXRlcyl7XG5cdFx0dmFyIGRlZmluaXRpb247XG5cdFx0XG5cdFx0aWYoIXRoaXMuaXNHcm91cCl7XG5cdFx0XHRpZighdGhpcy5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRcdGRlZmluaXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmdldERlZmluaXRpb24oKSk7XG5cdFx0XHRcdGRlZmluaXRpb24gPSBPYmplY3QuYXNzaWduKGRlZmluaXRpb24sIHVwZGF0ZXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5hZGRDb2x1bW4oZGVmaW5pdGlvbiwgZmFsc2UsIHRoaXMpXG5cdFx0XHRcdFx0LnRoZW4oKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoZGVmaW5pdGlvbi5maWVsZCA9PSB0aGlzLmZpZWxkKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5maWVsZCA9IGZhbHNlOyAvL2NsZWFyIGZpZWxkIG5hbWUgdG8gcHJldmVudCBkZWxldGlvbiBvZiBkdXBsaWNhdGUgY29sdW1uIGZyb20gYXJyYXlzXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5kZWxldGUoKVxuXHRcdFx0XHRcdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDb2x1bW4gVXBkYXRlIEVycm9yIC0gVGhlIHVwZGF0ZURlZmluaXRpb24gZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgb24gdW5ncm91cGVkIGNvbHVtbnNcIik7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIkNvbHVtbiBVcGRhdGUgRXJyb3IgLSBUaGUgdXBkYXRlRGVmaW5pdGlvbiBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBvbiBjb2x1bW5zLCBub3QgY29sdW1uIGdyb3Vwc1wiKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiQ29sdW1uIFVwZGF0ZSBFcnJvciAtIFRoZSB1cGRhdGVEZWZpbml0aW9uIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIG9uIHVuZ3JvdXBlZCBjb2x1bW5zXCIpO1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFwiQ29sdW1uIFVwZGF0ZSBFcnJvciAtIFRoZSB1cGRhdGVEZWZpbml0aW9uIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIG9uIGNvbHVtbnMsIG5vdCBjb2x1bW4gZ3JvdXBzXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0ZGVsZXRlQ2VsbChjZWxsKXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoY2VsbCk7XG5cdFx0XG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLmNlbGxzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIE9iamVjdCBHZW5lcmF0aW9uIC8vLy8vLy8vLy8vLy8vLy8vXG5cdGdldENvbXBvbmVudCgpe1xuXHRcdGlmKCF0aGlzLmNvbXBvbmVudCl7XG5cdFx0XHR0aGlzLmNvbXBvbmVudCA9IG5ldyBDb2x1bW5Db21wb25lbnQodGhpcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNvbXBvbmVudDtcblx0fVxuXHRcblx0Z2V0UG9zaXRpb24oKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFZpc2libGVDb2x1bW5zQnlJbmRleCgpLmluZGV4T2YodGhpcykgKyAxO1xuXHR9XG5cdFxuXHRnZXRQYXJlbnRDb21wb25lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQgaW5zdGFuY2VvZiBDb2x1bW4gPyB0aGlzLnBhcmVudC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG59XG5cbi8vcHVibGljIHJvdyBvYmplY3RcbmNsYXNzIFJvd0NvbXBvbmVudCB7XG5cblx0Y29uc3RydWN0b3IgKHJvdyl7XG5cdFx0dGhpcy5fcm93ID0gcm93O1xuXG5cdFx0cmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgcmVjZWl2ZXIpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiB0YXJnZXRbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5fcm93LnRhYmxlLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyLmhhbmRsZShcInJvd1wiLCB0YXJnZXQuX3JvdywgbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGdldERhdGEodHJhbnNmb3JtKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LmdldERhdGEodHJhbnNmb3JtKTtcblx0fVxuXG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LmdldEVsZW1lbnQoKTtcblx0fVxuXG5cdGdldENlbGxzKCl7XG5cdFx0dmFyIGNlbGxzID0gW107XG5cblx0XHR0aGlzLl9yb3cuZ2V0Q2VsbHMoKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0Y2VsbHMucHVzaChjZWxsLmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBjZWxscztcblx0fVxuXG5cdGdldENlbGwoY29sdW1uKXtcblx0XHR2YXIgY2VsbCA9IHRoaXMuX3Jvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0cmV0dXJuIGNlbGwgPyBjZWxsLmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblxuXHRnZXRJbmRleCgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cuZ2V0RGF0YShcImRhdGFcIilbdGhpcy5fcm93LnRhYmxlLm9wdGlvbnMuaW5kZXhdO1xuXHR9XG5cblx0Z2V0UG9zaXRpb24oKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LmdldFBvc2l0aW9uKCk7XG5cdH1cblxuXHR3YXRjaFBvc2l0aW9uKGNhbGxiYWNrKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LndhdGNoUG9zaXRpb24oY2FsbGJhY2spO1xuXHR9XG5cblx0ZGVsZXRlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy5kZWxldGUoKTtcblx0fVxuXG5cdHNjcm9sbFRvKHBvc2l0aW9uLCBpZlZpc2libGUpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cudGFibGUucm93TWFuYWdlci5zY3JvbGxUb1Jvdyh0aGlzLl9yb3csIHBvc2l0aW9uLCBpZlZpc2libGUpO1xuXHR9XG5cblx0bW92ZSh0bywgYWZ0ZXIpe1xuXHRcdHRoaXMuX3Jvdy5tb3ZlVG9Sb3codG8sIGFmdGVyKTtcblx0fVxuXG5cdHVwZGF0ZShkYXRhKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LnVwZGF0ZURhdGEoZGF0YSk7XG5cdH1cblxuXHRub3JtYWxpemVIZWlnaHQoKXtcblx0XHR0aGlzLl9yb3cubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93O1xuXHR9XG5cblx0cmVmb3JtYXQoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LnJlaW5pdGlhbGl6ZSgpO1xuXHR9XG5cblx0Z2V0VGFibGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LnRhYmxlO1xuXHR9XG5cblx0Z2V0TmV4dFJvdygpe1xuXHRcdHZhciByb3cgPSB0aGlzLl9yb3cubmV4dFJvdygpO1xuXHRcdHJldHVybiByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiByb3c7XG5cdH1cblxuXHRnZXRQcmV2Um93KCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMuX3Jvdy5wcmV2Um93KCk7XG5cdFx0cmV0dXJuIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHJvdztcblx0fVxufVxuXG5jbGFzcyBSb3cgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IgKGRhdGEsIHBhcmVudCwgdHlwZSA9IFwicm93XCIpe1xuXHRcdHN1cGVyKHBhcmVudC50YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0dGhpcy5kYXRhID0ge307XG5cdFx0dGhpcy50eXBlID0gdHlwZTsgLy90eXBlIG9mIGVsZW1lbnRcblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLm1vZHVsZXMgPSB7fTsgLy9ob2xkIG1vZHVsZSB2YXJpYWJsZXM7XG5cdFx0dGhpcy5jZWxscyA9IFtdO1xuXHRcdHRoaXMuaGVpZ2h0ID0gMDsgLy9ob2xkIGVsZW1lbnQgaGVpZ2h0XG5cdFx0dGhpcy5oZWlnaHRTdHlsZWQgPSBcIlwiOyAvL2hvbGQgZWxlbWVudCBoZWlnaHQgcHJlLXN0eWxlZCB0byBpbXByb3ZlIHJlbmRlciBlZmZpY2llbmN5XG5cdFx0dGhpcy5tYW51YWxIZWlnaHQgPSBmYWxzZTsgLy91c2VyIGhhcyBtYW51YWxseSBzZXQgcm93IGhlaWdodFxuXHRcdHRoaXMub3V0ZXJIZWlnaHQgPSAwOyAvL2hvbGQgZWxlbWVudHMgb3V0ZXIgaGVpZ2h0XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlOyAvL2VsZW1lbnQgaGFzIGJlZW4gcmVuZGVyZWRcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7IC8vZWxlbWVudCBoYXMgcmVzaXplZCBjZWxscyB0byBmaXRcblx0XHR0aGlzLnBvc2l0aW9uID0gMDsgLy9zdG9yZSBwb3NpdGlvbiBvZiBlbGVtZW50IGluIHJvdyBsaXN0XG5cdFx0dGhpcy5wb3NpdGlvbldhdGNoZXJzID0gW107XG5cdFx0XG5cdFx0dGhpcy5jb21wb25lbnQgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuY3JlYXRlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuc2V0RGF0YShkYXRhKTtcblx0fVxuXHRcblx0Y3JlYXRlKCl7XG5cdFx0aWYoIXRoaXMuY3JlYXRlZCl7XG5cdFx0XHR0aGlzLmNyZWF0ZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUVsZW1lbnQoKTtcblx0XHR9XG5cdH1cblx0XG5cdGNyZWF0ZUVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvd1wiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93XCIpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IGVsO1xuXHR9XG5cdFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0dGhpcy5jcmVhdGUoKTtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cdFxuXHRkZXRhY2hFbGVtZW50KCl7XG5cdFx0aWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0Z2VuZXJhdGVFbGVtZW50KCl7XG5cdFx0dGhpcy5jcmVhdGVFbGVtZW50KCk7XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1pbml0XCIsIHRoaXMpO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZUNlbGxzKCl7XG5cdFx0dGhpcy5jZWxscyA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZW5lcmF0ZUNlbGxzKHRoaXMpO1xuXHR9XG5cdFxuXHQvL2Z1bmN0aW9ucyB0byBzZXR1cCBvbiBmaXJzdCByZW5kZXJcblx0aW5pdGlhbGl6ZShmb3JjZSwgaW5GcmFnbWVudCl7XG5cdFx0dGhpcy5jcmVhdGUoKTtcblx0XHRcblx0XHRpZighdGhpcy5pbml0aWFsaXplZCB8fCBmb3JjZSl7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGVsZXRlQ2VsbHMoKTtcblx0XHRcdFxuXHRcdFx0d2hpbGUodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctbGF5b3V0LWJlZm9yZVwiLCB0aGlzKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5nZW5lcmF0ZUNlbGxzKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIucmVuZGVyUm93Q2VsbHModGhpcywgaW5GcmFnbWVudCk7XG5cdFx0XHRcblx0XHRcdGlmKGZvcmNlKXtcblx0XHRcdFx0dGhpcy5ub3JtYWxpemVIZWlnaHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1sYXlvdXRcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXIpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMucm93Rm9ybWF0dGVyKHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWxheW91dC1hZnRlclwiLCB0aGlzKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIucmVyZW5kZXJSb3dDZWxscyh0aGlzLCBpbkZyYWdtZW50KTtcblx0XHR9XG5cdH1cblxuXHRyZW5kZXJlZCgpe1xuXHRcdHRoaXMuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHR9KTtcblx0fVxuXHRcblx0cmVpbml0aWFsaXplSGVpZ2h0KCl7XG5cdFx0dGhpcy5oZWlnaHRJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQub2Zmc2V0UGFyZW50ICE9PSBudWxsKXtcblx0XHRcdHRoaXMubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdGRlaW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0fVxuXHRcblx0ZGVpbml0aWFsaXplSGVpZ2h0KCl7XG5cdFx0dGhpcy5oZWlnaHRJbml0aWFsaXplZCA9IGZhbHNlO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemUoY2hpbGRyZW4pe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoIXRoaXMubWFudWFsSGVpZ2h0KXtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gMDtcblx0XHRcdHRoaXMuaGVpZ2h0U3R5bGVkID0gXCJcIjtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5vZmZzZXRQYXJlbnQgIT09IG51bGwpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplKHRydWUpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LXJlbGF5b3V0XCIsIHRoaXMpO1xuXHR9XG5cdFxuXHQvL2dldCBoZWlnaHRzIHdoZW4gZG9pbmcgYnVsayByb3cgc3R5bGUgY2FsY3MgaW4gdmlydHVhbCBET01cblx0Y2FsY0hlaWdodChmb3JjZSl7XG5cdFx0dmFyIG1heEhlaWdodCA9IDAsIG1pbkhlaWdodCAgPSAwO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJvd0hlaWdodCl7XG5cdFx0XHR0aGlzLmhlaWdodCA9IHRoaXMudGFibGUub3B0aW9ucy5yb3dIZWlnaHQ7XG5cdFx0fWVsc2Uge1xuXHRcdFx0bWluSGVpZ2h0ID0gdGhpcy5jYWxjTWluSGVpZ2h0KCk7XG5cdFx0XHRtYXhIZWlnaHQgPSB0aGlzLmNhbGNNYXhIZWlnaHQoKTtcblx0XHRcdFxuXHRcdFx0aWYoZm9yY2Upe1xuXHRcdFx0XHR0aGlzLmhlaWdodCA9IE1hdGgubWF4KG1heEhlaWdodCwgbWluSGVpZ2h0KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5oZWlnaHQgPSB0aGlzLm1hbnVhbEhlaWdodCA/IHRoaXMuaGVpZ2h0IDogTWF0aC5tYXgobWF4SGVpZ2h0LCBtaW5IZWlnaHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmhlaWdodFN0eWxlZCA9IHRoaXMuaGVpZ2h0ID8gdGhpcy5oZWlnaHQgKyBcInB4XCIgOiBcIlwiO1xuXHRcdHRoaXMub3V0ZXJIZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHR9XG5cblx0Y2FsY01pbkhlaWdodCgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm9wdGlvbnMucmVzaXphYmxlUm93cyA/IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQgOiAwO1xuXHR9XG5cblx0Y2FsY01heEhlaWdodCgpe1xuXHRcdHZhciBtYXhIZWlnaHQgPSAwO1xuXG5cdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0dmFyIGhlaWdodCA9IGNlbGwuZ2V0SGVpZ2h0KCk7XG5cblx0XHRcdGlmKGhlaWdodCA+IG1heEhlaWdodCl7XG5cdFx0XHRcdG1heEhlaWdodCA9IGhlaWdodDtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBtYXhIZWlnaHQ7XG5cdH1cblx0XG5cdC8vc2V0IG9mIGNlbGxzXG5cdHNldENlbGxIZWlnaHQoKXtcblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxsLnNldEhlaWdodCgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuaGVpZ2h0SW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHR9XG5cdFxuXHRjbGVhckNlbGxIZWlnaHQoKXtcblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxsLmNsZWFySGVpZ2h0KCk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vbm9ybWFsaXplIHRoZSBoZWlnaHQgb2YgZWxlbWVudHMgaW4gdGhlIHJvd1xuXHRub3JtYWxpemVIZWlnaHQoZm9yY2Upe1xuXHRcdGlmKGZvcmNlICYmICF0aGlzLnRhYmxlLm9wdGlvbnMucm93SGVpZ2h0KXtcblx0XHRcdHRoaXMuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuY2FsY0hlaWdodChmb3JjZSk7XG5cdFx0XG5cdFx0dGhpcy5zZXRDZWxsSGVpZ2h0KCk7XG5cdH1cblx0XG5cdC8vc2V0IGhlaWdodCBvZiByb3dzXG5cdHNldEhlaWdodChoZWlnaHQsIGZvcmNlKXtcblx0XHRpZih0aGlzLmhlaWdodCAhPSBoZWlnaHQgfHwgZm9yY2Upe1xuXHRcdFx0XG5cdFx0XHR0aGlzLm1hbnVhbEhlaWdodCA9IHRydWU7XG5cdFx0XHRcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0dGhpcy5oZWlnaHRTdHlsZWQgPSBoZWlnaHQgPyBoZWlnaHQgKyBcInB4XCIgOiBcIlwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnNldENlbGxIZWlnaHQoKTtcblx0XHRcdFxuXHRcdFx0Ly8gdGhpcy5vdXRlckhlaWdodCA9IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpO1xuXHRcdFx0dGhpcy5vdXRlckhlaWdodCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwicm93SGVpZ2h0XCIpKXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93SGVpZ2h0XCIsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gcm93cyBvdXRlciBoZWlnaHRcblx0Z2V0SGVpZ2h0KCl7XG5cdFx0cmV0dXJuIHRoaXMub3V0ZXJIZWlnaHQ7XG5cdH1cblx0XG5cdC8vcmV0dXJuIHJvd3Mgb3V0ZXIgV2lkdGhcblx0Z2V0V2lkdGgoKXtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIENlbGwgTWFuYWdlbWVudCAvLy8vLy8vLy8vLy8vLy8vL1xuXHRkZWxldGVDZWxsKGNlbGwpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZihjZWxsKTtcblx0XHRcblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHRoaXMuY2VsbHMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gRGF0YSBNYW5hZ2VtZW50IC8vLy8vLy8vLy8vLy8vLy8vXG5cdHNldERhdGEoZGF0YSl7XG5cdFx0dGhpcy5kYXRhID0gdGhpcy5jaGFpbihcInJvdy1kYXRhLWluaXQtYmVmb3JlXCIsIFt0aGlzLCBkYXRhXSwgdW5kZWZpbmVkLCBkYXRhKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRhdGEtaW5pdC1hZnRlclwiLCB0aGlzKTtcblx0fVxuXHRcblx0Ly91cGRhdGUgdGhlIHJvd3MgZGF0YVxuXHR1cGRhdGVEYXRhKHVwZGF0ZWREYXRhKXtcblx0XHR2YXIgdmlzaWJsZSA9IHRoaXMuZWxlbWVudCAmJiBIZWxwZXJzLmVsVmlzaWJsZSh0aGlzLmVsZW1lbnQpLFxuXHRcdHRlbXBEYXRhID0ge30sXG5cdFx0bmV3Um93RGF0YTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgdXBkYXRlZERhdGEgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHR1cGRhdGVkRGF0YSA9IEpTT04ucGFyc2UodXBkYXRlZERhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRhdGEtc2F2ZS1iZWZvcmVcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZChcInJvdy1kYXRhLWNoYW5naW5nXCIpKXtcblx0XHRcdFx0dGVtcERhdGEgPSBPYmplY3QuYXNzaWduKHRlbXBEYXRhLCB0aGlzLmRhdGEpO1xuXHRcdFx0XHR0ZW1wRGF0YSA9IE9iamVjdC5hc3NpZ24odGVtcERhdGEsIHVwZGF0ZWREYXRhKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bmV3Um93RGF0YSA9IHRoaXMuY2hhaW4oXCJyb3ctZGF0YS1jaGFuZ2luZ1wiLCBbdGhpcywgdGVtcERhdGEsIHVwZGF0ZWREYXRhXSwgbnVsbCwgdXBkYXRlZERhdGEpO1xuXHRcdFx0XG5cdFx0XHQvL3NldCBkYXRhXG5cdFx0XHRmb3IgKGxldCBhdHRybmFtZSBpbiBuZXdSb3dEYXRhKSB7XG5cdFx0XHRcdHRoaXMuZGF0YVthdHRybmFtZV0gPSBuZXdSb3dEYXRhW2F0dHJuYW1lXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kYXRhLXNhdmUtYWZ0ZXJcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdC8vdXBkYXRlIGFmZmVjdGVkIGNlbGxzIG9ubHlcblx0XHRcdGZvciAobGV0IGF0dHJuYW1lIGluIHVwZGF0ZWREYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRsZXQgY29sdW1ucyA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb2x1bW5zQnlGaWVsZFJvb3QoYXR0cm5hbWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHRsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbChjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoY2VsbCl7XG5cdFx0XHRcdFx0XHRsZXQgdmFsdWUgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShuZXdSb3dEYXRhKTtcblx0XHRcdFx0XHRcdGlmKGNlbGwuZ2V0VmFsdWUoKSAhPT0gdmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRjZWxsLnNldFZhbHVlUHJvY2Vzc0RhdGEodmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYodmlzaWJsZSl7XG5cdFx0XHRcdFx0XHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vUGFydGlhbCByZWluaXRpYWxpemF0aW9uIGlmIHZpc2libGVcblx0XHRcdGlmKHZpc2libGUpe1xuXHRcdFx0XHR0aGlzLm5vcm1hbGl6ZUhlaWdodCh0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXIpe1xuXHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXIodGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLmhlaWdodCA9IDA7XG5cdFx0XHRcdHRoaXMuaGVpZ2h0U3R5bGVkID0gXCJcIjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kYXRhLWNoYW5nZWRcIiwgdGhpcywgdmlzaWJsZSwgdXBkYXRlZERhdGEpO1xuXHRcdFx0XG5cdFx0XHQvL3RoaXMucmVpbml0aWFsaXplKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd1VwZGF0ZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YUNoYW5nZWRcIikpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiLCB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGF0YSgpKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRnZXREYXRhKHRyYW5zZm9ybSl7XG5cdFx0aWYodHJhbnNmb3JtKXtcblx0XHRcdHJldHVybiB0aGlzLmNoYWluKFwicm93LWRhdGEtcmV0cmlldmVcIiwgW3RoaXMsIHRyYW5zZm9ybV0sIG51bGwsIHRoaXMuZGF0YSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmRhdGE7XG5cdH1cblx0XG5cdGdldENlbGwoY29sdW1uKXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZTtcblx0XHRcblx0XHRjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihjb2x1bW4pO1xuXHRcdFxuXHRcdGlmKCF0aGlzLmluaXRpYWxpemVkICYmIHRoaXMuY2VsbHMubGVuZ3RoID09PSAwKXtcblx0XHRcdHRoaXMuZ2VuZXJhdGVDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRtYXRjaCA9IHRoaXMuY2VsbHMuZmluZChmdW5jdGlvbihjZWxsKXtcblx0XHRcdHJldHVybiBjZWxsLmNvbHVtbiA9PT0gY29sdW1uO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxuXHRcblx0Z2V0Q2VsbEluZGV4KGZpbmRDZWxsKXtcblx0XHRyZXR1cm4gdGhpcy5jZWxscy5maW5kSW5kZXgoZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRyZXR1cm4gY2VsbCA9PT0gZmluZENlbGw7XG5cdFx0fSk7XG5cdH1cblx0XG5cdGZpbmRDZWxsKHN1YmplY3Qpe1xuXHRcdHJldHVybiB0aGlzLmNlbGxzLmZpbmQoKGNlbGwpID0+IHtcblx0XHRcdHJldHVybiBjZWxsLmVsZW1lbnQgPT09IHN1YmplY3Q7XG5cdFx0fSk7XG5cdH1cblx0XG5cdGdldENlbGxzKCl7XG5cdFx0aWYoIXRoaXMuaW5pdGlhbGl6ZWQgJiYgdGhpcy5jZWxscy5sZW5ndGggPT09IDApe1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNlbGxzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNlbGxzO1xuXHR9XG5cdFxuXHRuZXh0Um93KCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5uZXh0RGlzcGxheVJvdyh0aGlzLCB0cnVlKTtcblx0XHRyZXR1cm4gcm93IHx8IGZhbHNlO1xuXHR9XG5cdFxuXHRwcmV2Um93KCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5wcmV2RGlzcGxheVJvdyh0aGlzLCB0cnVlKTtcblx0XHRyZXR1cm4gcm93IHx8IGZhbHNlO1xuXHR9XG5cdFxuXHRtb3ZlVG9Sb3codG8sIGJlZm9yZSl7XG5cdFx0dmFyIHRvUm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3codG8pO1xuXHRcdFxuXHRcdGlmKHRvUm93KXtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93QWN0dWFsKHRoaXMsIHRvUm93LCAhYmVmb3JlKTtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWZyZXNoQWN0aXZlRGF0YShcImRpc3BsYXlcIiwgZmFsc2UsIHRydWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIHRvKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLyBBY3Rpb25zICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ZGVsZXRlKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kZWxldGVcIiwgdGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5kZWxldGVBY3R1YWwoKTtcblx0XHRcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblx0XG5cdGRlbGV0ZUFjdHVhbChibG9ja1JlZHJhdyl7XG5cdFx0dGhpcy5kZXRhY2hNb2R1bGVzKCk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmRlbGV0ZVJvdyh0aGlzLCBibG9ja1JlZHJhdyk7XG5cdFx0XG5cdFx0dGhpcy5kZWxldGVDZWxscygpO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5lbGVtZW50ID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kZWxldGVkXCIsIHRoaXMpO1xuXHR9XG5cdFxuXHRkZXRhY2hNb2R1bGVzKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kZWxldGluZ1wiLCB0aGlzKTtcblx0fVxuXHRcblx0ZGVsZXRlQ2VsbHMoKXtcblx0XHR2YXIgY2VsbENvdW50ID0gdGhpcy5jZWxscy5sZW5ndGg7XG5cdFx0XG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGNlbGxDb3VudDsgaSsrKXtcblx0XHRcdHRoaXMuY2VsbHNbMF0uZGVsZXRlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHR3aXBlKCl7XG5cdFx0dGhpcy5kZXRhY2hNb2R1bGVzKCk7XG5cdFx0dGhpcy5kZWxldGVDZWxscygpO1xuXHRcdFxuXHRcdGlmKHRoaXMuZWxlbWVudCl7XG5cdFx0XHR3aGlsZSh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLm1vZHVsZXMgPSB7fTtcblx0fVxuXG5cdGlzRGlzcGxheWVkKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmluY2x1ZGVzKHRoaXMpO1xuXHR9XG5cblx0Z2V0UG9zaXRpb24oKXtcblx0XHRyZXR1cm4gdGhpcy5pc0Rpc3BsYXllZCgpID8gdGhpcy5wb3NpdGlvbiA6IGZhbHNlO1xuXHR9XG5cblx0c2V0UG9zaXRpb24ocG9zaXRpb24pe1xuXHRcdGlmKHBvc2l0aW9uICE9IHRoaXMucG9zaXRpb24pe1xuXHRcdFx0dGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuXG5cdFx0XHR0aGlzLnBvc2l0aW9uV2F0Y2hlcnMuZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcblx0XHRcdFx0Y2FsbGJhY2sodGhpcy5wb3NpdGlvbik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR3YXRjaFBvc2l0aW9uKGNhbGxiYWNrKXtcblx0XHR0aGlzLnBvc2l0aW9uV2F0Y2hlcnMucHVzaChjYWxsYmFjayk7XG5cblx0XHRjYWxsYmFjayh0aGlzLnBvc2l0aW9uKTtcblx0fVxuXHRcblx0Z2V0R3JvdXAoKXtcblx0XHRyZXR1cm4gdGhpcy5tb2R1bGVzLmdyb3VwIHx8IGZhbHNlO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIE9iamVjdCBHZW5lcmF0aW9uIC8vLy8vLy8vLy8vLy8vLy8vXG5cdGdldENvbXBvbmVudCgpe1xuXHRcdGlmKCF0aGlzLmNvbXBvbmVudCl7XG5cdFx0XHR0aGlzLmNvbXBvbmVudCA9IG5ldyBSb3dDb21wb25lbnQodGhpcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNvbXBvbmVudDtcblx0fVxufVxuXG52YXIgZGVmYXVsdENhbGN1bGF0aW9ucyA9IHtcblx0XCJhdmdcIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSAwLFxuXHRcdHByZWNpc2lvbiA9IHR5cGVvZiBjYWxjUGFyYW1zLnByZWNpc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGNhbGNQYXJhbXMucHJlY2lzaW9uIDogMjtcblxuXHRcdGlmKHZhbHVlcy5sZW5ndGgpe1xuXHRcdFx0b3V0cHV0ID0gdmFsdWVzLnJlZHVjZShmdW5jdGlvbihzdW0sIHZhbHVlKXtcblx0XHRcdFx0cmV0dXJuIE51bWJlcihzdW0pICsgTnVtYmVyKHZhbHVlKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRvdXRwdXQgPSBvdXRwdXQgLyB2YWx1ZXMubGVuZ3RoO1xuXG5cdFx0XHRvdXRwdXQgPSBwcmVjaXNpb24gIT09IGZhbHNlID8gb3V0cHV0LnRvRml4ZWQocHJlY2lzaW9uKSA6IG91dHB1dDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcGFyc2VGbG9hdChvdXRwdXQpLnRvU3RyaW5nKCk7XG5cdH0sXG5cdFwibWF4XCI6ZnVuY3Rpb24odmFsdWVzLCBkYXRhLCBjYWxjUGFyYW1zKXtcblx0XHR2YXIgb3V0cHV0ID0gbnVsbCxcblx0XHRwcmVjaXNpb24gPSB0eXBlb2YgY2FsY1BhcmFtcy5wcmVjaXNpb24gIT09IFwidW5kZWZpbmVkXCIgPyBjYWxjUGFyYW1zLnByZWNpc2lvbiA6IGZhbHNlO1xuXG5cdFx0dmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuXG5cdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cblx0XHRcdGlmKHZhbHVlID4gb3V0cHV0IHx8IG91dHB1dCA9PT0gbnVsbCl7XG5cdFx0XHRcdG91dHB1dCA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dCAhPT0gbnVsbCA/IChwcmVjaXNpb24gIT09IGZhbHNlID8gb3V0cHV0LnRvRml4ZWQocHJlY2lzaW9uKSA6IG91dHB1dCkgOiBcIlwiO1xuXHR9LFxuXHRcIm1pblwiOmZ1bmN0aW9uKHZhbHVlcywgZGF0YSwgY2FsY1BhcmFtcyl7XG5cdFx0dmFyIG91dHB1dCA9IG51bGwsXG5cdFx0cHJlY2lzaW9uID0gdHlwZW9mIGNhbGNQYXJhbXMucHJlY2lzaW9uICE9PSBcInVuZGVmaW5lZFwiID8gY2FsY1BhcmFtcy5wcmVjaXNpb24gOiBmYWxzZTtcblxuXHRcdHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcblxuXHRcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG5cdFx0XHRpZih2YWx1ZSA8IG91dHB1dCB8fCBvdXRwdXQgPT09IG51bGwpe1xuXHRcdFx0XHRvdXRwdXQgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBvdXRwdXQgIT09IG51bGwgPyAocHJlY2lzaW9uICE9PSBmYWxzZSA/IG91dHB1dC50b0ZpeGVkKHByZWNpc2lvbikgOiBvdXRwdXQpIDogXCJcIjtcblx0fSxcblx0XCJzdW1cIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSAwLFxuXHRcdHByZWNpc2lvbiA9IHR5cGVvZiBjYWxjUGFyYW1zLnByZWNpc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGNhbGNQYXJhbXMucHJlY2lzaW9uIDogZmFsc2U7XG5cblx0XHRpZih2YWx1ZXMubGVuZ3RoKXtcblx0XHRcdHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG5cdFx0XHRcdG91dHB1dCArPSAhaXNOYU4odmFsdWUpID8gTnVtYmVyKHZhbHVlKSA6IDA7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJlY2lzaW9uICE9PSBmYWxzZSA/IG91dHB1dC50b0ZpeGVkKHByZWNpc2lvbikgOiBvdXRwdXQ7XG5cdH0sXG5cdFwiY29uY2F0XCI6ZnVuY3Rpb24odmFsdWVzLCBkYXRhLCBjYWxjUGFyYW1zKXtcblx0XHR2YXIgb3V0cHV0ID0gMDtcblxuXHRcdGlmKHZhbHVlcy5sZW5ndGgpe1xuXHRcdFx0b3V0cHV0ID0gdmFsdWVzLnJlZHVjZShmdW5jdGlvbihzdW0sIHZhbHVlKXtcblx0XHRcdFx0cmV0dXJuIFN0cmluZyhzdW0pICsgU3RyaW5nKHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH0sXG5cdFwiY291bnRcIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSAwO1xuXG5cdFx0aWYodmFsdWVzLmxlbmd0aCl7XG5cdFx0XHR2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdGlmKHZhbHVlKXtcblx0XHRcdFx0XHRvdXRwdXQgKys7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH0sXG5cdFwidW5pcXVlXCI6ZnVuY3Rpb24odmFsdWVzLCBkYXRhLCBjYWxjUGFyYW1zKXtcblx0XHR2YXIgdW5pcXVlID0gdmFsdWVzLmZpbHRlcigodmFsdWUsIGluZGV4KSA9PiB7XG5cdFx0XHRyZXR1cm4gKHZhbHVlcyB8fCB2YWx1ZSA9PT0gMCkgJiYgdmFsdWVzLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcblx0XHR9KTtcblxuXHRcdHJldHVybiB1bmlxdWUubGVuZ3RoO1xuXHR9LFxufTtcblxuY2xhc3MgQ29sdW1uQ2FsY3MgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcImNvbHVtbkNhbGNzXCI7XG5cblx0Ly9sb2FkIGRlZmF1bHRzXG5cdHN0YXRpYyBjYWxjdWxhdGlvbnMgPSBkZWZhdWx0Q2FsY3VsYXRpb25zO1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnRvcENhbGNzID0gW107XG5cdFx0dGhpcy5ib3RDYWxjcyA9IFtdO1xuXHRcdHRoaXMuZ2VuQ29sdW1uID0gZmFsc2U7XG5cdFx0dGhpcy50b3BFbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KCk7XG5cdFx0dGhpcy5ib3RFbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KCk7XG5cdFx0dGhpcy50b3BSb3cgPSBmYWxzZTtcblx0XHR0aGlzLmJvdFJvdyA9IGZhbHNlO1xuXHRcdHRoaXMudG9wSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmJvdEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5ibG9ja2VkID0gZmFsc2U7XG5cdFx0dGhpcy5yZWNhbGNBZnRlckJsb2NrID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY29sdW1uQ2FsY3NcIiwgdHJ1ZSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRvcENhbGNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRvcENhbGNQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRvcENhbGNGb3JtYXR0ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRvcENhbGNGb3JtYXR0ZXJQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImJvdHRvbUNhbGNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImJvdHRvbUNhbGNQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImJvdHRvbUNhbGNGb3JtYXR0ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImJvdHRvbUNhbGNGb3JtYXR0ZXJQYXJhbXNcIik7XG5cdH1cblx0XG5cdGNyZWF0ZUVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNhbGNzLWhvbGRlclwiKTtcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmdlbkNvbHVtbiA9IG5ldyBDb2x1bW4oe2ZpZWxkOlwidmFsdWVcIn0sIHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1jaGFuZ2VkXCIsIHRoaXMuY2VsbFZhbHVlQ2hhbmdlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbkNoZWNrLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0ZWRcIiwgdGhpcy5yb3dzVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC1ob3Jpem9udGFsXCIsIHRoaXMuc2Nyb2xsSG9yaXpvbnRhbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1hZGRlZFwiLCB0aGlzLnJvd3NVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLW1vdmVkXCIsIHRoaXMucmVjYWxjQWN0aXZlUm93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1hZGRcIiwgdGhpcy5yZWNhbGNBY3RpdmVSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1yZWZyZXNoZWRcIiwgdGhpcy5yZWNhbGNBY3RpdmVSb3dzUmVmcmVzaC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLXJlZHJhd1wiLCB0aGlzLnRhYmxlUmVkcmF3LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy12aXNpYmxlXCIsIHRoaXMudmlzaWJsZVJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGxiYXItdmVydGljYWxcIiwgdGhpcy5hZGp1c3RGb3JTY3JvbGxiYXIuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyZWRyYXctYmxvY2tlZFwiLCB0aGlzLmJsb2NrUmVkcmF3LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicmVkcmF3LXJlc3RvcmVkXCIsIHRoaXMucmVzdG9yZVJlZHJhdy5iaW5kKHRoaXMpKTtcblxuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtcmVkcmF3aW5nXCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tcmVzaXplZFwiLCB0aGlzLnJlc2l6ZUhvbGRlcldpZHRoLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXNob3dcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1oaWRlXCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRDYWxjUmVzdWx0c1wiLCB0aGlzLmdldFJlc3VsdHMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJyZWNhbGNcIiwgdGhpcy51c2VyUmVjYWxjLmJpbmQodGhpcykpO1xuXG5cblx0XHR0aGlzLnJlc2l6ZUhvbGRlcldpZHRoKCk7XG5cdH1cblxuXHRyZXNpemVIb2xkZXJXaWR0aCgpe1xuXHRcdHRoaXMudG9wRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5oZWFkZXJzRWxlbWVudC5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0fVxuXG5cdFxuXHR0YWJsZVJlZHJhdyhmb3JjZSl7XG5cdFx0dGhpcy5yZWNhbGModGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3MpO1xuXHRcdFxuXHRcdGlmKGZvcmNlKXtcblx0XHRcdHRoaXMucmVkcmF3KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRibG9ja1JlZHJhdygpe1xuXHRcdHRoaXMuYmxvY2tlZCA9IHRydWU7XG5cdFx0dGhpcy5yZWNhbGNBZnRlckJsb2NrID0gZmFsc2U7XG5cdH1cblx0XG5cdFxuXHRyZXN0b3JlUmVkcmF3KCl7XG5cdFx0dGhpcy5ibG9ja2VkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5yZWNhbGNBZnRlckJsb2NrKXtcblx0XHRcdHRoaXMucmVjYWxjQWZ0ZXJCbG9jayA9IGZhbHNlO1xuXHRcdFx0dGhpcy5yZWNhbGNBY3RpdmVSb3dzUmVmcmVzaCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0dXNlclJlY2FsYygpe1xuXHRcdHRoaXMucmVjYWxjKHRoaXMudGFibGUucm93TWFuYWdlci5hY3RpdmVSb3dzKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGJsb2NrQ2hlY2soKXtcblx0XHRpZih0aGlzLmJsb2NrZWQpe1xuXHRcdFx0dGhpcy5yZWNhbGNBZnRlckJsb2NrID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuYmxvY2tlZDtcblx0fVxuXHRcblx0dmlzaWJsZVJvd3Modmlld2FibGUsIHJvd3Mpe1xuXHRcdGlmKHRoaXMudG9wUm93KXtcblx0XHRcdHJvd3MudW5zaGlmdCh0aGlzLnRvcFJvdyk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuYm90Um93KXtcblx0XHRcdHJvd3MucHVzaCh0aGlzLmJvdFJvdyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cdFxuXHRyb3dzVXBkYXRlZChyb3cpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHRoaXMucmVjYWxjUm93R3JvdXAocm93KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnJlY2FsY0FjdGl2ZVJvd3MoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlY2FsY0FjdGl2ZVJvd3NSZWZyZXNoKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgJiYgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlU3RhcnRFeHBhbmRlZCAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUpe1xuXHRcdFx0dGhpcy5yZWNhbGNBbGwoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnJlY2FsY0FjdGl2ZVJvd3MoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlY2FsY0FjdGl2ZVJvd3MoKXtcblx0XHR0aGlzLnJlY2FsYyh0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWN0aXZlUm93cyk7XG5cdH1cblx0XG5cdGNlbGxWYWx1ZUNoYW5nZWQoY2VsbCl7XG5cdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi50b3BDYWxjIHx8IGNlbGwuY29sdW1uLmRlZmluaXRpb24uYm90dG9tQ2FsYyl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyA9PSBcInRhYmxlXCIgfHwgdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzID09IFwiYm90aFwiKXtcblx0XHRcdFx0XHR0aGlzLnJlY2FsY0FjdGl2ZVJvd3MoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwidGFibGVcIil7XG5cdFx0XHRcdFx0dGhpcy5yZWNhbGNSb3dHcm91cChjZWxsLnJvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yZWNhbGNBY3RpdmVSb3dzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQ29sdW1uQ2hlY2soY29sdW1uKXtcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi50b3BDYWxjIHx8IGNvbHVtbi5kZWZpbml0aW9uLmJvdHRvbUNhbGMpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgY29sdW1uIGNhbGNzXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgZGVmID0gY29sdW1uLmRlZmluaXRpb247XG5cdFx0XG5cdFx0dmFyIGNvbmZpZyA9IHtcblx0XHRcdHRvcENhbGNQYXJhbXM6ZGVmLnRvcENhbGNQYXJhbXMgfHwge30sXG5cdFx0XHRib3RDYWxjUGFyYW1zOmRlZi5ib3R0b21DYWxjUGFyYW1zIHx8IHt9LFxuXHRcdH07XG5cdFx0XG5cdFx0aWYoZGVmLnRvcENhbGMpe1xuXHRcdFx0XG5cdFx0XHRzd2l0Y2godHlwZW9mIGRlZi50b3BDYWxjKXtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGlmKENvbHVtbkNhbGNzLmNhbGN1bGF0aW9uc1tkZWYudG9wQ2FsY10pe1xuXHRcdFx0XHRcdFx0Y29uZmlnLnRvcENhbGMgPSBDb2x1bW5DYWxjcy5jYWxjdWxhdGlvbnNbZGVmLnRvcENhbGNdO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBDYWxjIEVycm9yIC0gTm8gc3VjaCBjYWxjdWxhdGlvbiBmb3VuZCwgaWdub3Jpbmc6IFwiLCBkZWYudG9wQ2FsYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0Y29uZmlnLnRvcENhbGMgPSBkZWYudG9wQ2FsYztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbmZpZy50b3BDYWxjKXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3MgPSBjb25maWc7XG5cdFx0XHRcdHRoaXMudG9wQ2FsY3MucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplVG9wUm93KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuYm90dG9tQ2FsYyl7XG5cdFx0XHRzd2l0Y2godHlwZW9mIGRlZi5ib3R0b21DYWxjKXtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGlmKENvbHVtbkNhbGNzLmNhbGN1bGF0aW9uc1tkZWYuYm90dG9tQ2FsY10pe1xuXHRcdFx0XHRcdFx0Y29uZmlnLmJvdENhbGMgPSBDb2x1bW5DYWxjcy5jYWxjdWxhdGlvbnNbZGVmLmJvdHRvbUNhbGNdO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBDYWxjIEVycm9yIC0gTm8gc3VjaCBjYWxjdWxhdGlvbiBmb3VuZCwgaWdub3Jpbmc6IFwiLCBkZWYuYm90dG9tQ2FsYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0Y29uZmlnLmJvdENhbGMgPSBkZWYuYm90dG9tQ2FsYztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbmZpZy5ib3RDYWxjKXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3MgPSBjb25maWc7XG5cdFx0XHRcdHRoaXMuYm90Q2FsY3MucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplQm90dG9tUm93KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdH1cblx0XG5cdC8vZHVtbXkgZnVuY3Rpb25zIHRvIGhhbmRsZSBiZWluZyBtb2NrIGNvbHVtbiBtYW5hZ2VyXG5cdHJlZ2lzdGVyQ29sdW1uRmllbGQoKXt9XG5cdFxuXHRyZW1vdmVDYWxjcygpe1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy50b3BJbml0aWFsaXplZCl7XG5cdFx0XHR0aGlzLnRvcEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLnRvcEVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnRvcEVsZW1lbnQpO1xuXHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuYm90SW5pdGlhbGl6ZWQpe1xuXHRcdFx0dGhpcy5ib3RJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5mb290ZXJSZW1vdmUodGhpcy5ib3RFbGVtZW50KTtcblx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRpZihjaGFuZ2VkKXtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZUNhbGNzKCl7XG5cdFx0aWYodGhpcy50b3BDYWxjcy5sZW5ndGgpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplVG9wUm93KCk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5ib3RDYWxjcy5sZW5ndGgpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQm90dG9tUm93KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplVG9wUm93KCl7XG5cdFx0dmFyXHRmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcblx0XHRpZighdGhpcy50b3BJbml0aWFsaXplZCl7XG5cblx0XHRcdGZyYWdtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG5cdFx0XHRmcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRvcEVsZW1lbnQpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29udGVudHNFbGVtZW50KCkuaW5zZXJ0QmVmb3JlKGZyYWdtZW50LCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuaGVhZGVyc0VsZW1lbnQubmV4dFNpYmxpbmcpO1xuXHRcdFx0dGhpcy50b3BJbml0aWFsaXplZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQm90dG9tUm93KCl7XG5cdFx0aWYoIXRoaXMuYm90SW5pdGlhbGl6ZWQpe1xuXHRcdFx0dGhpcy5mb290ZXJQcmVwZW5kKHRoaXMuYm90RWxlbWVudCk7XG5cdFx0XHR0aGlzLmJvdEluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdHNjcm9sbEhvcml6b250YWwobGVmdCl7XG5cdFx0aWYodGhpcy5ib3RJbml0aWFsaXplZCAmJiB0aGlzLmJvdFJvdyl7XG5cdFx0XHR0aGlzLmJvdEVsZW1lbnQuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWNhbGMocm93cyl7XG5cdFx0dmFyIGRhdGEsIHJvdztcblx0XHRcblx0XHRpZighdGhpcy5ibG9ja0NoZWNrKCkpe1xuXHRcdFx0aWYodGhpcy50b3BJbml0aWFsaXplZCB8fCB0aGlzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdFx0ZGF0YSA9IHRoaXMucm93c1RvRGF0YShyb3dzKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudG9wSW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdGlmKHRoaXMudG9wUm93KXtcblx0XHRcdFx0XHRcdHRoaXMudG9wUm93LmRlbGV0ZUNlbGxzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJvdyA9IHRoaXMuZ2VuZXJhdGVSb3coXCJ0b3BcIiwgZGF0YSk7XG5cdFx0XHRcdFx0dGhpcy50b3BSb3cgPSByb3c7XG5cdFx0XHRcdFx0d2hpbGUodGhpcy50b3BFbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMudG9wRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnRvcEVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0dGhpcy50b3BFbGVtZW50LmFwcGVuZENoaWxkKHJvdy5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRcdHJvdy5pbml0aWFsaXplKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRpZih0aGlzLmJvdFJvdyl7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdFJvdy5kZWxldGVDZWxscygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyb3cgPSB0aGlzLmdlbmVyYXRlUm93KFwiYm90dG9tXCIsIGRhdGEpO1xuXHRcdFx0XHRcdHRoaXMuYm90Um93ID0gcm93O1xuXHRcdFx0XHRcdHdoaWxlKHRoaXMuYm90RWxlbWVudC5maXJzdENoaWxkKSB0aGlzLmJvdEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5ib3RFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHRcdHRoaXMuYm90RWxlbWVudC5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9zZXQgcmVzaXphYmxlIGhhbmRsZXNcblx0XHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJmcm96ZW5Db2x1bW5zXCIpKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5sYXlvdXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVjYWxjUm93R3JvdXAocm93KXtcblx0XHR0aGlzLnJlY2FsY0dyb3VwKHRoaXMudGFibGUubW9kdWxlcy5ncm91cFJvd3MuZ2V0Um93R3JvdXAocm93KSk7XG5cdH1cblx0XG5cdHJlY2FsY0FsbCgpe1xuXHRcdGlmKHRoaXMudG9wQ2FsY3MubGVuZ3RoIHx8IHRoaXMuYm90Q2FsY3MubGVuZ3RoKXtcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0dGhpcy5yZWNhbGNBY3RpdmVSb3dzKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ICYmIHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPT0gXCJ0YWJsZVwiKXtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBncm91cHMgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLmdldENoaWxkR3JvdXBzKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0XHR0aGlzLnJlY2FsY0dyb3VwKGdyb3VwKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWNhbGNHcm91cChncm91cCl7XG5cdFx0dmFyIGRhdGEsIHJvd0RhdGE7XG5cdFx0XG5cdFx0aWYoIXRoaXMuYmxvY2tDaGVjaygpKXtcblx0XHRcdGlmKGdyb3VwKXtcblx0XHRcdFx0aWYoZ3JvdXAuY2FsY3Mpe1xuXHRcdFx0XHRcdGlmKGdyb3VwLmNhbGNzLmJvdHRvbSl7XG5cdFx0XHRcdFx0XHRkYXRhID0gdGhpcy5yb3dzVG9EYXRhKGdyb3VwLnJvd3MpO1xuXHRcdFx0XHRcdFx0cm93RGF0YSA9IHRoaXMuZ2VuZXJhdGVSb3dEYXRhKFwiYm90dG9tXCIsIGRhdGEpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRncm91cC5jYWxjcy5ib3R0b20udXBkYXRlRGF0YShyb3dEYXRhKTtcblx0XHRcdFx0XHRcdGdyb3VwLmNhbGNzLmJvdHRvbS5yZWluaXRpYWxpemUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoZ3JvdXAuY2FsY3MudG9wKXtcblx0XHRcdFx0XHRcdGRhdGEgPSB0aGlzLnJvd3NUb0RhdGEoZ3JvdXAucm93cyk7XG5cdFx0XHRcdFx0XHRyb3dEYXRhID0gdGhpcy5nZW5lcmF0ZVJvd0RhdGEoXCJ0b3BcIiwgZGF0YSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGdyb3VwLmNhbGNzLnRvcC51cGRhdGVEYXRhKHJvd0RhdGEpO1xuXHRcdFx0XHRcdFx0Z3JvdXAuY2FsY3MudG9wLnJlaW5pdGlhbGl6ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9nZW5lcmF0ZSB0b3Agc3RhdHMgcm93XG5cdGdlbmVyYXRlVG9wUm93KHJvd3Mpe1xuXHRcdHJldHVybiB0aGlzLmdlbmVyYXRlUm93KFwidG9wXCIsIHRoaXMucm93c1RvRGF0YShyb3dzKSk7XG5cdH1cblx0Ly9nZW5lcmF0ZSBib3R0b20gc3RhdHMgcm93XG5cdGdlbmVyYXRlQm90dG9tUm93KHJvd3Mpe1xuXHRcdHJldHVybiB0aGlzLmdlbmVyYXRlUm93KFwiYm90dG9tXCIsIHRoaXMucm93c1RvRGF0YShyb3dzKSk7XG5cdH1cblx0XG5cdHJvd3NUb0RhdGEocm93cyl7XG5cdFx0dmFyIGRhdGEgPSBbXSxcblx0XHRoYXNEYXRhVHJlZUNvbHVtbkNhbGNzID0gdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZUNoaWxkQ29sdW1uQ2FsY3MsXG5cdFx0ZGF0YVRyZWUgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZGF0YVRyZWU7XG5cblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0ZGF0YS5wdXNoKHJvdy5nZXREYXRhKCkpO1xuXG5cdFx0XHRpZihoYXNEYXRhVHJlZUNvbHVtbkNhbGNzICYmIHJvdy5tb2R1bGVzLmRhdGFUcmVlPy5vcGVuKXtcblx0XHRcdFx0dGhpcy5yb3dzVG9EYXRhKGRhdGFUcmVlLmdldEZpbHRlcmVkVHJlZUNoaWxkcmVuKHJvdykpLmZvckVhY2goZGF0YVJvdyA9Pntcblx0XHRcdFx0XHRkYXRhLnB1c2gocm93KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblx0XG5cdC8vZ2VuZXJhdGUgc3RhdHMgcm93XG5cdGdlbmVyYXRlUm93KHBvcywgZGF0YSl7XG5cdFx0dmFyIHJvd0RhdGEgPSB0aGlzLmdlbmVyYXRlUm93RGF0YShwb3MsIGRhdGEpLFxuXHRcdHJvdztcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcIm11dGF0b3JcIikpe1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLm11dGF0b3IuZGlzYWJsZSgpO1xuXHRcdH1cblx0XHRcblx0XHRyb3cgPSBuZXcgUm93KHJvd0RhdGEsIHRoaXMsIFwiY2FsY1wiKTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcIm11dGF0b3JcIikpe1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLm11dGF0b3IuZW5hYmxlKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jYWxjc1wiLCBcInRhYnVsYXRvci1jYWxjcy1cIiArIHBvcyk7XG5cdFx0XG5cdFx0cm93LmNvbXBvbmVudCA9IGZhbHNlO1xuXHRcdFxuXHRcdHJvdy5nZXRDb21wb25lbnQgPSAoKSA9PiB7XG5cdFx0XHRpZighcm93LmNvbXBvbmVudCl7XG5cdFx0XHRcdHJvdy5jb21wb25lbnQgPSBuZXcgQ2FsY0NvbXBvbmVudChyb3cpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gcm93LmNvbXBvbmVudDtcblx0XHR9O1xuXHRcdFxuXHRcdHJvdy5nZW5lcmF0ZUNlbGxzID0gKCkgPT4ge1xuXHRcdFx0XG5cdFx0XHR2YXIgY2VsbHMgPSBbXTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9zZXQgZmllbGQgbmFtZSBvZiBtb2NrIGNvbHVtblxuXHRcdFx0XHR0aGlzLmdlbkNvbHVtbi5zZXRGaWVsZChjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0XHRcdHRoaXMuZ2VuQ29sdW1uLmhvekFsaWduID0gY29sdW1uLmhvekFsaWduO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY29sdW1uLmRlZmluaXRpb25bcG9zICsgXCJDYWxjRm9ybWF0dGVyXCJdICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiZm9ybWF0XCIpKXtcblx0XHRcdFx0XHR0aGlzLmdlbkNvbHVtbi5tb2R1bGVzLmZvcm1hdCA9IHtcblx0XHRcdFx0XHRcdGZvcm1hdHRlcjogdGhpcy50YWJsZS5tb2R1bGVzLmZvcm1hdC5sb29rdXBGb3JtYXR0ZXIoY29sdW1uLmRlZmluaXRpb25bcG9zICsgXCJDYWxjRm9ybWF0dGVyXCJdKSxcblx0XHRcdFx0XHRcdHBhcmFtczogY29sdW1uLmRlZmluaXRpb25bcG9zICsgXCJDYWxjRm9ybWF0dGVyUGFyYW1zXCJdIHx8IHt9LFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLmdlbkNvbHVtbi5tb2R1bGVzLmZvcm1hdCA9IHtcblx0XHRcdFx0XHRcdGZvcm1hdHRlcjogdGhpcy50YWJsZS5tb2R1bGVzLmZvcm1hdC5sb29rdXBGb3JtYXR0ZXIoXCJwbGFpbnRleHRcIiksXG5cdFx0XHRcdFx0XHRwYXJhbXM6e31cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2Vuc3VyZSBjc3MgY2xhc3MgZGVmaW5pdGlvbiBpcyByZXBsaWNhdGVkIHRvIGNhbGN1bGF0aW9uIGNlbGxcblx0XHRcdFx0dGhpcy5nZW5Db2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcyA9IGNvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9nZW5lcmF0ZSBjZWxsIGFuZCBhc3NpZ24gdG8gY29ycmVjdCBjb2x1bW5cblx0XHRcdFx0dmFyIGNlbGwgPSBuZXcgQ2VsbCh0aGlzLmdlbkNvbHVtbiwgcm93KTtcblx0XHRcdFx0Y2VsbC5nZXRFbGVtZW50KCk7XG5cdFx0XHRcdGNlbGwuY29sdW1uID0gY29sdW1uO1xuXHRcdFx0XHRjZWxsLnNldFdpZHRoKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb2x1bW4uY2VsbHMucHVzaChjZWxsKTtcblx0XHRcdFx0Y2VsbHMucHVzaChjZWxsKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFx0Y2VsbC5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRyb3cuY2VsbHMgPSBjZWxscztcblx0XHR9O1xuXHRcdFxuXHRcdHJldHVybiByb3c7XG5cdH1cblx0XG5cdC8vZ2VuZXJhdGUgc3RhdHMgcm93XG5cdGdlbmVyYXRlUm93RGF0YShwb3MsIGRhdGEpe1xuXHRcdHZhciByb3dEYXRhID0ge30sXG5cdFx0Y2FsY3MgPSBwb3MgPT0gXCJ0b3BcIiA/IHRoaXMudG9wQ2FsY3MgOiB0aGlzLmJvdENhbGNzLFxuXHRcdHR5cGUgPSBwb3MgPT0gXCJ0b3BcIiA/IFwidG9wQ2FsY1wiIDogXCJib3RDYWxjXCIsXG5cdFx0cGFyYW1zLCBwYXJhbUtleTtcblx0XHRcblx0XHRjYWxjcy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzICYmIGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzW3R5cGVdKXtcblx0XHRcdFx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKGNvbHVtbi5nZXRGaWVsZFZhbHVlKGl0ZW0pKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRwYXJhbUtleSA9IHR5cGUgKyBcIlBhcmFtc1wiO1xuXHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgY29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3NbcGFyYW1LZXldID09PSBcImZ1bmN0aW9uXCIgPyBjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjc1twYXJhbUtleV0odmFsdWVzLCBkYXRhKSA6IGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzW3BhcmFtS2V5XTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbHVtbi5zZXRGaWVsZFZhbHVlKHJvd0RhdGEsIGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzW3R5cGVdKHZhbHVlcywgZGF0YSwgcGFyYW1zKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIHJvd0RhdGE7XG5cdH1cblx0XG5cdGhhc1RvcENhbGNzKCl7XG5cdFx0cmV0dXJuXHQhISh0aGlzLnRvcENhbGNzLmxlbmd0aCk7XG5cdH1cblx0XG5cdGhhc0JvdHRvbUNhbGNzKCl7XG5cdFx0cmV0dXJuXHQhISh0aGlzLmJvdENhbGNzLmxlbmd0aCk7XG5cdH1cblx0XG5cdC8vaGFuZGxlIHRhYmxlIHJlZHJhd1xuXHRyZWRyYXcoKXtcblx0XHRpZih0aGlzLnRvcFJvdyl7XG5cdFx0XHR0aGlzLnRvcFJvdy5ub3JtYWxpemVIZWlnaHQodHJ1ZSk7XG5cdFx0fVxuXHRcdGlmKHRoaXMuYm90Um93KXtcblx0XHRcdHRoaXMuYm90Um93Lm5vcm1hbGl6ZUhlaWdodCh0cnVlKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIHRoZSBjYWxjdWxhdGVkXG5cdGdldFJlc3VsdHMoKXtcblx0XHR2YXIgcmVzdWx0cyA9IHt9LFxuXHRcdGdyb3Vwcztcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImdyb3VwUm93c1wiKSl7XG5cdFx0XHRncm91cHMgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLmdldEdyb3Vwcyh0cnVlKTtcblx0XHRcdFxuXHRcdFx0Z3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRcdHJlc3VsdHNbZ3JvdXAuZ2V0S2V5KCldID0gdGhpcy5nZXRHcm91cFJlc3VsdHMoZ3JvdXApO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmVzdWx0cyA9IHtcblx0XHRcdFx0dG9wOiB0aGlzLnRvcFJvdyA/IHRoaXMudG9wUm93LmdldERhdGEoKSA6IHt9LFxuXHRcdFx0XHRib3R0b206IHRoaXMuYm90Um93ID8gdGhpcy5ib3RSb3cuZ2V0RGF0YSgpIDoge30sXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXHRcblx0Ly9nZXQgcmVzdWx0cyBmcm9tIGEgZ3JvdXBcblx0Z2V0R3JvdXBSZXN1bHRzKGdyb3VwKXtcblx0XHR2YXIgZ3JvdXBPYmogPSBncm91cC5fZ2V0U2VsZigpLFxuXHRcdHN1Ykdyb3VwcyA9IGdyb3VwLmdldFN1Ykdyb3VwcygpLFxuXHRcdHN1Ykdyb3VwUmVzdWx0cyA9IHt9LFxuXHRcdHJlc3VsdHMgPSB7fTtcblx0XHRcblx0XHRzdWJHcm91cHMuZm9yRWFjaCgoc3ViZ3JvdXApID0+IHtcblx0XHRcdHN1Ykdyb3VwUmVzdWx0c1tzdWJncm91cC5nZXRLZXkoKV0gPSB0aGlzLmdldEdyb3VwUmVzdWx0cyhzdWJncm91cCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmVzdWx0cyA9IHtcblx0XHRcdHRvcDogZ3JvdXBPYmouY2FsY3MudG9wID8gZ3JvdXBPYmouY2FsY3MudG9wLmdldERhdGEoKSA6IHt9LFxuXHRcdFx0Ym90dG9tOiBncm91cE9iai5jYWxjcy5ib3R0b20gPyBncm91cE9iai5jYWxjcy5ib3R0b20uZ2V0RGF0YSgpIDoge30sXG5cdFx0XHRncm91cHM6IHN1Ykdyb3VwUmVzdWx0cyxcblx0XHR9O1xuXHRcdFxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cdFxuXHRhZGp1c3RGb3JTY3JvbGxiYXIod2lkdGgpe1xuXHRcdGlmKHRoaXMuYm90Um93KXtcblx0XHRcdGlmKHRoaXMudGFibGUucnRsKXtcblx0XHRcdFx0dGhpcy5ib3RFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gd2lkdGggKyBcInB4XCI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuYm90RWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB3aWR0aCArIFwicHhcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgRGF0YVRyZWUgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcImRhdGFUcmVlXCI7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuaW5kZW50ID0gMTA7XG5cdFx0dGhpcy5maWVsZCA9IFwiXCI7XG5cdFx0dGhpcy5jb2xsYXBzZUVsID0gbnVsbDtcblx0XHR0aGlzLmV4cGFuZEVsID0gbnVsbDtcblx0XHR0aGlzLmJyYW5jaEVsID0gbnVsbDtcblx0XHR0aGlzLmVsZW1lbnRGaWVsZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zdGFydE9wZW4gPSBmdW5jdGlvbigpe307XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZVwiLCBmYWxzZSk7IC8vZW5hYmxlIGRhdGEgdHJlZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlRmlsdGVyXCIsIHRydWUpOyAvL2ZpbHRlciBjaGlsZCByb3dzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVTb3J0XCIsIHRydWUpOyAvL3NvcnQgY2hpbGQgcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlRWxlbWVudENvbHVtblwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVCcmFuY2hFbGVtZW50XCIsIHRydWUpOy8vc2hvdyBkYXRhIHRyZWUgYnJhbmNoIGVsZW1lbnRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUNoaWxkSW5kZW50XCIsIDkpOyAvL2RhdGEgdHJlZSBjaGlsZCBpbmRlbnQgaW4gcHhcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUNoaWxkRmllbGRcIiwgXCJfY2hpbGRyZW5cIik7Ly9kYXRhIHRyZSBjb2x1bW4gZmllbGQgdG8gbG9vayBmb3IgY2hpbGQgcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlQ29sbGFwc2VFbGVtZW50XCIsIGZhbHNlKTsvL2RhdGEgdHJlZSByb3cgY29sbGFwc2UgZWxlbWVudFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlRXhwYW5kRWxlbWVudFwiLCBmYWxzZSk7Ly9kYXRhIHRyZWUgcm93IGV4cGFuZCBlbGVtZW50XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVTdGFydEV4cGFuZGVkXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUNoaWxkQ29sdW1uQ2FsY3NcIiwgZmFsc2UpOy8vaW5jbHVkZSB2aXNpYmxlIGRhdGEgdHJlZSByb3dzIGluIGNvbHVtbiBjYWxjdWxhdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZVNlbGVjdFByb3BhZ2F0ZVwiLCBmYWxzZSk7Ly9zZWxlY3RpbmcgYSBwYXJlbnQgcm93IHNlbGVjdHMgaXRzIGNoaWxkcmVuXG5cblx0XHQvL3JlZ2lzdGVyIGNvbXBvbmVudCBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ0cmVlQ29sbGFwc2VcIiwgdGhpcy5jb2xsYXBzZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ0cmVlRXhwYW5kXCIsIHRoaXMuZXhwYW5kUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcInRyZWVUb2dnbGVcIiwgdGhpcy50b2dnbGVSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiZ2V0VHJlZVBhcmVudFwiLCB0aGlzLmdldFRyZWVQYXJlbnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiZ2V0VHJlZUNoaWxkcmVuXCIsIHRoaXMuZ2V0Um93Q2hpbGRyZW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiYWRkVHJlZUNoaWxkXCIsIHRoaXMuYWRkVHJlZUNoaWxkUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImlzVHJlZUV4cGFuZGVkXCIsIHRoaXMuaXNSb3dFeHBhbmRlZC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUpe1xuXHRcdFx0dmFyIGR1bW15RWwgPSBudWxsLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMudGFibGUub3B0aW9ucztcblxuXHRcdFx0dGhpcy5maWVsZCA9IG9wdGlvbnMuZGF0YVRyZWVDaGlsZEZpZWxkO1xuXHRcdFx0dGhpcy5pbmRlbnQgPSBvcHRpb25zLmRhdGFUcmVlQ2hpbGRJbmRlbnQ7XG5cblx0XHRcdGlmKHRoaXMub3B0aW9ucyhcIm1vdmFibGVSb3dzXCIpKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVGhlIG1vdmFibGVSb3dzIG9wdGlvbiBpcyBub3QgYXZhaWxhYmxlIHdpdGggZGF0YVRyZWUgZW5hYmxlZCwgbW92aW5nIG9mIGNoaWxkIHJvd3MgY291bGQgcmVzdWx0IGluIHVucHJlZGljdGFibGUgYmVoYXZpb3JcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG9wdGlvbnMuZGF0YVRyZWVCcmFuY2hFbGVtZW50KXtcblxuXHRcdFx0XHRpZihvcHRpb25zLmRhdGFUcmVlQnJhbmNoRWxlbWVudCA9PT0gdHJ1ZSl7XG5cdFx0XHRcdFx0dGhpcy5icmFuY2hFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdFx0dGhpcy5icmFuY2hFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWRhdGEtdHJlZS1icmFuY2hcIik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpZih0eXBlb2Ygb3B0aW9ucy5kYXRhVHJlZUJyYW5jaEVsZW1lbnQgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdFx0ZHVtbXlFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdFx0XHRkdW1teUVsLmlubmVySFRNTCA9IG9wdGlvbnMuZGF0YVRyZWVCcmFuY2hFbGVtZW50O1xuXHRcdFx0XHRcdFx0dGhpcy5icmFuY2hFbCA9IGR1bW15RWwuZmlyc3RDaGlsZDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmJyYW5jaEVsID0gb3B0aW9ucy5kYXRhVHJlZUJyYW5jaEVsZW1lbnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuYnJhbmNoRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHR0aGlzLmJyYW5jaEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaC1lbXB0eVwiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYob3B0aW9ucy5kYXRhVHJlZUNvbGxhcHNlRWxlbWVudCl7XG5cdFx0XHRcdGlmKHR5cGVvZiBvcHRpb25zLmRhdGFUcmVlQ29sbGFwc2VFbGVtZW50ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHRkdW1teUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0XHRkdW1teUVsLmlubmVySFRNTCA9IG9wdGlvbnMuZGF0YVRyZWVDb2xsYXBzZUVsZW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsID0gZHVtbXlFbC5maXJzdENoaWxkO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsID0gb3B0aW9ucy5kYXRhVHJlZUNvbGxhcHNlRWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbFwiKTtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsLnRhYkluZGV4ID0gMDtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsLmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz0ndGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlJz48L2Rpdj5cIjtcblx0XHRcdH1cblxuXHRcdFx0aWYob3B0aW9ucy5kYXRhVHJlZUV4cGFuZEVsZW1lbnQpe1xuXHRcdFx0XHRpZih0eXBlb2Ygb3B0aW9ucy5kYXRhVHJlZUV4cGFuZEVsZW1lbnQgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdGR1bW15RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHRcdGR1bW15RWwuaW5uZXJIVE1MID0gb3B0aW9ucy5kYXRhVHJlZUV4cGFuZEVsZW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5leHBhbmRFbCA9IGR1bW15RWwuZmlyc3RDaGlsZDtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuZXhwYW5kRWwgPSBvcHRpb25zLmRhdGFUcmVlRXhwYW5kRWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmV4cGFuZEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0dGhpcy5leHBhbmRFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sXCIpO1xuXHRcdFx0XHR0aGlzLmV4cGFuZEVsLnRhYkluZGV4ID0gMDtcblx0XHRcdFx0dGhpcy5leHBhbmRFbC5pbm5lckhUTUwgPSBcIjxkaXYgY2xhc3M9J3RhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQnPjwvZGl2PlwiO1xuXHRcdFx0fVxuXG5cblx0XHRcdHN3aXRjaCh0eXBlb2Ygb3B0aW9ucy5kYXRhVHJlZVN0YXJ0RXhwYW5kZWQpe1xuXHRcdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRcdHRoaXMuc3RhcnRPcGVuID0gZnVuY3Rpb24ocm93LCBpbmRleCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3B0aW9ucy5kYXRhVHJlZVN0YXJ0RXhwYW5kZWQ7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHR0aGlzLnN0YXJ0T3BlbiA9IG9wdGlvbnMuZGF0YVRyZWVTdGFydEV4cGFuZGVkO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhpcy5zdGFydE9wZW4gPSBmdW5jdGlvbihyb3csIGluZGV4KXtcblx0XHRcdFx0XHRcdHJldHVybiBvcHRpb25zLmRhdGFUcmVlU3RhcnRFeHBhbmRlZFtpbmRleF07XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctaW5pdFwiLCB0aGlzLmluaXRpYWxpemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1sYXlvdXQtYWZ0ZXJcIiwgdGhpcy5sYXlvdXRSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGluZ1wiLCB0aGlzLnJvd0RlbGV0aW5nLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRlZFwiLCB0aGlzLnJvd0RlbGV0ZS5iaW5kKHRoaXMpLDApO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1jaGFuZ2VkXCIsIHRoaXMucm93RGF0YUNoYW5nZWQuYmluZCh0aGlzKSwgMTApO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLXVwZGF0ZWRcIiwgdGhpcy5jZWxsVmFsdWVDaGFuZ2VkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJlZGl0LWNhbmNlbGxlZFwiLCB0aGlzLmNlbGxWYWx1ZUNoYW5nZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3Zpbmctcm93c1wiLCB0aGlzLmNvbHVtbk1vdmluZy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy5pbml0aWFsaXplRWxlbWVudEZpZWxkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdpbmdcIiwgdGhpcy50YWJsZVJlZHJhd2luZy5iaW5kKHRoaXMpKTtcblxuXHRcdFx0dGhpcy5yZWdpc3RlckRpc3BsYXlIYW5kbGVyKHRoaXMuZ2V0Um93cy5iaW5kKHRoaXMpLCAzMCk7XG5cdFx0fVxuXHR9XG5cblx0dGFibGVSZWRyYXdpbmcoZm9yY2Upe1xuXHRcdHZhciByb3dzO1xuXG5cdFx0aWYoZm9yY2Upe1xuXHRcdFx0cm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKCk7XG5cdFx0XHRcblx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHRoaXMucmVpbml0aWFsaXplUm93Q2hpbGRyZW4ocm93KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVFbGVtZW50RmllbGQoKXtcblx0XHR2YXIgZmlyc3RDb2wgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Rmlyc3RWaXNpYmxlQ29sdW1uKCk7XG5cblx0XHR0aGlzLmVsZW1lbnRGaWVsZCA9IHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZUVsZW1lbnRDb2x1bW4gfHwgKGZpcnN0Q29sID8gZmlyc3RDb2wuZmllbGQgOiBmYWxzZSk7XG5cdH1cblx0XG5cdGdldFJvd0NoaWxkcmVuKHJvdyl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VHJlZUNoaWxkcmVuKHJvdywgdHJ1ZSk7XG5cdH1cblxuXHRjb2x1bW5Nb3ZpbmcoKXtcblx0XHR2YXIgcm93cyA9IFtdO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRyb3dzID0gcm93cy5jb25jYXQodGhpcy5nZXRUcmVlQ2hpbGRyZW4ocm93LCBmYWxzZSwgdHJ1ZSkpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblxuXHRyb3dEYXRhQ2hhbmdlZChyb3csIHZpc2libGUsIHVwZGF0ZWREYXRhKXtcblx0XHRpZih0aGlzLnJlZHJhd05lZWRlZCh1cGRhdGVkRGF0YSkpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplUm93KHJvdyk7XG5cblx0XHRcdGlmKHZpc2libGUpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyhyb3cpO1xuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGNlbGxWYWx1ZUNoYW5nZWQoY2VsbCl7XG5cdFx0dmFyIGZpZWxkID0gY2VsbC5jb2x1bW4uZ2V0RmllbGQoKTtcblxuXHRcdGlmKGZpZWxkID09PSB0aGlzLmVsZW1lbnRGaWVsZCl7XG5cdFx0XHR0aGlzLmxheW91dFJvdyhjZWxsLnJvdyk7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBjaGlsZEFycmF5ID0gcm93LmdldERhdGEoKVt0aGlzLmZpZWxkXTtcblx0XHR2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY2hpbGRBcnJheSk7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBpc0FycmF5IHx8ICghaXNBcnJheSAmJiB0eXBlb2YgY2hpbGRBcnJheSA9PT0gXCJvYmplY3RcIiAmJiBjaGlsZEFycmF5ICE9PSBudWxsKTtcblxuXHRcdGlmKCFjaGlsZHJlbiAmJiByb3cubW9kdWxlcy5kYXRhVHJlZSAmJiByb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbCl7XG5cdFx0XHRyb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvdy5tb2R1bGVzLmRhdGFUcmVlLmJyYW5jaEVsKTtcblx0XHR9XG5cblx0XHRpZighY2hpbGRyZW4gJiYgcm93Lm1vZHVsZXMuZGF0YVRyZWUgJiYgcm93Lm1vZHVsZXMuZGF0YVRyZWUuY29udHJvbEVsKXtcblx0XHRcdHJvdy5tb2R1bGVzLmRhdGFUcmVlLmNvbnRyb2xFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvdy5tb2R1bGVzLmRhdGFUcmVlLmNvbnRyb2xFbCk7XG5cdFx0fVxuXG5cdFx0cm93Lm1vZHVsZXMuZGF0YVRyZWUgPSB7XG5cdFx0XHRpbmRleDogcm93Lm1vZHVsZXMuZGF0YVRyZWUgPyByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCA6IDAsXG5cdFx0XHRvcGVuOiBjaGlsZHJlbiA/IChyb3cubW9kdWxlcy5kYXRhVHJlZSA/IHJvdy5tb2R1bGVzLmRhdGFUcmVlLm9wZW4gOiB0aGlzLnN0YXJ0T3Blbihyb3cuZ2V0Q29tcG9uZW50KCksIDApKSA6IGZhbHNlLFxuXHRcdFx0Y29udHJvbEVsOiByb3cubW9kdWxlcy5kYXRhVHJlZSAmJiBjaGlsZHJlbiA/IHJvdy5tb2R1bGVzLmRhdGFUcmVlLmNvbnRyb2xFbCA6IGZhbHNlLFxuXHRcdFx0YnJhbmNoRWw6IHJvdy5tb2R1bGVzLmRhdGFUcmVlICYmIGNoaWxkcmVuID8gcm93Lm1vZHVsZXMuZGF0YVRyZWUuYnJhbmNoRWwgOiBmYWxzZSxcblx0XHRcdHBhcmVudDogcm93Lm1vZHVsZXMuZGF0YVRyZWUgPyByb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQgOiBmYWxzZSxcblx0XHRcdGNoaWxkcmVuOmNoaWxkcmVuLFxuXHRcdH07XG5cdH1cblxuXHRyZWluaXRpYWxpemVSb3dDaGlsZHJlbihyb3cpe1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuZ2V0VHJlZUNoaWxkcmVuKHJvdywgZmFsc2UsIHRydWUpO1xuXG5cdFx0Y2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCl7XG5cdFx0XHRjaGlsZC5yZWluaXRpYWxpemUodHJ1ZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRsYXlvdXRSb3cocm93KXtcblx0XHR2YXIgY2VsbCA9IHRoaXMuZWxlbWVudEZpZWxkID8gcm93LmdldENlbGwodGhpcy5lbGVtZW50RmllbGQpIDogcm93LmdldENlbGxzKClbMF0sXG5cdFx0ZWwgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0XHRjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZTtcblxuXHRcdGlmKGNvbmZpZy5icmFuY2hFbCl7XG5cdFx0XHRpZihjb25maWcuYnJhbmNoRWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdGNvbmZpZy5icmFuY2hFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbmZpZy5icmFuY2hFbCk7XG5cdFx0XHR9XG5cdFx0XHRjb25maWcuYnJhbmNoRWwgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRpZihjb25maWcuY29udHJvbEVsKXtcblx0XHRcdGlmKGNvbmZpZy5jb250cm9sRWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdGNvbmZpZy5jb250cm9sRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb25maWcuY29udHJvbEVsKTtcblx0XHRcdH1cblx0XHRcdGNvbmZpZy5jb250cm9sRWwgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmdlbmVyYXRlQ29udHJvbEVsZW1lbnQocm93LCBlbCk7XG5cblx0XHRyb3cuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdHJlZS1sZXZlbC1cIiArIGNvbmZpZy5pbmRleCk7XG5cblx0XHRpZihjb25maWcuaW5kZXgpe1xuXHRcdFx0aWYodGhpcy5icmFuY2hFbCl7XG5cdFx0XHRcdGNvbmZpZy5icmFuY2hFbCA9IHRoaXMuYnJhbmNoRWwuY2xvbmVOb2RlKHRydWUpO1xuXHRcdFx0XHRlbC5pbnNlcnRCZWZvcmUoY29uZmlnLmJyYW5jaEVsLCBlbC5maXJzdENoaWxkKTtcblxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLnJ0bCl7XG5cdFx0XHRcdFx0Y29uZmlnLmJyYW5jaEVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gKCgoY29uZmlnLmJyYW5jaEVsLm9mZnNldFdpZHRoICsgY29uZmlnLmJyYW5jaEVsLnN0eWxlLm1hcmdpbkxlZnQpICogKGNvbmZpZy5pbmRleCAtIDEpKSArIChjb25maWcuaW5kZXggKiB0aGlzLmluZGVudCkpICsgXCJweFwiO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uZmlnLmJyYW5jaEVsLnN0eWxlLm1hcmdpbkxlZnQgPSAoKChjb25maWcuYnJhbmNoRWwub2Zmc2V0V2lkdGggKyBjb25maWcuYnJhbmNoRWwuc3R5bGUubWFyZ2luUmlnaHQpICogKGNvbmZpZy5pbmRleCAtIDEpKSArIChjb25maWcuaW5kZXggKiB0aGlzLmluZGVudCkpICsgXCJweFwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cblx0XHRcdFx0aWYodGhpcy50YWJsZS5ydGwpe1xuXHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JykpICsgKGNvbmZpZy5pbmRleCAqIHRoaXMuaW5kZW50KSArIFwicHhcIjtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpKSArIChjb25maWcuaW5kZXggKiB0aGlzLmluZGVudCkgKyBcInB4XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZW5lcmF0ZUNvbnRyb2xFbGVtZW50KHJvdywgZWwpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZSxcblx0XHRvbGRDb250cm9sID0gY29uZmlnLmNvbnRyb2xFbDtcblxuXHRcdGVsID0gZWwgfHwgcm93LmdldENlbGxzKClbMF0uZ2V0RWxlbWVudCgpO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSl7XG5cblx0XHRcdGlmKGNvbmZpZy5vcGVuKXtcblx0XHRcdFx0Y29uZmlnLmNvbnRyb2xFbCA9IHRoaXMuY29sbGFwc2VFbC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdGNvbmZpZy5jb250cm9sRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR0aGlzLmNvbGxhcHNlUm93KHJvdyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25maWcuY29udHJvbEVsID0gdGhpcy5leHBhbmRFbC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdGNvbmZpZy5jb250cm9sRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR0aGlzLmV4cGFuZFJvdyhyb3cpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Y29uZmlnLmNvbnRyb2xFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYob2xkQ29udHJvbCAmJiBvbGRDb250cm9sLnBhcmVudE5vZGUgPT09IGVsKXtcblx0XHRcdFx0b2xkQ29udHJvbC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjb25maWcuY29udHJvbEVsLG9sZENvbnRyb2wpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRlbC5pbnNlcnRCZWZvcmUoY29uZmlnLmNvbnRyb2xFbCwgZWwuZmlyc3RDaGlsZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Z2V0Um93cyhyb3dzKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRyb3dzLmZvckVhY2goKHJvdywgaSkgPT4ge1xuXHRcdFx0dmFyIGNvbmZpZywgY2hpbGRyZW47XG5cblx0XHRcdG91dHB1dC5wdXNoKHJvdyk7XG5cblx0XHRcdGlmKHJvdyBpbnN0YW5jZW9mIFJvdyl7XG5cblx0XHRcdFx0cm93LmNyZWF0ZSgpO1xuXG5cdFx0XHRcdGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlO1xuXG5cdFx0XHRcdGlmKCFjb25maWcuaW5kZXggJiYgY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSl7XG5cdFx0XHRcdFx0Y2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKHJvdywgZmFsc2UsIHRydWUpO1xuXG5cdFx0XHRcdFx0Y2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcblx0XHRcdFx0XHRcdGNoaWxkLmNyZWF0ZSgpO1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goY2hpbGQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Z2V0Q2hpbGRyZW4ocm93LCBhbGxDaGlsZHJlbiwgc29ydE9ubHkpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZSxcblx0XHRjaGlsZHJlbiA9IFtdLFxuXHRcdG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSAmJiAoY29uZmlnLm9wZW4gfHwgYWxsQ2hpbGRyZW4pKXtcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGNvbmZpZy5jaGlsZHJlbikpe1xuXHRcdFx0XHRjb25maWcuY2hpbGRyZW4gPSB0aGlzLmdlbmVyYXRlQ2hpbGRyZW4ocm93KTtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJmaWx0ZXJcIikgJiYgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlRmlsdGVyKXtcblx0XHRcdFx0Y2hpbGRyZW4gPSB0aGlzLnRhYmxlLm1vZHVsZXMuZmlsdGVyLmZpbHRlcihjb25maWcuY2hpbGRyZW4pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjaGlsZHJlbiA9IGNvbmZpZy5jaGlsZHJlbjtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJzb3J0XCIpICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZVNvcnQpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuc29ydC5zb3J0KGNoaWxkcmVuLCBzb3J0T25seSk7XG5cdFx0XHR9XG5cblx0XHRcdGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGNoaWxkKTtcblxuXHRcdFx0XHR2YXIgc3ViQ2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKGNoaWxkLCBmYWxzZSwgdHJ1ZSk7XG5cblx0XHRcdFx0c3ViQ2hpbGRyZW4uZm9yRWFjaCgoc3ViKSA9PiB7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3ViKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Z2VuZXJhdGVDaGlsZHJlbihyb3cpe1xuXHRcdHZhciBjaGlsZHJlbiA9IFtdO1xuXG5cdFx0dmFyIGNoaWxkQXJyYXkgPSByb3cuZ2V0RGF0YSgpW3RoaXMuZmllbGRdO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoY2hpbGRBcnJheSkpe1xuXHRcdFx0Y2hpbGRBcnJheSA9IFtjaGlsZEFycmF5XTtcblx0XHR9XG5cblx0XHRjaGlsZEFycmF5LmZvckVhY2goKGNoaWxkRGF0YSkgPT4ge1xuXHRcdFx0dmFyIGNoaWxkUm93ID0gbmV3IFJvdyhjaGlsZERhdGEgfHwge30sIHRoaXMudGFibGUucm93TWFuYWdlcik7XG5cblx0XHRcdGNoaWxkUm93LmNyZWF0ZSgpO1xuXG5cdFx0XHRjaGlsZFJvdy5tb2R1bGVzLmRhdGFUcmVlLmluZGV4ID0gcm93Lm1vZHVsZXMuZGF0YVRyZWUuaW5kZXggKyAxO1xuXHRcdFx0Y2hpbGRSb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQgPSByb3c7XG5cblx0XHRcdGlmKGNoaWxkUm93Lm1vZHVsZXMuZGF0YVRyZWUuY2hpbGRyZW4pe1xuXHRcdFx0XHRjaGlsZFJvdy5tb2R1bGVzLmRhdGFUcmVlLm9wZW4gPSB0aGlzLnN0YXJ0T3BlbihjaGlsZFJvdy5nZXRDb21wb25lbnQoKSwgY2hpbGRSb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCk7XG5cdFx0XHR9XG5cdFx0XHRjaGlsZHJlbi5wdXNoKGNoaWxkUm93KTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBjaGlsZHJlbjtcblx0fVxuXG5cdGV4cGFuZFJvdyhyb3csIHNpbGVudCl7XG5cdFx0dmFyIGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSl7XG5cdFx0XHRjb25maWcub3BlbiA9IHRydWU7XG5cblx0XHRcdHJvdy5yZWluaXRpYWxpemUoKTtcblxuXHRcdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YVRyZWVSb3dFeHBhbmRlZFwiLCByb3cuZ2V0Q29tcG9uZW50KCksIHJvdy5tb2R1bGVzLmRhdGFUcmVlLmluZGV4KTtcblx0XHR9XG5cdH1cblxuXHRjb2xsYXBzZVJvdyhyb3cpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZTtcblxuXHRcdGlmKGNvbmZpZy5jaGlsZHJlbiAhPT0gZmFsc2Upe1xuXHRcdFx0Y29uZmlnLm9wZW4gPSBmYWxzZTtcblxuXHRcdFx0cm93LnJlaW5pdGlhbGl6ZSgpO1xuXG5cdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhVHJlZVJvd0NvbGxhcHNlZFwiLCByb3cuZ2V0Q29tcG9uZW50KCksIHJvdy5tb2R1bGVzLmRhdGFUcmVlLmluZGV4KTtcblx0XHR9XG5cdH1cblxuXHR0b2dnbGVSb3cocm93KXtcblx0XHR2YXIgY29uZmlnID0gcm93Lm1vZHVsZXMuZGF0YVRyZWU7XG5cblx0XHRpZihjb25maWcuY2hpbGRyZW4gIT09IGZhbHNlKXtcblx0XHRcdGlmKGNvbmZpZy5vcGVuKXtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZVJvdyhyb3cpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmV4cGFuZFJvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlzUm93RXhwYW5kZWQocm93KXtcblx0XHRyZXR1cm4gcm93Lm1vZHVsZXMuZGF0YVRyZWUub3Blbjtcblx0fVxuXG5cdGdldFRyZWVQYXJlbnQocm93KXtcblx0XHRyZXR1cm4gcm93Lm1vZHVsZXMuZGF0YVRyZWUucGFyZW50ID8gcm93Lm1vZHVsZXMuZGF0YVRyZWUucGFyZW50LmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblxuXHRnZXRUcmVlUGFyZW50Um9vdChyb3cpe1xuXHRcdHJldHVybiByb3cubW9kdWxlcy5kYXRhVHJlZSAmJiByb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQgPyB0aGlzLmdldFRyZWVQYXJlbnRSb290KHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCkgOiByb3c7XG5cdH1cblxuXHRnZXRGaWx0ZXJlZFRyZWVDaGlsZHJlbihyb3cpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZSxcblx0XHRvdXRwdXQgPSBbXSwgY2hpbGRyZW47XG5cblx0XHRpZihjb25maWcuY2hpbGRyZW4pe1xuXG5cdFx0XHRpZighQXJyYXkuaXNBcnJheShjb25maWcuY2hpbGRyZW4pKXtcblx0XHRcdFx0Y29uZmlnLmNoaWxkcmVuID0gdGhpcy5nZW5lcmF0ZUNoaWxkcmVuKHJvdyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZmlsdGVyXCIpICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZUZpbHRlcil7XG5cdFx0XHRcdGNoaWxkcmVuID0gdGhpcy50YWJsZS5tb2R1bGVzLmZpbHRlci5maWx0ZXIoY29uZmlnLmNoaWxkcmVuKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y2hpbGRyZW4gPSBjb25maWcuY2hpbGRyZW47XG5cdFx0XHR9XG5cblx0XHRcdGNoaWxkcmVuLmZvckVhY2goKGNoaWxkUm93KSA9PiB7XG5cdFx0XHRcdGlmKGNoaWxkUm93IGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0XHRvdXRwdXQucHVzaChjaGlsZFJvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHRyb3dEZWxldGluZyhyb3cpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZTtcblxuXHRcdGlmIChjb25maWcgJiYgY29uZmlnLmNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoY29uZmlnLmNoaWxkcmVuKSl7XG5cdFx0XHRjb25maWcuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGRSb3cpID0+IHtcblx0XHRcdFx0aWYoY2hpbGRSb3cgaW5zdGFuY2VvZiBSb3cpe1xuXHRcdFx0XHRcdGNoaWxkUm93LndpcGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cm93RGVsZXRlKHJvdyl7XG5cdFx0dmFyIHBhcmVudCA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCxcblx0XHRjaGlsZEluZGV4O1xuXG5cdFx0aWYocGFyZW50KXtcblx0XHRcdGNoaWxkSW5kZXggPSB0aGlzLmZpbmRDaGlsZEluZGV4KHJvdywgcGFyZW50KTtcblxuXHRcdFx0aWYoY2hpbGRJbmRleCAhPT0gZmFsc2Upe1xuXHRcdFx0XHRwYXJlbnQuZGF0YVt0aGlzLmZpZWxkXS5zcGxpY2UoY2hpbGRJbmRleCwgMSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFwYXJlbnQuZGF0YVt0aGlzLmZpZWxkXS5sZW5ndGgpe1xuXHRcdFx0XHRkZWxldGUgcGFyZW50LmRhdGFbdGhpcy5maWVsZF07XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVJvdyhwYXJlbnQpO1xuXHRcdFx0dGhpcy5sYXlvdXRSb3cocGFyZW50KTtcblx0XHR9XG5cblx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHR9XG5cblx0YWRkVHJlZUNoaWxkUm93KHJvdywgZGF0YSwgdG9wLCBpbmRleCl7XG5cdFx0dmFyIGNoaWxkSW5kZXggPSBmYWxzZTtcblxuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKXtcblx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KHJvdy5kYXRhW3RoaXMuZmllbGRdKSl7XG5cdFx0XHRyb3cuZGF0YVt0aGlzLmZpZWxkXSA9IFtdO1xuXG5cdFx0XHRyb3cubW9kdWxlcy5kYXRhVHJlZS5vcGVuID0gdGhpcy5zdGFydE9wZW4ocm93LmdldENvbXBvbmVudCgpLCByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCk7XG5cdFx0fVxuXG5cdFx0aWYodHlwZW9mIGluZGV4ICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGNoaWxkSW5kZXggPSB0aGlzLmZpbmRDaGlsZEluZGV4KGluZGV4LCByb3cpO1xuXG5cdFx0XHRpZihjaGlsZEluZGV4ICE9PSBmYWxzZSl7XG5cdFx0XHRcdHJvdy5kYXRhW3RoaXMuZmllbGRdLnNwbGljZSgodG9wID8gY2hpbGRJbmRleCA6IGNoaWxkSW5kZXggKyAxKSwgMCwgZGF0YSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoY2hpbGRJbmRleCA9PT0gZmFsc2Upe1xuXHRcdFx0aWYodG9wKXtcblx0XHRcdFx0cm93LmRhdGFbdGhpcy5maWVsZF0udW5zaGlmdChkYXRhKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cm93LmRhdGFbdGhpcy5maWVsZF0ucHVzaChkYXRhKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblx0XHR0aGlzLmxheW91dFJvdyhyb3cpO1xuXG5cdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlKTtcblx0fVxuXG5cdGZpbmRDaGlsZEluZGV4KHN1YmplY3QsIHBhcmVudCl7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2U7XG5cblx0XHRpZih0eXBlb2Ygc3ViamVjdCA9PSBcIm9iamVjdFwiKXtcblxuXHRcdFx0aWYoc3ViamVjdCBpbnN0YW5jZW9mIFJvdyl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyByb3cgZWxlbWVudFxuXHRcdFx0XHRtYXRjaCA9IHN1YmplY3QuZGF0YTtcblx0XHRcdH1lbHNlIGlmKHN1YmplY3QgaW5zdGFuY2VvZiBSb3dDb21wb25lbnQpe1xuXHRcdFx0XHQvL3N1YmplY3QgaXMgcHVibGljIHJvdyBjb21wb25lbnRcblx0XHRcdFx0bWF0Y2ggPSBzdWJqZWN0Ll9nZXRTZWxmKCkuZGF0YTtcblx0XHRcdH1lbHNlIGlmKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzdWJqZWN0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRpZihwYXJlbnQubW9kdWxlcy5kYXRhVHJlZSl7XG5cdFx0XHRcdFx0bWF0Y2ggPSBwYXJlbnQubW9kdWxlcy5kYXRhVHJlZS5jaGlsZHJlbi5maW5kKChjaGlsZFJvdykgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNoaWxkUm93IGluc3RhbmNlb2YgUm93ID8gY2hpbGRSb3cuZWxlbWVudCA9PT0gc3ViamVjdCA6IGZhbHNlO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0aWYobWF0Y2gpe1xuXHRcdFx0XHRcdFx0bWF0Y2ggPSBtYXRjaC5kYXRhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2UgaWYoc3ViamVjdCA9PT0gbnVsbCl7XG5cdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHR9ZWxzZSBpZih0eXBlb2Ygc3ViamVjdCA9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly9zdWJqZWN0IHNob3VsZCBiZSB0cmVhdGVkIGFzIHRoZSBpbmRleCBvZiB0aGUgcm93XG5cdFx0XHRtYXRjaCA9IHBhcmVudC5kYXRhW3RoaXMuZmllbGRdLmZpbmQoKHJvdykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gcm93LmRhdGFbdGhpcy50YWJsZS5vcHRpb25zLmluZGV4XSA9PSBzdWJqZWN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYobWF0Y2gpe1xuXG5cdFx0XHRpZihBcnJheS5pc0FycmF5KHBhcmVudC5kYXRhW3RoaXMuZmllbGRdKSl7XG5cdFx0XHRcdG1hdGNoID0gcGFyZW50LmRhdGFbdGhpcy5maWVsZF0uaW5kZXhPZihtYXRjaCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG1hdGNoID09IC0xKXtcblx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL2NhdGNoIGFsbCBmb3IgYW55IG90aGVyIHR5cGUgb2YgaW5wdXRcblxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxuXG5cdGdldFRyZWVDaGlsZHJlbihyb3csIGNvbXBvbmVudCwgcmVjdXJzZSl7XG5cdFx0dmFyIGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLFxuXHRcdG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoY29uZmlnICYmIGNvbmZpZy5jaGlsZHJlbil7XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGNvbmZpZy5jaGlsZHJlbikpe1xuXHRcdFx0XHRjb25maWcuY2hpbGRyZW4gPSB0aGlzLmdlbmVyYXRlQ2hpbGRyZW4ocm93KTtcblx0XHRcdH1cblxuXHRcdFx0Y29uZmlnLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkUm93KSA9PiB7XG5cdFx0XHRcdGlmKGNoaWxkUm93IGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0XHRvdXRwdXQucHVzaChjb21wb25lbnQgPyBjaGlsZFJvdy5nZXRDb21wb25lbnQoKSA6IGNoaWxkUm93KTtcblxuXHRcdFx0XHRcdGlmKHJlY3Vyc2Upe1xuXHRcdFx0XHRcdFx0dGhpcy5nZXRUcmVlQ2hpbGRyZW4oY2hpbGRSb3csIGNvbXBvbmVudCwgcmVjdXJzZSkuZm9yRWFjaChjaGlsZCA9PiB7XG5cdFx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKGNoaWxkKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGdldENoaWxkRmllbGQoKXtcblx0XHRyZXR1cm4gdGhpcy5maWVsZDtcblx0fVxuXG5cdHJlZHJhd05lZWRlZChkYXRhKXtcblx0XHRyZXR1cm4gKHRoaXMuZmllbGQgPyB0eXBlb2YgZGF0YVt0aGlzLmZpZWxkXSAhPT0gXCJ1bmRlZmluZWRcIiA6IGZhbHNlKSB8fCAodGhpcy5lbGVtZW50RmllbGQgPyB0eXBlb2YgZGF0YVt0aGlzLmVsZW1lbnRGaWVsZF0gIT09IFwidW5kZWZpbmVkXCIgOiBmYWxzZSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3N2JDEobGlzdCwgb3B0aW9ucyA9IHt9LCBzZXRGaWxlQ29udGVudHMpe1xuXHR2YXIgZGVsaW1pdGVyID0gb3B0aW9ucy5kZWxpbWl0ZXIgPyBvcHRpb25zLmRlbGltaXRlciA6IFwiLFwiLFxuXHRmaWxlQ29udGVudHMgPSBbXSxcblx0aGVhZGVycyA9IFtdO1xuXG5cdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0dmFyIGl0ZW0gPSBbXTtcblxuXHRcdHN3aXRjaChyb3cudHlwZSl7XG5cdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG93bmxvYWQgV2FybmluZyAtIENTViBkb3dubG9hZGVyIGNhbm5vdCBwcm9jZXNzIHJvdyBncm91cHNcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBXYXJuaW5nIC0gQ1NWIGRvd25sb2FkZXIgY2Fubm90IHByb2Nlc3MgY29sdW1uIGNhbGN1bGF0aW9uc1wiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJoZWFkZXJcIjpcblx0XHRcdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sLCBpKSA9PiB7XG5cdFx0XHRcdFx0aWYoY29sICYmIGNvbC5kZXB0aCA9PT0gMSl7XG5cdFx0XHRcdFx0XHRoZWFkZXJzW2ldID0gdHlwZW9mIGNvbC52YWx1ZSA9PSBcInVuZGVmaW5lZFwiICB8fCBjb2wudmFsdWUgPT09IG51bGwgPyBcIlwiIDogKCdcIicgKyBTdHJpbmcoY29sLnZhbHVlKS5zcGxpdCgnXCInKS5qb2luKCdcIlwiJykgKyAnXCInKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInJvd1wiOlxuXHRcdFx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblxuXHRcdFx0XHRcdGlmKGNvbCl7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCh0eXBlb2YgY29sLnZhbHVlKXtcblx0XHRcdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0XHRcdGNvbC52YWx1ZSA9IGNvbC52YWx1ZSAhPT0gbnVsbCA/IEpTT04uc3RyaW5naWZ5KGNvbC52YWx1ZSkgOiBcIlwiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdFx0XHRjb2wudmFsdWUgPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLnB1c2goJ1wiJyArIFN0cmluZyhjb2wudmFsdWUpLnNwbGl0KCdcIicpLmpvaW4oJ1wiXCInKSArICdcIicpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0ZmlsZUNvbnRlbnRzLnB1c2goaXRlbS5qb2luKGRlbGltaXRlcikpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGlmKGhlYWRlcnMubGVuZ3RoKXtcblx0XHRmaWxlQ29udGVudHMudW5zaGlmdChoZWFkZXJzLmpvaW4oZGVsaW1pdGVyKSk7XG5cdH1cblxuXHRmaWxlQ29udGVudHMgPSBmaWxlQ29udGVudHMuam9pbihcIlxcblwiKTtcblxuXHRpZihvcHRpb25zLmJvbSl7XG5cdFx0ZmlsZUNvbnRlbnRzID0gXCJcXHVmZWZmXCIgKyBmaWxlQ29udGVudHM7XG5cdH1cblxuXHRzZXRGaWxlQ29udGVudHMoZmlsZUNvbnRlbnRzLCBcInRleHQvY3N2XCIpO1xufVxuXG5mdW5jdGlvbiBqc29uJDIobGlzdCwgb3B0aW9ucywgc2V0RmlsZUNvbnRlbnRzKXtcblx0dmFyIGZpbGVDb250ZW50cyA9IFtdO1xuXG5cdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0dmFyIGl0ZW0gPSB7fTtcblxuXHRcdHN3aXRjaChyb3cudHlwZSl7XG5cdFx0XHRjYXNlIFwiaGVhZGVyXCI6XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG93bmxvYWQgV2FybmluZyAtIEpTT04gZG93bmxvYWRlciBjYW5ub3QgcHJvY2VzcyByb3cgZ3JvdXBzXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImNhbGNcIjpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG93bmxvYWQgV2FybmluZyAtIEpTT04gZG93bmxvYWRlciBjYW5ub3QgcHJvY2VzcyBjb2x1bW4gY2FsY3VsYXRpb25zXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInJvd1wiOlxuXHRcdFx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRcdFx0aXRlbVtjb2wuY29tcG9uZW50LmdldFRpdGxlRG93bmxvYWQoKSB8fCBjb2wuY29tcG9uZW50LmdldEZpZWxkKCldID0gY29sLnZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0ZmlsZUNvbnRlbnRzLnB1c2goaXRlbSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0ZmlsZUNvbnRlbnRzID0gSlNPTi5zdHJpbmdpZnkoZmlsZUNvbnRlbnRzLCBudWxsLCAnXFx0Jyk7XG5cblx0c2V0RmlsZUNvbnRlbnRzKGZpbGVDb250ZW50cywgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xufVxuXG5mdW5jdGlvbiBwZGYobGlzdCwgb3B0aW9ucyA9IHt9LCBzZXRGaWxlQ29udGVudHMpe1xuXHR2YXIgaGVhZGVyID0gW10sXG5cdGJvZHkgPSBbXSxcblx0YXV0b1RhYmxlUGFyYW1zID0ge30sXG5cdHJvd0dyb3VwU3R5bGVzID0gb3B0aW9ucy5yb3dHcm91cFN0eWxlcyB8fCB7XG5cdFx0Zm9udFN0eWxlOiBcImJvbGRcIixcblx0XHRmb250U2l6ZTogMTIsXG5cdFx0Y2VsbFBhZGRpbmc6IDYsXG5cdFx0ZmlsbENvbG9yOiAyMjAsXG5cdH0sXG5cdHJvd0NhbGNTdHlsZXMgPSBvcHRpb25zLnJvd0NhbGNTdHlsZXMgfHwge1xuXHRcdGZvbnRTdHlsZTogXCJib2xkXCIsXG5cdFx0Zm9udFNpemU6IDEwLFxuXHRcdGNlbGxQYWRkaW5nOiA0LFxuXHRcdGZpbGxDb2xvcjogMjMyLFxuXHR9LFxuXHRqc1BERlBhcmFtcyA9IG9wdGlvbnMuanNQREYgfHwge30sXG5cdHRpdGxlID0gb3B0aW9ucy50aXRsZSA/IG9wdGlvbnMudGl0bGUgOiBcIlwiLFxuXHRqc3BkZkxpYiwgZG9jO1xuXG5cdGlmKCFqc1BERlBhcmFtcy5vcmllbnRhdGlvbil7XG5cdFx0anNQREZQYXJhbXMub3JpZW50YXRpb24gPSBvcHRpb25zLm9yaWVudGF0aW9uIHx8IFwibGFuZHNjYXBlXCI7XG5cdH1cblxuXHRpZighanNQREZQYXJhbXMudW5pdCl7XG5cdFx0anNQREZQYXJhbXMudW5pdCA9IFwicHRcIjtcblx0fVxuXG5cdC8vcGFyc2Ugcm93IGxpc3Rcblx0bGlzdC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRzd2l0Y2gocm93LnR5cGUpe1xuXHRcdFx0Y2FzZSBcImhlYWRlclwiOlxuXHRcdFx0XHRoZWFkZXIucHVzaChwYXJzZVJvdyhyb3cpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJncm91cFwiOlxuXHRcdFx0XHRib2R5LnB1c2gocGFyc2VSb3cocm93LCByb3dHcm91cFN0eWxlcykpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImNhbGNcIjpcblx0XHRcdFx0Ym9keS5wdXNoKHBhcnNlUm93KHJvdywgcm93Q2FsY1N0eWxlcykpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInJvd1wiOlxuXHRcdFx0XHRib2R5LnB1c2gocGFyc2VSb3cocm93KSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gcGFyc2VSb3cocm93LCBzdHlsZXMpe1xuXHRcdHZhciByb3dEYXRhID0gW107XG5cblx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+e1xuXHRcdFx0dmFyIGNlbGw7XG5cblx0XHRcdGlmKGNvbCl7XG5cdFx0XHRcdHN3aXRjaCh0eXBlb2YgY29sLnZhbHVlKXtcblx0XHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0XHRjb2wudmFsdWUgPSBjb2wudmFsdWUgIT09IG51bGwgPyBKU09OLnN0cmluZ2lmeShjb2wudmFsdWUpIDogXCJcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRcdFx0Y29sLnZhbHVlID0gXCJcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2VsbCA9IHtcblx0XHRcdFx0XHRjb250ZW50OmNvbC52YWx1ZSxcblx0XHRcdFx0XHRjb2xTcGFuOmNvbC53aWR0aCxcblx0XHRcdFx0XHRyb3dTcGFuOmNvbC5oZWlnaHQsXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0aWYoc3R5bGVzKXtcblx0XHRcdFx0XHRjZWxsLnN0eWxlcyA9IHN0eWxlcztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJvd0RhdGEucHVzaChjZWxsKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiByb3dEYXRhO1xuXHR9XG5cblxuXHQvL2NvbmZpZ3VyZSBQREZcblx0anNwZGZMaWIgPSB0aGlzLmRlcGVuZGVuY3lSZWdpc3RyeS5sb29rdXAoXCJqc3BkZlwiLCBcImpzUERGXCIpO1xuXHRkb2MgPSBuZXcganNwZGZMaWIoanNQREZQYXJhbXMpOyAvL3NldCBkb2N1bWVudCB0byBsYW5kc2NhcGUsIGJldHRlciBmb3IgbW9zdCB0YWJsZXNcblxuXHRpZihvcHRpb25zLmF1dG9UYWJsZSl7XG5cdFx0aWYodHlwZW9mIG9wdGlvbnMuYXV0b1RhYmxlID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0YXV0b1RhYmxlUGFyYW1zID0gb3B0aW9ucy5hdXRvVGFibGUoZG9jKSB8fCB7fTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRhdXRvVGFibGVQYXJhbXMgPSBvcHRpb25zLmF1dG9UYWJsZTtcblx0XHR9XG5cdH1cblxuXHRpZih0aXRsZSl7XG5cdFx0YXV0b1RhYmxlUGFyYW1zLmRpZERyYXdQYWdlID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0ZG9jLnRleHQodGl0bGUsIDQwLCAzMCk7XG5cdFx0fTtcblx0fVxuXG5cdGF1dG9UYWJsZVBhcmFtcy5oZWFkID0gaGVhZGVyO1xuXHRhdXRvVGFibGVQYXJhbXMuYm9keSA9IGJvZHk7XG5cblx0ZG9jLmF1dG9UYWJsZShhdXRvVGFibGVQYXJhbXMpO1xuXG5cdGlmKG9wdGlvbnMuZG9jdW1lbnRQcm9jZXNzaW5nKXtcblx0XHRvcHRpb25zLmRvY3VtZW50UHJvY2Vzc2luZyhkb2MpO1xuXHR9XG5cblx0c2V0RmlsZUNvbnRlbnRzKGRvYy5vdXRwdXQoXCJhcnJheWJ1ZmZlclwiKSwgXCJhcHBsaWNhdGlvbi9wZGZcIik7XG59XG5cbmZ1bmN0aW9uIHhsc3gkMShsaXN0LCBvcHRpb25zLCBzZXRGaWxlQ29udGVudHMpe1xuXHR2YXIgc2VsZiA9IHRoaXMsXG5cdHNoZWV0TmFtZSA9IG9wdGlvbnMuc2hlZXROYW1lIHx8IFwiU2hlZXQxXCIsXG5cdFhMU1hMaWIgPSB0aGlzLmRlcGVuZGVuY3lSZWdpc3RyeS5sb29rdXAoXCJYTFNYXCIpLFxuXHR3b3JrYm9vayA9IFhMU1hMaWIudXRpbHMuYm9va19uZXcoKSxcblx0dGFibGVGZWF0dXJlcyA9IG5ldyBDb3JlRmVhdHVyZSh0aGlzKSxcblx0Y29tcHJlc3Npb24gPSAgJ2NvbXByZXNzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5jb21wcmVzcyA6IHRydWUsXG5cdHdyaXRlT3B0aW9ucyA9IG9wdGlvbnMud3JpdGVPcHRpb25zIHx8IHtib29rVHlwZToneGxzeCcsIGJvb2tTU1Q6dHJ1ZSwgY29tcHJlc3Npb259LFxuXHRvdXRwdXQ7XG5cblx0d3JpdGVPcHRpb25zLnR5cGUgPSAnYmluYXJ5JztcblxuXHR3b3JrYm9vay5TaGVldE5hbWVzID0gW107XG5cdHdvcmtib29rLlNoZWV0cyA9IHt9O1xuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2hlZXQoKXtcblx0XHR2YXIgcm93cyA9IFtdLFxuXHRcdG1lcmdlcyA9IFtdLFxuXHRcdHdvcmtzaGVldCA9IHt9LFxuXHRcdHJhbmdlID0ge3M6IHtjOjAsIHI6MH0sIGU6IHtjOihsaXN0WzBdID8gbGlzdFswXS5jb2x1bW5zLnJlZHVjZSgoYSwgYikgPT4gYSArIChiICYmIGIud2lkdGggPyBiLndpZHRoIDogMSksIDApIDogMCksIHI6bGlzdC5sZW5ndGggfX07XG5cblx0XHQvL3BhcnNlIHJvdyBsaXN0XG5cdFx0bGlzdC5mb3JFYWNoKChyb3csIGkpID0+IHtcblx0XHRcdHZhciByb3dEYXRhID0gW107XG5cblx0XHRcdHJvdy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sLCBqKXtcblxuXHRcdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRcdHJvd0RhdGEucHVzaCghKGNvbC52YWx1ZSBpbnN0YW5jZW9mIERhdGUpICYmIHR5cGVvZiBjb2wudmFsdWUgPT09IFwib2JqZWN0XCIgPyBKU09OLnN0cmluZ2lmeShjb2wudmFsdWUpIDogY29sLnZhbHVlKTtcblxuXHRcdFx0XHRcdGlmKGNvbC53aWR0aCA+IDEgfHwgY29sLmhlaWdodCA+IC0xKXtcblx0XHRcdFx0XHRcdGlmKGNvbC5oZWlnaHQgPiAxIHx8IGNvbC53aWR0aCA+IDEpe1xuXHRcdFx0XHRcdFx0XHRtZXJnZXMucHVzaCh7czp7cjppLGM6an0sZTp7cjppICsgY29sLmhlaWdodCAtIDEsYzpqICsgY29sLndpZHRoIC0gMX19KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyb3dEYXRhLnB1c2goXCJcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyb3dzLnB1c2gocm93RGF0YSk7XG5cdFx0fSk7XG5cblx0XHQvL2NvbnZlcnQgcm93cyB0byB3b3Jrc2hlZXRcblx0XHRYTFNYTGliLnV0aWxzLnNoZWV0X2FkZF9hb2Eod29ya3NoZWV0LCByb3dzKTtcblxuXHRcdHdvcmtzaGVldFsnIXJlZiddID0gWExTWExpYi51dGlscy5lbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXG5cdFx0aWYobWVyZ2VzLmxlbmd0aCl7XG5cdFx0XHR3b3Jrc2hlZXRbXCIhbWVyZ2VzXCJdID0gbWVyZ2VzO1xuXHRcdH1cblxuXHRcdHJldHVybiB3b3Jrc2hlZXQ7XG5cdH1cblxuXHRpZihvcHRpb25zLnNoZWV0T25seSl7XG5cdFx0c2V0RmlsZUNvbnRlbnRzKGdlbmVyYXRlU2hlZXQoKSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYob3B0aW9ucy5zaGVldHMpe1xuXHRcdGZvcih2YXIgc2hlZXQgaW4gb3B0aW9ucy5zaGVldHMpe1xuXG5cdFx0XHRpZihvcHRpb25zLnNoZWV0c1tzaGVldF0gPT09IHRydWUpe1xuXHRcdFx0XHR3b3JrYm9vay5TaGVldE5hbWVzLnB1c2goc2hlZXQpO1xuXHRcdFx0XHR3b3JrYm9vay5TaGVldHNbc2hlZXRdID0gZ2VuZXJhdGVTaGVldCgpO1xuXHRcdFx0fWVsc2Uge1xuXG5cdFx0XHRcdHdvcmtib29rLlNoZWV0TmFtZXMucHVzaChzaGVldCk7XG5cblx0XHRcdFx0dGFibGVGZWF0dXJlcy5jb21tc1NlbmQob3B0aW9ucy5zaGVldHNbc2hlZXRdLCBcImRvd25sb2FkXCIsIFwiaW50ZXJjZXB0XCIse1xuXHRcdFx0XHRcdHR5cGU6XCJ4bHN4XCIsXG5cdFx0XHRcdFx0b3B0aW9uczp7c2hlZXRPbmx5OnRydWV9LFxuXHRcdFx0XHRcdGFjdGl2ZTpzZWxmLmFjdGl2ZSxcblx0XHRcdFx0XHRpbnRlcmNlcHQ6ZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHR3b3JrYm9vay5TaGVldHNbc2hlZXRdID0gZGF0YTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fWVsc2Uge1xuXHRcdHdvcmtib29rLlNoZWV0TmFtZXMucHVzaChzaGVldE5hbWUpO1xuXHRcdHdvcmtib29rLlNoZWV0c1tzaGVldE5hbWVdID0gZ2VuZXJhdGVTaGVldCgpO1xuXHR9XG5cblx0aWYob3B0aW9ucy5kb2N1bWVudFByb2Nlc3Npbmcpe1xuXHRcdHdvcmtib29rID0gb3B0aW9ucy5kb2N1bWVudFByb2Nlc3Npbmcod29ya2Jvb2spO1xuXHR9XG5cblx0Ly9jb252ZXJ0IHdvcmtib29rIHRvIGJpbmFyeSBhcnJheVxuXHRmdW5jdGlvbiBzMmFiKHMpIHtcblx0XHR2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKHMubGVuZ3RoKTtcblx0XHR2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG5cdFx0Zm9yICh2YXIgaT0wOyBpIT1zLmxlbmd0aDsgKytpKSB2aWV3W2ldID0gcy5jaGFyQ29kZUF0KGkpICYgMHhGRjtcblx0XHRyZXR1cm4gYnVmO1xuXHR9XG5cblx0b3V0cHV0ID0gWExTWExpYi53cml0ZSh3b3JrYm9vaywgd3JpdGVPcHRpb25zKTtcblxuXHRzZXRGaWxlQ29udGVudHMoczJhYihvdXRwdXQpLCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKTtcbn1cblxuZnVuY3Rpb24gaHRtbCQxKGxpc3QsIG9wdGlvbnMsIHNldEZpbGVDb250ZW50cyl7XG5cdGlmKHRoaXMubW9kRXhpc3RzKFwiZXhwb3J0XCIsIHRydWUpKXtcblx0XHRzZXRGaWxlQ29udGVudHModGhpcy5tb2R1bGVzLmV4cG9ydC5nZW5lcmF0ZUhUTUxUYWJsZShsaXN0KSwgXCJ0ZXh0L2h0bWxcIik7XG5cdH1cbn1cblxuZnVuY3Rpb24ganNvbkxpbmVzIChsaXN0LCBvcHRpb25zLCBzZXRGaWxlQ29udGVudHMpIHtcblx0Y29uc3QgZmlsZUNvbnRlbnRzID0gW107XG5cblx0bGlzdC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRjb25zdCBpdGVtID0ge307XG5cblx0XHRzd2l0Y2ggKHJvdy50eXBlKSB7XG5cdFx0XHRjYXNlIFwiaGVhZGVyXCI6XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG93bmxvYWQgV2FybmluZyAtIEpTT04gZG93bmxvYWRlciBjYW5ub3QgcHJvY2VzcyByb3cgZ3JvdXBzXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImNhbGNcIjpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG93bmxvYWQgV2FybmluZyAtIEpTT04gZG93bmxvYWRlciBjYW5ub3QgcHJvY2VzcyBjb2x1bW4gY2FsY3VsYXRpb25zXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInJvd1wiOlxuXHRcdFx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0XHRpZiAoY29sKSB7XG5cdFx0XHRcdFx0XHRpdGVtW2NvbC5jb21wb25lbnQuZ2V0VGl0bGVEb3dubG9hZCgpIHx8IGNvbC5jb21wb25lbnQuZ2V0RmllbGQoKV0gPSBjb2wudmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRmaWxlQ29udGVudHMucHVzaChKU09OLnN0cmluZ2lmeShpdGVtKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0c2V0RmlsZUNvbnRlbnRzKGZpbGVDb250ZW50cy5qb2luKFwiXFxuXCIpLCBcImFwcGxpY2F0aW9uL3gtbmRqc29uXCIpO1xufVxuXG52YXIgZGVmYXVsdERvd25sb2FkZXJzID0ge1xuXHRjc3Y6Y3N2JDEsXG5cdGpzb246anNvbiQyLFxuXHRqc29uTGluZXM6anNvbkxpbmVzLFxuXHRwZGY6cGRmLFxuXHR4bHN4Onhsc3gkMSxcblx0aHRtbDpodG1sJDEsXG59O1xuXG5jbGFzcyBEb3dubG9hZCBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwiZG93bmxvYWRcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIGRvd25sb2FkZXJzID0gZGVmYXVsdERvd25sb2FkZXJzO1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkb3dubG9hZEVuY29kZXJcIiwgZnVuY3Rpb24oZGF0YSwgbWltZVR5cGUpe1xuXHRcdFx0cmV0dXJuIG5ldyBCbG9iKFtkYXRhXSx7dHlwZTptaW1lVHlwZX0pO1xuXHRcdH0pOyAvL2Z1bmN0aW9uIHRvIG1hbmlwdWxhdGUgZG93bmxvYWQgZGF0YVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRvd25sb2FkQ29uZmlnXCIsIHt9KTsgLy9kb3dubG9hZCBjb25maWdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkb3dubG9hZFJvd1JhbmdlXCIsIFwiYWN0aXZlXCIpOyAvL3Jlc3RyaWN0IGRvd25sb2FkIHRvIGFjdGl2ZSByb3dzIG9ubHlcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJkb3dubG9hZFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidGl0bGVEb3dubG9hZFwiKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmRlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZG93bmxvYWRcIiwgdGhpcy5kb3dubG9hZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImRvd25sb2FkVG9UYWJcIiwgdGhpcy5kb3dubG9hZFRvVGFiLmJpbmQodGhpcykpO1xuXHR9XG5cblx0ZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpe1xuXG5cdH1cdFxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0ZG93bmxvYWRUb1RhYih0eXBlLCBmaWxlbmFtZSwgb3B0aW9ucywgYWN0aXZlKXtcblx0XHR0aGlzLmRvd25sb2FkKHR5cGUsIGZpbGVuYW1lLCBvcHRpb25zLCBhY3RpdmUsIHRydWUpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvL3RyaWdnZXIgZmlsZSBkb3dubG9hZFxuXHRkb3dubG9hZCh0eXBlLCBmaWxlbmFtZSwgb3B0aW9ucywgcmFuZ2UsIGludGVyY2VwdENhbGxiYWNrKXtcblx0XHR2YXIgZG93bmxvYWRGdW5jID0gZmFsc2U7XG5cblx0XHRmdW5jdGlvbiBidWlsZExpbmsoZGF0YSwgbWltZSl7XG5cdFx0XHRpZihpbnRlcmNlcHRDYWxsYmFjayl7XG5cdFx0XHRcdGlmKGludGVyY2VwdENhbGxiYWNrID09PSB0cnVlKXtcblx0XHRcdFx0XHR0aGlzLnRyaWdnZXJEb3dubG9hZChkYXRhLCBtaW1lLCB0eXBlLCBmaWxlbmFtZSwgdHJ1ZSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpbnRlcmNlcHRDYWxsYmFjayhkYXRhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMudHJpZ2dlckRvd25sb2FkKGRhdGEsIG1pbWUsIHR5cGUsIGZpbGVuYW1lKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZih0eXBlb2YgdHlwZSA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0ZG93bmxvYWRGdW5jID0gdHlwZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihEb3dubG9hZC5kb3dubG9hZGVyc1t0eXBlXSl7XG5cdFx0XHRcdGRvd25sb2FkRnVuYyA9IERvd25sb2FkLmRvd25sb2FkZXJzW3R5cGVdO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBFcnJvciAtIE5vIHN1Y2ggZG93bmxvYWQgdHlwZSBmb3VuZDogXCIsIHR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKGRvd25sb2FkRnVuYyl7XG5cdFx0XHR2YXIgbGlzdCA9IHRoaXMuZ2VuZXJhdGVFeHBvcnRMaXN0KHJhbmdlKTtcblxuXHRcdFx0ZG93bmxvYWRGdW5jLmNhbGwodGhpcy50YWJsZSwgbGlzdCAsIG9wdGlvbnMgfHwge30sIGJ1aWxkTGluay5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblxuXHRnZW5lcmF0ZUV4cG9ydExpc3QocmFuZ2Upe1xuXHRcdHZhciBsaXN0ID0gdGhpcy50YWJsZS5tb2R1bGVzLmV4cG9ydC5nZW5lcmF0ZUV4cG9ydExpc3QodGhpcy50YWJsZS5vcHRpb25zLmRvd25sb2FkQ29uZmlnLCBmYWxzZSwgcmFuZ2UgfHwgdGhpcy50YWJsZS5vcHRpb25zLmRvd25sb2FkUm93UmFuZ2UsIFwiZG93bmxvYWRcIik7XG5cblx0XHQvL2Fzc2lnbiBncm91cCBoZWFkZXIgZm9ybWF0dGVyXG5cdFx0dmFyIGdyb3VwSGVhZGVyID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwSGVhZGVyRG93bmxvYWQ7XG5cblx0XHRpZihncm91cEhlYWRlciAmJiAhQXJyYXkuaXNBcnJheShncm91cEhlYWRlcikpe1xuXHRcdFx0Z3JvdXBIZWFkZXIgPSBbZ3JvdXBIZWFkZXJdO1xuXHRcdH1cblxuXHRcdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR2YXIgZ3JvdXA7XG5cblx0XHRcdGlmKHJvdy50eXBlID09PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRncm91cCA9IHJvdy5jb2x1bW5zWzBdO1xuXG5cdFx0XHRcdGlmKGdyb3VwSGVhZGVyICYmIGdyb3VwSGVhZGVyW3Jvdy5pbmRlbnRdKXtcblx0XHRcdFx0XHRncm91cC52YWx1ZSA9IGdyb3VwSGVhZGVyW3Jvdy5pbmRlbnRdKGdyb3VwLnZhbHVlLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXRSb3dDb3VudCgpLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXREYXRhKCksIHJvdy5jb21wb25lbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gbGlzdDtcblx0fVxuXG5cdHRyaWdnZXJEb3dubG9hZChkYXRhLCBtaW1lLCB0eXBlLCBmaWxlbmFtZSwgbmV3VGFiKXtcblx0XHR2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKSxcblx0XHRibG9iID0gdGhpcy50YWJsZS5vcHRpb25zLmRvd25sb2FkRW5jb2RlcihkYXRhLCBtaW1lKTtcblxuXHRcdGlmKGJsb2Ipe1xuXHRcdFx0aWYobmV3VGFiKXtcblx0XHRcdFx0d2luZG93Lm9wZW4od2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRmaWxlbmFtZSA9IGZpbGVuYW1lIHx8IFwiVGFidWxhdG9yLlwiICsgKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIgPyBcInR4dFwiIDogdHlwZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYil7XG5cdFx0XHRcdFx0bmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYmxvYiwgZmlsZW5hbWUpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG5cblx0XHRcdFx0XHQvL3NldCBmaWxlIHRpdGxlXG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpO1xuXG5cdFx0XHRcdFx0Ly90cmlnZ2VyIGRvd25sb2FkXG5cdFx0XHRcdFx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHRcdFx0ZWxlbWVudC5jbGljaygpO1xuXG5cdFx0XHRcdFx0Ly9yZW1vdmUgdGVtcG9yYXJ5IGxpbmsgZWxlbWVudFxuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZG93bmxvYWRDb21wbGV0ZVwiKTtcblx0XHR9XG5cdH1cblxuXHRjb21tc1JlY2VpdmVkKHRhYmxlLCBhY3Rpb24sIGRhdGEpe1xuXHRcdHN3aXRjaChhY3Rpb24pe1xuXHRcdFx0Y2FzZSBcImludGVyY2VwdFwiOlxuXHRcdFx0XHR0aGlzLmRvd25sb2FkKGRhdGEudHlwZSwgXCJcIiwgZGF0YS5vcHRpb25zLCBkYXRhLmFjdGl2ZSwgZGF0YS5pbnRlcmNlcHQpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbWFza0lucHV0KGVsLCBvcHRpb25zKXtcblx0dmFyIG1hc2sgPSBvcHRpb25zLm1hc2ssXG5cdG1hc2tMZXR0ZXIgPSB0eXBlb2Ygb3B0aW9ucy5tYXNrTGV0dGVyQ2hhciAhPT0gXCJ1bmRlZmluZWRcIiA/IG9wdGlvbnMubWFza0xldHRlckNoYXIgOiBcIkFcIixcblx0bWFza051bWJlciA9IHR5cGVvZiBvcHRpb25zLm1hc2tOdW1iZXJDaGFyICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5tYXNrTnVtYmVyQ2hhciA6IFwiOVwiLFxuXHRtYXNrV2lsZGNhcmQgPSB0eXBlb2Ygb3B0aW9ucy5tYXNrV2lsZGNhcmRDaGFyICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5tYXNrV2lsZGNhcmRDaGFyIDogXCIqXCI7XG5cblx0ZnVuY3Rpb24gZmlsbFN5bWJvbHMoaW5kZXgpe1xuXHRcdHZhciBzeW1ib2wgPSBtYXNrW2luZGV4XTtcblx0XHRpZih0eXBlb2Ygc3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIHN5bWJvbCAhPT0gbWFza1dpbGRjYXJkICYmIHN5bWJvbCAhPT0gbWFza0xldHRlciAmJiBzeW1ib2wgIT09IG1hc2tOdW1iZXIpe1xuXHRcdFx0ZWwudmFsdWUgPSBlbC52YWx1ZSArIFwiXCIgKyBzeW1ib2w7XG5cdFx0XHRmaWxsU3ltYm9scyhpbmRleCsxKTtcblx0XHR9XG5cdH1cblxuXHRlbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuXHRcdHZhciBpbmRleCA9IGVsLnZhbHVlLmxlbmd0aCxcblx0XHRjaGFyID0gZS5rZXk7XG5cblx0XHRpZihlLmtleUNvZGUgPiA0NiAmJiAhZS5jdHJsS2V5ICYmICFlLm1ldGFLZXkpe1xuXHRcdFx0aWYoaW5kZXggPj0gbWFzay5sZW5ndGgpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0c3dpdGNoKG1hc2tbaW5kZXhdKXtcblx0XHRcdFx0XHRjYXNlIG1hc2tMZXR0ZXI6XG5cdFx0XHRcdFx0XHRpZihjaGFyLnRvVXBwZXJDYXNlKCkgPT0gY2hhci50b0xvd2VyQ2FzZSgpKXtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgbWFza051bWJlcjpcblx0XHRcdFx0XHRcdGlmKGlzTmFOKGNoYXIpKXtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgbWFza1dpbGRjYXJkOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0aWYoY2hhciAhPT0gbWFza1tpbmRleF0pe1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybjtcblx0fSk7XG5cblx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChlKSA9PiB7XG5cdFx0aWYoZS5rZXlDb2RlID4gNDYpe1xuXHRcdFx0aWYob3B0aW9ucy5tYXNrQXV0b0ZpbGwpe1xuXHRcdFx0XHRmaWxsU3ltYm9scyhlbC52YWx1ZS5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblxuXHRpZighZWwucGxhY2Vob2xkZXIpe1xuXHRcdGVsLnBsYWNlaG9sZGVyID0gbWFzaztcblx0fVxuXG5cdGlmKG9wdGlvbnMubWFza0F1dG9GaWxsKXtcblx0XHRmaWxsU3ltYm9scyhlbC52YWx1ZS5sZW5ndGgpO1xuXHR9XG59XG5cbi8vaW5wdXQgZWxlbWVudFxuZnVuY3Rpb24gaW5wdXQoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cblx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBlZGl0b3JQYXJhbXMuc2VhcmNoID8gXCJzZWFyY2hcIiA6IFwidGV4dFwiKTtcblxuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aW5wdXQudmFsdWUgPSB0eXBlb2YgY2VsbFZhbHVlICE9PSBcInVuZGVmaW5lZFwiID8gY2VsbFZhbHVlIDogXCJcIjtcblxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uKCl7XG5cdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdGlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuXHRcdFx0aWYoZWRpdG9yUGFyYW1zLnNlbGVjdENvbnRlbnRzKXtcblx0XHRcdFx0aW5wdXQuc2VsZWN0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBvbkNoYW5nZShlKXtcblx0XHRpZigoKGNlbGxWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgY2VsbFZhbHVlID09PSBcInVuZGVmaW5lZFwiKSAmJiBpbnB1dC52YWx1ZSAhPT0gXCJcIikgfHwgaW5wdXQudmFsdWUgIT09IGNlbGxWYWx1ZSl7XG5cdFx0XHRpZihzdWNjZXNzKGlucHV0LnZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IGlucHV0LnZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyIG9yIGNoYW5nZVxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIG9uQ2hhbmdlKTtcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgb25DaGFuZ2UpO1xuXG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5tYXNrKXtcblx0XHRtYXNrSW5wdXQoaW5wdXQsIGVkaXRvclBhcmFtcyk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbi8vcmVzaXphYmxlIHRleHQgYXJlYSBlbGVtZW50XG5mdW5jdGlvbiB0ZXh0YXJlYSQxKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0dmVydE5hdiA9IGVkaXRvclBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gfHwgXCJoeWJyaWRcIixcblx0dmFsdWUgPSBTdHJpbmcoY2VsbFZhbHVlICE9PSBudWxsICYmIHR5cGVvZiBjZWxsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgID8gY2VsbFZhbHVlIDogXCJcIiksXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpLFxuXHRzY3JvbGxIZWlnaHQgPSAwO1xuXG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHRpbnB1dC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCIycHhcIjtcblx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRpbnB1dC5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmUtd3JhcFwiO1xuXHRpbnB1dC5zdHlsZS5yZXNpemUgPSBcIm5vbmVcIjtcblxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbnB1dC52YWx1ZSA9IHZhbHVlO1xuXG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PT0gXCJjZWxsXCIpe1xuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXG5cdFx0XHRpbnB1dC5zY3JvbGxIZWlnaHQ7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBpbnB1dC5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRjZWxsLmdldFJvdygpLm5vcm1hbGl6ZUhlaWdodCgpO1xuXG5cdFx0XHRpZihlZGl0b3JQYXJhbXMuc2VsZWN0Q29udGVudHMpe1xuXHRcdFx0XHRpbnB1dC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIG9uQ2hhbmdlKGUpe1xuXG5cdFx0aWYoKChjZWxsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGNlbGxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgJiYgaW5wdXQudmFsdWUgIT09IFwiXCIpIHx8IGlucHV0LnZhbHVlICE9PSBjZWxsVmFsdWUpe1xuXG5cdFx0XHRpZihzdWNjZXNzKGlucHV0LnZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IGlucHV0LnZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGNlbGwuZ2V0Um93KCkubm9ybWFsaXplSGVpZ2h0KCk7XG5cdFx0XHR9LDMwMCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXIgb3IgY2hhbmdlXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgb25DaGFuZ2UpO1xuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBvbkNoYW5nZSk7XG5cblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGZ1bmN0aW9uKCl7XG5cblx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuXG5cdFx0dmFyIGhlaWdodE5vdyA9IGlucHV0LnNjcm9sbEhlaWdodDtcblxuXHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IGhlaWdodE5vdyArIFwicHhcIjtcblxuXHRcdGlmKGhlaWdodE5vdyAhPSBzY3JvbGxIZWlnaHQpe1xuXHRcdFx0c2Nyb2xsSGVpZ2h0ID0gaGVpZ2h0Tm93O1xuXHRcdFx0Y2VsbC5nZXRSb3coKS5ub3JtYWxpemVIZWlnaHQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdGlmKGUuc2hpZnRLZXkgJiYgZWRpdG9yUGFyYW1zLnNoaWZ0RW50ZXJTdWJtaXQpe1xuXHRcdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0XHRpZih2ZXJ0TmF2ID09IFwiZWRpdG9yXCIgfHwgKHZlcnROYXYgPT0gXCJoeWJyaWRcIiAmJiBpbnB1dC5zZWxlY3Rpb25TdGFydCkpe1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDQwOiAvL2Rvd24gYXJyb3dcblx0XHRcdFx0aWYodmVydE5hdiA9PSBcImVkaXRvclwiIHx8ICh2ZXJ0TmF2ID09IFwiaHlicmlkXCIgJiYgaW5wdXQuc2VsZWN0aW9uU3RhcnQgIT09IGlucHV0LnZhbHVlLmxlbmd0aCkpe1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzNTpcblx0XHRcdGNhc2UgMzY6XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0aWYoZWRpdG9yUGFyYW1zLm1hc2spe1xuXHRcdG1hc2tJbnB1dChpbnB1dCwgZWRpdG9yUGFyYW1zKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuLy9pbnB1dCBlbGVtZW50IHdpdGggdHlwZSBvZiBudW1iZXJcbmZ1bmN0aW9uIG51bWJlciQxKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0dmVydE5hdiA9IGVkaXRvclBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gfHwgXCJlZGl0b3JcIixcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cblx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcIm51bWJlclwiKTtcblxuXHRpZih0eXBlb2YgZWRpdG9yUGFyYW1zLm1heCAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgZWRpdG9yUGFyYW1zLm1heCk7XG5cdH1cblxuXHRpZih0eXBlb2YgZWRpdG9yUGFyYW1zLm1pbiAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgZWRpdG9yUGFyYW1zLm1pbik7XG5cdH1cblxuXHRpZih0eXBlb2YgZWRpdG9yUGFyYW1zLnN0ZXAgIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwic3RlcFwiLCBlZGl0b3JQYXJhbXMuc3RlcCk7XG5cdH1cblxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyAmJiB0eXBlb2YgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAobGV0IGtleSBpbiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMpe1xuXHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlucHV0LnZhbHVlID0gY2VsbFZhbHVlO1xuXG5cdHZhciBibHVyRnVuYyA9IGZ1bmN0aW9uKGUpe1xuXHRcdG9uQ2hhbmdlKCk7XG5cdH07XG5cblx0b25SZW5kZXJlZChmdW5jdGlvbiAoKSB7XG5cdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdFx0XHRpbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCBibHVyRnVuYyk7XG5cblx0XHRcdGlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuXHRcdFx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGJsdXJGdW5jKTtcblxuXHRcdFx0aWYoZWRpdG9yUGFyYW1zLnNlbGVjdENvbnRlbnRzKXtcblx0XHRcdFx0aW5wdXQuc2VsZWN0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBvbkNoYW5nZSgpe1xuXHRcdHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlO1xuXG5cdFx0aWYoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT1cIlwiKXtcblx0XHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblx0XHR9XG5cblx0XHRpZih2YWx1ZSAhPT0gY2VsbFZhbHVlKXtcblx0XHRcdGlmKHN1Y2Nlc3ModmFsdWUpKXtcblx0XHRcdFx0Y2VsbFZhbHVlID0gdmFsdWU7IC8vcGVyc2lzdCB2YWx1ZSBpZiBzdWNjZXNzZnVsbHkgdmFsaWRhdGVkIGluY2FzZSBlZGl0b3IgaXMgdXNlZCBhcyBoZWFkZXIgZmlsdGVyXG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGVudGVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdFx0b25DaGFuZ2UoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0Y2FzZSA0MDogLy9kb3duIGFycm93XG5cdFx0XHRcdGlmKHZlcnROYXYgPT0gXCJlZGl0b3JcIil7XG5cdFx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM1OlxuXHRcdFx0Y2FzZSAzNjpcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRpZihlZGl0b3JQYXJhbXMubWFzayl7XG5cdFx0bWFza0lucHV0KGlucHV0LCBlZGl0b3JQYXJhbXMpO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG4vL2lucHV0IGVsZW1lbnQgd2l0aCB0eXBlIG9mIG51bWJlclxuZnVuY3Rpb24gcmFuZ2UoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgY2VsbFZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XG5cdGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJyYW5nZVwiKTtcblx0XG5cdGlmICh0eXBlb2YgZWRpdG9yUGFyYW1zLm1heCAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwibWF4XCIsIGVkaXRvclBhcmFtcy5tYXgpO1xuXHR9XG5cdFxuXHRpZiAodHlwZW9mIGVkaXRvclBhcmFtcy5taW4gIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm1pblwiLCBlZGl0b3JQYXJhbXMubWluKTtcblx0fVxuXHRcblx0aWYgKHR5cGVvZiBlZGl0b3JQYXJhbXMuc3RlcCAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwic3RlcFwiLCBlZGl0b3JQYXJhbXMuc3RlcCk7XG5cdH1cblx0XG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGlucHV0LnZhbHVlID0gY2VsbFZhbHVlO1xuXHRcblx0b25SZW5kZXJlZChmdW5jdGlvbiAoKSB7XG5cdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdGlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblx0XHR9XG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gb25DaGFuZ2UoKXtcblx0XHR2YXIgdmFsdWUgPSBpbnB1dC52YWx1ZTtcblx0XHRcblx0XHRpZighaXNOYU4odmFsdWUpICYmIHZhbHVlICE9PVwiXCIpe1xuXHRcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXHRcdH1cblx0XHRcblx0XHRpZih2YWx1ZSAhPSBjZWxsVmFsdWUpe1xuXHRcdFx0aWYoc3VjY2Vzcyh2YWx1ZSkpe1xuXHRcdFx0XHRjZWxsVmFsdWUgPSB2YWx1ZTsgLy9wZXJzaXN0IHZhbHVlIGlmIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgaW5jYXNlIGVkaXRvciBpcyB1c2VkIGFzIGhlYWRlciBmaWx0ZXJcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdG9uQ2hhbmdlKCk7XG5cdH0pO1xuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGVudGVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdFx0b25DaGFuZ2UoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXHRcblx0cmV0dXJuIGlucHV0O1xufVxuXG4vL2lucHV0IGVsZW1lbnRcbmZ1bmN0aW9uIGRhdGUkMShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBpbnB1dEZvcm1hdCA9IGVkaXRvclBhcmFtcy5mb3JtYXQsXG5cdHZlcnROYXYgPSBlZGl0b3JQYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiZWRpdG9yXCIsXG5cdERUID0gaW5wdXRGb3JtYXQgPyAod2luZG93LkRhdGVUaW1lIHx8IGx1eG9uLkRhdGVUaW1lKSA6IG51bGw7XG5cdFxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFxuXHRmdW5jdGlvbiBjb252ZXJ0RGF0ZSh2YWx1ZSl7XG5cdFx0dmFyIG5ld0RhdGV0aW1lO1xuXHRcdFxuXHRcdGlmKERULmlzRGF0ZVRpbWUodmFsdWUpKXtcblx0XHRcdG5ld0RhdGV0aW1lID0gdmFsdWU7XG5cdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcodmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBuZXdEYXRldGltZS50b0Zvcm1hdChcInl5eXktTU0tZGRcIik7XG5cdH1cblx0XG5cdGlucHV0LnR5cGUgPSBcImRhdGVcIjtcblx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5tYXgpe1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm1heFwiLCBpbnB1dEZvcm1hdCA/IGNvbnZlcnREYXRlKGVkaXRvclBhcmFtcy5tYXgpIDogZWRpdG9yUGFyYW1zLm1heCk7XG5cdH1cblxuXHRpZihlZGl0b3JQYXJhbXMubWluKXtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgaW5wdXRGb3JtYXQgPyBjb252ZXJ0RGF0ZShlZGl0b3JQYXJhbXMubWluKSA6IGVkaXRvclBhcmFtcy5taW4pO1xuXHR9XG5cdFxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNlbGxWYWx1ZSA9IHR5cGVvZiBjZWxsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgPyBjZWxsVmFsdWUgOiBcIlwiO1xuXHRcblx0aWYoaW5wdXRGb3JtYXQpe1xuXHRcdGlmKERUKXtcdFx0XG5cdFx0XHRjZWxsVmFsdWUgPSBjb252ZXJ0RGF0ZShjZWxsVmFsdWUpO1x0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJFZGl0b3IgRXJyb3IgLSAnZGF0ZScgZWRpdG9yICdmb3JtYXQnIHBhcmFtIGlzIGRlcGVuZGFudCBvbiBsdXhvbi5qc1wiKTtcblx0XHR9XG5cdH1cblx0XG5cdGlucHV0LnZhbHVlID0gY2VsbFZhbHVlO1xuXHRcblx0b25SZW5kZXJlZChmdW5jdGlvbigpe1xuXHRcdGlmKGNlbGwuZ2V0VHlwZSgpID09PSBcImNlbGxcIil7XG5cdFx0XHRpbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0XHRcblx0XHRcdGlmKGVkaXRvclBhcmFtcy5zZWxlY3RDb250ZW50cyl7XG5cdFx0XHRcdGlucHV0LnNlbGVjdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBvbkNoYW5nZSgpe1xuXHRcdHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlLFxuXHRcdGx1eERhdGU7XG5cdFx0XG5cdFx0aWYoKChjZWxsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGNlbGxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgJiYgdmFsdWUgIT09IFwiXCIpIHx8IHZhbHVlICE9PSBjZWxsVmFsdWUpe1xuXHRcdFx0XG5cdFx0XHRpZih2YWx1ZSAmJiBpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdGx1eERhdGUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyh2YWx1ZSksIFwieXl5eS1NTS1kZFwiKTtcblxuXHRcdFx0XHRzd2l0Y2goaW5wdXRGb3JtYXQpe1xuXHRcdFx0XHRcdGNhc2UgdHJ1ZTpcblx0XHRcdFx0XHRcdHZhbHVlID0gbHV4RGF0ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcImlzb1wiOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlLnRvSVNPKCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eERhdGUudG9Gb3JtYXQoaW5wdXRGb3JtYXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHN1Y2Nlc3ModmFsdWUpKXtcblx0XHRcdFx0Y2VsbFZhbHVlID0gaW5wdXQudmFsdWU7IC8vcGVyc2lzdCB2YWx1ZSBpZiBzdWNjZXNzZnVsbHkgdmFsaWRhdGVkIGluY2FzZSBlZGl0b3IgaXMgdXNlZCBhcyBoZWFkZXIgZmlsdGVyXG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gYmx1clxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUucmVsYXRlZFRhcmdldCB8fCBlLnJhbmdlUGFyZW50IHx8IGUuZXhwbGljaXRPcmlnaW5hbFRhcmdldCAhPT0gaW5wdXQpIHtcblx0XHRcdG9uQ2hhbmdlKCk7IC8vIG9ubHkgb24gYSBcInRydWVcIiBibHVyOyBub3Qgd2hlbiBmb2N1c2luZyBicm93c2VyJ3MgZGF0ZS90aW1lIHBpY2tlclxuXHRcdH1cblx0fSk7XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gZW50ZXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHQvLyBjYXNlIDk6XG5cdFx0XHRjYXNlIDEzOlxuXHRcdFx0XHRvbkNoYW5nZSgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAyNzpcblx0XHRcdFx0Y2FuY2VsKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDM1OlxuXHRcdFx0Y2FzZSAzNjpcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzg6IC8vdXAgYXJyb3dcblx0XHRcdGNhc2UgNDA6IC8vZG93biBhcnJvd1xuXHRcdFx0XHRpZih2ZXJ0TmF2ID09IFwiZWRpdG9yXCIpe1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXHRcblx0cmV0dXJuIGlucHV0O1xufVxuXG4vL2lucHV0IGVsZW1lbnRcbmZ1bmN0aW9uIHRpbWUkMShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBpbnB1dEZvcm1hdCA9IGVkaXRvclBhcmFtcy5mb3JtYXQsXG5cdHZlcnROYXYgPSBlZGl0b3JQYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiZWRpdG9yXCIsXG5cdERUID0gaW5wdXRGb3JtYXQgPyAod2luZG93LkRhdGVUaW1lIHx8IGx1eG9uLkRhdGVUaW1lKSA6IG51bGwsIFxuXHRuZXdEYXRldGltZTtcblx0XG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHR2YXIgY2VsbFZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XG5cdGlucHV0LnR5cGUgPSBcInRpbWVcIjtcblx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRcblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRjZWxsVmFsdWUgPSB0eXBlb2YgY2VsbFZhbHVlICE9PSBcInVuZGVmaW5lZFwiID8gY2VsbFZhbHVlIDogXCJcIjtcblx0XG5cdGlmKGlucHV0Rm9ybWF0KXtcblx0XHRpZihEVCl7XG5cdFx0XHRpZihEVC5pc0RhdGVUaW1lKGNlbGxWYWx1ZSkpe1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IGNlbGxWYWx1ZTtcblx0XHRcdH1lbHNlIGlmKGlucHV0Rm9ybWF0ID09PSBcImlzb1wiKXtcblx0XHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyhjZWxsVmFsdWUpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyhjZWxsVmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNlbGxWYWx1ZSA9IG5ld0RhdGV0aW1lLnRvRm9ybWF0KFwiSEg6bW1cIik7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRWRpdG9yIEVycm9yIC0gJ2RhdGUnIGVkaXRvciAnZm9ybWF0JyBwYXJhbSBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbnB1dC52YWx1ZSA9IGNlbGxWYWx1ZTtcblx0XG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PSBcImNlbGxcIil7XG5cdFx0XHRpbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0XHRcblx0XHRcdGlmKGVkaXRvclBhcmFtcy5zZWxlY3RDb250ZW50cyl7XG5cdFx0XHRcdGlucHV0LnNlbGVjdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBvbkNoYW5nZSgpe1xuXHRcdHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlLFxuXHRcdGx1eFRpbWU7XG5cdFx0XG5cdFx0aWYoKChjZWxsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGNlbGxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgJiYgdmFsdWUgIT09IFwiXCIpIHx8IHZhbHVlICE9PSBjZWxsVmFsdWUpe1xuXHRcdFx0XG5cdFx0XHRpZih2YWx1ZSAmJiBpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdGx1eFRpbWUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyh2YWx1ZSksIFwiaGg6bW1cIik7XG5cblx0XHRcdFx0c3dpdGNoKGlucHV0Rm9ybWF0KXtcblx0XHRcdFx0XHRjYXNlIHRydWU6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eFRpbWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgXCJpc29cIjpcblx0XHRcdFx0XHRcdHZhbHVlID0gbHV4VGltZS50b0lTTygpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhUaW1lLnRvRm9ybWF0KGlucHV0Rm9ybWF0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihzdWNjZXNzKHZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IGlucHV0LnZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZnVuY3Rpb24oZSkge1xuXHRcdGlmIChlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yYW5nZVBhcmVudCB8fCBlLmV4cGxpY2l0T3JpZ2luYWxUYXJnZXQgIT09IGlucHV0KSB7XG5cdFx0XHRvbkNoYW5nZSgpOyAvLyBvbmx5IG9uIGEgXCJ0cnVlXCIgYmx1cjsgbm90IHdoZW4gZm9jdXNpbmcgYnJvd3NlcidzIGRhdGUvdGltZSBwaWNrZXJcblx0XHR9XG5cdH0pO1xuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGVudGVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Ly8gY2FzZSA5OlxuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdFx0b25DaGFuZ2UoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAzNTpcblx0XHRcdGNhc2UgMzY6XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM4OiAvL3VwIGFycm93XG5cdFx0XHRjYXNlIDQwOiAvL2Rvd24gYXJyb3dcblx0XHRcdFx0aWYodmVydE5hdiA9PSBcImVkaXRvclwiKXtcblx0XHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0XG5cdHJldHVybiBpbnB1dDtcbn1cblxuLy9pbnB1dCBlbGVtZW50XG5mdW5jdGlvbiBkYXRldGltZSQyKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGlucHV0Rm9ybWF0ID0gZWRpdG9yUGFyYW1zLmZvcm1hdCxcblx0dmVydE5hdiA9IGVkaXRvclBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gfHwgXCJlZGl0b3JcIixcblx0RFQgPSBpbnB1dEZvcm1hdCA/ICh0aGlzLnRhYmxlLmRlcGVuZGVuY3lSZWdpc3RyeS5sb29rdXAoW1wibHV4b25cIiwgXCJEYXRlVGltZVwiXSwgXCJEYXRlVGltZVwiKSkgOiBudWxsLCBcblx0bmV3RGF0ZXRpbWU7XG5cdFxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFxuXHRpbnB1dC50eXBlID0gXCJkYXRldGltZS1sb2NhbFwiO1xuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNlbGxWYWx1ZSA9IHR5cGVvZiBjZWxsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgPyBjZWxsVmFsdWUgOiBcIlwiO1xuXHRcblx0aWYoaW5wdXRGb3JtYXQpe1xuXHRcdGlmKERUKXtcblx0XHRcdGlmKERULmlzRGF0ZVRpbWUoY2VsbFZhbHVlKSl7XG5cdFx0XHRcdG5ld0RhdGV0aW1lID0gY2VsbFZhbHVlO1xuXHRcdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IERULmZyb21JU08oU3RyaW5nKGNlbGxWYWx1ZSkpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IERULmZyb21Gb3JtYXQoU3RyaW5nKGNlbGxWYWx1ZSksIGlucHV0Rm9ybWF0KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y2VsbFZhbHVlID0gbmV3RGF0ZXRpbWUudG9Gb3JtYXQoXCJ5eXl5LU1NLWRkXCIpICArIFwiVFwiICsgbmV3RGF0ZXRpbWUudG9Gb3JtYXQoXCJISDptbVwiKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRWRpdG9yIEVycm9yIC0gJ2RhdGUnIGVkaXRvciAnZm9ybWF0JyBwYXJhbSBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbnB1dC52YWx1ZSA9IGNlbGxWYWx1ZTtcblx0XG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PT0gXCJjZWxsXCIpe1xuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRcdFx0XG5cdFx0XHRpZihlZGl0b3JQYXJhbXMuc2VsZWN0Q29udGVudHMpe1xuXHRcdFx0XHRpbnB1dC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gb25DaGFuZ2UoKXtcblx0XHR2YXIgdmFsdWUgPSBpbnB1dC52YWx1ZSxcblx0XHRsdXhEYXRlVGltZTtcblx0XHRcblx0XHRpZigoKGNlbGxWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgY2VsbFZhbHVlID09PSBcInVuZGVmaW5lZFwiKSAmJiB2YWx1ZSAhPT0gXCJcIikgfHwgdmFsdWUgIT09IGNlbGxWYWx1ZSl7XG5cblx0XHRcdGlmKHZhbHVlICYmIGlucHV0Rm9ybWF0KXtcblx0XHRcdFx0bHV4RGF0ZVRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXG5cdFx0XHRcdHN3aXRjaChpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdFx0Y2FzZSB0cnVlOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlVGltZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcImlzb1wiOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlVGltZS50b0lTTygpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlVGltZS50b0Zvcm1hdChpbnB1dEZvcm1hdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoc3VjY2Vzcyh2YWx1ZSkpe1xuXHRcdFx0XHRjZWxsVmFsdWUgPSBpbnB1dC52YWx1ZTsgLy9wZXJzaXN0IHZhbHVlIGlmIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgaW5jYXNlIGVkaXRvciBpcyB1c2VkIGFzIGhlYWRlciBmaWx0ZXJcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5yZWxhdGVkVGFyZ2V0IHx8IGUucmFuZ2VQYXJlbnQgfHwgZS5leHBsaWNpdE9yaWdpbmFsVGFyZ2V0ICE9PSBpbnB1dCkge1xuXHRcdFx0b25DaGFuZ2UoKTsgLy8gb25seSBvbiBhIFwidHJ1ZVwiIGJsdXI7IG5vdCB3aGVuIGZvY3VzaW5nIGJyb3dzZXIncyBkYXRlL3RpbWUgcGlja2VyXG5cdFx0fVxuXHR9KTtcblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0Y2FzZSA0MDogLy9kb3duIGFycm93XG5cdFx0XHRcdGlmKHZlcnROYXYgPT0gXCJlZGl0b3JcIil7XG5cdFx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cdFxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbmxldCBFZGl0JDEgPSBjbGFzcyBFZGl0e1xuXHRjb25zdHJ1Y3RvcihlZGl0b3IsIGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0XHR0aGlzLmVkaXQgPSBlZGl0b3I7XG5cdFx0dGhpcy50YWJsZSA9IGVkaXRvci50YWJsZTtcblx0XHR0aGlzLmNlbGwgPSBjZWxsO1xuXHRcdHRoaXMucGFyYW1zID0gdGhpcy5faW5pdGlhbGl6ZVBhcmFtcyhlZGl0b3JQYXJhbXMpO1xuXHRcdFxuXHRcdHRoaXMuZGF0YSA9IFtdO1xuXHRcdHRoaXMuZGlzcGxheUl0ZW1zID0gW107XG5cdFx0dGhpcy5jdXJyZW50SXRlbXMgPSBbXTtcblx0XHR0aGlzLmZvY3VzZWRJdGVtID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmlucHV0ID0gdGhpcy5fY3JlYXRlSW5wdXRFbGVtZW50KCk7XG5cdFx0dGhpcy5saXN0RWwgPSB0aGlzLl9jcmVhdGVMaXN0RWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbFZhbHVlcyA9IG51bGw7IFxuXHRcdFxuXHRcdHRoaXMuaXNGaWx0ZXIgPSBjZWxsLmdldFR5cGUoKSA9PT0gXCJoZWFkZXJcIjtcblx0XHRcblx0XHR0aGlzLmZpbHRlclRpbWVvdXQgPSBudWxsO1xuXHRcdHRoaXMuZmlsdGVyZWQgPSBmYWxzZTtcblx0XHR0aGlzLnR5cGluZyA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMudmFsdWVzID0gW107IFxuXHRcdHRoaXMucG9wdXAgPSBudWxsOyAgXG5cdFx0XG5cdFx0dGhpcy5saXN0SXRlcmF0aW9uID0gMDtcblx0XHRcblx0XHR0aGlzLmxhc3RBY3Rpb249XCJcIjtcblx0XHR0aGlzLmZpbHRlclRlcm09XCJcIjtcblx0XHRcblx0XHR0aGlzLmJsdXJhYmxlID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLmFjdGlvbnMgPSB7XG5cdFx0XHRzdWNjZXNzOnN1Y2Nlc3MsXG5cdFx0XHRjYW5jZWw6Y2FuY2VsXG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLl9kZXByZWNhdGVkT3B0aW9uc0NoZWNrKCk7XG5cdFx0dGhpcy5faW5pdGlhbGl6ZVZhbHVlKCk7XG5cdFx0XG5cdFx0b25SZW5kZXJlZCh0aGlzLl9vblJlbmRlcmVkLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRfZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpe1xuXHRcdC8vIGlmKHRoaXMucGFyYW1zLmxpc3RJdGVtRm9ybWF0dGVyKXtcblx0XHQvLyBcdHRoaXMuY2VsbC5nZXRUYWJsZSgpLmRlcHJlY2F0aW9uQWR2aXNvci5tc2coXCJUaGUgbGlzdEl0ZW1Gb3JtYXR0ZXIgZWRpdG9yIHBhcmFtIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzZWUgdGhlIGxhdGVzdCBlZGl0b3IgZG9jdW1lbnRhdGlvbiBmb3IgdXBkYXRlZCBvcHRpb25zXCIpO1xuXHRcdC8vIH1cblx0XHRcblx0XHQvLyBpZih0aGlzLnBhcmFtcy5zb3J0VmFsdWVzTGlzdCl7XG5cdFx0Ly8gXHR0aGlzLmNlbGwuZ2V0VGFibGUoKS5kZXByZWNhdGlvbkFkdmlzb3IubXNnKFwiVGhlIHNvcnRWYWx1ZXNMaXN0IGVkaXRvciBwYXJhbSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2Ugc2VlIHRoZSBsYXRlc3QgZWRpdG9yIGRvY3VtZW50YXRpb24gZm9yIHVwZGF0ZWQgb3B0aW9uc1wiKTtcblx0XHQvLyB9XG5cdFx0XG5cdFx0Ly8gaWYodGhpcy5wYXJhbXMuc2VhcmNoRnVuYyl7XG5cdFx0Ly8gXHR0aGlzLmNlbGwuZ2V0VGFibGUoKS5kZXByZWNhdGlvbkFkdmlzb3IubXNnKFwiVGhlIHNlYXJjaEZ1bmMgZWRpdG9yIHBhcmFtIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzZWUgdGhlIGxhdGVzdCBlZGl0b3IgZG9jdW1lbnRhdGlvbiBmb3IgdXBkYXRlZCBvcHRpb25zXCIpO1xuXHRcdC8vIH1cblx0XHRcblx0XHQvLyBpZih0aGlzLnBhcmFtcy5zZWFyY2hpbmdQbGFjZWhvbGRlcil7XG5cdFx0Ly8gXHR0aGlzLmNlbGwuZ2V0VGFibGUoKS5kZXByZWNhdGlvbkFkdmlzb3IubXNnKFwiVGhlIHNlYXJjaGluZ1BsYWNlaG9sZGVyIGVkaXRvciBwYXJhbSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2Ugc2VlIHRoZSBsYXRlc3QgZWRpdG9yIGRvY3VtZW50YXRpb24gZm9yIHVwZGF0ZWQgb3B0aW9uc1wiKTtcblx0XHQvLyB9XG5cdH1cblx0XG5cdF9pbml0aWFsaXplVmFsdWUoKXtcblx0XHR2YXIgaW5pdGlhbFZhbHVlID0gdGhpcy5jZWxsLmdldFZhbHVlKCk7XG5cdFx0XG5cdFx0aWYodHlwZW9mIGluaXRpYWxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgdGhpcy5wYXJhbXMuZGVmYXVsdFZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGluaXRpYWxWYWx1ZSA9IHRoaXMucGFyYW1zLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsVmFsdWVzID0gdGhpcy5wYXJhbXMubXVsdGlzZWxlY3QgPyBpbml0aWFsVmFsdWUgOiBbaW5pdGlhbFZhbHVlXTtcblx0XHRcblx0XHRpZih0aGlzLmlzRmlsdGVyKXtcblx0XHRcdHRoaXMuaW5wdXQudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZXMgPyB0aGlzLmluaXRpYWxWYWx1ZXMuam9pbihcIixcIikgOiBcIlwiO1xuXHRcdFx0dGhpcy5oZWFkZXJGaWx0ZXJJbml0aWFsTGlzdEdlbigpOyAgICAgICAgICAgIFxuXHRcdH1cblx0fVxuXHRcblx0X29uUmVuZGVyZWQoKXtcblx0XHR2YXIgY2VsbEVsID0gdGhpcy5jZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHRmdW5jdGlvbiBjbGlja1N0b3AoZSl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cdFxuXHRcdFxuXHRcdGlmKCF0aGlzLmlzRmlsdGVyKXtcblx0XHRcdHRoaXMuaW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0XHR0aGlzLmlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0fVxuXHRcdFxuXHRcdFxuXHRcdGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tTdG9wKTtcblx0XHRcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGNlbGxFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tTdG9wKTtcblx0XHR9LCAxMDAwKTtcblx0XHRcblx0XHR0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fcHJldmVudFBvcHVwQmx1ci5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0X2NyZWF0ZUxpc3RFbGVtZW50KCl7XG5cdFx0dmFyIGxpc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0bGlzdEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdC1saXN0XCIpO1xuXHRcdFxuXHRcdGxpc3RFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX3ByZXZlbnRCbHVyLmJpbmQodGhpcykpO1xuXHRcdGxpc3RFbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9pbnB1dEtleURvd24uYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0cmV0dXJuIGxpc3RFbDtcblx0fVxuXHRcblx0X3NldExpc3RXaWR0aCgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5pc0ZpbHRlciA/IHRoaXMuaW5wdXQgOiB0aGlzLmNlbGwuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMubGlzdEVsLnN0eWxlLm1pbldpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy5tYXhXaWR0aCl7XG5cdFx0XHRpZih0aGlzLnBhcmFtcy5tYXhXaWR0aCA9PT0gdHJ1ZSl7XG5cdFx0XHRcdHRoaXMubGlzdEVsLnN0eWxlLm1heFdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0XHRcdH1lbHNlIGlmKHR5cGVvZiB0aGlzLnBhcmFtcy5tYXhXaWR0aCA9PT0gXCJudW1iZXJcIil7XG5cdFx0XHRcdHRoaXMubGlzdEVsLnN0eWxlLm1heFdpZHRoID0gdGhpcy5wYXJhbXMubWF4V2lkdGggKyBcInB4XCI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubGlzdEVsLnN0eWxlLm1heFdpZHRoID0gdGhpcy5wYXJhbXMubWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHR9XG5cdFxuXHRfY3JlYXRlSW5wdXRFbGVtZW50KCl7XG5cdFx0dmFyIGF0dHJpYnMgPSB0aGlzLnBhcmFtcy5lbGVtZW50QXR0cmlidXRlcztcblx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCB0aGlzLnBhcmFtcy5jbGVhcmFibGUgPyBcInNlYXJjaFwiIDogXCJ0ZXh0XCIpO1xuXHRcdFxuXHRcdGlucHV0LnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuXHRcdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdFx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFx0XG5cdFx0aWYoIXRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSl7XG5cdFx0XHRpbnB1dC5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIjtcblx0XHRcdGlucHV0LnN0eWxlLmNhcmV0Q29sb3IgPSBcInRyYW5zcGFyZW50XCI7XG5cdFx0XHQvLyBpbnB1dC5yZWFkT25seSA9ICh0aGlzLmVkaXQuY3VycmVudENlbGwgIT0gZmFsc2UpO1xuXHRcdH1cblx0XHRcblx0XHRpZihhdHRyaWJzICYmIHR5cGVvZiBhdHRyaWJzID09IFwib2JqZWN0XCIpe1xuXHRcdFx0Zm9yIChsZXQga2V5IGluIGF0dHJpYnMpe1xuXHRcdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBhdHRyaWJzW1wiK1wiICsga2V5XSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJzW2tleV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLm1hc2spe1xuXHRcdFx0bWFza0lucHV0KGlucHV0LCB0aGlzLnBhcmFtcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuX2JpbmRJbnB1dEV2ZW50cyhpbnB1dCk7XG5cdFx0XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdFxuXHRfaW5pdGlhbGl6ZVBhcmFtcyhwYXJhbXMpe1xuXHRcdHZhciB2YWx1ZUtleXMgPSBbXCJ2YWx1ZXNcIiwgXCJ2YWx1ZXNVUkxcIiwgXCJ2YWx1ZXNMb29rdXBcIl0sXG5cdFx0dmFsdWVDaGVjaztcblx0XHRcblx0XHRwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMpO1xuXHRcdFxuXHRcdHBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gPSBwYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiZWRpdG9yXCI7XG5cdFx0cGFyYW1zLnBsYWNlaG9sZGVyTG9hZGluZyA9IHR5cGVvZiBwYXJhbXMucGxhY2Vob2xkZXJMb2FkaW5nID09PSBcInVuZGVmaW5lZFwiID8gXCJTZWFyY2hpbmcgLi4uXCIgOiBwYXJhbXMucGxhY2Vob2xkZXJMb2FkaW5nO1xuXHRcdHBhcmFtcy5wbGFjZWhvbGRlckVtcHR5ID0gdHlwZW9mIHBhcmFtcy5wbGFjZWhvbGRlckVtcHR5ID09PSBcInVuZGVmaW5lZFwiID8gXCJObyBSZXN1bHRzIEZvdW5kXCIgOiBwYXJhbXMucGxhY2Vob2xkZXJFbXB0eTtcblx0XHRwYXJhbXMuZmlsdGVyRGVsYXkgPSB0eXBlb2YgcGFyYW1zLmZpbHRlckRlbGF5ID09PSBcInVuZGVmaW5lZFwiID8gMzAwIDogcGFyYW1zLmZpbHRlckRlbGF5O1xuXHRcdFxuXHRcdHBhcmFtcy5lbXB0eVZhbHVlID0gT2JqZWN0LmtleXMocGFyYW1zKS5pbmNsdWRlcyhcImVtcHR5VmFsdWVcIikgPyBwYXJhbXMuZW1wdHlWYWx1ZSA6IFwiXCI7XG5cdFx0XG5cdFx0dmFsdWVDaGVjayA9IE9iamVjdC5rZXlzKHBhcmFtcykuZmlsdGVyKGtleSA9PiB2YWx1ZUtleXMuaW5jbHVkZXMoa2V5KSkubGVuZ3RoO1xuXHRcdFxuXHRcdGlmKCF2YWx1ZUNoZWNrKXtcblx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIGVpdGhlciB0aGUgdmFsdWVzLCB2YWx1ZXNVUkwsIG9yIHZhbHVlc0xvb2t1cCBvcHRpb24gbXVzdCBiZSBzZXRcIik7XG5cdFx0fWVsc2UgaWYodmFsdWVDaGVjayA+IDEpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gb25seSBvbmUgb2YgdGhlIHZhbHVlcywgdmFsdWVzVVJMLCBvciB2YWx1ZXNMb29rdXAgb3B0aW9ucyBjYW4gYmUgc2V0IG9uIHRoZSBzYW1lIGVkaXRvclwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYocGFyYW1zLmF1dG9jb21wbGV0ZSl7XG5cdFx0XHRpZihwYXJhbXMubXVsdGlzZWxlY3Qpe1xuXHRcdFx0XHRwYXJhbXMubXVsdGlzZWxlY3QgPSBmYWxzZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gbXVsdGlzZWxlY3Qgb3B0aW9uIGlzIG5vdCBhdmFpbGFibGUgd2hlbiBhdXRvY29tcGxldGUgaXMgZW5hYmxlZFwiKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihwYXJhbXMuZnJlZXRleHQpe1xuXHRcdFx0XHRwYXJhbXMuZnJlZXRleHQgPSBmYWxzZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gZnJlZXRleHQgb3B0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gYXV0b2NvbXBsZXRlIGlzIGVuYWJsZWRcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHBhcmFtcy5maWx0ZXJGdW5jKXtcblx0XHRcdFx0cGFyYW1zLmZpbHRlckZ1bmMgPSBmYWxzZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gZmlsdGVyRnVuYyBvcHRpb24gaXMgb25seSBhdmFpbGFibGUgd2hlbiBhdXRvY29tcGxldGUgaXMgZW5hYmxlZFwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYocGFyYW1zLmZpbHRlclJlbW90ZSl7XG5cdFx0XHRcdHBhcmFtcy5maWx0ZXJSZW1vdGUgPSBmYWxzZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gZmlsdGVyUmVtb3RlIG9wdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIGF1dG9jb21wbGV0ZSBpcyBlbmFibGVkXCIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihwYXJhbXMubWFzayl7XG5cdFx0XHRcdHBhcmFtcy5tYXNrID0gZmFsc2U7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIG1hc2sgb3B0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gYXV0b2NvbXBsZXRlIGlzIGVuYWJsZWRcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHBhcmFtcy5hbGxvd0VtcHR5KXtcblx0XHRcdFx0cGFyYW1zLmFsbG93RW1wdHkgPSBmYWxzZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gYWxsb3dFbXB0eSBvcHRpb24gaXMgb25seSBhdmFpbGFibGUgd2hlbiBhdXRvY29tcGxldGUgaXMgZW5hYmxlZFwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYocGFyYW1zLmxpc3RPbkVtcHR5KXtcblx0XHRcdFx0cGFyYW1zLmxpc3RPbkVtcHR5ID0gZmFsc2U7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIGxpc3RPbkVtcHR5IG9wdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIGF1dG9jb21wbGV0ZSBpcyBlbmFibGVkXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihwYXJhbXMuZmlsdGVyUmVtb3RlICYmICEodHlwZW9mIHBhcmFtcy52YWx1ZXNMb29rdXAgPT09IFwiZnVuY3Rpb25cIiB8fCBwYXJhbXMudmFsdWVzVVJMKSl7XG5cdFx0XHRwYXJhbXMuZmlsdGVyUmVtb3RlID0gZmFsc2U7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBmaWx0ZXJSZW1vdGUgb3B0aW9uIHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB2YWx1ZXMgbGlzdCBpcyBwb3B1bGF0ZWQgZnJvbSBhIHJlbW90ZSBzb3VyY2VcIik7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLyBFdmVudCBIYW5kbGluZyAvLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdF9iaW5kSW5wdXRFdmVudHMoaW5wdXQpe1xuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLl9pbnB1dEZvY3VzLmJpbmQodGhpcykpO1xuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9pbnB1dENsaWNrLmJpbmQodGhpcykpO1xuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuX2lucHV0Qmx1ci5iaW5kKHRoaXMpKTtcblx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9pbnB1dEtleURvd24uYmluZCh0aGlzKSk7XG5cdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcInNlYXJjaFwiLCB0aGlzLl9pbnB1dFNlYXJjaC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUpe1xuXHRcdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2lucHV0S2V5VXAuYmluZCh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0X2lucHV0Rm9jdXMoZSl7XG5cdFx0dGhpcy5yZWJ1aWxkT3B0aW9uc0xpc3QoKTtcblx0fVxuXHRcblx0X2ZpbHRlcigpe1xuXHRcdGlmKHRoaXMucGFyYW1zLmZpbHRlclJlbW90ZSl7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5maWx0ZXJUaW1lb3V0KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5maWx0ZXJUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMucmVidWlsZE9wdGlvbnNMaXN0KCk7XG5cdFx0XHR9LCB0aGlzLnBhcmFtcy5maWx0ZXJEZWxheSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5fZmlsdGVyTGlzdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0X2lucHV0Q2xpY2soZSl7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxuXHRcblx0X2lucHV0Qmx1cihlKXtcblx0XHRpZih0aGlzLmJsdXJhYmxlKXtcblx0XHRcdGlmKHRoaXMucG9wdXApe1xuXHRcdFx0XHR0aGlzLnBvcHVwLmhpZGUoKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5fcmVzb2x2ZVZhbHVlKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2lucHV0U2VhcmNoKCl7XG5cdFx0dGhpcy5fY2xlYXJDaG9pY2VzKCk7XG5cdH1cblx0XG5cdF9pbnB1dEtleURvd24oZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzg6IC8vdXAgYXJyb3dcblx0XHRcdFx0dGhpcy5fa2V5VXAoZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDQwOiAvL2Rvd24gYXJyb3dcblx0XHRcdFx0dGhpcy5fa2V5RG93bihlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzc6IC8vbGVmdCBhcnJvd1xuXHRcdFx0Y2FzZSAzOTogLy9yaWdodCBhcnJvd1xuXHRcdFx0XHR0aGlzLl9rZXlTaWRlKGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAxMzogLy9lbnRlclxuXHRcdFx0XHR0aGlzLl9rZXlFbnRlcigpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAyNzogLy9lc2NhcGVcblx0XHRcdFx0dGhpcy5fa2V5RXNjKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDM2OiAvL2hvbWVcblx0XHRcdGNhc2UgMzU6IC8vZW5kXG5cdFx0XHRcdHRoaXMuX2tleUhvbWVFbmQoZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDk6IC8vdGFiXG5cdFx0XHRcdHRoaXMuX2tleVRhYihlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMuX2tleVNlbGVjdExldHRlcihlKTtcblx0XHR9XG5cdH1cblx0XG5cdF9pbnB1dEtleVVwKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0Y2FzZSAzNzogLy9sZWZ0IGFycm93XG5cdFx0XHRjYXNlIDM5OiAvL3VwIGFycm93XG5cdFx0XHRjYXNlIDQwOiAvL3JpZ2h0IGFycm93XG5cdFx0XHRjYXNlIDEzOiAvL2VudGVyXG5cdFx0XHRjYXNlIDI3OiAvL2VzY2FwZVxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhpcy5fa2V5QXV0b0NvbXBMZXR0ZXIoZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfcHJldmVudFBvcHVwQmx1cigpe1xuXHRcdGlmKHRoaXMucG9wdXApe1xuXHRcdFx0dGhpcy5wb3B1cC5ibG9ja0hpZGUoKTtcblx0XHR9XG5cdFx0XG5cdFx0c2V0VGltZW91dCgoKSA9Pntcblx0XHRcdGlmKHRoaXMucG9wdXApe1xuXHRcdFx0XHR0aGlzLnBvcHVwLnJlc3RvcmVIaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSwgMTApO1xuXHR9XG5cdFxuXHRfcHJldmVudEJsdXIoKXtcblx0XHR0aGlzLmJsdXJhYmxlID0gZmFsc2U7XG5cdFx0XG5cdFx0c2V0VGltZW91dCgoKSA9Pntcblx0XHRcdHRoaXMuYmx1cmFibGUgPSB0cnVlO1xuXHRcdH0sIDEwKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8gS2V5Ym9hcmQgTmF2aWdhdGlvbiAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdF9rZXlUYWIoZSl7XG5cdFx0aWYodGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlICYmIHRoaXMubGFzdEFjdGlvbiA9PT0gXCJ0eXBpbmdcIil7XG5cdFx0XHR0aGlzLl9yZXNvbHZlVmFsdWUodHJ1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5mb2N1c2VkSXRlbSl7XG5cdFx0XHRcdHRoaXMuX2Nob29zZUl0ZW0odGhpcy5mb2N1c2VkSXRlbSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfa2V5VXAoZSl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5kaXNwbGF5SXRlbXMuaW5kZXhPZih0aGlzLmZvY3VzZWRJdGVtKTtcblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gPT0gXCJlZGl0b3JcIiB8fCAodGhpcy5wYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uID09IFwiaHlicmlkXCIgJiYgaW5kZXgpKXtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XG5cdFx0XHRpZihpbmRleCA+IDApe1xuXHRcdFx0XHR0aGlzLl9mb2N1c0l0ZW0odGhpcy5kaXNwbGF5SXRlbXNbaW5kZXggLSAxXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfa2V5RG93bihlKXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmRpc3BsYXlJdGVtcy5pbmRleE9mKHRoaXMuZm9jdXNlZEl0ZW0pO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiA9PSBcImVkaXRvclwiIHx8ICh0aGlzLnBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gPT0gXCJoeWJyaWRcIiAmJiBpbmRleCA8IHRoaXMuZGlzcGxheUl0ZW1zLmxlbmd0aCAtIDEpKXtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XG5cdFx0XHRpZihpbmRleCA8IHRoaXMuZGlzcGxheUl0ZW1zLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRpZihpbmRleCA9PSAtMSl7XG5cdFx0XHRcdFx0dGhpcy5fZm9jdXNJdGVtKHRoaXMuZGlzcGxheUl0ZW1zWzBdKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX2ZvY3VzSXRlbSh0aGlzLmRpc3BsYXlJdGVtc1tpbmRleCArIDFdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2tleVNpZGUoZSl7XG5cdFx0aWYoIXRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSl7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cblx0XG5cdF9rZXlFbnRlcihlKXtcblx0XHRpZih0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUgJiYgdGhpcy5sYXN0QWN0aW9uID09PSBcInR5cGluZ1wiKXtcblx0XHRcdHRoaXMuX3Jlc29sdmVWYWx1ZSh0cnVlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLmZvY3VzZWRJdGVtKXtcblx0XHRcdFx0dGhpcy5fY2hvb3NlSXRlbSh0aGlzLmZvY3VzZWRJdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9rZXlFc2MoZSl7XG5cdFx0dGhpcy5fY2FuY2VsKCk7XG5cdH1cblx0XG5cdF9rZXlIb21lRW5kKGUpe1xuXHRcdGlmKHRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSl7XG5cdFx0XHQvL3ByZXZlbnQgdGFibGUgbmF2aWdhdGlvbiB3aGlsZSB1c2luZyBpbnB1dCBlbGVtZW50XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fVxuXHRcblx0X2tleVNlbGVjdExldHRlcihlKXtcblx0XHRpZighdGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlKXtcblx0XHRcdC8vIGlmKHRoaXMuZWRpdC5jdXJyZW50Q2VsbCA9PT0gZmFsc2Upe1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8gfVxuXHRcdFx0XG5cdFx0XHRpZihlLmtleUNvZGUgPj0gMzggJiYgZS5rZXlDb2RlIDw9IDkwKXtcblx0XHRcdFx0dGhpcy5fc2Nyb2xsVG9WYWx1ZShlLmtleUNvZGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2tleUF1dG9Db21wTGV0dGVyKGUpe1xuXHRcdHRoaXMuX2ZpbHRlcigpO1xuXHRcdHRoaXMubGFzdEFjdGlvbiA9IFwidHlwaW5nXCI7XG5cdFx0dGhpcy50eXBpbmcgPSB0cnVlO1xuXHR9XG5cdFxuXHRcblx0X3Njcm9sbFRvVmFsdWUoY2hhcil7XG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuZmlsdGVyVGltZW91dCk7XG5cdFx0XG5cdFx0dmFyIGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcikudG9Mb3dlckNhc2UoKTtcblx0XHR0aGlzLmZpbHRlclRlcm0gKz0gY2hhcmFjdGVyLnRvTG93ZXJDYXNlKCk7XG5cdFx0XG5cdFx0dmFyIG1hdGNoID0gdGhpcy5kaXNwbGF5SXRlbXMuZmluZCgoaXRlbSkgPT4ge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiBpdGVtLmxhYmVsICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZW0ubGFiZWwudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHRoaXMuZmlsdGVyVGVybSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYobWF0Y2gpe1xuXHRcdFx0dGhpcy5fZm9jdXNJdGVtKG1hdGNoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5maWx0ZXJUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLmZpbHRlclRlcm0gPSBcIlwiO1xuXHRcdH0sIDgwMCk7XG5cdH1cblx0XG5cdF9mb2N1c0l0ZW0oaXRlbSl7XG5cdFx0dGhpcy5sYXN0QWN0aW9uID0gXCJmb2N1c1wiO1xuXHRcdFxuXHRcdGlmKHRoaXMuZm9jdXNlZEl0ZW0gJiYgdGhpcy5mb2N1c2VkSXRlbS5lbGVtZW50KXtcblx0XHRcdHRoaXMuZm9jdXNlZEl0ZW0uZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZm9jdXNlZFwiKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5mb2N1c2VkSXRlbSA9IGl0ZW07XG5cdFx0XG5cdFx0aWYoaXRlbSAmJiBpdGVtLmVsZW1lbnQpe1xuXHRcdFx0aXRlbS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmb2N1c2VkXCIpO1xuXHRcdFx0aXRlbS5lbGVtZW50LnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnbmVhcmVzdCcsIGlubGluZTogJ3N0YXJ0J30pO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8gRGF0YSBMaXN0IEdlbmVyYXRpb24gLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGhlYWRlckZpbHRlckluaXRpYWxMaXN0R2VuKCl7XG5cdFx0dGhpcy5fZ2VuZXJhdGVPcHRpb25zKHRydWUpO1xuXHR9XG5cdFxuXHRyZWJ1aWxkT3B0aW9uc0xpc3QoKXtcblx0XHR0aGlzLl9nZW5lcmF0ZU9wdGlvbnMoKVxuXHRcdFx0LnRoZW4odGhpcy5fc29ydE9wdGlvbnMuYmluZCh0aGlzKSlcblx0XHRcdC50aGVuKHRoaXMuX2J1aWxkTGlzdC5iaW5kKHRoaXMpKVxuXHRcdFx0LnRoZW4odGhpcy5fc2hvd0xpc3QuYmluZCh0aGlzKSlcblx0XHRcdC5jYXRjaCgoZSkgPT4ge1xuXHRcdFx0XHRpZighTnVtYmVyLmlzSW50ZWdlcihlKSl7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkxpc3QgZ2VuZXJhdGlvbiBlcnJvclwiLCBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH1cblx0XG5cdF9maWx0ZXJMaXN0KCl7XG5cdFx0dGhpcy5fYnVpbGRMaXN0KHRoaXMuX2ZpbHRlck9wdGlvbnMoKSk7XG5cdFx0dGhpcy5fc2hvd0xpc3QoKTtcblx0fVxuXHRcblx0X2dlbmVyYXRlT3B0aW9ucyhzaWxlbnQpe1xuXHRcdHZhciB2YWx1ZXMgPSBbXTtcblx0XHR2YXIgaXRlcmF0aW9uID0gKysgdGhpcy5saXN0SXRlcmF0aW9uO1xuXHRcdFxuXHRcdHRoaXMuZmlsdGVyZWQgPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy52YWx1ZXMpe1xuXHRcdFx0dmFsdWVzID0gdGhpcy5wYXJhbXMudmFsdWVzO1xuXHRcdH1lbHNlIGlmICh0aGlzLnBhcmFtcy52YWx1ZXNVUkwpe1xuXHRcdFx0dmFsdWVzID0gdGhpcy5fYWpheFJlcXVlc3QodGhpcy5wYXJhbXMudmFsdWVzVVJMLCB0aGlzLmlucHV0LnZhbHVlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0eXBlb2YgdGhpcy5wYXJhbXMudmFsdWVzTG9va3VwID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHR2YWx1ZXMgPSB0aGlzLnBhcmFtcy52YWx1ZXNMb29rdXAodGhpcy5jZWxsLCB0aGlzLmlucHV0LnZhbHVlKTtcblx0XHRcdH1lbHNlIGlmKHRoaXMucGFyYW1zLnZhbHVlc0xvb2t1cCl7XG5cdFx0XHRcdHZhbHVlcyA9IHRoaXMuX3VuaXF1ZUNvbHVtblZhbHVlcyh0aGlzLnBhcmFtcy52YWx1ZXNMb29rdXBGaWVsZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHZhbHVlcyBpbnN0YW5jZW9mIFByb21pc2Upe1xuXHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdHRoaXMuX2FkZFBsYWNlaG9sZGVyKHRoaXMucGFyYW1zLnBsYWNlaG9sZGVyTG9hZGluZyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiB2YWx1ZXMudGhlbigpXG5cdFx0XHRcdC50aGVuKChyZXNwb25zZVZhbHVlcykgPT4ge1xuXHRcdFx0XHRcdGlmKHRoaXMubGlzdEl0ZXJhdGlvbiA9PT0gaXRlcmF0aW9uKXtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLl9wYXJzZUxpc3QocmVzcG9uc2VWYWx1ZXMpO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChpdGVyYXRpb24pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9wYXJzZUxpc3QodmFsdWVzKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfYWRkUGxhY2Vob2xkZXIoY29udGVudHMpe1xuXHRcdHZhciBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbnRlbnRzID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0Y29udGVudHMgPSBjb250ZW50cyh0aGlzLmNlbGwuZ2V0Q29tcG9uZW50KCksIHRoaXMubGlzdEVsKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29udGVudHMpe1xuXHRcdFx0dGhpcy5fY2xlYXJMaXN0KCk7XG5cdFx0XHRcblx0XHRcdGlmKGNvbnRlbnRzIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRwbGFjZWhvbGRlciA9IGNvbnRlbnRzO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRwbGFjZWhvbGRlci5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXQtbGlzdC1wbGFjZWhvbGRlclwiKTtcblx0XHRcdFx0cGxhY2Vob2xkZXIuaW5uZXJIVE1MID0gY29udGVudHM7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMubGlzdEVsLmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5fc2hvd0xpc3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdF9hamF4UmVxdWVzdCh1cmwsIHRlcm0pe1xuXHRcdHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcy5maWx0ZXJSZW1vdGUgPyB7dGVybTp0ZXJtfSA6IHt9O1xuXHRcdHVybCA9IHVybEJ1aWxkZXIodXJsLCB7fSwgcGFyYW1zKTtcblx0XHRcblx0XHRyZXR1cm4gZmV0Y2godXJsKVxuXHRcdFx0LnRoZW4oKHJlc3BvbnNlKT0+e1xuXHRcdFx0XHRpZihyZXNwb25zZS5vaykge1xuXHRcdFx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKClcblx0XHRcdFx0XHRcdC5jYXRjaCgoZXJyb3IpPT57XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkxpc3QgQWpheCBMb2FkIEVycm9yIC0gSW52YWxpZCBKU09OIHJldHVybmVkXCIsIGVycm9yKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkxpc3QgQWpheCBMb2FkIEVycm9yIC0gQ29ubmVjdGlvbiBFcnJvcjogXCIgKyByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goKGVycm9yKT0+e1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiTGlzdCBBamF4IExvYWQgRXJyb3IgLSBDb25uZWN0aW9uIEVycm9yOiBcIiwgZXJyb3IpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHRcdFx0fSk7XG5cdH1cblx0XG5cdF91bmlxdWVDb2x1bW5WYWx1ZXMoZmllbGQpe1xuXHRcdHZhciBvdXRwdXQgPSB7fSxcblx0XHRkYXRhID0gdGhpcy50YWJsZS5nZXREYXRhKHRoaXMucGFyYW1zLnZhbHVlc0xvb2t1cCksXG5cdFx0Y29sdW1uO1xuXHRcdFxuXHRcdGlmKGZpZWxkKXtcblx0XHRcdGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb2x1bW5CeUZpZWxkKGZpZWxkKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb2x1bW4gPSB0aGlzLmNlbGwuZ2V0Q29sdW1uKCkuX2dldFNlbGYoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdGRhdGEuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHZhciB2YWwgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShyb3cpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIXRoaXMuX2VtcHR5VmFsdWVDaGVjayh2YWwpKXtcblx0XHRcdFx0XHRpZih0aGlzLnBhcmFtcy5tdWx0aXNlbGVjdCAmJiBBcnJheS5pc0FycmF5KHZhbCkpe1xuXHRcdFx0XHRcdFx0dmFsLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdFx0aWYoIXRoaXMuX2VtcHR5VmFsdWVDaGVjayhpdGVtKSl7XG5cdFx0XHRcdFx0XHRcdFx0b3V0cHV0W2l0ZW1dID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0b3V0cHV0W3ZhbF0gPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwidW5hYmxlIHRvIGZpbmQgbWF0Y2hpbmcgY29sdW1uIHRvIGNyZWF0ZSBzZWxlY3QgbG9va3VwIGxpc3Q6XCIsIGZpZWxkKTtcblx0XHRcdG91dHB1dCA9IFtdO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMob3V0cHV0KTtcblx0fVxuXG5cdF9lbXB0eVZhbHVlQ2hlY2sodmFsdWUpe1xuXHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsdWUgPT09IFwiXCI7XG5cdH1cblx0XG5cdF9wYXJzZUxpc3QoaW5wdXRWYWx1ZXMpe1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0XG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoaW5wdXRWYWx1ZXMpKXtcblx0XHRcdGlucHV0VmFsdWVzID0gT2JqZWN0LmVudHJpZXMoaW5wdXRWYWx1ZXMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bGFiZWw6dmFsdWUsXG5cdFx0XHRcdFx0dmFsdWU6a2V5LFxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlucHV0VmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB7XG5cdFx0XHRpZih0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHR2YWx1ZSA9IHtcblx0XHRcdFx0XHRsYWJlbDp2YWx1ZSxcblx0XHRcdFx0XHR2YWx1ZTp2YWx1ZSxcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5fcGFyc2VMaXN0SXRlbSh2YWx1ZSwgZGF0YSwgMCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoIXRoaXMuY3VycmVudEl0ZW1zLmxlbmd0aCAmJiB0aGlzLnBhcmFtcy5mcmVldGV4dCl7XG5cdFx0XHR0aGlzLmlucHV0LnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWVzO1xuXHRcdFx0dGhpcy50eXBpbmcgPSB0cnVlO1xuXHRcdFx0dGhpcy5sYXN0QWN0aW9uID0gXCJ0eXBpbmdcIjtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcblx0XHRcblx0XHRyZXR1cm4gZGF0YTsgICAgXG5cdH1cblx0XG5cdF9wYXJzZUxpc3RJdGVtKG9wdGlvbiwgZGF0YSwgbGV2ZWwpe1xuXHRcdHZhciBpdGVtID0ge307XG5cdFx0XG5cdFx0aWYob3B0aW9uLm9wdGlvbnMpe1xuXHRcdFx0aXRlbSA9IHRoaXMuX3BhcnNlTGlzdEdyb3VwKG9wdGlvbiwgbGV2ZWwgKyAxKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpdGVtID0ge1xuXHRcdFx0XHRsYWJlbDpvcHRpb24ubGFiZWwsXG5cdFx0XHRcdHZhbHVlOm9wdGlvbi52YWx1ZSxcblx0XHRcdFx0aXRlbVBhcmFtczpvcHRpb24uaXRlbVBhcmFtcyxcblx0XHRcdFx0ZWxlbWVudEF0dHJpYnV0ZXM6IG9wdGlvbi5lbGVtZW50QXR0cmlidXRlcyxcblx0XHRcdFx0ZWxlbWVudDpmYWxzZSxcblx0XHRcdFx0c2VsZWN0ZWQ6ZmFsc2UsXG5cdFx0XHRcdHZpc2libGU6dHJ1ZSxcblx0XHRcdFx0bGV2ZWw6bGV2ZWwsXG5cdFx0XHRcdG9yaWdpbmFsOm9wdGlvbixcblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuaW5pdGlhbFZhbHVlcyAmJiB0aGlzLmluaXRpYWxWYWx1ZXMuaW5kZXhPZihvcHRpb24udmFsdWUpID4gLTEpe1xuXHRcdFx0XHR0aGlzLl9jaG9vc2VJdGVtKGl0ZW0sIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRkYXRhLnB1c2goaXRlbSk7XG5cdH1cblx0XG5cdF9wYXJzZUxpc3RHcm91cChvcHRpb24sIGxldmVsKXtcblx0XHR2YXIgaXRlbSA9IHtcblx0XHRcdGxhYmVsOm9wdGlvbi5sYWJlbCxcblx0XHRcdGdyb3VwOnRydWUsXG5cdFx0XHRpdGVtUGFyYW1zOm9wdGlvbi5pdGVtUGFyYW1zLFxuXHRcdFx0ZWxlbWVudEF0dHJpYnV0ZXM6b3B0aW9uLmVsZW1lbnRBdHRyaWJ1dGVzLFxuXHRcdFx0ZWxlbWVudDpmYWxzZSxcblx0XHRcdHZpc2libGU6dHJ1ZSxcblx0XHRcdGxldmVsOmxldmVsLFxuXHRcdFx0b3B0aW9uczpbXSxcblx0XHRcdG9yaWdpbmFsOm9wdGlvbixcblx0XHR9O1xuXHRcdFxuXHRcdG9wdGlvbi5vcHRpb25zLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHR0aGlzLl9wYXJzZUxpc3RJdGVtKGNoaWxkLCBpdGVtLm9wdGlvbnMsIGxldmVsKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXHRcblx0X3NvcnRPcHRpb25zKG9wdGlvbnMpe1xuXHRcdHZhciBzb3J0ZXI7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMuc29ydCl7XG5cdFx0XHRzb3J0ZXIgPSB0eXBlb2YgdGhpcy5wYXJhbXMuc29ydCA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5wYXJhbXMuc29ydCA6IHRoaXMuX2RlZmF1bHRTb3J0RnVuY3Rpb24uYmluZCh0aGlzKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5fc29ydEdyb3VwKHNvcnRlciwgb3B0aW9ucyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9XG5cdFxuXHRfc29ydEdyb3VwKHNvcnRlciwgb3B0aW9ucyl7XG5cdFx0b3B0aW9ucy5zb3J0KChhLGIpID0+IHtcblx0XHRcdHJldHVybiBzb3J0ZXIoYS5sYWJlbCwgYi5sYWJlbCwgYS52YWx1ZSwgYi52YWx1ZSwgYS5vcmlnaW5hbCwgYi5vcmlnaW5hbCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0b3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0XHRcdGlmKG9wdGlvbi5ncm91cCl7XG5cdFx0XHRcdHRoaXMuX3NvcnRHcm91cChzb3J0ZXIsIG9wdGlvbi5vcHRpb25zKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0X2RlZmF1bHRTb3J0RnVuY3Rpb24oYXMsIGJzKXtcblx0XHR2YXIgYSwgYiwgYTEsIGIxLCBpPSAwLCBMLCByeCA9IC8oXFxkKyl8KFxcRCspL2csIHJkID0gL1xcZC87XG5cdFx0dmFyIGVtcHR5QWxpZ24gPSAwO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnNvcnQgPT09IFwiZGVzY1wiKXtcblx0XHRcdFthcywgYnNdID0gW2JzLCBhc107XG5cdFx0fVxuXHRcdFxuXHRcdC8vaGFuZGxlIGVtcHR5IHZhbHVlc1xuXHRcdGlmKCFhcyAmJiBhcyE9PSAwKXtcblx0XHRcdGVtcHR5QWxpZ24gPSAgIWJzICYmIGJzIT09IDAgPyAwIDogLTE7XG5cdFx0fWVsc2UgaWYoIWJzICYmIGJzIT09IDApe1xuXHRcdFx0ZW1wdHlBbGlnbiA9ICAxO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGlzRmluaXRlKGFzKSAmJiBpc0Zpbml0ZShicykpIHJldHVybiBhcyAtIGJzO1xuXHRcdFx0YSA9IFN0cmluZyhhcykudG9Mb3dlckNhc2UoKTtcblx0XHRcdGIgPSBTdHJpbmcoYnMpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRpZihhID09PSBiKSByZXR1cm4gMDtcblx0XHRcdGlmKCEocmQudGVzdChhKSAmJiByZC50ZXN0KGIpKSkgcmV0dXJuIGEgPiBiID8gMSA6IC0xO1xuXHRcdFx0YSA9IGEubWF0Y2gocngpO1xuXHRcdFx0YiA9IGIubWF0Y2gocngpO1xuXHRcdFx0TCA9IGEubGVuZ3RoID4gYi5sZW5ndGggPyBiLmxlbmd0aCA6IGEubGVuZ3RoO1xuXHRcdFx0d2hpbGUoaSA8IEwpe1xuXHRcdFx0XHRhMT0gYVtpXTtcblx0XHRcdFx0YjE9IGJbaSsrXTtcblx0XHRcdFx0aWYoYTEgIT09IGIxKXtcblx0XHRcdFx0XHRpZihpc0Zpbml0ZShhMSkgJiYgaXNGaW5pdGUoYjEpKXtcblx0XHRcdFx0XHRcdGlmKGExLmNoYXJBdCgwKSA9PT0gXCIwXCIpIGExID0gXCIuXCIgKyBhMTtcblx0XHRcdFx0XHRcdGlmKGIxLmNoYXJBdCgwKSA9PT0gXCIwXCIpIGIxID0gXCIuXCIgKyBiMTtcblx0XHRcdFx0XHRcdHJldHVybiBhMSAtIGIxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHJldHVybiBhMSA+IGIxID8gMSA6IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBhLmxlbmd0aCA+IGIubGVuZ3RoO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZW1wdHlBbGlnbjtcblx0fVxuXHRcblx0X2ZpbHRlck9wdGlvbnMoKXtcblx0XHR2YXIgZmlsdGVyRnVuYyA9IHRoaXMucGFyYW1zLmZpbHRlckZ1bmMgfHwgdGhpcy5fZGVmYXVsdEZpbHRlckZ1bmMsXG5cdFx0dGVybSA9IHRoaXMuaW5wdXQudmFsdWU7XG5cdFx0XG5cdFx0aWYodGVybSl7XG5cdFx0XHR0aGlzLmZpbHRlcmVkID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0dGhpcy5fZmlsdGVySXRlbShmaWx0ZXJGdW5jLCB0ZXJtLCBpdGVtKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZmlsdGVyZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZGF0YTtcblx0fVxuXHRcblx0X2ZpbHRlckl0ZW0oZnVuYywgdGVybSwgaXRlbSl7XG5cdFx0dmFyIG1hdGNoZXMgPSBmYWxzZTtcblx0XHRcblx0XHRpZighaXRlbS5ncm91cCl7XG5cdFx0XHRpdGVtLnZpc2libGUgPSBmdW5jKHRlcm0sIGl0ZW0ubGFiZWwsIGl0ZW0udmFsdWUsIGl0ZW0ub3JpZ2luYWwpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGl0ZW0ub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0XHRcdFx0aWYodGhpcy5fZmlsdGVySXRlbShmdW5jLCB0ZXJtLCBvcHRpb24pKXtcblx0XHRcdFx0XHRtYXRjaGVzID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGl0ZW0udmlzaWJsZSA9IG1hdGNoZXM7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBpdGVtLnZpc2libGU7XG5cdH1cblx0XG5cdF9kZWZhdWx0RmlsdGVyRnVuYyh0ZXJtLCBsYWJlbCwgdmFsdWUsIGl0ZW0pe1xuXHRcdHRlcm0gPSBTdHJpbmcodGVybSkudG9Mb3dlckNhc2UoKTtcblx0XHRcblx0XHRpZihsYWJlbCAhPT0gbnVsbCAmJiB0eXBlb2YgbGFiZWwgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0aWYoU3RyaW5nKGxhYmVsKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGVybSkgPiAtMSB8fCBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXJtKSA+IC0xKXtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8gRGlzcGxheSBMaXN0IC8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdF9jbGVhckxpc3QoKXtcblx0XHR3aGlsZSh0aGlzLmxpc3RFbC5maXJzdENoaWxkKSB0aGlzLmxpc3RFbC5yZW1vdmVDaGlsZCh0aGlzLmxpc3RFbC5maXJzdENoaWxkKTtcblx0XHRcblx0XHR0aGlzLmRpc3BsYXlJdGVtcyA9IFtdO1xuXHR9XG5cdFxuXHRfYnVpbGRMaXN0KGRhdGEpe1xuXHRcdHRoaXMuX2NsZWFyTGlzdCgpO1xuXHRcdFxuXHRcdGRhdGEuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG5cdFx0XHR0aGlzLl9idWlsZEl0ZW0ob3B0aW9uKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZighdGhpcy5kaXNwbGF5SXRlbXMubGVuZ3RoKXtcblx0XHRcdHRoaXMuX2FkZFBsYWNlaG9sZGVyKHRoaXMucGFyYW1zLnBsYWNlaG9sZGVyRW1wdHkpO1xuXHRcdH0gIFxuXHR9XG5cdFxuXHRfYnVpbGRJdGVtKGl0ZW0pe1xuXHRcdHZhciBlbCA9IGl0ZW0uZWxlbWVudCxcblx0XHRjb250ZW50cztcblx0XHRcblx0XHRpZighdGhpcy5maWx0ZXJlZCB8fCBpdGVtLnZpc2libGUpe1xuXHRcdFx0XG5cdFx0XHRpZighZWwpe1xuXHRcdFx0XHRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdGVsLnRhYkluZGV4ID0gMDtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnRlbnRzID0gdGhpcy5wYXJhbXMuaXRlbUZvcm1hdHRlciA/IHRoaXMucGFyYW1zLml0ZW1Gb3JtYXR0ZXIoaXRlbS5sYWJlbCwgaXRlbS52YWx1ZSwgaXRlbS5vcmlnaW5hbCwgZWwpIDogaXRlbS5sYWJlbDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNvbnRlbnRzIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRcdGVsLmFwcGVuZENoaWxkKGNvbnRlbnRzKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLmlubmVySFRNTCA9IGNvbnRlbnRzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtLmdyb3VwKXtcblx0XHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cFwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW1cIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLVwiICsgaXRlbS5sZXZlbCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRcdGZvciAobGV0IGtleSBpbiBpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdFx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIHRoaXMuaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGl0ZW0uZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtLmdyb3VwKXtcblx0XHRcdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5fZ3JvdXBDbGljay5iaW5kKHRoaXMsIGl0ZW0pKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9pdGVtQ2xpY2suYmluZCh0aGlzLCBpdGVtKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fcHJldmVudEJsdXIuYmluZCh0aGlzKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpdGVtLmVsZW1lbnQgPSBlbDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5fc3R5bGVJdGVtKGl0ZW0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxpc3RFbC5hcHBlbmRDaGlsZChlbCk7XG5cdFx0XHRcblx0XHRcdGlmKGl0ZW0uZ3JvdXApe1xuXHRcdFx0XHRpdGVtLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fYnVpbGRJdGVtKG9wdGlvbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRpc3BsYXlJdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X3Nob3dMaXN0KCl7XG5cdFx0dmFyIHN0YXJ0VmlzID0gdGhpcy5wb3B1cCAmJiB0aGlzLnBvcHVwLmlzVmlzaWJsZSgpO1xuXHRcdFxuXHRcdGlmKHRoaXMuaW5wdXQucGFyZW50Tm9kZSl7XG5cdFx0XHRpZih0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUgJiYgdGhpcy5pbnB1dC52YWx1ZSA9PT0gXCJcIiAmJiAhdGhpcy5wYXJhbXMubGlzdE9uRW1wdHkpe1xuXHRcdFx0XHRpZih0aGlzLnBvcHVwKXtcblx0XHRcdFx0XHR0aGlzLnBvcHVwLmhpZGUodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLl9zZXRMaXN0V2lkdGgoKTtcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMucG9wdXApe1xuXHRcdFx0XHR0aGlzLnBvcHVwID0gdGhpcy5lZGl0LnBvcHVwKHRoaXMubGlzdEVsKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wb3B1cC5zaG93KHRoaXMuY2VsbC5nZXRFbGVtZW50KCksIFwiYm90dG9tXCIpO1xuXHRcdFx0XG5cdFx0XHRpZighc3RhcnRWaXMpe1xuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBvcHVwLmhpZGVPbkJsdXIodGhpcy5fcmVzb2x2ZVZhbHVlLmJpbmQodGhpcywgdHJ1ZSkpO1xuXHRcdFx0XHR9LCAxMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfc3R5bGVJdGVtKGl0ZW0pe1xuXHRcdGlmKGl0ZW0gJiYgaXRlbS5lbGVtZW50KXtcblx0XHRcdGlmKGl0ZW0uc2VsZWN0ZWQpe1xuXHRcdFx0XHRpdGVtLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aXRlbS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVXNlciBJbnRlcmFjdGlvbiAvLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2l0ZW1DbGljayhpdGVtLCBlKXtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFxuXHRcdHRoaXMuX2Nob29zZUl0ZW0oaXRlbSk7XG5cdH1cblx0XG5cdF9ncm91cENsaWNrKGl0ZW0sIGUpe1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8gQ3VycmVudCBJdGVtIE1hbmFnZW1lbnQgLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2NhbmNlbCgpe1xuXHRcdHRoaXMucG9wdXAuaGlkZSh0cnVlKTtcblx0XHR0aGlzLmFjdGlvbnMuY2FuY2VsKCk7XG5cdH1cblx0XG5cdF9jbGVhckNob2ljZXMoKXtcblx0XHR0aGlzLnR5cGluZyA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50SXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0aXRlbS5zZWxlY3RlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fc3R5bGVJdGVtKGl0ZW0pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuY3VycmVudEl0ZW1zID0gW107XG5cdFx0XG5cdFx0dGhpcy5mb2N1c2VkSXRlbSA9IG51bGw7XG5cdH1cblx0XG5cdF9jaG9vc2VJdGVtKGl0ZW0sIHNpbGVudCl7XG5cdFx0dmFyIGluZGV4O1xuXHRcdFxuXHRcdHRoaXMudHlwaW5nID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMubXVsdGlzZWxlY3Qpe1xuXHRcdFx0aW5kZXggPSB0aGlzLmN1cnJlbnRJdGVtcy5pbmRleE9mKGl0ZW0pO1xuXHRcdFx0XG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5jdXJyZW50SXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0aXRlbS5zZWxlY3RlZCA9IGZhbHNlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRpdGVtLnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5pbnB1dC52YWx1ZSA9IHRoaXMuY3VycmVudEl0ZW1zLm1hcChpdGVtID0+IGl0ZW0ubGFiZWwpLmpvaW4oXCIsXCIpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLl9zdHlsZUl0ZW0oaXRlbSk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmN1cnJlbnRJdGVtcyA9IFtpdGVtXTtcblx0XHRcdGl0ZW0uc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmlucHV0LnZhbHVlID0gaXRlbS5sYWJlbDtcblx0XHRcdFxuXHRcdFx0dGhpcy5fc3R5bGVJdGVtKGl0ZW0pO1xuXHRcdFx0XG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0dGhpcy5fcmVzb2x2ZVZhbHVlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuX2ZvY3VzSXRlbShpdGVtKTtcblx0fVxuXHRcblx0X3Jlc29sdmVWYWx1ZShibHVyKXtcblx0XHR2YXIgb3V0cHV0LCBpbml0aWFsVmFsdWU7XG5cdFx0XG5cdFx0aWYodGhpcy5wb3B1cCl7XG5cdFx0XHR0aGlzLnBvcHVwLmhpZGUodHJ1ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLm11bHRpc2VsZWN0KXtcblx0XHRcdG91dHB1dCA9IHRoaXMuY3VycmVudEl0ZW1zLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGJsdXIgJiYgdGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlICYmIHRoaXMudHlwaW5nKXtcblx0XHRcdFx0aWYodGhpcy5wYXJhbXMuZnJlZXRleHQgfHwgKHRoaXMucGFyYW1zLmFsbG93RW1wdHkgJiYgdGhpcy5pbnB1dC52YWx1ZSA9PT0gXCJcIikpe1xuXHRcdFx0XHRcdG91dHB1dCA9IHRoaXMuaW5wdXQudmFsdWU7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLmFjdGlvbnMuY2FuY2VsKCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMuY3VycmVudEl0ZW1zWzBdKXtcblx0XHRcdFx0XHRvdXRwdXQgPSB0aGlzLmN1cnJlbnRJdGVtc1swXS52YWx1ZTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGluaXRpYWxWYWx1ZSA9IEFycmF5LmlzQXJyYXkodGhpcy5pbml0aWFsVmFsdWVzKSA/IHRoaXMuaW5pdGlhbFZhbHVlc1swXSA6IHRoaXMuaW5pdGlhbFZhbHVlcztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihpbml0aWFsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGluaXRpYWxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbml0aWFsVmFsdWUgPT09IFwiXCIpe1xuXHRcdFx0XHRcdFx0b3V0cHV0ID0gaW5pdGlhbFZhbHVlO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdG91dHB1dCA9IHRoaXMucGFyYW1zLmVtcHR5VmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihvdXRwdXQgPT09IFwiXCIpe1xuXHRcdFx0b3V0cHV0ID0gdGhpcy5wYXJhbXMuZW1wdHlWYWx1ZTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5hY3Rpb25zLnN1Y2Nlc3Mob3V0cHV0KTtcblx0XHRcblx0XHRpZih0aGlzLmlzRmlsdGVyKXtcblx0XHRcdHRoaXMuaW5pdGlhbFZhbHVlcyA9IG91dHB1dCAmJiAhQXJyYXkuaXNBcnJheShvdXRwdXQpID8gW291dHB1dF0gOiBvdXRwdXQ7XG5cdFx0XHR0aGlzLmN1cnJlbnRJdGVtcyA9IFtdO1xuXHRcdH1cblx0fVxuXHRcbn07XG5cbmZ1bmN0aW9uIGxpc3QoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgbGlzdCA9IG5ldyBFZGl0JDEodGhpcywgY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpO1xuXG5cdHJldHVybiBsaXN0LmlucHV0O1xufVxuXG4vL3N0YXIgcmF0aW5nXG5mdW5jdGlvbiBzdGFyJDEoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgc2VsZiA9IHRoaXMsXG5cdGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0dmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXG5cdG1heFN0YXJzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN2Z1wiKS5sZW5ndGggfHwgNSxcblx0c2l6ZSA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdmdcIilbMF0gPyBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3ZnXCIpWzBdLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpIDogMTQsXG5cdHN0YXJzID0gW10sXG5cdHN0YXJzSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0c3RhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInN2Z1wiKTtcblxuXG5cdC8vY2hhbmdlIHN0YXIgdHlwZVxuXHRmdW5jdGlvbiBzdGFyQ2hhbmdlKHZhbCl7XG5cdFx0c3RhcnMuZm9yRWFjaChmdW5jdGlvbihzdGFyLCBpKXtcblx0XHRcdGlmKGkgPCB2YWwpe1xuXHRcdFx0XHRpZihzZWxmLnRhYmxlLmJyb3dzZXIgPT0gXCJpZVwiKXtcblx0XHRcdFx0XHRzdGFyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGFidWxhdG9yLXN0YXItYWN0aXZlXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0c3Rhci5jbGFzc0xpc3QucmVwbGFjZShcInRhYnVsYXRvci1zdGFyLWluYWN0aXZlXCIsIFwidGFidWxhdG9yLXN0YXItYWN0aXZlXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3Rhci5pbm5lckhUTUwgPSAnPHBvbHlnb24gZmlsbD1cIiM0ODhDRTlcIiBzdHJva2U9XCIjMDE0QUFFXCIgc3Ryb2tlLXdpZHRoPVwiMzcuNjE1MlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS1taXRlcmxpbWl0PVwiMTBcIiBwb2ludHM9XCIyNTkuMjE2LDI5Ljk0MiAzMzAuMjcsMTczLjkxOSA0ODkuMTYsMTk3LjAwNyAzNzQuMTg1LDMwOS4wOCA0MDEuMzMsNDY3LjMxIDI1OS4yMTYsMzkyLjYxMiAxMTcuMTA0LDQ2Ny4zMSAxNDQuMjUsMzA5LjA4IDI5LjI3NCwxOTcuMDA3IDE4OC4xNjUsMTczLjkxOSBcIi8+Jztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoc2VsZi50YWJsZS5icm93c2VyID09IFwiaWVcIil7XG5cdFx0XHRcdFx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInRhYnVsYXRvci1zdGFyLWluYWN0aXZlXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0c3Rhci5jbGFzc0xpc3QucmVwbGFjZShcInRhYnVsYXRvci1zdGFyLWFjdGl2ZVwiLCBcInRhYnVsYXRvci1zdGFyLWluYWN0aXZlXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3Rhci5pbm5lckhUTUwgPSAnPHBvbHlnb24gZmlsbD1cIiMwMTAxNTVcIiBzdHJva2U9XCIjNjg2ODY4XCIgc3Ryb2tlLXdpZHRoPVwiMzcuNjE1MlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS1taXRlcmxpbWl0PVwiMTBcIiBwb2ludHM9XCIyNTkuMjE2LDI5Ljk0MiAzMzAuMjcsMTczLjkxOSA0ODkuMTYsMTk3LjAwNyAzNzQuMTg1LDMwOS4wOCA0MDEuMzMsNDY3LjMxIDI1OS4yMTYsMzkyLjYxMiAxMTcuMTA0LDQ2Ny4zMSAxNDQuMjUsMzA5LjA4IDI5LjI3NCwxOTcuMDA3IDE4OC4xNjUsMTczLjkxOSBcIi8+Jztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vYnVpbGQgc3RhcnNcblx0ZnVuY3Rpb24gYnVpbGRTdGFyKGkpe1xuXG5cdFx0dmFyIHN0YXJIb2xkZXIgPSAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0dmFyIG5leHRTdGFyID0gc3Rhci5jbG9uZU5vZGUodHJ1ZSk7XG5cblx0XHRzdGFycy5wdXNoKG5leHRTdGFyKTtcblxuXHRcdHN0YXJIb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdHN0YXJDaGFuZ2UoaSk7XG5cdFx0fSk7XG5cblx0XHRzdGFySG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9KTtcblxuXHRcdHN0YXJIb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRzdWNjZXNzKGkpO1xuXHRcdFx0ZWxlbWVudC5ibHVyKCk7XG5cdFx0fSk7XG5cblx0XHRzdGFySG9sZGVyLmFwcGVuZENoaWxkKG5leHRTdGFyKTtcblx0XHRzdGFyc0hvbGRlci5hcHBlbmRDaGlsZChzdGFySG9sZGVyKTtcblxuXHR9XG5cblx0Ly9oYW5kbGUga2V5Ym9hcmQgbmF2aWdhdGlvbiB2YWx1ZSBjaGFuZ2Vcblx0ZnVuY3Rpb24gY2hhbmdlVmFsdWUodmFsKXtcblx0XHR2YWx1ZSA9IHZhbDtcblx0XHRzdGFyQ2hhbmdlKHZhbCk7XG5cdH1cblxuXHQvL3N0eWxlIGNlbGxcblx0ZWxlbWVudC5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcblx0ZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdGVsZW1lbnQuc3R5bGUudGV4dE92ZXJmbG93ID0gXCJlbGxpcHNpc1wiO1xuXG5cdC8vc3R5bGUgaG9sZGluZyBlbGVtZW50XG5cdHN0YXJzSG9sZGVyLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSBcIm1pZGRsZVwiO1xuXHRzdGFyc0hvbGRlci5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0c3RhcnNIb2xkZXIuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cblx0Ly9zdHlsZSBzdGFyXG5cdHN0YXIuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgc2l6ZSk7XG5cdHN0YXIuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHNpemUpO1xuXHRzdGFyLnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIiwgXCIwIDAgNTEyIDUxMlwiKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJ4bWw6c3BhY2VcIiwgXCJwcmVzZXJ2ZVwiKTtcblx0c3Rhci5zdHlsZS5wYWRkaW5nID0gXCIwIDFweFwiO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyAmJiB0eXBlb2YgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAobGV0IGtleSBpbiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMpe1xuXHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0c3RhcnNIb2xkZXIuc2V0QXR0cmlidXRlKGtleSwgc3RhcnNIb2xkZXIuZ2V0QXR0cmlidXRlKGtleSkgKyBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0c3RhcnNIb2xkZXIuc2V0QXR0cmlidXRlKGtleSwgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vY3JlYXRlIGNvcnJlY3QgbnVtYmVyIG9mIHN0YXJzXG5cdGZvcih2YXIgaT0xO2k8PSBtYXhTdGFycztpKyspe1xuXHRcdGJ1aWxkU3RhcihpKTtcblx0fVxuXG5cdC8vZW5zdXJlIHZhbHVlIGRvZXMgbm90IGV4Y2VlZCBudW1iZXIgb2Ygc3RhcnNcblx0dmFsdWUgPSBNYXRoLm1pbihwYXJzZUludCh2YWx1ZSksIG1heFN0YXJzKTtcblxuXHQvLyBzZXQgaW5pdGlhbCBzdHlsaW5nIG9mIHN0YXJzXG5cdHN0YXJDaGFuZ2UodmFsdWUpO1xuXG5cdHN0YXJzSG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3RhckNoYW5nZSgwKTtcblx0fSk7XG5cblx0c3RhcnNIb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN1Y2Nlc3MoMCk7XG5cdH0pO1xuXG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZnVuY3Rpb24oZSl7XG5cdFx0Y2FuY2VsKCk7XG5cdH0pO1xuXG5cdC8vYWxsb3cga2V5IGJhc2VkIG5hdmlnYXRpb25cblx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdGNhc2UgMzk6IC8vcmlnaHQgYXJyb3dcblx0XHRcdFx0Y2hhbmdlVmFsdWUodmFsdWUgKyAxKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzc6IC8vbGVmdCBhcnJvd1xuXHRcdFx0XHRjaGFuZ2VWYWx1ZSh2YWx1ZSAtIDEpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAxMzogLy9lbnRlclxuXHRcdFx0XHRzdWNjZXNzKHZhbHVlKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjc6IC8vZXNjYXBlXG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBzdGFyc0hvbGRlcjtcbn1cblxuLy9kcmFnZ2FibGUgcHJvZ3Jlc3MgYmFyXG5mdW5jdGlvbiBwcm9ncmVzcyQxKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0bWF4ID0gdHlwZW9mIGVkaXRvclBhcmFtcy5tYXggPT09IFwidW5kZWZpbmVkXCIgPyAoKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIilbMF0gJiYgZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXS5nZXRBdHRyaWJ1dGUoXCJtYXhcIikpIHx8IDEwMCkgOiBlZGl0b3JQYXJhbXMubWF4LFxuXHRtaW4gPSB0eXBlb2YgZWRpdG9yUGFyYW1zLm1pbiA9PT0gXCJ1bmRlZmluZWRcIiA/ICgoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXSAmJiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpWzBdLmdldEF0dHJpYnV0ZShcIm1pblwiKSkgfHwgMCkgOiBlZGl0b3JQYXJhbXMubWluLFxuXHRwZXJjZW50ID0gKG1heCAtIG1pbikgLyAxMDAsXG5cdHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpIHx8IDAsXG5cdGhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdG1vdXNlRHJhZywgbW91c2VEcmFnV2lkdGg7XG5cblx0Ly9zZXQgbmV3IHZhbHVlXG5cdGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKCl7XG5cdFx0dmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5cblx0XHR2YXIgY2FsY1ZhbCA9IChwZXJjZW50ICogTWF0aC5yb3VuZChiYXIub2Zmc2V0V2lkdGggLyAoKGVsZW1lbnQuY2xpZW50V2lkdGggLSBwYXJzZUludChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy1sZWZ0XCIpKSAtIHBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKSkvMTAwKSkpICsgbWluO1xuXHRcdHN1Y2Nlc3MoY2FsY1ZhbCk7XG5cdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIGNhbGNWYWwpO1xuXHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSk7XG5cdH1cblxuXHQvL3N0eWxlIGhhbmRsZVxuXHRoYW5kbGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdGhhbmRsZS5zdHlsZS5yaWdodCA9IFwiMFwiO1xuXHRoYW5kbGUuc3R5bGUudG9wID0gXCIwXCI7XG5cdGhhbmRsZS5zdHlsZS5ib3R0b20gPSBcIjBcIjtcblx0aGFuZGxlLnN0eWxlLndpZHRoID0gXCI1cHhcIjtcblx0aGFuZGxlLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJvZ3Jlc3MtaGFuZGxlXCIpO1xuXG5cdC8vc3R5bGUgYmFyXG5cdGJhci5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0YmFyLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHQvLyBiYXIuc3R5bGUudG9wID0gXCI4cHhcIjtcblx0Ly8gYmFyLnN0eWxlLmJvdHRvbSA9IFwiOHB4XCI7XG5cdC8vIGJhci5zdHlsZS5sZWZ0ID0gXCI0cHhcIjtcblx0Ly8gYmFyLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI0cHhcIjtcblx0YmFyLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRiYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjNDg4Q0U5XCI7XG5cdGJhci5zdHlsZS5tYXhXaWR0aCA9IFwiMTAwJVwiO1xuXHRiYXIuc3R5bGUubWluV2lkdGggPSBcIjAlXCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRiYXIuc2V0QXR0cmlidXRlKGtleSwgYmFyLmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGJhci5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9zdHlsZSBjZWxsXG5cdGVsZW1lbnQuc3R5bGUucGFkZGluZyA9IFwiNHB4IDRweFwiO1xuXG5cdC8vbWFrZSBzdXJlIHZhbHVlIGlzIGluIHJhbmdlXG5cdHZhbHVlID0gTWF0aC5taW4ocGFyc2VGbG9hdCh2YWx1ZSksIG1heCk7XG5cdHZhbHVlID0gTWF0aC5tYXgocGFyc2VGbG9hdCh2YWx1ZSksIG1pbik7XG5cblx0Ly93b3Jrb3V0IHBlcmNlbnRhZ2Vcblx0dmFsdWUgPSBNYXRoLnJvdW5kKCh2YWx1ZSAtIG1pbikgLyBwZXJjZW50KTtcblx0Ly8gYmFyLnN0eWxlLnJpZ2h0ID0gdmFsdWUgKyBcIiVcIjtcblx0YmFyLnN0eWxlLndpZHRoID0gdmFsdWUgKyBcIiVcIjtcblxuXHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtaW5cIiwgbWluKTtcblx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWF4XCIsIG1heCk7XG5cblx0YmFyLmFwcGVuZENoaWxkKGhhbmRsZSk7XG5cblx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0bW91c2VEcmFnID0gZS5zY3JlZW5YO1xuXHRcdG1vdXNlRHJhZ1dpZHRoID0gYmFyLm9mZnNldFdpZHRoO1xuXHR9KTtcblxuXHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuXHRcdGhhbmRsZS5zdHlsZS5jdXJzb3IgPSBcImV3LXJlc2l6ZVwiO1xuXHR9KTtcblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZSl7XG5cdFx0aWYobW91c2VEcmFnKXtcblx0XHRcdGJhci5zdHlsZS53aWR0aCA9IChtb3VzZURyYWdXaWR0aCArIGUuc2NyZWVuWCAtIG1vdXNlRHJhZykgKyBcInB4XCI7XG5cdFx0fVxuXHR9KTtcblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdGlmKG1vdXNlRHJhZyl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblxuXHRcdFx0bW91c2VEcmFnID0gZmFsc2U7XG5cdFx0XHRtb3VzZURyYWdXaWR0aCA9IGZhbHNlO1xuXG5cdFx0XHR1cGRhdGVWYWx1ZSgpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly9hbGxvdyBrZXkgYmFzZWQgbmF2aWdhdGlvblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Y2FzZSAzOTogLy9yaWdodCBhcnJvd1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGJhci5zdHlsZS53aWR0aCA9IChiYXIuY2xpZW50V2lkdGggKyBlbGVtZW50LmNsaWVudFdpZHRoLzEwMCkgKyBcInB4XCI7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM3OiAvL2xlZnQgYXJyb3dcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRiYXIuc3R5bGUud2lkdGggPSAoYmFyLmNsaWVudFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aC8xMDApICsgXCJweFwiO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSA5OiAvL3RhYlxuXHRcdFx0Y2FzZSAxMzogLy9lbnRlclxuXHRcdFx0XHR1cGRhdGVWYWx1ZSgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyNzogLy9lc2NhcGVcblx0XHRcdFx0Y2FuY2VsKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXHR9KTtcblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKCl7XG5cdFx0Y2FuY2VsKCk7XG5cdH0pO1xuXG5cdHJldHVybiBiYXI7XG59XG5cbi8vY2hlY2tib3hcbmZ1bmN0aW9uIHRpY2tDcm9zcyQxKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcblx0dHJpc3RhdGUgPSBlZGl0b3JQYXJhbXMudHJpc3RhdGUsXG5cdGluZGV0ZXJtVmFsdWUgPSB0eXBlb2YgZWRpdG9yUGFyYW1zLmluZGV0ZXJtaW5hdGVWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IG51bGwgOiBlZGl0b3JQYXJhbXMuaW5kZXRlcm1pbmF0ZVZhbHVlLFxuXHRpbmRldGVybVN0YXRlID0gZmFsc2UsXG5cdHRydWVWYWx1ZVNldCA9IE9iamVjdC5rZXlzKGVkaXRvclBhcmFtcykuaW5jbHVkZXMoXCJ0cnVlVmFsdWVcIiksXG5cdGZhbHNlVmFsdWVTZXQgPSBPYmplY3Qua2V5cyhlZGl0b3JQYXJhbXMpLmluY2x1ZGVzKFwiZmFsc2VWYWx1ZVwiKTtcblx0XG5cdGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJjaGVja2JveFwiKTtcblx0aW5wdXQuc3R5bGUubWFyZ2luVG9wID0gXCI1cHhcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGlucHV0LnZhbHVlID0gdmFsdWU7XG5cdFxuXHRpZih0cmlzdGF0ZSAmJiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiIHx8IHZhbHVlID09PSBpbmRldGVybVZhbHVlIHx8IHZhbHVlID09PSBcIlwiKSl7XG5cdFx0aW5kZXRlcm1TdGF0ZSA9IHRydWU7XG5cdFx0aW5wdXQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XG5cdH1cblx0XG5cdGlmKHRoaXMudGFibGUuYnJvd3NlciAhPSBcImZpcmVmb3hcIiAmJiB0aGlzLnRhYmxlLmJyb3dzZXIgIT0gXCJzYWZhcmlcIil7IC8vcHJldmVudCBibHVyIGlzc3VlIG9uIG1hYyBmaXJlZm94XG5cdFx0b25SZW5kZXJlZChmdW5jdGlvbigpe1xuXHRcdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0aW5wdXQuY2hlY2tlZCA9IHRydWVWYWx1ZVNldCA/IHZhbHVlID09PSBlZGl0b3JQYXJhbXMudHJ1ZVZhbHVlIDogKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBcInRydWVcIiB8fCB2YWx1ZSA9PT0gXCJUcnVlXCIgfHwgdmFsdWUgPT09IDEpO1xuXHRcblx0ZnVuY3Rpb24gc2V0VmFsdWUoYmx1cil7XG5cdFx0dmFyIGNoZWNrZWRWYWx1ZSA9IGlucHV0LmNoZWNrZWQ7XG5cdFx0XG5cdFx0aWYodHJ1ZVZhbHVlU2V0ICYmIGNoZWNrZWRWYWx1ZSl7XG5cdFx0XHRjaGVja2VkVmFsdWUgPSBlZGl0b3JQYXJhbXMudHJ1ZVZhbHVlO1xuXHRcdH1lbHNlIGlmKGZhbHNlVmFsdWVTZXQgJiYgIWNoZWNrZWRWYWx1ZSl7XG5cdFx0XHRjaGVja2VkVmFsdWUgPSBlZGl0b3JQYXJhbXMuZmFsc2VWYWx1ZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodHJpc3RhdGUpe1xuXHRcdFx0aWYoIWJsdXIpe1xuXHRcdFx0XHRpZihpbnB1dC5jaGVja2VkICYmICFpbmRldGVybVN0YXRlKXtcblx0XHRcdFx0XHRpbnB1dC5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0aW5wdXQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XG5cdFx0XHRcdFx0aW5kZXRlcm1TdGF0ZSA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuIGluZGV0ZXJtVmFsdWU7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpbmRldGVybVN0YXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrZWRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihpbmRldGVybVN0YXRlKXtcblx0XHRcdFx0XHRyZXR1cm4gaW5kZXRlcm1WYWx1ZTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBjaGVja2VkVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tlZFZhbHVlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbihlKXtcblx0XHRzdWNjZXNzKHNldFZhbHVlKCkpO1xuXHR9KTtcblxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBmdW5jdGlvbihlKXtcblx0XHRzdWNjZXNzKHNldFZhbHVlKHRydWUpKTtcblx0fSk7XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gZW50ZXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0aWYoZS5rZXlDb2RlID09IDEzKXtcblx0XHRcdHN1Y2Nlc3Moc2V0VmFsdWUoKSk7XG5cdFx0fVxuXHRcdGlmKGUua2V5Q29kZSA9PSAyNyl7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH0pO1xuXHRcblx0cmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBhZGFwdGFibGUkMShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIHBhcmFtcyl7XHJcblx0dmFyIGNvbHVtbiA9IGNlbGwuX2dldFNlbGYoKS5jb2x1bW4sXHJcblx0bG9va3VwLCBlZGl0b3JGdW5jLCBlZGl0b3JQYXJhbXM7XHJcbiAgICBcclxuXHRmdW5jdGlvbiBkZWZhdWx0TG9va3VwKGNlbGwpe1xyXG5cdFx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxyXG5cdFx0ZWRpdG9yID0gXCJpbnB1dFwiO1xyXG4gICAgICAgIFxyXG5cdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRcdGNhc2UgXCJudW1iZXJcIjpcclxuXHRcdFx0XHRlZGl0b3IgPSBcIm51bWJlclwiO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuXHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcclxuXHRcdFx0XHRlZGl0b3IgPSBcInRpY2tDcm9zc1wiO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxyXG5cdFx0XHRcdGlmKHZhbHVlLmluY2x1ZGVzKFwiXFxuXCIpKXtcclxuXHRcdFx0XHRcdGVkaXRvciA9IFwidGV4dGFyZWFcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcbiAgICAgICAgXHJcblx0XHRyZXR1cm4gZWRpdG9yO1xyXG5cdH1cclxuICAgIFxyXG5cdGxvb2t1cCA9IHBhcmFtcy5lZGl0b3JMb29rdXAgPyBwYXJhbXMuZWRpdG9yTG9va3VwKGNlbGwpIDogZGVmYXVsdExvb2t1cChjZWxsKTtcclxuXHJcblx0aWYocGFyYW1zLnBhcmFtc0xvb2t1cCl7XHJcblx0XHRlZGl0b3JQYXJhbXMgPSB0eXBlb2YgcGFyYW1zLnBhcmFtc0xvb2t1cCA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLnBhcmFtc0xvb2t1cChsb29rdXAsIGNlbGwpIDogcGFyYW1zLnBhcmFtc0xvb2t1cFtsb29rdXBdO1xyXG5cdH1cclxuXHJcblx0ZWRpdG9yRnVuYyA9IHRoaXMudGFibGUubW9kdWxlcy5lZGl0Lmxvb2t1cEVkaXRvcihsb29rdXAsIGNvbHVtbik7XHJcbiAgICBcclxuXHRyZXR1cm4gIGVkaXRvckZ1bmMuY2FsbCh0aGlzLCBjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyB8fCB7fSk7XHJcbn1cblxudmFyIGRlZmF1bHRFZGl0b3JzID0ge1xuXHRpbnB1dDppbnB1dCxcblx0dGV4dGFyZWE6dGV4dGFyZWEkMSxcblx0bnVtYmVyOm51bWJlciQxLFxuXHRyYW5nZTpyYW5nZSxcblx0ZGF0ZTpkYXRlJDEsXG5cdHRpbWU6dGltZSQxLFxuXHRkYXRldGltZTpkYXRldGltZSQyLFxuXHRsaXN0Omxpc3QsXG5cdHN0YXI6c3RhciQxLFxuXHRwcm9ncmVzczpwcm9ncmVzcyQxLFxuXHR0aWNrQ3Jvc3M6dGlja0Nyb3NzJDEsXG5cdGFkYXB0YWJsZTphZGFwdGFibGUkMSxcbn07XG5cbmNsYXNzIEVkaXQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcImVkaXRcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIGVkaXRvcnMgPSBkZWZhdWx0RWRpdG9ycztcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50Q2VsbCA9IGZhbHNlOyAvL2hvbGQgY3VycmVudGx5IGVkaXRpbmcgY2VsbFxuXHRcdHRoaXMubW91c2VDbGljayA9IGZhbHNlOyAvL2hvbGQgbW91c2Vkb3duIHN0YXRlIHRvIHByZXZlbnQgY2xpY2sgYmluZGluZyBiZWluZyBvdmVycmlkZGVuIGJ5IGVkaXRvciBvcGVuaW5nXG5cdFx0dGhpcy5yZWN1cnNpb25CbG9jayA9IGZhbHNlOyAvL3ByZXZlbnQgZm9jdXMgcmVjdXJzaW9uXG5cdFx0dGhpcy5pbnZhbGlkRWRpdCA9IGZhbHNlO1xuXHRcdHRoaXMuZWRpdGVkQ2VsbHMgPSBbXTtcblx0XHR0aGlzLmNvbnZlcnRFbXB0eVZhbHVlcyA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuZWRpdG9ycyA9IEVkaXQuZWRpdG9ycztcblx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZWRpdFRyaWdnZXJFdmVudFwiLCBcImZvY3VzXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImVkaXRvckVtcHR5VmFsdWVcIik7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZWRpdG9yRW1wdHlWYWx1ZUZ1bmNcIiwgdGhpcy5lbXB0eVZhbHVlQ2hlY2suYmluZCh0aGlzKSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZWRpdGFibGVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImVkaXRvclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZWRpdG9yUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJlZGl0b3JFbXB0eVZhbHVlXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJlZGl0b3JFbXB0eVZhbHVlRnVuY1wiKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbEVkaXRpbmdcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxFZGl0ZWRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxFZGl0Q2FuY2VsbGVkXCIpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0RWRpdGVkQ2VsbHNcIiwgdGhpcy5nZXRFZGl0ZWRDZWxscy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImNsZWFyQ2VsbEVkaXRlZFwiLCB0aGlzLmNsZWFyQ2VsbEVkaXRlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcIm5hdmlnYXRlUHJldlwiLCB0aGlzLm5hdmlnYXRlUHJldi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcIm5hdmlnYXRlTmV4dFwiLCB0aGlzLm5hdmlnYXRlTmV4dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcIm5hdmlnYXRlTGVmdFwiLCB0aGlzLm5hdmlnYXRlTGVmdC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcIm5hdmlnYXRlUmlnaHRcIiwgdGhpcy5uYXZpZ2F0ZVJpZ2h0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwibmF2aWdhdGVVcFwiLCB0aGlzLm5hdmlnYXRlVXAuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJuYXZpZ2F0ZURvd25cIiwgdGhpcy5uYXZpZ2F0ZURvd24uYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcImlzRWRpdGVkXCIsIHRoaXMuY2VsbElzRWRpdGVkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJjbGVhckVkaXRlZFwiLCB0aGlzLmNsZWFyRWRpdGVkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJlZGl0XCIsIHRoaXMuZWRpdENlbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcImNhbmNlbEVkaXRcIiwgdGhpcy5jZWxsQ2FuY2VsRWRpdC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwibmF2aWdhdGVQcmV2XCIsIHRoaXMubmF2aWdhdGVQcmV2LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJuYXZpZ2F0ZU5leHRcIiwgdGhpcy5uYXZpZ2F0ZU5leHQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcIm5hdmlnYXRlTGVmdFwiLCB0aGlzLm5hdmlnYXRlTGVmdC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwibmF2aWdhdGVSaWdodFwiLCB0aGlzLm5hdmlnYXRlUmlnaHQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcIm5hdmlnYXRlVXBcIiwgdGhpcy5uYXZpZ2F0ZVVwLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJuYXZpZ2F0ZURvd25cIiwgdGhpcy5uYXZpZ2F0ZURvd24uYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtaW5pdFwiLCB0aGlzLmJpbmRFZGl0b3IuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWRlbGV0ZVwiLCB0aGlzLmNsZWFyRWRpdGVkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1jaGFuZ2VkXCIsIHRoaXMudXBkYXRlQ2VsbENsYXNzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW5DaGVjay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1kZWxldGVcIiwgdGhpcy5jb2x1bW5EZWxldGVDaGVjay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGluZ1wiLCB0aGlzLnJvd0RlbGV0ZUNoZWNrLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWxheW91dFwiLCB0aGlzLnJvd0VkaXRhYmxlQ2hlY2suYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXJlZnJlc2hpbmdcIiwgdGhpcy5jYW5jZWxFZGl0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2xpcGJvYXJkLXBhc3RlXCIsIHRoaXMucGFzdGVCbG9ja2VyLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtcHJldlwiLCB0aGlzLm5hdmlnYXRlUHJldi5iaW5kKHRoaXMsIHVuZGVmaW5lZCkpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtbmV4dFwiLCB0aGlzLmtleWJpbmRpbmdOYXZpZ2F0ZU5leHQuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0Ly8gdGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi1sZWZ0XCIsIHRoaXMubmF2aWdhdGVMZWZ0LmJpbmQodGhpcywgdW5kZWZpbmVkKSk7XG5cdFx0Ly8gdGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi1yaWdodFwiLCB0aGlzLm5hdmlnYXRlUmlnaHQuYmluZCh0aGlzLCB1bmRlZmluZWQpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImtleWJpbmRpbmctbmF2LXVwXCIsIHRoaXMubmF2aWdhdGVVcC5iaW5kKHRoaXMsIHVuZGVmaW5lZCkpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtZG93blwiLCB0aGlzLm5hdmlnYXRlRG93bi5iaW5kKHRoaXMsIHVuZGVmaW5lZCkpO1xuXG5cdFx0aWYoT2JqZWN0LmtleXModGhpcy50YWJsZS5vcHRpb25zKS5pbmNsdWRlcyhcImVkaXRvckVtcHR5VmFsdWVcIikpe1xuXHRcdFx0dGhpcy5jb252ZXJ0RW1wdHlWYWx1ZXMgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBQYXN0ZSBOZWdhdGlvbiAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRwYXN0ZUJsb2NrZXIoZSl7XG5cdFx0aWYodGhpcy5jdXJyZW50Q2VsbCl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8gS2V5YmluZGluZyBGdW5jdGlvbnMgLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0a2V5YmluZGluZ05hdmlnYXRlTmV4dChlKXtcblx0XHR2YXIgY2VsbCA9IHRoaXMuY3VycmVudENlbGwsXG5cdFx0bmV3Um93ID0gdGhpcy5vcHRpb25zKFwidGFiRW5kTmV3Um93XCIpO1xuXG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRpZighdGhpcy5uYXZpZ2F0ZU5leHQoY2VsbCwgZSkpe1xuXHRcdFx0XHRpZihuZXdSb3cpe1xuXHRcdFx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmZpcnN0Q2hpbGQuYmx1cigpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKCF0aGlzLmludmFsaWRFZGl0KXtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYobmV3Um93ID09PSB0cnVlKXtcblx0XHRcdFx0XHRcdFx0bmV3Um93ID0gdGhpcy50YWJsZS5hZGRSb3coe30pO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZih0eXBlb2YgbmV3Um93ID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0XHRcdFx0bmV3Um93ID0gdGhpcy50YWJsZS5hZGRSb3cobmV3Um93KGNlbGwucm93LmdldENvbXBvbmVudCgpKSk7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRuZXdSb3cgPSB0aGlzLnRhYmxlLmFkZFJvdyhPYmplY3QuYXNzaWduKHt9LCBuZXdSb3cpKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRuZXdSb3cudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGNlbGwuZ2V0Q29tcG9uZW50KCkubmF2aWdhdGVOZXh0KCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gQ2VsbCBGdW5jdGlvbnMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0Y2VsbElzRWRpdGVkKGNlbGwpe1xuXHRcdHJldHVybiAhISBjZWxsLm1vZHVsZXMuZWRpdCAmJiBjZWxsLm1vZHVsZXMuZWRpdC5lZGl0ZWQ7XG5cdH1cblx0XG5cdGNlbGxDYW5jZWxFZGl0KGNlbGwpe1xuXHRcdGlmKGNlbGwgPT09IHRoaXMuY3VycmVudENlbGwpe1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmVkaXQuY2FuY2VsRWRpdCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNhbmNlbCBFZGl0b3IgRXJyb3IgLSBUaGlzIGNlbGwgaXMgbm90IGN1cnJlbnRseSBiZWluZyBlZGl0ZWQgXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHVwZGF0ZUNlbGxDbGFzcyhjZWxsKXtcblx0XHRpZih0aGlzLmFsbG93RWRpdChjZWxsKSkge1xuXHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0YWJsZVwiKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWVkaXRhYmxlXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0Y2xlYXJDZWxsRWRpdGVkKGNlbGxzKXtcblx0XHRpZighY2VsbHMpe1xuXHRcdFx0Y2VsbHMgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5nZXRFZGl0ZWRDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRpZighQXJyYXkuaXNBcnJheShjZWxscykpe1xuXHRcdFx0Y2VsbHMgPSBbY2VsbHNdO1xuXHRcdH1cblx0XHRcblx0XHRjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jbGVhckVkaXRlZChjZWxsLl9nZXRTZWxmKCkpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZVByZXYoY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBuZXh0Q2VsbCwgcHJldlJvdztcblx0XHRcblx0XHRpZihjZWxsKXtcblx0XHRcdFxuXHRcdFx0aWYoZSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bmV4dENlbGwgPSB0aGlzLm5hdmlnYXRlTGVmdCgpO1xuXHRcdFx0XG5cdFx0XHRpZihuZXh0Q2VsbCl7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRwcmV2Um93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnByZXZEaXNwbGF5Um93KGNlbGwucm93LCB0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHByZXZSb3cpe1xuXHRcdFx0XHRcdG5leHRDZWxsID0gdGhpcy5maW5kUHJldkVkaXRhYmxlQ2VsbChwcmV2Um93LCBwcmV2Um93LmNlbGxzLmxlbmd0aCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYobmV4dENlbGwpe1xuXHRcdFx0XHRcdFx0bmV4dENlbGwuZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0bmF2aWdhdGVOZXh0KGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsLCBlKXtcblx0XHR2YXIgbmV4dENlbGwsIG5leHRSb3c7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRcblx0XHRcdGlmKGUpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdG5leHRDZWxsID0gdGhpcy5uYXZpZ2F0ZVJpZ2h0KCk7XG5cdFx0XHRcblx0XHRcdGlmKG5leHRDZWxsKXtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdG5leHRSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIubmV4dERpc3BsYXlSb3coY2VsbC5yb3csIHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYobmV4dFJvdyl7XG5cdFx0XHRcdFx0bmV4dENlbGwgPSB0aGlzLmZpbmROZXh0RWRpdGFibGVDZWxsKG5leHRSb3csIC0xKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihuZXh0Q2VsbCl7XG5cdFx0XHRcdFx0XHRuZXh0Q2VsbC5nZXRDb21wb25lbnQoKS5lZGl0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZUxlZnQoY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBpbmRleCwgbmV4dENlbGw7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRcblx0XHRcdGlmKGUpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGluZGV4ID0gY2VsbC5nZXRJbmRleCgpO1xuXHRcdFx0bmV4dENlbGwgPSB0aGlzLmZpbmRQcmV2RWRpdGFibGVDZWxsKGNlbGwucm93LCBpbmRleCk7XG5cdFx0XHRcblx0XHRcdGlmKG5leHRDZWxsKXtcblx0XHRcdFx0bmV4dENlbGwuZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZVJpZ2h0KGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsLCBlKXtcblx0XHR2YXIgaW5kZXgsIG5leHRDZWxsO1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0XG5cdFx0XHRpZihlKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpbmRleCA9IGNlbGwuZ2V0SW5kZXgoKTtcblx0XHRcdG5leHRDZWxsID0gdGhpcy5maW5kTmV4dEVkaXRhYmxlQ2VsbChjZWxsLnJvdywgaW5kZXgpO1xuXHRcdFx0XG5cdFx0XHRpZihuZXh0Q2VsbCl7XG5cdFx0XHRcdG5leHRDZWxsLmdldENvbXBvbmVudCgpLmVkaXQoKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0bmF2aWdhdGVVcChjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCwgZSl7XG5cdFx0dmFyIGluZGV4LCBuZXh0Um93O1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0XG5cdFx0XHRpZihlKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpbmRleCA9IGNlbGwuZ2V0SW5kZXgoKTtcblx0XHRcdG5leHRSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIucHJldkRpc3BsYXlSb3coY2VsbC5yb3csIHRydWUpO1xuXHRcdFx0XG5cdFx0XHRpZihuZXh0Um93KXtcblx0XHRcdFx0bmV4dFJvdy5jZWxsc1tpbmRleF0uZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZURvd24oY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBpbmRleCwgbmV4dFJvdztcblx0XHRcblx0XHRpZihjZWxsKXtcblx0XHRcdFxuXHRcdFx0aWYoZSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aW5kZXggPSBjZWxsLmdldEluZGV4KCk7XG5cdFx0XHRuZXh0Um93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLm5leHREaXNwbGF5Um93KGNlbGwucm93LCB0cnVlKTtcblx0XHRcdFxuXHRcdFx0aWYobmV4dFJvdyl7XG5cdFx0XHRcdG5leHRSb3cuY2VsbHNbaW5kZXhdLmdldENvbXBvbmVudCgpLmVkaXQoKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0ZmluZE5leHRFZGl0YWJsZUNlbGwocm93LCBpbmRleCl7XG5cdFx0dmFyIG5leHRDZWxsID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoaW5kZXggPCByb3cuY2VsbHMubGVuZ3RoLTEpe1xuXHRcdFx0Zm9yKHZhciBpID0gaW5kZXgrMTsgaSA8IHJvdy5jZWxscy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdGxldCBjZWxsID0gcm93LmNlbGxzW2ldO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0ICYmIEhlbHBlcnMuZWxWaXNpYmxlKGNlbGwuZ2V0RWxlbWVudCgpKSl7XG5cdFx0XHRcdFx0bGV0IGFsbG93RWRpdCA9IHRoaXMuYWxsb3dFZGl0KGNlbGwpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGFsbG93RWRpdCl7XG5cdFx0XHRcdFx0XHRuZXh0Q2VsbCA9IGNlbGw7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG5leHRDZWxsO1xuXHR9XG5cdFxuXHRmaW5kUHJldkVkaXRhYmxlQ2VsbChyb3csIGluZGV4KXtcblx0XHR2YXIgcHJldkNlbGwgPSBmYWxzZTtcblx0XHRcblx0XHRpZihpbmRleCA+IDApe1xuXHRcdFx0Zm9yKHZhciBpID0gaW5kZXgtMTsgaSA+PSAwOyBpLS0pe1xuXHRcdFx0XHRsZXQgY2VsbCA9IHJvdy5jZWxsc1tpXTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCAmJiBIZWxwZXJzLmVsVmlzaWJsZShjZWxsLmdldEVsZW1lbnQoKSkpe1xuXHRcdFx0XHRcdGxldCBhbGxvd0VkaXQgPSB0aGlzLmFsbG93RWRpdChjZWxsKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihhbGxvd0VkaXQpe1xuXHRcdFx0XHRcdFx0cHJldkNlbGwgPSBjZWxsO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBwcmV2Q2VsbDtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGluaXRpYWxpemVDb2x1bW5DaGVjayhjb2x1bW4pe1xuXHRcdGlmKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cdFxuXHRjb2x1bW5EZWxldGVDaGVjayhjb2x1bW4pe1xuXHRcdGlmKHRoaXMuY3VycmVudENlbGwgJiYgdGhpcy5jdXJyZW50Q2VsbC5jb2x1bW4gPT09IGNvbHVtbil7XG5cdFx0XHR0aGlzLmNhbmNlbEVkaXQoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJvd0RlbGV0ZUNoZWNrKHJvdyl7XG5cdFx0aWYodGhpcy5jdXJyZW50Q2VsbCAmJiB0aGlzLmN1cnJlbnRDZWxsLnJvdyA9PT0gcm93KXtcblx0XHRcdHRoaXMuY2FuY2VsRWRpdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0cm93RWRpdGFibGVDaGVjayhyb3cpe1xuXHRcdHJvdy5nZXRDZWxscygpLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCAmJiB0eXBlb2YgY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUNlbGxDbGFzcyhjZWxsKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly9pbml0aWFsaXplIGNvbHVtbiBlZGl0b3Jcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBjb252ZXJ0RW1wdHkgPSBPYmplY3Qua2V5cyhjb2x1bW4uZGVmaW5pdGlvbikuaW5jbHVkZXMoXCJlZGl0b3JFbXB0eVZhbHVlXCIpO1xuXG5cdFx0dmFyIGNvbmZpZyA9IHtcblx0XHRcdGVkaXRvcjpmYWxzZSxcblx0XHRcdGJsb2NrZWQ6ZmFsc2UsXG5cdFx0XHRjaGVjazpjb2x1bW4uZGVmaW5pdGlvbi5lZGl0YWJsZSxcblx0XHRcdHBhcmFtczpjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3JQYXJhbXMgfHwge30sXG5cdFx0XHRjb252ZXJ0RW1wdHlWYWx1ZXM6Y29udmVydEVtcHR5LFxuXHRcdFx0ZWRpdG9yRW1wdHlWYWx1ZTpjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3JFbXB0eVZhbHVlLFxuXHRcdFx0ZWRpdG9yRW1wdHlWYWx1ZUZ1bmM6Y29sdW1uLmRlZmluaXRpb24uZWRpdG9yRW1wdHlWYWx1ZUZ1bmMsXG5cdFx0fTtcblx0XHRcblx0XHQvL3NldCBjb2x1bW4gZWRpdG9yXG5cdFx0Y29uZmlnLmVkaXRvciA9IHRoaXMubG9va3VwRWRpdG9yKGNvbHVtbi5kZWZpbml0aW9uLmVkaXRvciwgY29sdW1uKTtcblx0XHRcblx0XHRpZihjb25maWcuZWRpdG9yKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmVkaXQgPSBjb25maWc7XG5cdFx0fVxuXHR9XG5cblx0bG9va3VwRWRpdG9yKGVkaXRvciwgY29sdW1uKXtcblx0XHR2YXIgZWRpdG9yRnVuYztcblxuXHRcdHN3aXRjaCh0eXBlb2YgZWRpdG9yKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0aWYodGhpcy5lZGl0b3JzW2VkaXRvcl0pe1xuXHRcdFx0XHRcdGVkaXRvckZ1bmMgPSB0aGlzLmVkaXRvcnNbZWRpdG9yXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkVkaXRvciBFcnJvciAtIE5vIHN1Y2ggZWRpdG9yIGZvdW5kOiBcIiwgZWRpdG9yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdGVkaXRvckZ1bmMgPSBlZGl0b3I7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRpZihlZGl0b3IgPT09IHRydWUpe1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXIgIT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0XHRpZih0aGlzLmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyXSl7XG5cdFx0XHRcdFx0XHRcdGVkaXRvckZ1bmMgPSB0aGlzLmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyXTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWRpdG9yRnVuYyA9IHRoaXMuZWRpdG9yc1tcImlucHV0XCJdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkVkaXRvciBFcnJvciAtIENhbm5vdCBhdXRvIGxvb2t1cCBlZGl0b3IgZm9yIGEgY3VzdG9tIGZvcm1hdHRlcjogXCIsIGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBlZGl0b3JGdW5jO1xuXHR9XG5cdFxuXHRnZXRDdXJyZW50Q2VsbCgpe1xuXHRcdHJldHVybiB0aGlzLmN1cnJlbnRDZWxsID8gdGhpcy5jdXJyZW50Q2VsbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cdFxuXHRjbGVhckVkaXRvcihjYW5jZWwpe1xuXHRcdHZhciBjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCxcblx0XHRjZWxsRWw7XG5cdFx0XG5cdFx0dGhpcy5pbnZhbGlkRWRpdCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0dGhpcy5jdXJyZW50Q2VsbCA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRjZWxsRWwgPSBjZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImVkaXQtZWRpdG9yLWNsZWFyXCIsIGNlbGwsIGNhbmNlbCk7XG5cdFx0XHRcblx0XHRcdGNlbGxFbC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWVkaXRpbmdcIik7XG5cdFx0XHRcblx0XHRcdHdoaWxlKGNlbGxFbC5maXJzdENoaWxkKSBjZWxsRWwucmVtb3ZlQ2hpbGQoY2VsbEVsLmZpcnN0Q2hpbGQpO1xuXHRcdFx0XG5cdFx0XHRjZWxsLnJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1lZGl0aW5nXCIpO1xuXHRcdFx0XG5cdFx0XHRjZWxsLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1lZGl0aW5nXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0Y2FuY2VsRWRpdCgpe1xuXHRcdGlmKHRoaXMuY3VycmVudENlbGwpe1xuXHRcdFx0dmFyIGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsO1xuXHRcdFx0dmFyIGNvbXBvbmVudCA9IHRoaXMuY3VycmVudENlbGwuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuY2xlYXJFZGl0b3IodHJ1ZSk7XG5cdFx0XHRjZWxsLnNldFZhbHVlQWN0dWFsKGNlbGwuZ2V0VmFsdWUoKSk7XG5cdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0XG5cdFx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmVkaXRvciA9PSBcInRleHRhcmVhXCIgfHwgY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi52YXJpYWJsZUhlaWdodCl7XG5cdFx0XHRcdGNlbGwucm93Lm5vcm1hbGl6ZUhlaWdodCh0cnVlKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi5jZWxsRWRpdENhbmNlbGxlZCl7XG5cdFx0XHRcdGNlbGwuY29sdW1uLmRlZmluaXRpb24uY2VsbEVkaXRDYW5jZWxsZWQuY2FsbCh0aGlzLnRhYmxlLCBjb21wb25lbnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiZWRpdC1jYW5jZWxsZWRcIiwgY2VsbCk7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjZWxsRWRpdENhbmNlbGxlZFwiLCBjb21wb25lbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gYSBmb3JtYXR0ZWQgdmFsdWUgZm9yIGEgY2VsbFxuXHRiaW5kRWRpdG9yKGNlbGwpe1xuXHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KHRydWUpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnVwZGF0ZUNlbGxDbGFzcyhjZWxsKTtcblx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgMCk7XG5cdFx0XHRcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYgKGUuYnV0dG9uID09PSAyKSB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5tb3VzZUNsaWNrID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmKHRoaXMub3B0aW9ucyhcImVkaXRUcmlnZ2VyRXZlbnRcIikgPT09IFwiZGJsY2xpY2tcIil7XG5cdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdGlmKCFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInRhYnVsYXRvci1lZGl0aW5nXCIpKXtcblx0XHRcdFx0XHRcdGVsZW1lbnQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdFx0XHRcdHNlbGYuZWRpdChjZWxsLCBlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLm9wdGlvbnMoXCJlZGl0VHJpZ2dlckV2ZW50XCIpID09PSBcImZvY3VzXCIgfHwgdGhpcy5vcHRpb25zKFwiZWRpdFRyaWdnZXJFdmVudFwiKSA9PT0gXCJjbGlja1wiKXtcblx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0aWYoIWVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFidWxhdG9yLWVkaXRpbmdcIikpe1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0XHRcdFx0c2VsZi5lZGl0KGNlbGwsIGUsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLm9wdGlvbnMoXCJlZGl0VHJpZ2dlckV2ZW50XCIpID09PSBcImZvY3VzXCIpe1xuXHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRpZighc2VsZi5yZWN1cnNpb25CbG9jayl7XG5cdFx0XHRcdFx0XHRzZWxmLmVkaXQoY2VsbCwgZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRmb2N1c0NlbGxOb0V2ZW50KGNlbGwsIGJsb2NrKXtcblx0XHR0aGlzLnJlY3Vyc2lvbkJsb2NrID0gdHJ1ZTtcblx0XHRcblx0XHRpZighKGJsb2NrICYmIHRoaXMudGFibGUuYnJvd3NlciA9PT0gXCJpZVwiKSl7XG5cdFx0XHRjZWxsLmdldEVsZW1lbnQoKS5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlY3Vyc2lvbkJsb2NrID0gZmFsc2U7XG5cdH1cblx0XG5cdGVkaXRDZWxsKGNlbGwsIGZvcmNlRWRpdCl7XG5cdFx0dGhpcy5mb2N1c0NlbGxOb0V2ZW50KGNlbGwpO1xuXHRcdHRoaXMuZWRpdChjZWxsLCBmYWxzZSwgZm9yY2VFZGl0KTtcblx0fVxuXHRcblx0Zm9jdXNTY3JvbGxBZGp1c3QoY2VsbCl7XG5cdFx0aWYodGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJlbmRlck1vZGUoKSA9PSBcInZpcnR1YWxcIil7XG5cdFx0XHR2YXIgdG9wRWRnZSA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbFRvcCxcblx0XHRcdGJvdHRvbUVkZ2UgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRIZWlnaHQgKyB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3AsXG5cdFx0XHRyb3dFbCA9IGNlbGwucm93LmdldEVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0aWYocm93RWwub2Zmc2V0VG9wIDwgdG9wRWRnZSl7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbFRvcCAtPSAodG9wRWRnZSAtIHJvd0VsLm9mZnNldFRvcCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHJvd0VsLm9mZnNldFRvcCArIHJvd0VsLm9mZnNldEhlaWdodCAgPiBib3R0b21FZGdlKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3AgKz0gKHJvd0VsLm9mZnNldFRvcCArIHJvd0VsLm9mZnNldEhlaWdodCAtIGJvdHRvbUVkZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHZhciBsZWZ0RWRnZSA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbExlZnQsXG5cdFx0XHRyaWdodEVkZ2UgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aCArIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbExlZnQsXG5cdFx0XHRjZWxsRWwgPSBjZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJmcm96ZW5Db2x1bW5zXCIpKXtcblx0XHRcdFx0bGVmdEVkZ2UgKz0gcGFyc2VJbnQodGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMubGVmdE1hcmdpbiB8fCAwKTtcblx0XHRcdFx0cmlnaHRFZGdlIC09IHBhcnNlSW50KHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLnJpZ2h0TWFyZ2luIHx8IDApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVySG9yaXpvbnRhbCA9PT0gXCJ2aXJ0dWFsXCIpe1xuXHRcdFx0XHRsZWZ0RWRnZSAtPSBwYXJzZUludCh0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIudkRvbVBhZExlZnQpO1xuXHRcdFx0XHRyaWdodEVkZ2UgLT0gcGFyc2VJbnQodGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlbmRlcmVyLnZEb21QYWRMZWZ0KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY2VsbEVsLm9mZnNldExlZnQgPCBsZWZ0RWRnZSl7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbExlZnQgLT0gKGxlZnRFZGdlIC0gY2VsbEVsLm9mZnNldExlZnQpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihjZWxsRWwub2Zmc2V0TGVmdCArIGNlbGxFbC5vZmZzZXRXaWR0aCAgPiByaWdodEVkZ2Upe1xuXHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbExlZnQgKz0gKGNlbGxFbC5vZmZzZXRMZWZ0ICsgY2VsbEVsLm9mZnNldFdpZHRoIC0gcmlnaHRFZGdlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0YWxsb3dFZGl0KGNlbGwpIHtcblx0XHR2YXIgY2hlY2sgPSBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQgPyB0cnVlIDogZmFsc2U7XG5cdFx0XG5cdFx0aWYoY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0KXtcblx0XHRcdHN3aXRjaCh0eXBlb2YgY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrKXtcblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0aWYoY2VsbC5yb3cuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdFx0Y2hlY2sgPSBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQuY2hlY2soY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGNoZWNrID0gISFjZWxsLnJvdy5kYXRhW2NlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5jaGVja107XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRcdGNoZWNrID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gY2hlY2s7XG5cdH1cblx0XG5cdGVkaXQoY2VsbCwgZSwgZm9yY2VFZGl0KXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0YWxsb3dFZGl0ID0gdHJ1ZSxcblx0XHRyZW5kZXJlZCA9IGZ1bmN0aW9uKCl7fSxcblx0XHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KCksXG5cdFx0ZWRpdEZpbmlzaGVkID0gZmFsc2UsXG5cdFx0Y2VsbEVkaXRvciwgY29tcG9uZW50LCBwYXJhbXM7XG5cblx0XHQvL3ByZXZlbnQgZWRpdGluZyBpZiBhbm90aGVyIGNlbGwgaXMgcmVmdXNpbmcgdG8gbGVhdmUgZm9jdXMgKGVnLiB2YWxpZGF0aW9uIGZhaWwpXG5cdFx0XG5cdFx0aWYodGhpcy5jdXJyZW50Q2VsbCl7XG5cdFx0XHRpZighdGhpcy5pbnZhbGlkRWRpdCAmJiB0aGlzLmN1cnJlbnRDZWxsICE9PSBjZWxsKXtcblx0XHRcdFx0dGhpcy5jYW5jZWxFZGl0KCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdC8vaGFuZGxlIHN1Y2Nlc3NmdWwgdmFsdWUgY2hhbmdlXG5cdFx0ZnVuY3Rpb24gc3VjY2Vzcyh2YWx1ZSl7XG5cdFx0XHRpZihzZWxmLmN1cnJlbnRDZWxsID09PSBjZWxsICYmICFlZGl0RmluaXNoZWQpe1xuXHRcdFx0XHR2YXIgdmFsaWQgPSBzZWxmLmNoYWluKFwiZWRpdC1zdWNjZXNzXCIsIFtjZWxsLCB2YWx1ZV0sIHRydWUsIHRydWUpO1xuXG5cdFx0XHRcdGlmKHZhbGlkID09PSB0cnVlIHx8IHNlbGYudGFibGUub3B0aW9ucy52YWxpZGF0aW9uTW9kZSA9PT0gXCJoaWdobGlnaHRcIil7XG5cblx0XHRcdFx0XHRlZGl0RmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0c2VsZi5jbGVhckVkaXRvcigpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKCFjZWxsLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHRcdFx0XHRjZWxsLm1vZHVsZXMuZWRpdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjZWxsLm1vZHVsZXMuZWRpdC5lZGl0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHNlbGYuZWRpdGVkQ2VsbHMuaW5kZXhPZihjZWxsKSA9PSAtMSl7XG5cdFx0XHRcdFx0XHRzZWxmLmVkaXRlZENlbGxzLnB1c2goY2VsbCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFsdWUgPSBzZWxmLnRyYW5zZm9ybUVtcHR5VmFsdWVzKHZhbHVlLCBjZWxsKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjZWxsLnNldFZhbHVlKHZhbHVlLCB0cnVlKTtcblxuXHRcdFx0XHRcdHJldHVybiB2YWxpZCA9PT0gdHJ1ZTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVkaXRGaW5pc2hlZCA9IHRydWU7XG5cdFx0XHRcdFx0c2VsZi5pbnZhbGlkRWRpdCA9IHRydWU7XG5cdFx0XHRcdFx0c2VsZi5mb2N1c0NlbGxOb0V2ZW50KGNlbGwsIHRydWUpO1xuXHRcdFx0XHRcdHJlbmRlcmVkKCk7XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdGVkaXRGaW5pc2hlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdH0sIDEwKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Ly9oYW5kbGUgYWJvcnRlZCBlZGl0XG5cdFx0ZnVuY3Rpb24gY2FuY2VsKCl7XG5cdFx0XHQvLyBlZGl0RmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRpZihzZWxmLmN1cnJlbnRDZWxsID09PSBjZWxsICYmICFlZGl0RmluaXNoZWQpe1xuXHRcdFx0XHRzZWxmLmNhbmNlbEVkaXQoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gb25SZW5kZXJlZChjYWxsYmFjayl7XG5cdFx0XHRyZW5kZXJlZCA9IGNhbGxiYWNrO1xuXHRcdH1cblx0XHRcblx0XHRpZighY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmJsb2NrZWQpe1xuXHRcdFx0aWYoZSl7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGFsbG93RWRpdCA9IHRoaXMuYWxsb3dFZGl0KGNlbGwpO1xuXHRcdFx0XG5cdFx0XHRpZihhbGxvd0VkaXQgfHwgZm9yY2VFZGl0KXtcblx0XHRcdFx0c2VsZi5jYW5jZWxFZGl0KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRzZWxmLmN1cnJlbnRDZWxsID0gY2VsbDtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZm9jdXNTY3JvbGxBZGp1c3QoY2VsbCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb21wb25lbnQgPSBjZWxsLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5tb3VzZUNsaWNrKXtcblx0XHRcdFx0XHR0aGlzLm1vdXNlQ2xpY2sgPSBmYWxzZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxDbGljayl7XG5cdFx0XHRcdFx0XHRjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxDbGljay5jYWxsKHRoaXMudGFibGUsIGUsIGNvbXBvbmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxFZGl0aW5nKXtcblx0XHRcdFx0XHRjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxFZGl0aW5nLmNhbGwodGhpcy50YWJsZSwgY29tcG9uZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtZWRpdGluZ1wiLCBjZWxsKTtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY2VsbEVkaXRpbmdcIiwgY29tcG9uZW50KTtcblx0XHRcdFx0XG5cdFx0XHRcdHBhcmFtcyA9IHR5cGVvZiBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQucGFyYW1zKGNvbXBvbmVudCkgOiBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQucGFyYW1zO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbEVkaXRvciA9IGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5lZGl0b3IuY2FsbChzZWxmLCBjb21wb25lbnQsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgcGFyYW1zKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vaWYgZWRpdG9yIHJldHVybmVkLCBhZGQgdG8gRE9NLCBpZiBmYWxzZSwgYWJvcnQgZWRpdFxuXHRcdFx0XHRpZih0aGlzLmN1cnJlbnRDZWxsICYmIGNlbGxFZGl0b3IgIT09IGZhbHNlKXtcblx0XHRcdFx0XHRpZihjZWxsRWRpdG9yIGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdGluZ1wiKTtcblx0XHRcdFx0XHRcdGNlbGwucm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXRpbmdcIik7XG5cdFx0XHRcdFx0XHRjZWxsLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0aW5nXCIpO1xuXHRcdFx0XHRcdFx0d2hpbGUoZWxlbWVudC5maXJzdENoaWxkKSBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0XHRlbGVtZW50LmFwcGVuZENoaWxkKGNlbGxFZGl0b3IpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvL3RyaWdnZXIgb25SZW5kZXJlZCBDYWxsYmFja1xuXHRcdFx0XHRcdFx0cmVuZGVyZWQoKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly9wcmV2ZW50IGVkaXRpbmcgZnJvbSB0cmlnZ2VyaW5nIHJvd0NsaWNrIGV2ZW50XG5cdFx0XHRcdFx0XHR2YXIgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGNoaWxkcmVuW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJFZGl0IEVycm9yIC0gRWRpdG9yIHNob3VsZCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgTm9kZSwgdGhlIGVkaXRvciByZXR1cm5lZDpcIiwgY2VsbEVkaXRvcik7XG5cdFx0XHRcdFx0XHR0aGlzLmJsdXIoZWxlbWVudCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKGVsZW1lbnQpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubW91c2VDbGljayA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLmJsdXIoZWxlbWVudCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLm1vdXNlQ2xpY2sgPSBmYWxzZTtcblx0XHRcdHRoaXMuYmx1cihlbGVtZW50KTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRlbXB0eVZhbHVlQ2hlY2sodmFsdWUpe1xuXHRcdHJldHVybiB2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG5cdH1cblxuXHR0cmFuc2Zvcm1FbXB0eVZhbHVlcyh2YWx1ZSwgY2VsbCl7XG5cdFx0dmFyIG1vZCA9IGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCwgXG5cdFx0Y29udmVydCA9IG1vZC5jb252ZXJ0RW1wdHlWYWx1ZXMgfHwgdGhpcy5jb252ZXJ0RW1wdHlWYWx1ZXMsXG5cdFx0Y2hlY2tGdW5jO1xuXHRcdFxuXHRcdGlmKGNvbnZlcnQpe1xuXHRcdFx0Y2hlY2tGdW5jID0gbW9kLmVkaXRvckVtcHR5VmFsdWVGdW5jIHx8IHRoaXMub3B0aW9ucyhcImVkaXRvckVtcHR5VmFsdWVGdW5jXCIpO1xuXG5cdFx0XHRpZihjaGVja0Z1bmMgJiYgY2hlY2tGdW5jKHZhbHVlKSl7XG5cdFx0XHRcdHZhbHVlID0gbW9kLmNvbnZlcnRFbXB0eVZhbHVlcyA/IG1vZC5lZGl0b3JFbXB0eVZhbHVlIDogdGhpcy5vcHRpb25zKFwiZWRpdG9yRW1wdHlWYWx1ZVwiKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdFxuXHRibHVyKGVsZW1lbnQpe1xuXHRcdGlmKCF0aGlzLmNvbmZpcm0oXCJlZGl0LWJsdXJcIiwgW2VsZW1lbnRdKSApe1xuXHRcdFx0ZWxlbWVudC5ibHVyKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRFZGl0ZWRDZWxscygpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHR0aGlzLmVkaXRlZENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdG91dHB1dC5wdXNoKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGNsZWFyRWRpdGVkKGNlbGwpe1xuXHRcdHZhciBlZGl0SW5kZXg7XG5cdFx0XG5cdFx0aWYoY2VsbC5tb2R1bGVzLmVkaXQgJiYgY2VsbC5tb2R1bGVzLmVkaXQuZWRpdGVkKXtcblx0XHRcdGNlbGwubW9kdWxlcy5lZGl0LmVkaXRlZCA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiZWRpdC1lZGl0ZWQtY2xlYXJcIiwgY2VsbCk7XG5cdFx0fVxuXHRcdFxuXHRcdGVkaXRJbmRleCA9IHRoaXMuZWRpdGVkQ2VsbHMuaW5kZXhPZihjZWxsKTtcblx0XHRcblx0XHRpZihlZGl0SW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLmVkaXRlZENlbGxzLnNwbGljZShlZGl0SW5kZXgsIDEpO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBFeHBvcnRSb3d7XG5cdGNvbnN0cnVjdG9yKHR5cGUsIGNvbHVtbnMsIGNvbXBvbmVudCwgaW5kZW50KXtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XG5cdFx0dGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQgfHwgZmFsc2U7XG5cdFx0dGhpcy5pbmRlbnQgPSBpbmRlbnQgfHwgMDtcblx0fVxufVxuXG5jbGFzcyBFeHBvcnRDb2x1bW57XG5cdGNvbnN0cnVjdG9yKHZhbHVlLCBjb21wb25lbnQsIHdpZHRoLCBoZWlnaHQsIGRlcHRoKXtcblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQgfHwgZmFsc2U7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMuZGVwdGggPSBkZXB0aDtcblx0fVxufVxuXG52YXIgY29sdW1uTG9va3VwcyQxID0ge1xyXG5cclxufTtcblxudmFyIHJvd0xvb2t1cHMkMSA9IHtcclxuXHR2aXNpYmxlOmZ1bmN0aW9uKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldFZpc2libGVSb3dzKGZhbHNlLCB0cnVlKTtcclxuXHR9LFxyXG5cdGFsbDpmdW5jdGlvbigpe1xyXG5cdFx0cmV0dXJuIHRoaXMucm93TWFuYWdlci5yb3dzO1xyXG5cdH0sXHJcblx0c2VsZWN0ZWQ6ZnVuY3Rpb24oKXtcclxuXHRcdHJldHVybiB0aGlzLm1vZHVsZXMuc2VsZWN0Um93LnNlbGVjdGVkUm93cztcclxuXHR9LFxyXG5cdGFjdGl2ZTpmdW5jdGlvbigpe1xyXG5cdFx0aWYodGhpcy5vcHRpb25zLnBhZ2luYXRpb24pe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKHRoaXMucm93TWFuYWdlci5kaXNwbGF5Um93cy5sZW5ndGggLSAyKTtcclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpO1xyXG5cdFx0fVxyXG5cdH0sXHJcbn07XG5cbmNsYXNzIEV4cG9ydCBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwiZXhwb3J0XCI7XG5cblx0c3RhdGljIGNvbHVtbkxvb2t1cHMgPSBjb2x1bW5Mb29rdXBzJDE7XG5cdHN0YXRpYyByb3dMb29rdXBzID0gcm93TG9va3VwcyQxO1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmNvbmZpZyA9IHt9O1xuXHRcdHRoaXMuY2xvbmVUYWJsZVN0eWxlID0gdHJ1ZTtcblx0XHR0aGlzLmNvbFZpc1Byb3AgPSBcIlwiO1xuXHRcdHRoaXMuY29sVmlzUHJvcEF0dGFjaCA9IFwiXCI7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaHRtbE91dHB1dENvbmZpZ1wiLCBmYWxzZSk7IC8vaHRtbCBvdXRwdXQgY29uZmlnXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImh0bWxPdXRwdXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRpdGxlSHRtbE91dHB1dFwiKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SHRtbFwiLCB0aGlzLmdldEh0bWwuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRnZW5lcmF0ZUV4cG9ydExpc3QoY29uZmlnLCBzdHlsZSwgcmFuZ2UsIGNvbFZpc1Byb3Ape1xuXHRcdHZhciBoZWFkZXJzLCBib2R5LCBjb2x1bW5zLCBjb2xMb29rdXA7XG5cblx0XHR0aGlzLmNsb25lVGFibGVTdHlsZSA9IHN0eWxlO1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdHRoaXMuY29sVmlzUHJvcCA9IGNvbFZpc1Byb3A7XG5cdFx0dGhpcy5jb2xWaXNQcm9wQXR0YWNoID0gdGhpcy5jb2xWaXNQcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5jb2xWaXNQcm9wLnNsaWNlKDEpO1xuXG5cdFx0Y29sTG9va3VwID0gRXhwb3J0LmNvbHVtbkxvb2t1cHNbcmFuZ2VdO1xuXG5cdFx0aWYoY29sTG9va3VwKXtcblx0XHRcdGNvbHVtbnMgPSBjb2xMb29rdXAuY2FsbCh0aGlzLnRhYmxlKTtcblx0XHRcdGNvbHVtbnMgPSBjb2x1bW5zLmZpbHRlcihjb2wgPT4gdGhpcy5jb2x1bW5WaXNDaGVjayhjb2wpKTtcblx0XHR9XG5cblx0XHRoZWFkZXJzID0gdGhpcy5jb25maWcuY29sdW1uSGVhZGVycyAhPT0gZmFsc2UgPyB0aGlzLmhlYWRlcnNUb0V4cG9ydFJvd3ModGhpcy5nZW5lcmF0ZUNvbHVtbkdyb3VwSGVhZGVycyhjb2x1bW5zKSkgOiBbXTtcblxuXHRcdGlmKGNvbHVtbnMpe1xuXHRcdFx0Y29sdW1ucyA9IGNvbHVtbnMubWFwKGNvbCA9PiBjb2wuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1cblx0XHRcblx0XHRib2R5ID0gdGhpcy5ib2R5VG9FeHBvcnRSb3dzKHRoaXMucm93TG9va3VwKHJhbmdlKSwgY29sdW1ucyk7XG5cblx0XHRyZXR1cm4gaGVhZGVycy5jb25jYXQoYm9keSk7XG5cdH1cblx0XG5cdGdlbmVyYXRlVGFibGUoY29uZmlnLCBzdHlsZSwgcmFuZ2UsIGNvbFZpc1Byb3Ape1xuXHRcdHZhciBsaXN0ID0gdGhpcy5nZW5lcmF0ZUV4cG9ydExpc3QoY29uZmlnLCBzdHlsZSwgcmFuZ2UsIGNvbFZpc1Byb3ApO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmdlbmVyYXRlVGFibGVFbGVtZW50KGxpc3QpO1xuXHR9XG5cdFxuXHRyb3dMb29rdXAocmFuZ2Upe1xuXHRcdHZhciByb3dzID0gW10sIFxuXHRcdHJvd0xvb2t1cDtcblx0XHRcblx0XHRpZih0eXBlb2YgcmFuZ2UgPT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHJhbmdlLmNhbGwodGhpcy50YWJsZSkuZm9yRWFjaCgocm93KSA9Pntcblx0XHRcdFx0cm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3cocm93KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0cm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJvd0xvb2t1cCA9IEV4cG9ydC5yb3dMb29rdXBzW3JhbmdlXSB8fCBFeHBvcnQucm93TG9va3Vwc1tcImFjdGl2ZVwiXTtcblxuXHRcdFx0cm93cyA9IHJvd0xvb2t1cC5jYWxsKHRoaXMudGFibGUpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihbXSwgcm93cyk7XG5cdH1cblx0XG5cdGdlbmVyYXRlQ29sdW1uR3JvdXBIZWFkZXJzKGNvbHVtbnMpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHRpZiAoIWNvbHVtbnMpIHtcblx0XHRcdGNvbHVtbnMgPSB0aGlzLmNvbmZpZy5jb2x1bW5Hcm91cHMgIT09IGZhbHNlID8gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnMgOiB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXg7XG5cdFx0fVxuXHRcdFxuXHRcdGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHR2YXIgY29sRGF0YSA9IHRoaXMucHJvY2Vzc0NvbHVtbkdyb3VwKGNvbHVtbik7XG5cdFx0XHRcblx0XHRcdGlmKGNvbERhdGEpe1xuXHRcdFx0XHRvdXRwdXQucHVzaChjb2xEYXRhKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRwcm9jZXNzQ29sdW1uR3JvdXAoY29sdW1uKXtcblx0XHR2YXIgc3ViR3JvdXBzID0gY29sdW1uLmNvbHVtbnMsXG5cdFx0bWF4RGVwdGggPSAwLFxuXHRcdHRpdGxlID0gY29sdW1uLmRlZmluaXRpb25bXCJ0aXRsZVwiICsgKHRoaXMuY29sVmlzUHJvcEF0dGFjaCldIHx8IGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlO1xuXHRcdFxuXHRcdHZhciBncm91cERhdGEgPSB7XG5cdFx0XHR0aXRsZTp0aXRsZSxcblx0XHRcdGNvbHVtbjpjb2x1bW4sXG5cdFx0XHRkZXB0aDoxLFxuXHRcdH07XG5cdFx0XG5cdFx0aWYoc3ViR3JvdXBzLmxlbmd0aCl7XG5cdFx0XHRncm91cERhdGEuc3ViR3JvdXBzID0gW107XG5cdFx0XHRncm91cERhdGEud2lkdGggPSAwO1xuXHRcdFx0XG5cdFx0XHRzdWJHcm91cHMuZm9yRWFjaCgoc3ViR3JvdXApID0+IHtcblx0XHRcdFx0dmFyIHN1Ykdyb3VwRGF0YSA9IHRoaXMucHJvY2Vzc0NvbHVtbkdyb3VwKHN1Ykdyb3VwKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHN1Ykdyb3VwRGF0YSl7XG5cdFx0XHRcdFx0Z3JvdXBEYXRhLndpZHRoICs9IHN1Ykdyb3VwRGF0YS53aWR0aDtcblx0XHRcdFx0XHRncm91cERhdGEuc3ViR3JvdXBzLnB1c2goc3ViR3JvdXBEYXRhKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihzdWJHcm91cERhdGEuZGVwdGggPiBtYXhEZXB0aCl7XG5cdFx0XHRcdFx0XHRtYXhEZXB0aCA9IHN1Ykdyb3VwRGF0YS5kZXB0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRncm91cERhdGEuZGVwdGggKz0gbWF4RGVwdGg7XG5cdFx0XHRcblx0XHRcdGlmKCFncm91cERhdGEud2lkdGgpe1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5jb2x1bW5WaXNDaGVjayhjb2x1bW4pKXtcblx0XHRcdFx0Z3JvdXBEYXRhLndpZHRoID0gMTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZ3JvdXBEYXRhO1xuXHR9XG5cdFxuXHRjb2x1bW5WaXNDaGVjayhjb2x1bW4pe1xuXHRcdHZhciB2aXNQcm9wID0gY29sdW1uLmRlZmluaXRpb25bdGhpcy5jb2xWaXNQcm9wXTtcblxuXHRcdGlmKHRoaXMuY29uZmlnLnJvd0hlYWRlcnMgPT09IGZhbHNlICYmIGNvbHVtbi5pc1Jvd0hlYWRlcil7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHR5cGVvZiB2aXNQcm9wID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0dmlzUHJvcCA9IHZpc1Byb3AuY2FsbCh0aGlzLnRhYmxlLCBjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1cblxuXHRcdGlmKHZpc1Byb3AgPT09IGZhbHNlIHx8IHZpc1Byb3AgPT09IHRydWUpe1xuXHRcdFx0cmV0dXJuIHZpc1Byb3A7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbHVtbi52aXNpYmxlICYmIGNvbHVtbi5maWVsZDtcblx0fVxuXHRcblx0aGVhZGVyc1RvRXhwb3J0Um93cyhjb2x1bW5zKXtcblx0XHR2YXIgaGVhZGVycyA9IFtdLFxuXHRcdGhlYWRlckRlcHRoID0gMCxcblx0XHRleHBvcnRSb3dzID0gW107XG5cdFx0XG5cdFx0ZnVuY3Rpb24gcGFyc2VDb2x1bW5Hcm91cChjb2x1bW4sIGxldmVsKXtcblx0XHRcdFxuXHRcdFx0dmFyIGRlcHRoID0gaGVhZGVyRGVwdGggLSBsZXZlbDtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIGhlYWRlcnNbbGV2ZWxdID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0aGVhZGVyc1tsZXZlbF0gPSBbXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29sdW1uLmhlaWdodCA9IGNvbHVtbi5zdWJHcm91cHMgPyAxIDogKGRlcHRoIC0gY29sdW1uLmRlcHRoKSArIDE7XG5cdFx0XHRcblx0XHRcdGhlYWRlcnNbbGV2ZWxdLnB1c2goY29sdW1uKTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLmhlaWdodCA+IDEpe1xuXHRcdFx0XHRmb3IobGV0IGkgPSAxOyBpIDwgY29sdW1uLmhlaWdodDsgaSArKyl7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYodHlwZW9mIGhlYWRlcnNbbGV2ZWwgKyBpXSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRoZWFkZXJzW2xldmVsICsgaV0gPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aGVhZGVyc1tsZXZlbCArIGldLnB1c2goZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi53aWR0aCA+IDEpe1xuXHRcdFx0XHRmb3IobGV0IGkgPSAxOyBpIDwgY29sdW1uLndpZHRoOyBpICsrKXtcblx0XHRcdFx0XHRoZWFkZXJzW2xldmVsXS5wdXNoKGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4uc3ViR3JvdXBzKXtcblx0XHRcdFx0Y29sdW1uLnN1Ykdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uKHN1Ykdyb3VwKXtcblx0XHRcdFx0XHRwYXJzZUNvbHVtbkdyb3VwKHN1Ykdyb3VwLCBsZXZlbCsxKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vY2FsY3VsYXRlIG1heGltdW0gaGVhZGVyIGRlcHRoXG5cdFx0Y29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4uZGVwdGggPiBoZWFkZXJEZXB0aCl7XG5cdFx0XHRcdGhlYWRlckRlcHRoID0gY29sdW1uLmRlcHRoO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0cGFyc2VDb2x1bW5Hcm91cChjb2x1bW4sMCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0aGVhZGVycy5mb3JFYWNoKChoZWFkZXIpID0+IHtcblx0XHRcdHZhciBjb2x1bW5zID0gW107XG5cdFx0XHRcblx0XHRcdGhlYWRlci5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0aWYoY29sKXtcblx0XHRcdFx0XHRsZXQgdGl0bGUgPSB0eXBlb2YgY29sLnRpdGxlID09PSBcInVuZGVmaW5lZFwiID8gXCJcIiA6IGNvbC50aXRsZTtcblx0XHRcdFx0XHRjb2x1bW5zLnB1c2gobmV3IEV4cG9ydENvbHVtbih0aXRsZSwgY29sLmNvbHVtbi5nZXRDb21wb25lbnQoKSwgY29sLndpZHRoLCBjb2wuaGVpZ2h0LCBjb2wuZGVwdGgpKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbHVtbnMucHVzaChudWxsKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGV4cG9ydFJvd3MucHVzaChuZXcgRXhwb3J0Um93KFwiaGVhZGVyXCIsIGNvbHVtbnMpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZXhwb3J0Um93cztcblx0fVxuXHRcblx0Ym9keVRvRXhwb3J0Um93cyhyb3dzLCBjb2x1bW5zID0gW10pe1xuXHRcdHZhciBleHBvcnRSb3dzID0gW107XG5cdFx0XG5cdFx0aWYgKGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmNvbHVtblZpc0NoZWNrKGNvbHVtbikpIHtcblx0XHRcdFx0XHRjb2x1bW5zLnB1c2goY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuY29uZmlnLmNvbHVtbkNhbGNzICE9PSBmYWxzZSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpKXtcblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy50b3BJbml0aWFsaXplZCl7XG5cdFx0XHRcdHJvd3MudW5zaGlmdCh0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MudG9wUm93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdFx0cm93cy5wdXNoKHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5ib3RSb3cpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJvd3MgPSByb3dzLmZpbHRlcigocm93KSA9PiB7XG5cdFx0XHRzd2l0Y2gocm93LnR5cGUpe1xuXHRcdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb25maWcucm93R3JvdXBzICE9PSBmYWxzZTtcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJjYWxjXCI6XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29uZmlnLmNvbHVtbkNhbGNzICE9PSBmYWxzZTtcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0XHRyZXR1cm4gISh0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUgJiYgdGhpcy5jb25maWcuZGF0YVRyZWUgPT09IGZhbHNlICYmIHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJvd3MuZm9yRWFjaCgocm93LCBpKSA9PiB7XG5cdFx0XHR2YXIgcm93RGF0YSA9IHJvdy5nZXREYXRhKHRoaXMuY29sVmlzUHJvcCk7XG5cdFx0XHR2YXIgZXhwb3J0Q29scyA9IFtdO1xuXHRcdFx0dmFyIGluZGVudCA9IDA7XG5cdFx0XHRcblx0XHRcdHN3aXRjaChyb3cudHlwZSl7XG5cdFx0XHRcdGNhc2UgXCJncm91cFwiOlxuXHRcdFx0XHRcdGluZGVudCA9IHJvdy5sZXZlbDtcblx0XHRcdFx0XHRleHBvcnRDb2xzLnB1c2gobmV3IEV4cG9ydENvbHVtbihyb3cua2V5LCByb3cuZ2V0Q29tcG9uZW50KCksIGNvbHVtbnMubGVuZ3RoLCAxKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiY2FsY1wiIDpcblx0XHRcdFx0Y2FzZSBcInJvd1wiIDpcblx0XHRcdFx0XHRjb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdFx0ZXhwb3J0Q29scy5wdXNoKG5ldyBFeHBvcnRDb2x1bW4oY29sLl9jb2x1bW4uZ2V0RmllbGRWYWx1ZShyb3dEYXRhKSwgY29sLCAxLCAxKSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZSAmJiB0aGlzLmNvbmZpZy5kYXRhVHJlZSAhPT0gZmFsc2Upe1xuXHRcdFx0XHRcdFx0aW5kZW50ID0gcm93Lm1vZHVsZXMuZGF0YVRyZWUuaW5kZXg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRleHBvcnRSb3dzLnB1c2gobmV3IEV4cG9ydFJvdyhyb3cudHlwZSwgZXhwb3J0Q29scywgcm93LmdldENvbXBvbmVudCgpLCBpbmRlbnQpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZXhwb3J0Um93cztcblx0fVxuXHRcblx0Z2VuZXJhdGVUYWJsZUVsZW1lbnQobGlzdCl7XG5cdFx0dmFyIHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpLFxuXHRcdGhlYWRlckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoZWFkXCIpLFxuXHRcdGJvZHlFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKSxcblx0XHRzdHlsZXMgPSB0aGlzLmxvb2t1cFRhYmxlU3R5bGVzKCksXG5cdFx0cm93Rm9ybWF0dGVyID0gdGhpcy50YWJsZS5vcHRpb25zW1wicm93Rm9ybWF0dGVyXCIgKyAodGhpcy5jb2xWaXNQcm9wQXR0YWNoKV0sXG5cdFx0c2V0dXAgPSB7fTtcblx0XHRcblx0XHRzZXR1cC5yb3dGb3JtYXR0ZXIgPSByb3dGb3JtYXR0ZXIgIT09IG51bGwgPyByb3dGb3JtYXR0ZXIgOiB0aGlzLnRhYmxlLm9wdGlvbnMucm93Rm9ybWF0dGVyO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZSAmJnRoaXMuY29uZmlnLmRhdGFUcmVlICE9PSBmYWxzZSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpKXtcblx0XHRcdHNldHVwLnRyZWVFbGVtZW50RmllbGQgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZGF0YVRyZWUuZWxlbWVudEZpZWxkO1xuXHRcdH1cblx0XHRcblx0XHQvL2Fzc2lnbiBncm91cCBoZWFkZXIgZm9ybWF0dGVyXG5cdFx0c2V0dXAuZ3JvdXBIZWFkZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnNbXCJncm91cEhlYWRlclwiICsgKHRoaXMuY29sVmlzUHJvcEF0dGFjaCldO1xuXHRcdFxuXHRcdGlmKHNldHVwLmdyb3VwSGVhZGVyICYmICFBcnJheS5pc0FycmF5KHNldHVwLmdyb3VwSGVhZGVyKSl7XG5cdFx0XHRzZXR1cC5ncm91cEhlYWRlciA9IFtzZXR1cC5ncm91cEhlYWRlcl07XG5cdFx0fVxuXHRcdFxuXHRcdHRhYmxlLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtdGFibGVcIik7XG5cdFx0XG5cdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRIZWFkZXJzRWxlbWVudCgpLCBoZWFkZXJFbCwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImJhY2tncm91bmQtY29sb3JcIiwgXCJjb2xvclwiLCBcImZvbnQtd2VpZ2h0XCIsIFwiZm9udC1mYW1pbHlcIiwgXCJmb250LXNpemVcIl0pO1xuXG5cdFx0aWYobGlzdC5sZW5ndGggPiAxMDAwKXtcblx0XHRcdGNvbnNvbGUud2FybihcIkl0IG1heSB0YWtlIGEgbG9uZyB0aW1lIHRvIHJlbmRlciBhbiBIVE1MIHRhYmxlIHdpdGggbW9yZSB0aGFuIDEwMDAgcm93c1wiKTtcblx0XHR9XG5cdFx0XG5cdFx0bGlzdC5mb3JFYWNoKChyb3csIGkpID0+IHtcblx0XHRcdGxldCByb3dFbDtcblx0XHRcdFxuXHRcdFx0c3dpdGNoKHJvdy50eXBlKXtcblx0XHRcdFx0Y2FzZSBcImhlYWRlclwiOlxuXHRcdFx0XHRcdGhlYWRlckVsLmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGVIZWFkZXJFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcykpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdFx0Ym9keUVsLmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGVHcm91cEVsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRcdGJvZHlFbC5hcHBlbmRDaGlsZCh0aGlzLmdlbmVyYXRlQ2FsY0VsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwicm93XCI6XG5cdFx0XHRcdFx0cm93RWwgPSB0aGlzLmdlbmVyYXRlUm93RWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoKChpICUgMikgJiYgc3R5bGVzLmV2ZW5Sb3cpID8gc3R5bGVzLmV2ZW5Sb3cgOiBzdHlsZXMub2RkUm93LCByb3dFbCwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcImJhY2tncm91bmQtY29sb3JcIl0pO1xuXHRcdFx0XHRcdGJvZHlFbC5hcHBlbmRDaGlsZChyb3dFbCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoaGVhZGVyRWwuaW5uZXJIVE1MKXtcblx0XHRcdHRhYmxlLmFwcGVuZENoaWxkKGhlYWRlckVsKTtcblx0XHR9XG5cdFx0XG5cdFx0dGFibGUuYXBwZW5kQ2hpbGQoYm9keUVsKTtcblx0XHRcblx0XHRcblx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXModGhpcy50YWJsZS5lbGVtZW50LCB0YWJsZSwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiXSk7XG5cdFx0cmV0dXJuIHRhYmxlO1xuXHR9XG5cdFxuXHRsb29rdXBUYWJsZVN0eWxlcygpe1xuXHRcdHZhciBzdHlsZXMgPSB7fTtcblx0XHRcblx0XHQvL2xvb2t1cCByb3cgc3R5bGVzXG5cdFx0aWYodGhpcy5jbG9uZVRhYmxlU3R5bGUgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUpe1xuXHRcdFx0c3R5bGVzLm9kZFJvdyA9IHRoaXMudGFibGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnVsYXRvci1yb3ctb2RkOm5vdCgudGFidWxhdG9yLWdyb3VwKTpub3QoLnRhYnVsYXRvci1jYWxjcylcIik7XG5cdFx0XHRzdHlsZXMuZXZlblJvdyA9IHRoaXMudGFibGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnVsYXRvci1yb3ctZXZlbjpub3QoLnRhYnVsYXRvci1ncm91cCk6bm90KC50YWJ1bGF0b3ItY2FsY3MpXCIpO1xuXHRcdFx0c3R5bGVzLmNhbGNSb3cgPSB0aGlzLnRhYmxlLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1jYWxjc1wiKTtcblx0XHRcdHN0eWxlcy5maXJzdFJvdyA9IHRoaXMudGFibGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnVsYXRvci1yb3c6bm90KC50YWJ1bGF0b3ItZ3JvdXApOm5vdCgudGFidWxhdG9yLWNhbGNzKVwiKTtcblx0XHRcdHN0eWxlcy5maXJzdEdyb3VwID0gdGhpcy50YWJsZS5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJ1bGF0b3ItZ3JvdXBcIilbMF07XG5cdFx0XHRcblx0XHRcdGlmKHN0eWxlcy5maXJzdFJvdyl7XG5cdFx0XHRcdHN0eWxlcy5zdHlsZUNlbGxzID0gc3R5bGVzLmZpcnN0Um93LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJ1bGF0b3ItY2VsbFwiKTtcblx0XHRcdFx0c3R5bGVzLnN0eWxlUm93SGVhZGVyID0gc3R5bGVzLmZpcnN0Um93LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJ1bGF0b3Itcm93LWhlYWRlclwiKVswXTtcblx0XHRcdFx0c3R5bGVzLmZpcnN0Q2VsbCA9IHN0eWxlcy5zdHlsZUNlbGxzWzBdO1xuXHRcdFx0XHRzdHlsZXMubGFzdENlbGwgPSBzdHlsZXMuc3R5bGVDZWxsc1tzdHlsZXMuc3R5bGVDZWxscy5sZW5ndGggLSAxXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHN0eWxlcztcblx0fVxuXHRcblx0Z2VuZXJhdGVIZWFkZXJFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcyl7XG5cdFx0dmFyIHJvd0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXHRcdFxuXHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0dmFyIGNlbGxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcblx0XHRcdFx0dmFyIGNsYXNzTmFtZXMgPSBjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcyA/IGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzLnNwbGl0KFwiIFwiKSA6IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbEVsLmNvbFNwYW4gPSBjb2x1bW4ud2lkdGg7XG5cdFx0XHRcdGNlbGxFbC5yb3dTcGFuID0gY29sdW1uLmhlaWdodDtcblx0XHRcdFx0XG5cdFx0XHRcdGNlbGxFbC5pbm5lckhUTUwgPSBjb2x1bW4udmFsdWU7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmNsb25lVGFibGVTdHlsZSl7XG5cdFx0XHRcdFx0Y2VsbEVsLnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRjbGFzc05hbWVzLmZvckVhY2goZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG5cdFx0XHRcdFx0Y2VsbEVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoY29sdW1uLmNvbXBvbmVudC5nZXRFbGVtZW50KCksIGNlbGxFbCwgW1widGV4dC1hbGlnblwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYmFja2dyb3VuZC1jb2xvclwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiXSk7XG5cdFx0XHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyhjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4uY29udGVudEVsZW1lbnQsIGNlbGxFbCwgW1wicGFkZGluZy10b3BcIiwgXCJwYWRkaW5nLWxlZnRcIiwgXCJwYWRkaW5nLXJpZ2h0XCIsIFwicGFkZGluZy1ib3R0b21cIl0pO1xuXHRcdFxuXHRcdFx0XHRpZihjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKGNvbHVtbi5jb21wb25lbnQuZ2V0RWxlbWVudCgpLCBjZWxsRWwsIFtcIndpZHRoXCJdKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5kZWZpbml0aW9uLndpZHRoKXtcblx0XHRcdFx0XHRcdGNlbGxFbC5zdHlsZS53aWR0aCA9IGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5kZWZpbml0aW9uLndpZHRoICsgXCJweFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYoY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLnBhcmVudCAmJiBjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4ucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyhjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4ucGFyZW50Lmdyb3VwRWxlbWVudCwgY2VsbEVsLCBbXCJib3JkZXItdG9wXCJdKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyhjb2x1bW4uY29tcG9uZW50LmdldEVsZW1lbnQoKSwgY2VsbEVsLCBbXCJib3JkZXItdG9wXCJdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYoY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLmlzR3JvdXApe1xuXHRcdFx0XHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyhjb2x1bW4uY29tcG9uZW50LmdldEVsZW1lbnQoKSwgY2VsbEVsLCBbXCJib3JkZXItYm90dG9tXCJdKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyh0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0RWxlbWVudCgpLCBjZWxsRWwsIFtcImJvcmRlci1ib3R0b21cIl0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dFbC5hcHBlbmRDaGlsZChjZWxsRWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiByb3dFbDtcblx0fVxuXHRcblx0Z2VuZXJhdGVHcm91cEVsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKXtcblx0XHRcblx0XHR2YXIgcm93RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIiksXG5cdFx0Y2VsbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpLFxuXHRcdGdyb3VwID0gcm93LmNvbHVtbnNbMF07XG5cdFx0XG5cdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZS1yb3dcIik7XG5cdFx0XG5cdFx0aWYoc2V0dXAuZ3JvdXBIZWFkZXIgJiYgc2V0dXAuZ3JvdXBIZWFkZXJbcm93LmluZGVudF0pe1xuXHRcdFx0Z3JvdXAudmFsdWUgPSBzZXR1cC5ncm91cEhlYWRlcltyb3cuaW5kZW50XShncm91cC52YWx1ZSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0Um93Q291bnQoKSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0RGF0YSgpLCByb3cuY29tcG9uZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihzZXR1cC5ncm91cEhlYWRlciAhPT0gZmFsc2Upe1xuXHRcdFx0XHRncm91cC52YWx1ZSA9IHJvdy5jb21wb25lbnQuX2dyb3VwLmdlbmVyYXRvcihncm91cC52YWx1ZSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0Um93Q291bnQoKSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0RGF0YSgpLCByb3cuY29tcG9uZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Y2VsbEVsLmNvbFNwYW4gPSBncm91cC53aWR0aDtcblx0XHRjZWxsRWwuaW5uZXJIVE1MID0gZ3JvdXAudmFsdWU7XG5cdFx0XG5cdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cFwiKTtcblx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWdyb3VwLWxldmVsLVwiICsgcm93LmluZGVudCk7XG5cdFx0XG5cdFx0aWYoZ3JvdXAuY29tcG9uZW50LmlzVmlzaWJsZSgpKXtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKHN0eWxlcy5maXJzdEdyb3VwLCByb3dFbCwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcImJhY2tncm91bmQtY29sb3JcIl0pO1xuXHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyhzdHlsZXMuZmlyc3RHcm91cCwgY2VsbEVsLCBbXCJwYWRkaW5nLXRvcFwiLCBcInBhZGRpbmctbGVmdFwiLCBcInBhZGRpbmctcmlnaHRcIiwgXCJwYWRkaW5nLWJvdHRvbVwiXSk7XG5cdFx0XG5cdFx0cm93RWwuYXBwZW5kQ2hpbGQoY2VsbEVsKTtcblx0XHRcblx0XHRyZXR1cm4gcm93RWw7XG5cdH1cblx0XG5cdGdlbmVyYXRlQ2FsY0VsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKXtcblx0XHR2YXIgcm93RWwgPSB0aGlzLmdlbmVyYXRlUm93RWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpO1xuXHRcdFxuXHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtdGFibGUtY2FsY3NcIik7XG5cdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKHN0eWxlcy5jYWxjUm93LCByb3dFbCwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcImJhY2tncm91bmQtY29sb3JcIl0pO1xuXHRcdFxuXHRcdHJldHVybiByb3dFbDtcblx0fVxuXHRcblx0Z2VuZXJhdGVSb3dFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcyl7XG5cdFx0dmFyIHJvd0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXHRcdFxuXHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtdGFibGUtcm93XCIpO1xuXHRcdFxuXHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbCwgaSkgPT4ge1xuXHRcdFx0aWYoY29sKXtcblx0XHRcdFx0dmFyIGNlbGxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKSxcblx0XHRcdFx0Y29sdW1uID0gY29sLmNvbXBvbmVudC5fY29sdW1uLFxuXHRcdFx0XHR0YWJsZSA9ICB0aGlzLnRhYmxlLFxuXHRcdFx0XHRpbmRleCA9IHRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbkluZGV4KGNvbHVtbiksXG5cdFx0XHRcdHZhbHVlID0gY29sLnZhbHVlLFxuXHRcdFx0XHRjZWxsU3R5bGUsIHN0eWxlUHJvcHM7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgY2VsbFdyYXBwZXIgPSB7XG5cdFx0XHRcdFx0bW9kdWxlczp7fSxcblx0XHRcdFx0XHRnZXRWYWx1ZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0RmllbGQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZGVmaW5pdGlvbi5maWVsZDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldEVsZW1lbnQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBjZWxsRWw7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRUeXBlOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJjZWxsXCI7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRDb2x1bW46ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXREYXRhOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcm93LmNvbXBvbmVudC5nZXREYXRhKCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRSb3c6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiByb3cuY29tcG9uZW50O1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0VGFibGU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiB0YWJsZTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldENvbXBvbmVudDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNlbGxXcmFwcGVyO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Y29sdW1uOmNvbHVtbixcblx0XHRcdFx0fTtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBjbGFzc05hbWVzID0gY29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3MgPyBjb2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcy5zcGxpdChcIiBcIikgOiBbXTtcblx0XHRcdFx0XG5cdFx0XHRcdGNsYXNzTmFtZXMuZm9yRWFjaChmdW5jdGlvbihjbGFzc05hbWUpIHtcblx0XHRcdFx0XHRjZWxsRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZm9ybWF0XCIpICYmIHRoaXMuY29uZmlnLmZvcm1hdENlbGxzICE9PSBmYWxzZSl7XG5cdFx0XHRcdFx0dmFsdWUgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZm9ybWF0LmZvcm1hdEV4cG9ydFZhbHVlKGNlbGxXcmFwcGVyLCB0aGlzLmNvbFZpc1Byb3ApO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7XG5cdFx0XHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWUgIT09IG51bGwgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBcIlwiO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYodmFsdWUgaW5zdGFuY2VvZiBOb2RlKXtcblx0XHRcdFx0XHRjZWxsRWwuYXBwZW5kQ2hpbGQodmFsdWUpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y2VsbEVsLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3R5bGVQcm9wcyA9IFtcInBhZGRpbmctdG9wXCIsIFwicGFkZGluZy1sZWZ0XCIsIFwicGFkZGluZy1yaWdodFwiLCBcInBhZGRpbmctYm90dG9tXCIsIFwiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcInRleHQtYWxpZ25cIl07XG5cblx0XHRcdFx0aWYoY29sdW1uLmlzUm93SGVhZGVyKXtcblx0XHRcdFx0XHRjZWxsU3R5bGUgPSBzdHlsZXMuc3R5bGVSb3dIZWFkZXI7XG5cdFx0XHRcdFx0c3R5bGVQcm9wcy5wdXNoKFwiYmFja2dyb3VuZC1jb2xvclwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNlbGxTdHlsZSA9IHN0eWxlcy5zdHlsZUNlbGxzICYmIHN0eWxlcy5zdHlsZUNlbGxzW2luZGV4XSA/IHN0eWxlcy5zdHlsZUNlbGxzW2luZGV4XSA6IHN0eWxlcy5maXJzdENlbGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNlbGxTdHlsZSl7XG5cdFx0XHRcdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKGNlbGxTdHlsZSwgY2VsbEVsLCBzdHlsZVByb3BzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5hbGlnbil7XG5cdFx0XHRcdFx0XHRjZWxsRWwuc3R5bGUudGV4dEFsaWduID0gY29sdW1uLmRlZmluaXRpb24uYWxpZ247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUgJiYgdGhpcy5jb25maWcuZGF0YVRyZWUgIT09IGZhbHNlKXtcblx0XHRcdFx0XHRpZigoc2V0dXAudHJlZUVsZW1lbnRGaWVsZCAmJiBzZXR1cC50cmVlRWxlbWVudEZpZWxkID09IGNvbHVtbi5maWVsZCkgfHwgKCFzZXR1cC50cmVlRWxlbWVudEZpZWxkICYmIGkgPT0gMCkpe1xuXHRcdFx0XHRcdFx0aWYocm93LmNvbXBvbmVudC5fcm93Lm1vZHVsZXMuZGF0YVRyZWUuY29udHJvbEVsKXtcblx0XHRcdFx0XHRcdFx0Y2VsbEVsLmluc2VydEJlZm9yZShyb3cuY29tcG9uZW50Ll9yb3cubW9kdWxlcy5kYXRhVHJlZS5jb250cm9sRWwuY2xvbmVOb2RlKHRydWUpLCBjZWxsRWwuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihyb3cuY29tcG9uZW50Ll9yb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbCl7XG5cdFx0XHRcdFx0XHRcdGNlbGxFbC5pbnNlcnRCZWZvcmUocm93LmNvbXBvbmVudC5fcm93Lm1vZHVsZXMuZGF0YVRyZWUuYnJhbmNoRWwuY2xvbmVOb2RlKHRydWUpLCBjZWxsRWwuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dFbC5hcHBlbmRDaGlsZChjZWxsRWwpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbFdyYXBwZXIubW9kdWxlcy5mb3JtYXQgJiYgY2VsbFdyYXBwZXIubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjayl7XG5cdFx0XHRcdFx0Y2VsbFdyYXBwZXIubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoc2V0dXAucm93Rm9ybWF0dGVyICYmIHJvdy50eXBlID09PSBcInJvd1wiICYmIHRoaXMuY29uZmlnLmZvcm1hdENlbGxzICE9PSBmYWxzZSl7XG5cdFx0XHRsZXQgZm9ybWF0Q29tcG9uZW50ID0gT2JqZWN0LmFzc2lnbihyb3cuY29tcG9uZW50KTtcblxuXHRcdFx0Zm9ybWF0Q29tcG9uZW50LmdldEVsZW1lbnQgPSBmdW5jdGlvbigpe3JldHVybiByb3dFbDt9O1xuXG5cdFx0XHRzZXR1cC5yb3dGb3JtYXR0ZXIocm93LmNvbXBvbmVudCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dFbDtcblx0fVxuXHRcblx0Z2VuZXJhdGVIVE1MVGFibGUobGlzdCl7XG5cdFx0dmFyIGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0aG9sZGVyLmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGVUYWJsZUVsZW1lbnQobGlzdCkpO1xuXHRcdFxuXHRcdHJldHVybiBob2xkZXIuaW5uZXJIVE1MO1xuXHR9XG5cdFxuXHRnZXRIdG1sKHZpc2libGUsIHN0eWxlLCBjb25maWcsIGNvbFZpc1Byb3Ape1xuXHRcdHZhciBsaXN0ID0gdGhpcy5nZW5lcmF0ZUV4cG9ydExpc3QoY29uZmlnIHx8IHRoaXMudGFibGUub3B0aW9ucy5odG1sT3V0cHV0Q29uZmlnLCBzdHlsZSwgdmlzaWJsZSwgY29sVmlzUHJvcCB8fCBcImh0bWxPdXRwdXRcIik7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZ2VuZXJhdGVIVE1MVGFibGUobGlzdCk7XG5cdH1cblx0XG5cdG1hcEVsZW1lbnRTdHlsZXMoZnJvbSwgdG8sIHByb3BzKXtcblx0XHRpZih0aGlzLmNsb25lVGFibGVTdHlsZSAmJiBmcm9tICYmIHRvKXtcblx0XHRcdFxuXHRcdFx0dmFyIGxvb2t1cCA9IHtcblx0XHRcdFx0XCJiYWNrZ3JvdW5kLWNvbG9yXCIgOiBcImJhY2tncm91bmRDb2xvclwiLFxuXHRcdFx0XHRcImNvbG9yXCIgOiBcImZvbnRDb2xvclwiLFxuXHRcdFx0XHRcIndpZHRoXCIgOiBcIndpZHRoXCIsXG5cdFx0XHRcdFwiZm9udC13ZWlnaHRcIiA6IFwiZm9udFdlaWdodFwiLFxuXHRcdFx0XHRcImZvbnQtZmFtaWx5XCIgOiBcImZvbnRGYW1pbHlcIixcblx0XHRcdFx0XCJmb250LXNpemVcIiA6IFwiZm9udFNpemVcIixcblx0XHRcdFx0XCJ0ZXh0LWFsaWduXCIgOiBcInRleHRBbGlnblwiLFxuXHRcdFx0XHRcImJvcmRlci10b3BcIiA6IFwiYm9yZGVyVG9wXCIsXG5cdFx0XHRcdFwiYm9yZGVyLWxlZnRcIiA6IFwiYm9yZGVyTGVmdFwiLFxuXHRcdFx0XHRcImJvcmRlci1yaWdodFwiIDogXCJib3JkZXJSaWdodFwiLFxuXHRcdFx0XHRcImJvcmRlci1ib3R0b21cIiA6IFwiYm9yZGVyQm90dG9tXCIsXG5cdFx0XHRcdFwicGFkZGluZy10b3BcIiA6IFwicGFkZGluZ1RvcFwiLFxuXHRcdFx0XHRcInBhZGRpbmctbGVmdFwiIDogXCJwYWRkaW5nTGVmdFwiLFxuXHRcdFx0XHRcInBhZGRpbmctcmlnaHRcIiA6IFwicGFkZGluZ1JpZ2h0XCIsXG5cdFx0XHRcdFwicGFkZGluZy1ib3R0b21cIiA6IFwicGFkZGluZ0JvdHRvbVwiLFxuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0aWYod2luZG93LmdldENvbXB1dGVkU3R5bGUpe1xuXHRcdFx0XHR2YXIgZnJvbVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZnJvbSk7XG5cblx0XHRcdFx0cHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKXtcblx0XHRcdFx0XHRpZighdG8uc3R5bGVbbG9va3VwW3Byb3BdXSl7XG5cdFx0XHRcdFx0XHR0by5zdHlsZVtsb29rdXBbcHJvcF1dID0gZnJvbVN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxudmFyIGRlZmF1bHRGaWx0ZXJzID0ge1xuXG5cdC8vZXF1YWwgdG9cblx0XCI9XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA9PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9sZXNzIHRoYW5cblx0XCI8XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA8IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0fSxcblxuXHQvL2xlc3MgdGhhbiBvciBlcXVhbCB0b1xuXHRcIjw9XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA8PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9ncmVhdGVyIHRoYW5cblx0XCI+XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA+IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0fSxcblxuXHQvL2dyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuXHRcIj49XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA+PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9ub3QgZXF1YWwgdG9cblx0XCIhPVwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHJldHVybiByb3dWYWwgIT0gZmlsdGVyVmFsID8gdHJ1ZSA6IGZhbHNlO1xuXHR9LFxuXG5cdFwicmVnZXhcIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblxuXHRcdGlmKHR5cGVvZiBmaWx0ZXJWYWwgPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRmaWx0ZXJWYWwgPSBuZXcgUmVnRXhwKGZpbHRlclZhbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpbHRlclZhbC50ZXN0KHJvd1ZhbCk7XG5cdH0sXG5cblx0Ly9jb250YWlucyB0aGUgc3RyaW5nXG5cdFwibGlrZVwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdGlmKGZpbHRlclZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgZmlsdGVyVmFsID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiByb3dWYWwgPT09IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0eXBlb2Ygcm93VmFsICE9PSAndW5kZWZpbmVkJyAmJiByb3dWYWwgIT09IG51bGwpe1xuXHRcdFx0XHRyZXR1cm4gU3RyaW5nKHJvd1ZhbCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlclZhbC50b0xvd2VyQ2FzZSgpKSA+IC0xO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly9jb250YWlucyB0aGUga2V5d29yZHNcblx0XCJrZXl3b3Jkc1wiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHZhciBrZXl3b3JkcyA9IGZpbHRlclZhbC50b0xvd2VyQ2FzZSgpLnNwbGl0KHR5cGVvZiBmaWx0ZXJQYXJhbXMuc2VwYXJhdG9yID09PSBcInVuZGVmaW5lZFwiID8gXCIgXCIgOiBmaWx0ZXJQYXJhbXMuc2VwYXJhdG9yKSxcblx0XHR2YWx1ZSA9IFN0cmluZyhyb3dWYWwgPT09IG51bGwgfHwgdHlwZW9mIHJvd1ZhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiByb3dWYWwpLnRvTG93ZXJDYXNlKCksXG5cdFx0bWF0Y2hlcyA9IFtdO1xuXG5cdFx0a2V5d29yZHMuZm9yRWFjaCgoa2V5d29yZCkgPT57XG5cdFx0XHRpZih2YWx1ZS5pbmNsdWRlcyhrZXl3b3JkKSl7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCh0cnVlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBmaWx0ZXJQYXJhbXMubWF0Y2hBbGwgPyBtYXRjaGVzLmxlbmd0aCA9PT0ga2V5d29yZHMubGVuZ3RoIDogISFtYXRjaGVzLmxlbmd0aDtcblx0fSxcblxuXHQvL3N0YXJ0cyB3aXRoIHRoZSBzdHJpbmdcblx0XCJzdGFydHNcIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHRpZihmaWx0ZXJWYWwgPT09IG51bGwgfHwgdHlwZW9mIGZpbHRlclZhbCA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gcm93VmFsID09PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodHlwZW9mIHJvd1ZhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgcm93VmFsICE9PSBudWxsKXtcblx0XHRcdFx0cmV0dXJuIFN0cmluZyhyb3dWYWwpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChmaWx0ZXJWYWwudG9Mb3dlckNhc2UoKSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvL2VuZHMgd2l0aCB0aGUgc3RyaW5nXG5cdFwiZW5kc1wiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdGlmKGZpbHRlclZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgZmlsdGVyVmFsID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiByb3dWYWwgPT09IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0eXBlb2Ygcm93VmFsICE9PSAndW5kZWZpbmVkJyAmJiByb3dWYWwgIT09IG51bGwpe1xuXHRcdFx0XHRyZXR1cm4gU3RyaW5nKHJvd1ZhbCkudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChmaWx0ZXJWYWwudG9Mb3dlckNhc2UoKSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvL2luIGFycmF5XG5cdFwiaW5cIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHRpZihBcnJheS5pc0FycmF5KGZpbHRlclZhbCkpe1xuXHRcdFx0cmV0dXJuIGZpbHRlclZhbC5sZW5ndGggPyBmaWx0ZXJWYWwuaW5kZXhPZihyb3dWYWwpID4gLTEgOiB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZpbHRlciBFcnJvciAtIGZpbHRlciB2YWx1ZSBpcyBub3QgYW4gYXJyYXk6XCIsIGZpbHRlclZhbCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxufTtcblxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJmaWx0ZXJcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIGZpbHRlcnMgPSBkZWZhdWx0RmlsdGVycztcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5maWx0ZXJMaXN0ID0gW107IC8vaG9sZCBmaWx0ZXIgbGlzdFxuXHRcdHRoaXMuaGVhZGVyRmlsdGVycyA9IHt9OyAvL2hvbGQgY29sdW1uIGZpbHRlcnNcblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMgPSBbXTsgLy9ob2xkIGNvbHVtbnMgdGhhdCB1c2UgaGVhZGVyIGZpbHRlcnNcblxuXHRcdHRoaXMucHJldkhlYWRlckZpbHRlckNoYW5nZUNoZWNrID0gXCJcIjtcblx0XHR0aGlzLnByZXZIZWFkZXJGaWx0ZXJDaGFuZ2VDaGVjayA9IFwie31cIjtcblxuXHRcdHRoaXMuY2hhbmdlZCA9IGZhbHNlOyAvL2hhcyBmaWx0ZXJpbmcgY2hhbmdlZCBzaW5jZSBsYXN0IHJlbmRlclxuXHRcdHRoaXMudGFibGVJbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZmlsdGVyTW9kZVwiLCBcImxvY2FsXCIpOyAvL2xvY2FsIG9yIHJlbW90ZSBmaWx0ZXJpbmdcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImluaXRpYWxGaWx0ZXJcIiwgZmFsc2UpOyAvL2luaXRpYWwgZmlsdGVyaW5nIGNyaXRlcmlhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaW5pdGlhbEhlYWRlckZpbHRlclwiLCBmYWxzZSk7IC8vaW5pdGlhbCBoZWFkZXIgZmlsdGVyaW5nIGNyaXRlcmlhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaGVhZGVyRmlsdGVyTGl2ZUZpbHRlckRlbGF5XCIsIDMwMCk7IC8vZGVsYXkgYmVmb3JlIHVwZGF0aW5nIGNvbHVtbiBhZnRlciB1c2VyIHR5cGVzIGluIGhlYWRlciBmaWx0ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwbGFjZWhvbGRlckhlYWRlckZpbHRlclwiLCBmYWxzZSk7IC8vcGxhY2Vob2xkZXIgd2hlbiBoZWFkZXIgZmlsdGVyIGlzIGVtcHR5XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRmlsdGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJQbGFjZWhvbGRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRmlsdGVyUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJFbXB0eUNoZWNrXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJGdW5jXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJGdW5jUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJMaXZlRmlsdGVyXCIpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZWFyY2hSb3dzXCIsIHRoaXMuc2VhcmNoUm93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNlYXJjaERhdGFcIiwgdGhpcy5zZWFyY2hEYXRhLmJpbmQodGhpcykpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRGaWx0ZXJcIiwgdGhpcy51c2VyU2V0RmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwicmVmcmVzaEZpbHRlclwiLCB0aGlzLnVzZXJSZWZyZXNoRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiYWRkRmlsdGVyXCIsIHRoaXMudXNlckFkZEZpbHRlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEZpbHRlcnNcIiwgdGhpcy5nZXRGaWx0ZXJzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0SGVhZGVyRmlsdGVyRm9jdXNcIiwgdGhpcy51c2VyU2V0SGVhZGVyRmlsdGVyRm9jdXMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRIZWFkZXJGaWx0ZXJWYWx1ZVwiLCB0aGlzLnVzZXJHZXRIZWFkZXJGaWx0ZXJWYWx1ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEhlYWRlckZpbHRlclZhbHVlXCIsIHRoaXMudXNlclNldEhlYWRlckZpbHRlclZhbHVlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SGVhZGVyRmlsdGVyc1wiLCB0aGlzLmdldEhlYWRlckZpbHRlcnMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJyZW1vdmVGaWx0ZXJcIiwgdGhpcy51c2VyUmVtb3ZlRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiY2xlYXJGaWx0ZXJcIiwgdGhpcy51c2VyQ2xlYXJGaWx0ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhckhlYWRlckZpbHRlclwiLCB0aGlzLnVzZXJDbGVhckhlYWRlckZpbHRlci5iaW5kKHRoaXMpKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcImhlYWRlckZpbHRlckZvY3VzXCIsIHRoaXMuc2V0SGVhZGVyRmlsdGVyRm9jdXMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwicmVsb2FkSGVhZGVyRmlsdGVyXCIsIHRoaXMucmVsb2FkSGVhZGVyRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcImdldEhlYWRlckZpbHRlclZhbHVlXCIsIHRoaXMuZ2V0SGVhZGVyRmlsdGVyVmFsdWUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwic2V0SGVhZGVyRmlsdGVyVmFsdWVcIiwgdGhpcy5zZXRIZWFkZXJGaWx0ZXJWYWx1ZS5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbkhlYWRlckZpbHRlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi13aWR0aC1maXQtYmVmb3JlXCIsIHRoaXMuaGlkZUhlYWRlckZpbHRlckVsZW1lbnRzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXdpZHRoLWZpdC1hZnRlclwiLCB0aGlzLnNob3dIZWFkZXJGaWx0ZXJFbGVtZW50cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWJ1aWx0XCIsIHRoaXMudGFibGVCdWlsdC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInBsYWNlaG9sZGVyXCIsIHRoaXMuZ2VuZXJhdGVQbGFjZWhvbGRlci5iaW5kKHRoaXMpKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5maWx0ZXJNb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wYXJhbXNcIiwgdGhpcy5yZW1vdGVGaWx0ZXJQYXJhbXMuYmluZCh0aGlzKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5yZWdpc3RlckRhdGFIYW5kbGVyKHRoaXMuZmlsdGVyLmJpbmQodGhpcyksIDEwKTtcblx0fVxuXG5cdHRhYmxlQnVpbHQoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEZpbHRlcil7XG5cdFx0XHR0aGlzLnNldEZpbHRlcih0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEZpbHRlcik7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxIZWFkZXJGaWx0ZXIpe1xuXHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxIZWFkZXJGaWx0ZXIuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXG5cdFx0XHRcdHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihpdGVtLmZpZWxkKTtcblxuXHRcdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRcdHRoaXMuc2V0SGVhZGVyRmlsdGVyVmFsdWUoY29sdW1uLCBpdGVtLnZhbHVlKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBGaWx0ZXIgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGl0ZW0uZmllbGQpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZUluaXRpYWxpemVkID0gdHJ1ZTtcblx0fVxuXG5cdHJlbW90ZUZpbHRlclBhcmFtcyhkYXRhLCBjb25maWcsIHNpbGVudCwgcGFyYW1zKXtcblx0XHRwYXJhbXMuZmlsdGVyID0gdGhpcy5nZXRGaWx0ZXJzKHRydWUsIHRydWUpO1xuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblxuXHRnZW5lcmF0ZVBsYWNlaG9sZGVyKHRleHQpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wbGFjZWhvbGRlckhlYWRlckZpbHRlciAmJiBPYmplY3Qua2V5cyh0aGlzLmhlYWRlckZpbHRlcnMpLmxlbmd0aCl7XG5cdFx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zLnBsYWNlaG9sZGVySGVhZGVyRmlsdGVyO1xuXHRcdH1cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly9zZXQgc3RhbmRhcmQgZmlsdGVyc1xuXHR1c2VyU2V0RmlsdGVyKGZpZWxkLCB0eXBlLCB2YWx1ZSwgcGFyYW1zKXtcblx0XHR0aGlzLnNldEZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUsIHBhcmFtcyk7XG5cdFx0dGhpcy5yZWZyZXNoRmlsdGVyKCk7XG5cdH1cblxuXHQvL3NldCBzdGFuZGFyZCBmaWx0ZXJzXG5cdHVzZXJSZWZyZXNoRmlsdGVyKCl7XG5cdFx0dGhpcy5yZWZyZXNoRmlsdGVyKCk7XG5cdH1cblxuXHQvL2FkZCBmaWx0ZXIgdG8gYXJyYXlcblx0dXNlckFkZEZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUsIHBhcmFtcyl7XG5cdFx0dGhpcy5hZGRGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlLCBwYXJhbXMpO1xuXHRcdHRoaXMucmVmcmVzaEZpbHRlcigpO1xuXHR9XG5cblx0dXNlclNldEhlYWRlckZpbHRlckZvY3VzKGZpZWxkKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpO1xuXG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdHRoaXMuc2V0SGVhZGVyRmlsdGVyRm9jdXMoY29sdW1uKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEZvY3VzIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0dXNlckdldEhlYWRlckZpbHRlclZhbHVlKGZpZWxkKSB7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRIZWFkZXJGaWx0ZXJWYWx1ZShjb2x1bW4pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBGaWx0ZXIgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHR9XG5cdH1cblxuXHR1c2VyU2V0SGVhZGVyRmlsdGVyVmFsdWUoZmllbGQsIHZhbHVlKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpO1xuXG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdHRoaXMuc2V0SGVhZGVyRmlsdGVyVmFsdWUoY29sdW1uLCB2YWx1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgZmllbGQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vcmVtb3ZlIGZpbHRlciBmcm9tIGFycmF5XG5cdHVzZXJSZW1vdmVGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlKXtcblx0XHR0aGlzLnJlbW92ZUZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUpO1xuXHRcdHRoaXMucmVmcmVzaEZpbHRlcigpO1xuXHR9XG5cblx0Ly9jbGVhciBmaWx0ZXJzXG5cdHVzZXJDbGVhckZpbHRlcihhbGwpe1xuXHRcdHRoaXMuY2xlYXJGaWx0ZXIoYWxsKTtcblx0XHR0aGlzLnJlZnJlc2hGaWx0ZXIoKTtcblx0fVxuXG5cdC8vY2xlYXIgaGVhZGVyIGZpbHRlcnNcblx0dXNlckNsZWFySGVhZGVyRmlsdGVyKCl7XG5cdFx0dGhpcy5jbGVhckhlYWRlckZpbHRlcigpO1xuXHRcdHRoaXMucmVmcmVzaEZpbHRlcigpO1xuXHR9XG5cblxuXHQvL3NlYXJjaCBmb3Igc3BlY2lmaWMgcm93IGNvbXBvbmVudHNcblx0c2VhcmNoUm93cyhmaWVsZCwgdHlwZSwgdmFsdWUpe1xuXHRcdHJldHVybiB0aGlzLnNlYXJjaChcInJvd3NcIiwgZmllbGQsIHR5cGUsIHZhbHVlKTtcblx0fVxuXG5cdC8vc2VhcmNoIGZvciBzcGVjaWZpYyBkYXRhXG5cdHNlYXJjaERhdGEoZmllbGQsIHR5cGUsIHZhbHVlKXtcblx0XHRyZXR1cm4gdGhpcy5zZWFyY2goXCJkYXRhXCIsIGZpZWxkLCB0eXBlLCB2YWx1ZSk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGluaXRpYWxpemVDb2x1bW5IZWFkZXJGaWx0ZXIoY29sdW1uKXtcblx0XHR2YXIgZGVmID0gY29sdW1uLmRlZmluaXRpb247XG5cblx0XHRpZihkZWYuaGVhZGVyRmlsdGVyKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pO1xuXHRcdH1cblx0fVxuXG5cdC8vaW5pdGlhbGl6ZSBjb2x1bW4gaGVhZGVyIGZpbHRlclxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbiwgdmFsdWUpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRmaWVsZCA9IGNvbHVtbi5nZXRGaWVsZCgpO1xuXG5cdFx0Ly9oYW5kbGUgc3VjY2Vzc2Z1bGx5IHZhbHVlIGNoYW5nZVxuXHRcdGZ1bmN0aW9uIHN1Y2Nlc3ModmFsdWUpe1xuXHRcdFx0dmFyIGZpbHRlclR5cGUgPSAoY29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPT0gXCJpbnB1dFwiICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5hdHRyVHlwZSA9PSBcInRleHRcIikgfHwgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPT0gXCJ0ZXh0YXJlYVwiID8gXCJwYXJ0aWFsXCIgOiBcIm1hdGNoXCIsXG5cdFx0XHR0eXBlID0gXCJcIixcblx0XHRcdGZpbHRlckNoYW5nZUNoZWNrID0gXCJcIixcblx0XHRcdGZpbHRlckZ1bmM7XG5cblx0XHRcdGlmKHR5cGVvZiBjb2x1bW4ubW9kdWxlcy5maWx0ZXIucHJldlN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIgfHwgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnByZXZTdWNjZXNzICE9PSB2YWx1ZSl7XG5cblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnByZXZTdWNjZXNzID0gdmFsdWU7XG5cblx0XHRcdFx0aWYoIWNvbHVtbi5tb2R1bGVzLmZpbHRlci5lbXB0eUZ1bmModmFsdWUpKXtcblx0XHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUgPSB2YWx1ZTtcblxuXHRcdFx0XHRcdHN3aXRjaCh0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuYyl7XG5cdFx0XHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0XHRcdGlmKEZpbHRlci5maWx0ZXJzW2NvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckZ1bmNdKXtcblx0XHRcdFx0XHRcdFx0XHR0eXBlID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuYztcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcGFyYW1zID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuY1BhcmFtcyB8fCB7fTtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBmaWVsZFZhbCA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXModmFsdWUsIGZpZWxkVmFsLCBkYXRhKSA6IHBhcmFtcztcblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIEZpbHRlci5maWx0ZXJzW2NvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckZ1bmNdKHZhbHVlLCBmaWVsZFZhbCwgZGF0YSwgcGFyYW1zKTtcblx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiSGVhZGVyIEZpbHRlciBFcnJvciAtIE1hdGNoaW5nIGZpbHRlciBmdW5jdGlvbiBub3QgZm91bmQ6IFwiLCBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJGdW5jKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0XHRcdGZpbHRlckZ1bmMgPSBmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcGFyYW1zID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuY1BhcmFtcyB8fCB7fTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZmllbGRWYWwgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShkYXRhKTtcblxuXHRcdFx0XHRcdFx0XHRcdHBhcmFtcyA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyh2YWx1ZSwgZmllbGRWYWwsIGRhdGEpIDogcGFyYW1zO1xuXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckZ1bmModmFsdWUsIGZpZWxkVmFsLCBkYXRhLCBwYXJhbXMpO1xuXHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdHR5cGUgPSBmaWx0ZXJGdW5jO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZighZmlsdGVyRnVuYyl7XG5cdFx0XHRcdFx0XHRzd2l0Y2goZmlsdGVyVHlwZSl7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJwYXJ0aWFsXCI6XG5cdFx0XHRcdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGNvbFZhbCA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZih0eXBlb2YgY29sVmFsICE9PSAndW5kZWZpbmVkJyAmJiBjb2xWYWwgIT09IG51bGwpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gU3RyaW5nKGNvbFZhbCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKSkgPiAtMTtcblx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0dHlwZSA9IFwibGlrZVwiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpID09IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0dHlwZSA9IFwiPVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyRmlsdGVyc1tmaWVsZF0gPSB7dmFsdWU6dmFsdWUsIGZ1bmM6ZmlsdGVyRnVuYywgdHlwZTp0eXBlfTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGRlbGV0ZSBzZWxmLmhlYWRlckZpbHRlcnNbZmllbGRdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnZhbHVlID0gdmFsdWU7XG5cblx0XHRcdFx0ZmlsdGVyQ2hhbmdlQ2hlY2sgPSBKU09OLnN0cmluZ2lmeShzZWxmLmhlYWRlckZpbHRlcnMpO1xuXG5cdFx0XHRcdGlmKHNlbGYucHJldkhlYWRlckZpbHRlckNoYW5nZUNoZWNrICE9PSBmaWx0ZXJDaGFuZ2VDaGVjayl7XG5cdFx0XHRcdFx0c2VsZi5wcmV2SGVhZGVyRmlsdGVyQ2hhbmdlQ2hlY2sgPSBmaWx0ZXJDaGFuZ2VDaGVjaztcblxuXHRcdFx0XHRcdHNlbGYudHJhY2tDaGFuZ2VzKCk7XG5cdFx0XHRcdFx0c2VsZi5yZWZyZXNoRmlsdGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyID0ge1xuXHRcdFx0c3VjY2VzczpzdWNjZXNzLFxuXHRcdFx0YXR0clR5cGU6ZmFsc2UsXG5cdFx0XHR0YWdUeXBlOmZhbHNlLFxuXHRcdFx0ZW1wdHlGdW5jOmZhbHNlLFxuXHRcdH07XG5cblx0XHR0aGlzLmdlbmVyYXRlSGVhZGVyRmlsdGVyRWxlbWVudChjb2x1bW4pO1xuXHR9XG5cblx0Z2VuZXJhdGVIZWFkZXJGaWx0ZXJFbGVtZW50KGNvbHVtbiwgaW5pdGlhbFZhbHVlLCByZWluaXRpYWxpemUpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRzdWNjZXNzID0gY29sdW1uLm1vZHVsZXMuZmlsdGVyLnN1Y2Nlc3MsXG5cdFx0ZmllbGQgPSBjb2x1bW4uZ2V0RmllbGQoKSxcblx0XHRmaWx0ZXJFbGVtZW50LCBlZGl0b3IsIGVkaXRvckVsZW1lbnQsIGNlbGxXcmFwcGVyLCB0eXBpbmdUaW1lciwgc2VhcmNoVHJpZ2dlciwgcGFyYW1zLCBvblJlbmRlcmVkQ2FsbGJhY2s7XG5cblx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cblx0XHQvL2hhbmRsZSBhYm9ydGVkIGVkaXRcblx0XHRmdW5jdGlvbiBjYW5jZWwoKXt9XG5cblx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdG9uUmVuZGVyZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdH1cblxuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50ICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0Y29sdW1uLmNvbnRlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50LnBhcmVudE5vZGUpO1xuXHRcdH1cblxuXHRcdGlmKGZpZWxkKXtcblxuXHRcdFx0Ly9zZXQgZW1wdHkgdmFsdWUgZnVuY3Rpb25cblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5lbXB0eUZ1bmMgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJFbXB0eUNoZWNrIHx8IGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0cmV0dXJuICF2YWx1ZSAmJiB2YWx1ZSAhPT0gMDtcblx0XHRcdH07XG5cblx0XHRcdGZpbHRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0ZmlsdGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWhlYWRlci1maWx0ZXJcIik7XG5cblx0XHRcdC8vc2V0IGNvbHVtbiBlZGl0b3Jcblx0XHRcdHN3aXRjaCh0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyKXtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGlmKHNlbGYudGFibGUubW9kdWxlcy5lZGl0LmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyXSl7XG5cdFx0XHRcdFx0XHRlZGl0b3IgPSBzZWxmLnRhYmxlLm1vZHVsZXMuZWRpdC5lZGl0b3JzW2NvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlcl07XG5cblx0XHRcdFx0XHRcdGlmKChjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXIgPT09IFwidGlja1wiIHx8IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlciA9PT0gXCJ0aWNrQ3Jvc3NcIikgJiYgIWNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckVtcHR5Q2hlY2spe1xuXHRcdFx0XHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIuZW1wdHlGdW5jID0gZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdHJ1ZSAmJiB2YWx1ZSAhPT0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gQ2Fubm90IGJ1aWxkIGhlYWRlciBmaWx0ZXIsIE5vIHN1Y2ggZWRpdG9yIGZvdW5kOiBcIiwgY29sdW1uLmRlZmluaXRpb24uZWRpdG9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0ZWRpdG9yID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZWRpdCAmJiBjb2x1bW4ubW9kdWxlcy5lZGl0LmVkaXRvcil7XG5cdFx0XHRcdFx0XHRlZGl0b3IgPSBjb2x1bW4ubW9kdWxlcy5lZGl0LmVkaXRvcjtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXIgJiYgc2VsZi50YWJsZS5tb2R1bGVzLmVkaXQuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXJdKXtcblx0XHRcdFx0XHRcdFx0ZWRpdG9yID0gc2VsZi50YWJsZS5tb2R1bGVzLmVkaXQuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXJdO1xuXG5cdFx0XHRcdFx0XHRcdGlmKChjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXIgPT09IFwidGlja1wiIHx8IGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlciA9PT0gXCJ0aWNrQ3Jvc3NcIikgJiYgIWNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckVtcHR5Q2hlY2spe1xuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5lbXB0eUZ1bmMgPSBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgIT09IHRydWUgJiYgdmFsdWUgIT09IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWRpdG9yID0gc2VsZi50YWJsZS5tb2R1bGVzLmVkaXQuZWRpdG9yc1tcImlucHV0XCJdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0aWYoZWRpdG9yKXtcblxuXHRcdFx0XHRjZWxsV3JhcHBlciA9IHtcblx0XHRcdFx0XHRnZXRWYWx1ZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiBpbml0aWFsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgPyBpbml0aWFsVmFsdWUgOiBcIlwiO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0RmllbGQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZGVmaW5pdGlvbi5maWVsZDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldEVsZW1lbnQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBmaWx0ZXJFbGVtZW50O1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0Q29sdW1uOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0VGFibGU6KCkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGU7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRUeXBlOigpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiBcImhlYWRlclwiO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0Um93OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRub3JtYWxpemVIZWlnaHQ6ZnVuY3Rpb24oKXtcblxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRwYXJhbXMgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJQYXJhbXMgfHwge307XG5cblx0XHRcdFx0cGFyYW1zID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLmNhbGwoc2VsZi50YWJsZSwgY2VsbFdyYXBwZXIpIDogcGFyYW1zO1xuXG5cdFx0XHRcdGVkaXRvckVsZW1lbnQgPSBlZGl0b3IuY2FsbCh0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdCwgY2VsbFdyYXBwZXIsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgcGFyYW1zKTtcblxuXHRcdFx0XHRpZighZWRpdG9yRWxlbWVudCl7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gQ2Fubm90IGFkZCBmaWx0ZXIgdG8gXCIgKyBmaWVsZCArIFwiIGNvbHVtbiwgZWRpdG9yIHJldHVybmVkIGEgdmFsdWUgb2YgZmFsc2VcIik7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIShlZGl0b3JFbGVtZW50IGluc3RhbmNlb2YgTm9kZSkpe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkZpbHRlciBFcnJvciAtIENhbm5vdCBhZGQgZmlsdGVyIHRvIFwiICsgZmllbGQgKyBcIiBjb2x1bW4sIGVkaXRvciBzaG91bGQgcmV0dXJuIGFuIGluc3RhbmNlIG9mIE5vZGUsIHRoZSBlZGl0b3IgcmV0dXJuZWQ6XCIsIGVkaXRvckVsZW1lbnQpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vc2V0IFBsYWNlaG9sZGVyIFRleHRcblx0XHRcdFx0c2VsZi5sYW5nQmluZChcImhlYWRlckZpbHRlcnN8Y29sdW1uc3xcIiArIGNvbHVtbi5kZWZpbml0aW9uLmZpZWxkLCBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdFx0ZWRpdG9yRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdmFsdWUgPyB2YWx1ZSA6IChjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJQbGFjZWhvbGRlciB8fCBzZWxmLmxhbmdUZXh0KFwiaGVhZGVyRmlsdGVyc3xkZWZhdWx0XCIpKSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vZm9jdXMgb24gZWxlbWVudCBvbiBjbGlja1xuXHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0ZWRpdG9yRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKGUpID0+IHtcblx0XHRcdFx0XHR2YXIgbGVmdCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb250ZW50c0VsZW1lbnQuc2Nyb2xsTGVmdDtcblxuXHRcdFx0XHRcdHZhciBoZWFkZXJQb3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxMZWZ0O1xuXG5cdFx0XHRcdFx0aWYobGVmdCAhPT0gaGVhZGVyUG9zKXtcblx0XHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvL2xpdmUgdXBkYXRlIGZpbHRlcnMgYXMgdXNlciB0eXBlc1xuXHRcdFx0XHR0eXBpbmdUaW1lciA9IGZhbHNlO1xuXG5cdFx0XHRcdHNlYXJjaFRyaWdnZXIgPSBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRpZih0eXBpbmdUaW1lcil7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQodHlwaW5nVGltZXIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHR5cGluZ1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0c3VjY2VzcyhlZGl0b3JFbGVtZW50LnZhbHVlKTtcblx0XHRcdFx0XHR9LHNlbGYudGFibGUub3B0aW9ucy5oZWFkZXJGaWx0ZXJMaXZlRmlsdGVyRGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50ID0gZWRpdG9yRWxlbWVudDtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmF0dHJUeXBlID0gZWRpdG9yRWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJ0eXBlXCIpID8gZWRpdG9yRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkgOiBcIlwiIDtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPSBlZGl0b3JFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJMaXZlRmlsdGVyICE9PSBmYWxzZSl7XG5cblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHQhKFxuXHRcdFx0XHRcdFx0XHRjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXIgPT09ICdhdXRvY29tcGxldGUnIHx8XG5cdFx0XHRcdFx0XHRcdGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlciA9PT0gJ3RpY2tDcm9zcycgfHxcblx0XHRcdFx0XHRcdFx0KChjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IgPT09ICdhdXRvY29tcGxldGUnIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uLmRlZmluaXRpb24uZWRpdG9yID09PSAndGlja0Nyb3NzJykgJiZcblx0XHRcdFx0XHRcdFx0Y29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyID09PSB0cnVlKVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0ZWRpdG9yRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgc2VhcmNoVHJpZ2dlcik7XG5cdFx0XHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWFyY2hcIiwgc2VhcmNoVHJpZ2dlcik7XG5cblxuXHRcdFx0XHRcdFx0Ly91cGRhdGUgbnVtYmVyIGZpbHRlcmVkIGNvbHVtbnMgb24gY2hhbmdlXG5cdFx0XHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5maWx0ZXIuYXR0clR5cGUgPT0gXCJudW1iZXJcIil7XG5cdFx0XHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzKGVkaXRvckVsZW1lbnQudmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly9jaGFuZ2UgdGV4dCBpbnB1dHMgdG8gc2VhcmNoIGlucHV0cyB0byBhbGxvdyBmb3IgY2xlYXJpbmcgb2YgZmllbGRcblx0XHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlci5hdHRyVHlwZSA9PSBcInRleHRcIiAmJiB0aGlzLnRhYmxlLmJyb3dzZXIgIT09IFwiaWVcIil7XG5cdFx0XHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInNlYXJjaFwiKTtcblx0XHRcdFx0XHRcdC8vIGVkaXRvckVsZW1lbnQub2ZmKFwiY2hhbmdlIGJsdXJcIik7IC8vcHJldmVudCBibHVyIGZyb20gdHJpZ2dlcmluZyBmaWx0ZXIgYW5kIHByZXZlbnRpbmcgc2VsZWN0aW9uIGNsaWNrXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvL3ByZXZlbnQgaW5wdXQgYW5kIHNlbGVjdCBlbGVtZW50cyBmcm9tIHByb3BhZ2F0aW5nIGNsaWNrIHRvIGNvbHVtbiBzb3J0ZXJzIGV0Y1xuXHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlci50YWdUeXBlID09IFwiaW5wdXRcIiB8fCBjb2x1bW4ubW9kdWxlcy5maWx0ZXIudGFnVHlwZSA9PSBcInNlbGVjdFwiIHx8IGNvbHVtbi5tb2R1bGVzLmZpbHRlci50YWdUeXBlID09IFwidGV4dGFyZWFcIil7XG5cdFx0XHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZpbHRlckVsZW1lbnQuYXBwZW5kQ2hpbGQoZWRpdG9yRWxlbWVudCk7XG5cblx0XHRcdFx0Y29sdW1uLmNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGZpbHRlckVsZW1lbnQpO1xuXG5cdFx0XHRcdGlmKCFyZWluaXRpYWxpemUpe1xuXHRcdFx0XHRcdHNlbGYuaGVhZGVyRmlsdGVyQ29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihvblJlbmRlcmVkQ2FsbGJhY2spe1xuXHRcdFx0XHRcdG9uUmVuZGVyZWRDYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gQ2Fubm90IGFkZCBoZWFkZXIgZmlsdGVyLCBjb2x1bW4gaGFzIG5vIGZpZWxkIHNldDpcIiwgY29sdW1uLmRlZmluaXRpb24udGl0bGUpO1xuXHRcdH1cblx0fVxuXG5cdC8vaGlkZSBhbGwgaGVhZGVyIGZpbHRlciBlbGVtZW50cyAodXNlZCB0byBlbnN1cmUgY29ycmVjdCBjb2x1bW4gd2lkdGhzIGluIFwiZml0RGF0YVwiIGxheW91dCBtb2RlKVxuXHRoaWRlSGVhZGVyRmlsdGVyRWxlbWVudHMoKXtcblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vc2hvdyBhbGwgaGVhZGVyIGZpbHRlciBlbGVtZW50cyAodXNlZCB0byBlbnN1cmUgY29ycmVjdCBjb2x1bW4gd2lkdGhzIGluIFwiZml0RGF0YVwiIGxheW91dCBtb2RlKVxuXHRzaG93SGVhZGVyRmlsdGVyRWxlbWVudHMoKXtcblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly9wcm9ncmFtbWF0aWNhbGx5IHNldCBmb2N1cyBvZiBoZWFkZXIgZmlsdGVyXG5cdHNldEhlYWRlckZpbHRlckZvY3VzKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50LmZvY3VzKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBGb2N1cyBFcnJvciAtIE5vIGhlYWRlciBmaWx0ZXIgc2V0IG9uIGNvbHVtbjpcIiwgY29sdW1uLmdldEZpZWxkKCkpO1xuXHRcdH1cblx0fVxuXG5cdC8vcHJvZ3JhbW1hdGljYWxseSBnZXQgdmFsdWUgb2YgaGVhZGVyIGZpbHRlclxuXHRnZXRIZWFkZXJGaWx0ZXJWYWx1ZShjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlciAmJiBjb2x1bW4ubW9kdWxlcy5maWx0ZXIuaGVhZGVyRWxlbWVudCl7XG5cdFx0XHRyZXR1cm4gY29sdW1uLm1vZHVsZXMuZmlsdGVyLnZhbHVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEVycm9yIC0gTm8gaGVhZGVyIGZpbHRlciBzZXQgb24gY29sdW1uOlwiLCBjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0fVxuXHR9XG5cblx0Ly9wcm9ncmFtbWF0aWNhbGx5IHNldCB2YWx1ZSBvZiBoZWFkZXIgZmlsdGVyXG5cdHNldEhlYWRlckZpbHRlclZhbHVlKGNvbHVtbiwgdmFsdWUpe1xuXHRcdGlmIChjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0dGhpcy5nZW5lcmF0ZUhlYWRlckZpbHRlckVsZW1lbnQoY29sdW1uLCB2YWx1ZSwgdHJ1ZSk7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5zdWNjZXNzKHZhbHVlKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBFcnJvciAtIE5vIGhlYWRlciBmaWx0ZXIgc2V0IG9uIGNvbHVtbjpcIiwgY29sdW1uLmdldEZpZWxkKCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJlbG9hZEhlYWRlckZpbHRlcihjb2x1bW4pe1xuXHRcdGlmIChjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0dGhpcy5nZW5lcmF0ZUhlYWRlckZpbHRlckVsZW1lbnQoY29sdW1uLCBjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUsIHRydWUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEVycm9yIC0gTm8gaGVhZGVyIGZpbHRlciBzZXQgb24gY29sdW1uOlwiLCBjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVmcmVzaEZpbHRlcigpe1xuXHRcdGlmKHRoaXMudGFibGVJbml0aWFsaXplZCl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZmlsdGVyTW9kZSA9PT0gXCJyZW1vdGVcIil7XG5cdFx0XHRcdHRoaXMucmVsb2FkRGF0YShudWxsLCBmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vVE9ETyAtIFBlcnNpc3QgbGVmdCBwb3NpdGlvbiBvZiByb3cgbWFuYWdlclxuXHRcdC8vIGxlZnQgPSB0aGlzLnNjcm9sbExlZnQ7XG5cdFx0Ly8gdGhpcy5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHR9XG5cblx0Ly9jaGVjayBpZiB0aGUgZmlsdGVycyBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0IHVzZVxuXHR0cmFja0NoYW5nZXMoKXtcblx0XHR0aGlzLmNoYW5nZWQgPSB0cnVlO1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJmaWx0ZXItY2hhbmdlZFwiKTtcblx0fVxuXG5cdC8vY2hlY2sgaWYgdGhlIGZpbHRlcnMgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCB1c2Vcblx0aGFzQ2hhbmdlZCgpe1xuXHRcdHZhciBjaGFuZ2VkID0gdGhpcy5jaGFuZ2VkO1xuXHRcdHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuXHRcdHJldHVybiBjaGFuZ2VkO1xuXHR9XG5cblx0Ly9zZXQgc3RhbmRhcmQgZmlsdGVyc1xuXHRzZXRGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlLCBwYXJhbXMpe1xuXHRcdHRoaXMuZmlsdGVyTGlzdCA9IFtdO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoZmllbGQpKXtcblx0XHRcdGZpZWxkID0gW3tmaWVsZDpmaWVsZCwgdHlwZTp0eXBlLCB2YWx1ZTp2YWx1ZSwgcGFyYW1zOnBhcmFtc31dO1xuXHRcdH1cblxuXHRcdHRoaXMuYWRkRmlsdGVyKGZpZWxkKTtcblx0fVxuXG5cdC8vYWRkIGZpbHRlciB0byBhcnJheVxuXHRhZGRGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlLCBwYXJhbXMpe1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRpZighQXJyYXkuaXNBcnJheShmaWVsZCkpe1xuXHRcdFx0ZmllbGQgPSBbe2ZpZWxkOmZpZWxkLCB0eXBlOnR5cGUsIHZhbHVlOnZhbHVlLCBwYXJhbXM6cGFyYW1zfV07XG5cdFx0fVxuXG5cdFx0ZmllbGQuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHRmaWx0ZXIgPSB0aGlzLmZpbmRGaWx0ZXIoZmlsdGVyKTtcblxuXHRcdFx0aWYoZmlsdGVyKXtcblx0XHRcdFx0dGhpcy5maWx0ZXJMaXN0LnB1c2goZmlsdGVyKTtcblx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZihjaGFuZ2VkKXtcblx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0fVxuXHR9XG5cblx0ZmluZEZpbHRlcihmaWx0ZXIpe1xuXHRcdHZhciBjb2x1bW47XG5cblx0XHRpZihBcnJheS5pc0FycmF5KGZpbHRlcikpe1xuXHRcdFx0cmV0dXJuIHRoaXMuZmluZFN1YkZpbHRlcnMoZmlsdGVyKTtcblx0XHR9XG5cblx0XHR2YXIgZmlsdGVyRnVuYyA9IGZhbHNlO1xuXG5cdFx0aWYodHlwZW9mIGZpbHRlci5maWVsZCA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRyZXR1cm4gZmlsdGVyLmZpZWxkKGRhdGEsIGZpbHRlci50eXBlIHx8IHt9KTsvLyBwYXNzIHBhcmFtcyB0byBjdXN0b20gZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHR9O1xuXHRcdH1lbHNlIHtcblxuXHRcdFx0aWYoRmlsdGVyLmZpbHRlcnNbZmlsdGVyLnR5cGVdKXtcblxuXHRcdFx0XHRjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlGaWVsZChmaWx0ZXIuZmllbGQpO1xuXG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIEZpbHRlci5maWx0ZXJzW2ZpbHRlci50eXBlXShmaWx0ZXIudmFsdWUsIGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpLCBkYXRhLCBmaWx0ZXIucGFyYW1zIHx8IHt9KTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIEZpbHRlci5maWx0ZXJzW2ZpbHRlci50eXBlXShmaWx0ZXIudmFsdWUsIGRhdGFbZmlsdGVyLmZpZWxkXSwgZGF0YSwgZmlsdGVyLnBhcmFtcyB8fCB7fSk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gTm8gc3VjaCBmaWx0ZXIgdHlwZSBmb3VuZCwgaWdub3Jpbmc6IFwiLCBmaWx0ZXIudHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZmlsdGVyLmZ1bmMgPSBmaWx0ZXJGdW5jO1xuXG5cdFx0cmV0dXJuIGZpbHRlci5mdW5jID8gZmlsdGVyIDogZmFsc2U7XG5cdH1cblxuXHRmaW5kU3ViRmlsdGVycyhmaWx0ZXJzKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRmaWx0ZXJzLmZvckVhY2goKGZpbHRlcikgPT4ge1xuXHRcdFx0ZmlsdGVyID0gdGhpcy5maW5kRmlsdGVyKGZpbHRlcik7XG5cblx0XHRcdGlmKGZpbHRlcil7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGZpbHRlcik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0Lmxlbmd0aCA/IG91dHB1dCA6IGZhbHNlO1xuXHR9XG5cblx0Ly9nZXQgYWxsIGZpbHRlcnNcblx0Z2V0RmlsdGVycyhhbGwsIGFqYXgpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGlmKGFsbCl7XG5cdFx0XHRvdXRwdXQgPSB0aGlzLmdldEhlYWRlckZpbHRlcnMoKTtcblx0XHR9XG5cblx0XHRpZihhamF4KXtcblx0XHRcdG91dHB1dC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHRpZih0eXBlb2YgaXRlbS50eXBlID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0aXRlbS50eXBlID0gXCJmdW5jdGlvblwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KHRoaXMuZmlsdGVyc1RvQXJyYXkodGhpcy5maWx0ZXJMaXN0LCBhamF4KSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly9maWx0ZXIgdG8gT2JqZWN0XG5cdGZpbHRlcnNUb0FycmF5KGZpbHRlckxpc3QsIGFqYXgpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGZpbHRlckxpc3QuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHR2YXIgaXRlbTtcblxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShmaWx0ZXIpKXtcblx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy5maWx0ZXJzVG9BcnJheShmaWx0ZXIsIGFqYXgpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aXRlbSA9IHtmaWVsZDpmaWx0ZXIuZmllbGQsIHR5cGU6ZmlsdGVyLnR5cGUsIHZhbHVlOmZpbHRlci52YWx1ZX07XG5cblx0XHRcdFx0aWYoYWpheCl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIGl0ZW0udHlwZSA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRcdFx0aXRlbS50eXBlID0gXCJmdW5jdGlvblwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG91dHB1dC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vZ2V0IGFsbCBmaWx0ZXJzXG5cdGdldEhlYWRlckZpbHRlcnMoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRmb3IodmFyIGtleSBpbiB0aGlzLmhlYWRlckZpbHRlcnMpe1xuXHRcdFx0b3V0cHV0LnB1c2goe2ZpZWxkOmtleSwgdHlwZTp0aGlzLmhlYWRlckZpbHRlcnNba2V5XS50eXBlLCB2YWx1ZTp0aGlzLmhlYWRlckZpbHRlcnNba2V5XS52YWx1ZX0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvL3JlbW92ZSBmaWx0ZXIgZnJvbSBhcnJheVxuXHRyZW1vdmVGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlKXtcblx0XHRpZighQXJyYXkuaXNBcnJheShmaWVsZCkpe1xuXHRcdFx0ZmllbGQgPSBbe2ZpZWxkOmZpZWxkLCB0eXBlOnR5cGUsIHZhbHVlOnZhbHVlfV07XG5cdFx0fVxuXG5cdFx0ZmllbGQuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHR2YXIgaW5kZXggPSAtMTtcblxuXHRcdFx0aWYodHlwZW9mIGZpbHRlci5maWVsZCA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0aW5kZXggPSB0aGlzLmZpbHRlckxpc3QuZmluZEluZGV4KChlbGVtZW50KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGZpbHRlciA9PT0gZWxlbWVudDtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGluZGV4ID0gdGhpcy5maWx0ZXJMaXN0LmZpbmRJbmRleCgoZWxlbWVudCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBmaWx0ZXIuZmllbGQgPT09IGVsZW1lbnQuZmllbGQgJiYgZmlsdGVyLnR5cGUgPT09IGVsZW1lbnQudHlwZSAgJiYgZmlsdGVyLnZhbHVlID09PSBlbGVtZW50LnZhbHVlO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuZmlsdGVyTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJGaWx0ZXIgRXJyb3IgLSBObyBtYXRjaGluZyBmaWx0ZXIgdHlwZSBmb3VuZCwgaWdub3Jpbmc6IFwiLCBmaWx0ZXIudHlwZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHR9XG5cblx0Ly9jbGVhciBmaWx0ZXJzXG5cdGNsZWFyRmlsdGVyKGFsbCl7XG5cdFx0dGhpcy5maWx0ZXJMaXN0ID0gW107XG5cblx0XHRpZihhbGwpe1xuXHRcdFx0dGhpcy5jbGVhckhlYWRlckZpbHRlcigpO1xuXHRcdH1cblxuXHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdH1cblxuXHQvL2NsZWFyIGhlYWRlciBmaWx0ZXJzXG5cdGNsZWFySGVhZGVyRmlsdGVyKCl7XG5cdFx0dGhpcy5oZWFkZXJGaWx0ZXJzID0ge307XG5cdFx0dGhpcy5wcmV2SGVhZGVyRmlsdGVyQ2hhbmdlQ2hlY2sgPSBcInt9XCI7XG5cblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZih0eXBlb2YgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0ZGVsZXRlIGNvbHVtbi5tb2R1bGVzLmZpbHRlci52YWx1ZTtcblx0XHRcdH1cblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5wcmV2U3VjY2VzcyA9IHVuZGVmaW5lZDtcblx0XHRcdHRoaXMucmVsb2FkSGVhZGVyRmlsdGVyKGNvbHVtbik7XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHR9XG5cblx0Ly9zZWFyY2ggZGF0YSBhbmQgcmV0dXJuIG1hdGNoaW5nIHJvd3Ncblx0c2VhcmNoIChzZWFyY2hUeXBlLCBmaWVsZCwgdHlwZSwgdmFsdWUpe1xuXHRcdHZhciBhY3RpdmVSb3dzID0gW10sXG5cdFx0ZmlsdGVyTGlzdCA9IFtdO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoZmllbGQpKXtcblx0XHRcdGZpZWxkID0gW3tmaWVsZDpmaWVsZCwgdHlwZTp0eXBlLCB2YWx1ZTp2YWx1ZX1dO1xuXHRcdH1cblxuXHRcdGZpZWxkLmZvckVhY2goKGZpbHRlcikgPT4ge1xuXHRcdFx0ZmlsdGVyID0gdGhpcy5maW5kRmlsdGVyKGZpbHRlcik7XG5cblx0XHRcdGlmKGZpbHRlcil7XG5cdFx0XHRcdGZpbHRlckxpc3QucHVzaChmaWx0ZXIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR2YXIgbWF0Y2ggPSB0cnVlO1xuXG5cdFx0XHRmaWx0ZXJMaXN0LmZvckVhY2goKGZpbHRlcikgPT4ge1xuXHRcdFx0XHRpZighdGhpcy5maWx0ZXJSZWN1cnNlKGZpbHRlciwgcm93LmdldERhdGEoKSkpe1xuXHRcdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdGFjdGl2ZVJvd3MucHVzaChzZWFyY2hUeXBlID09PSBcImRhdGFcIiA/IHJvdy5nZXREYXRhKFwiZGF0YVwiKSA6IHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHRcdHJldHVybiBhY3RpdmVSb3dzO1xuXHR9XG5cblx0Ly9maWx0ZXIgcm93IGFycmF5XG5cdGZpbHRlcihyb3dMaXN0LCBmaWx0ZXJzKXtcblx0XHR2YXIgYWN0aXZlUm93cyA9IFtdLFxuXHRcdGFjdGl2ZVJvd0NvbXBvbmVudHMgPSBbXTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YUZpbHRlcmluZ1wiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhRmlsdGVyaW5nXCIsIHRoaXMuZ2V0RmlsdGVycyh0cnVlKSk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZpbHRlck1vZGUgIT09IFwicmVtb3RlXCIgJiYgKHRoaXMuZmlsdGVyTGlzdC5sZW5ndGggfHwgT2JqZWN0LmtleXModGhpcy5oZWFkZXJGaWx0ZXJzKS5sZW5ndGgpKXtcblxuXHRcdFx0cm93TGlzdC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0aWYodGhpcy5maWx0ZXJSb3cocm93KSl7XG5cdFx0XHRcdFx0YWN0aXZlUm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fWVsc2Uge1xuXHRcdFx0YWN0aXZlUm93cyA9IHJvd0xpc3Quc2xpY2UoMCk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhRmlsdGVyZWRcIikpe1xuXG5cdFx0XHRhY3RpdmVSb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRhY3RpdmVSb3dDb21wb25lbnRzLnB1c2gocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhRmlsdGVyZWRcIiwgdGhpcy5nZXRGaWx0ZXJzKHRydWUpLCBhY3RpdmVSb3dDb21wb25lbnRzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWN0aXZlUm93cztcblx0fVxuXG5cdC8vZmlsdGVyIGluZGl2aWR1YWwgcm93XG5cdGZpbHRlclJvdyhyb3csIGZpbHRlcnMpe1xuXHRcdHZhciBtYXRjaCA9IHRydWUsXG5cdFx0ZGF0YSA9IHJvdy5nZXREYXRhKCk7XG5cblx0XHR0aGlzLmZpbHRlckxpc3QuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHRpZighdGhpcy5maWx0ZXJSZWN1cnNlKGZpbHRlciwgZGF0YSkpe1xuXHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cblx0XHRmb3IodmFyIGZpZWxkIGluIHRoaXMuaGVhZGVyRmlsdGVycyl7XG5cdFx0XHRpZighdGhpcy5oZWFkZXJGaWx0ZXJzW2ZpZWxkXS5mdW5jKGRhdGEpKXtcblx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2g7XG5cdH1cblxuXHRmaWx0ZXJSZWN1cnNlKGZpbHRlciwgZGF0YSl7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2U7XG5cblx0XHRpZihBcnJheS5pc0FycmF5KGZpbHRlcikpe1xuXHRcdFx0ZmlsdGVyLmZvckVhY2goKHN1YkZpbHRlcikgPT4ge1xuXHRcdFx0XHRpZih0aGlzLmZpbHRlclJlY3Vyc2Uoc3ViRmlsdGVyLCBkYXRhKSl7XG5cdFx0XHRcdFx0bWF0Y2ggPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRtYXRjaCA9IGZpbHRlci5mdW5jKGRhdGEpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxufVxuXG5mdW5jdGlvbiBwbGFpbnRleHQoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0cmV0dXJuIHRoaXMuZW1wdHlUb1NwYWNlKHRoaXMuc2FuaXRpemVIVE1MKGNlbGwuZ2V0VmFsdWUoKSkpO1xufVxuXG5mdW5jdGlvbiBodG1sKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHJldHVybiBjZWxsLmdldFZhbHVlKCk7XG59XG5cbmZ1bmN0aW9uIHRleHRhcmVhKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdGNlbGwuZ2V0RWxlbWVudCgpLnN0eWxlLndoaXRlU3BhY2UgPSBcInByZS13cmFwXCI7XG5cdHJldHVybiB0aGlzLmVtcHR5VG9TcGFjZSh0aGlzLnNhbml0aXplSFRNTChjZWxsLmdldFZhbHVlKCkpKTtcbn1cblxuZnVuY3Rpb24gbW9uZXkoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGZsb2F0VmFsID0gcGFyc2VGbG9hdChjZWxsLmdldFZhbHVlKCkpLFxuXHRzaWduID0gXCJcIixcblx0bnVtYmVyLCBpbnRlZ2VyLCBkZWNpbWFsLCByZ3gsIHZhbHVlO1xuXG5cdHZhciBkZWNpbWFsU3ltID0gZm9ybWF0dGVyUGFyYW1zLmRlY2ltYWwgfHwgXCIuXCI7XG5cdHZhciB0aG91c2FuZFN5bSA9IGZvcm1hdHRlclBhcmFtcy50aG91c2FuZCB8fCBcIixcIjtcblx0dmFyIG5lZ2F0aXZlU2lnbiA9IGZvcm1hdHRlclBhcmFtcy5uZWdhdGl2ZVNpZ24gfHwgXCItXCI7XG5cdHZhciBzeW1ib2wgPSBmb3JtYXR0ZXJQYXJhbXMuc3ltYm9sIHx8IFwiXCI7XG5cdHZhciBhZnRlciA9ICEhZm9ybWF0dGVyUGFyYW1zLnN5bWJvbEFmdGVyO1xuXHR2YXIgcHJlY2lzaW9uID0gdHlwZW9mIGZvcm1hdHRlclBhcmFtcy5wcmVjaXNpb24gIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMucHJlY2lzaW9uIDogMjtcblxuXHRpZihpc05hTihmbG9hdFZhbCkpe1xuXHRcdHJldHVybiB0aGlzLmVtcHR5VG9TcGFjZSh0aGlzLnNhbml0aXplSFRNTChjZWxsLmdldFZhbHVlKCkpKTtcblx0fVxuXG5cdGlmKGZsb2F0VmFsIDwgMCl7XG5cdFx0ZmxvYXRWYWwgPSBNYXRoLmFicyhmbG9hdFZhbCk7XG5cdFx0c2lnbiA9IG5lZ2F0aXZlU2lnbjtcblx0fVxuXG5cdG51bWJlciA9IHByZWNpc2lvbiAhPT0gZmFsc2UgPyBmbG9hdFZhbC50b0ZpeGVkKHByZWNpc2lvbikgOiBmbG9hdFZhbDtcblx0bnVtYmVyID0gU3RyaW5nKG51bWJlcikuc3BsaXQoXCIuXCIpO1xuXG5cdGludGVnZXIgPSBudW1iZXJbMF07XG5cdGRlY2ltYWwgPSBudW1iZXIubGVuZ3RoID4gMSA/IGRlY2ltYWxTeW0gKyBudW1iZXJbMV0gOiBcIlwiO1xuXG5cdGlmIChmb3JtYXR0ZXJQYXJhbXMudGhvdXNhbmQgIT09IGZhbHNlKSB7XG5cdFx0cmd4ID0gLyhcXGQrKShcXGR7M30pLztcblxuXHRcdHdoaWxlIChyZ3gudGVzdChpbnRlZ2VyKSl7XG5cdFx0XHRpbnRlZ2VyID0gaW50ZWdlci5yZXBsYWNlKHJneCwgXCIkMVwiICsgdGhvdXNhbmRTeW0gKyBcIiQyXCIpO1xuXHRcdH1cblx0fVxuXG5cdHZhbHVlID0gaW50ZWdlciArIGRlY2ltYWw7XG5cdFxuXHRpZihzaWduID09PSB0cnVlKXtcblx0XHR2YWx1ZSA9IFwiKFwiICsgdmFsdWUgICsgXCIpXCI7XG5cdFx0cmV0dXJuIGFmdGVyID8gdmFsdWUgKyBzeW1ib2wgOiBzeW1ib2wgKyB2YWx1ZTtcblx0fWVsc2Uge1xuXHRcdHJldHVybiBhZnRlciA/IHNpZ24gKyB2YWx1ZSArIHN5bWJvbCA6IHNpZ24gKyBzeW1ib2wgKyB2YWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBsaW5rKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0dXJsUHJlZml4ID0gZm9ybWF0dGVyUGFyYW1zLnVybFByZWZpeCB8fCBcIlwiLFxuXHRkb3dubG9hZCA9IGZvcm1hdHRlclBhcmFtcy5kb3dubG9hZCxcblx0bGFiZWwgPSB2YWx1ZSxcblx0ZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSxcblx0ZGF0YTtcblxuXHRmdW5jdGlvbiBsYWJlbFRyYXZlcnNlKHBhdGgsIGRhdGEpe1xuXHRcdHZhciBpdGVtID0gcGF0aC5zaGlmdCgpLFxuXHRcdHZhbHVlID0gZGF0YVtpdGVtXTtcblx0XHRcblx0XHRpZihwYXRoLmxlbmd0aCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpe1xuXHRcdFx0cmV0dXJuIGxhYmVsVHJhdmVyc2UocGF0aCwgdmFsdWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdGlmKGZvcm1hdHRlclBhcmFtcy5sYWJlbEZpZWxkKXtcblx0XHRkYXRhID0gY2VsbC5nZXREYXRhKCk7XG5cdFx0bGFiZWwgPSBsYWJlbFRyYXZlcnNlKGZvcm1hdHRlclBhcmFtcy5sYWJlbEZpZWxkLnNwbGl0KHRoaXMudGFibGUub3B0aW9ucy5uZXN0ZWRGaWVsZFNlcGFyYXRvciksIGRhdGEpO1xuXHR9XG5cblx0aWYoZm9ybWF0dGVyUGFyYW1zLmxhYmVsKXtcblx0XHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlclBhcmFtcy5sYWJlbCl7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdGxhYmVsID0gZm9ybWF0dGVyUGFyYW1zLmxhYmVsO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdGxhYmVsID0gZm9ybWF0dGVyUGFyYW1zLmxhYmVsKGNlbGwpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRpZihsYWJlbCl7XG5cdFx0aWYoZm9ybWF0dGVyUGFyYW1zLnVybEZpZWxkKXtcblx0XHRcdGRhdGEgPSBjZWxsLmdldERhdGEoKTtcblxuXHRcdFx0dmFsdWUgPSBIZWxwZXJzLnJldHJpZXZlTmVzdGVkRGF0YSh0aGlzLnRhYmxlLm9wdGlvbnMubmVzdGVkRmllbGRTZXBhcmF0b3IsIGZvcm1hdHRlclBhcmFtcy51cmxGaWVsZCwgZGF0YSk7XG5cdFx0fVxuXG5cdFx0aWYoZm9ybWF0dGVyUGFyYW1zLnVybCl7XG5cdFx0XHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlclBhcmFtcy51cmwpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0dmFsdWUgPSBmb3JtYXR0ZXJQYXJhbXMudXJsO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdHZhbHVlID0gZm9ybWF0dGVyUGFyYW1zLnVybChjZWxsKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIHVybFByZWZpeCArIHZhbHVlKTtcblxuXHRcdGlmKGZvcm1hdHRlclBhcmFtcy50YXJnZXQpe1xuXHRcdFx0ZWwuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsIGZvcm1hdHRlclBhcmFtcy50YXJnZXQpO1xuXHRcdH1cblxuXHRcdGlmKGZvcm1hdHRlclBhcmFtcy5kb3dubG9hZCl7XG5cblx0XHRcdGlmKHR5cGVvZiBkb3dubG9hZCA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRkb3dubG9hZCA9IGRvd25sb2FkKGNlbGwpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRkb3dubG9hZCA9IGRvd25sb2FkID09PSB0cnVlID8gXCJcIiA6IGRvd25sb2FkO1xuXHRcdFx0fVxuXG5cdFx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJkb3dubG9hZFwiLCBkb3dubG9hZCk7XG5cdFx0fVxuXG5cdFx0ZWwuaW5uZXJIVE1MID0gdGhpcy5lbXB0eVRvU3BhY2UodGhpcy5zYW5pdGl6ZUhUTUwobGFiZWwpKTtcblxuXHRcdHJldHVybiBlbDtcblx0fWVsc2Uge1xuXHRcdHJldHVybiBcIiZuYnNwO1wiO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGltYWdlKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksXG5cdHNyYyA9IGNlbGwuZ2V0VmFsdWUoKTtcblxuXHRpZihmb3JtYXR0ZXJQYXJhbXMudXJsUHJlZml4KXtcblx0XHRzcmMgPSBmb3JtYXR0ZXJQYXJhbXMudXJsUHJlZml4ICsgY2VsbC5nZXRWYWx1ZSgpO1xuXHR9XG5cblx0aWYoZm9ybWF0dGVyUGFyYW1zLnVybFN1ZmZpeCl7XG5cdFx0c3JjID0gc3JjICsgZm9ybWF0dGVyUGFyYW1zLnVybFN1ZmZpeDtcblx0fVxuXG5cdGVsLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpO1xuXG5cdHN3aXRjaCh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmhlaWdodCl7XG5cdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdFx0ZWwuc3R5bGUuaGVpZ2h0ID0gZm9ybWF0dGVyUGFyYW1zLmhlaWdodCArIFwicHhcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0ZWwuc3R5bGUuaGVpZ2h0ID0gZm9ybWF0dGVyUGFyYW1zLmhlaWdodDtcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMud2lkdGgpe1xuXHRcdGNhc2UgXCJudW1iZXJcIjpcblx0XHRcdGVsLnN0eWxlLndpZHRoID0gZm9ybWF0dGVyUGFyYW1zLndpZHRoICsgXCJweFwiO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRlbC5zdHlsZS53aWR0aCA9IGZvcm1hdHRlclBhcmFtcy53aWR0aDtcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKXtcblx0XHRjZWxsLmdldFJvdygpLm5vcm1hbGl6ZUhlaWdodCgpO1xuXHR9KTtcblxuXHRyZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIHRpY2tDcm9zcyhjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXG5cdGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0ZW1wdHkgPSBmb3JtYXR0ZXJQYXJhbXMuYWxsb3dFbXB0eSxcblx0dHJ1dGh5ID0gZm9ybWF0dGVyUGFyYW1zLmFsbG93VHJ1dGh5LFxuXHR0cnVlVmFsdWVTZXQgPSBPYmplY3Qua2V5cyhmb3JtYXR0ZXJQYXJhbXMpLmluY2x1ZGVzKFwidHJ1ZVZhbHVlXCIpLFxuXHR0aWNrID0gdHlwZW9mIGZvcm1hdHRlclBhcmFtcy50aWNrRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy50aWNrRWxlbWVudCA6ICc8c3ZnIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCAyNCAyNFwiIGhlaWdodD1cIjE0XCIgd2lkdGg9XCIxNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiID48cGF0aCBmaWxsPVwiIzJEQzIxNFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTIxLjY1MiwzLjIxMWMtMC4yOTMtMC4yOTUtMC43Ny0wLjI5NS0xLjA2MSwwTDkuNDEsMTQuMzQgIGMtMC4yOTMsMC4yOTctMC43NzEsMC4yOTctMS4wNjIsMEwzLjQ0OSw5LjM1MUMzLjMwNCw5LjIwMywzLjExNCw5LjEzLDIuOTIzLDkuMTI5QzIuNzMsOS4xMjgsMi41MzQsOS4yMDEsMi4zODcsOS4zNTEgIGwtMi4xNjUsMS45NDZDMC4wNzgsMTEuNDQ1LDAsMTEuNjMsMCwxMS44MjNjMCwwLjE5NCwwLjA3OCwwLjM5NywwLjIyMywwLjU0NGw0Ljk0LDUuMTg0YzAuMjkyLDAuMjk2LDAuNzcxLDAuNzc2LDEuMDYyLDEuMDcgIGwyLjEyNCwyLjE0MWMwLjI5MiwwLjI5MywwLjc2OSwwLjI5MywxLjA2MiwwbDE0LjM2Ni0xNC4zNGMwLjI5My0wLjI5NCwwLjI5My0wLjc3NywwLTEuMDcxTDIxLjY1MiwzLjIxMXpcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIvPjwvc3ZnPicsXG5cdGNyb3NzID0gdHlwZW9mIGZvcm1hdHRlclBhcmFtcy5jcm9zc0VsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuY3Jvc3NFbGVtZW50IDogJzxzdmcgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI0IDI0XCIgaGVpZ2h0PVwiMTRcIiB3aWR0aD1cIjE0XCIgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiID48cGF0aCBmaWxsPVwiI0NFMTUxNVwiIGQ9XCJNMjIuMjQ1LDQuMDE1YzAuMzEzLDAuMzEzLDAuMzEzLDAuODI2LDAsMS4xMzlsLTYuMjc2LDYuMjdjLTAuMzEzLDAuMzEyLTAuMzEzLDAuODI2LDAsMS4xNGw2LjI3Myw2LjI3MiAgYzAuMzEzLDAuMzEzLDAuMzEzLDAuODI2LDAsMS4xNGwtMi4yODUsMi4yNzdjLTAuMzE0LDAuMzEyLTAuODI4LDAuMzEyLTEuMTQyLDBsLTYuMjcxLTYuMjcxYy0wLjMxMy0wLjMxMy0wLjgyOC0wLjMxMy0xLjE0MSwwICBsLTYuMjc2LDYuMjY3Yy0wLjMxMywwLjMxMy0wLjgyOCwwLjMxMy0xLjE0MSwwbC0yLjI4Mi0yLjI4Yy0wLjMxMy0wLjMxMy0wLjMxMy0wLjgyNiwwLTEuMTRsNi4yNzgtNi4yNjkgIGMwLjMxMy0wLjMxMiwwLjMxMy0wLjgyNiwwLTEuMTRMMS43MDksNS4xNDdjLTAuMzE0LTAuMzEzLTAuMzE0LTAuODI3LDAtMS4xNGwyLjI4NC0yLjI3OEM0LjMwOCwxLjQxNyw0LjgyMSwxLjQxNyw1LjEzNSwxLjczICBMMTEuNDA1LDhjMC4zMTQsMC4zMTQsMC44MjgsMC4zMTQsMS4xNDEsMC4wMDFsNi4yNzYtNi4yNjdjMC4zMTItMC4zMTIsMC44MjYtMC4zMTIsMS4xNDEsMEwyMi4yNDUsNC4wMTV6XCIvPjwvc3ZnPic7XG5cblx0aWYoKHRydWVWYWx1ZVNldCAmJiB2YWx1ZSA9PT0gZm9ybWF0dGVyUGFyYW1zLnRydWVWYWx1ZSkgfHwgKCF0cnVlVmFsdWVTZXQgJiYgKCh0cnV0aHkgJiYgdmFsdWUpIHx8ICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gXCJ0cnVlXCIgfHwgdmFsdWUgPT09IFwiVHJ1ZVwiIHx8IHZhbHVlID09PSAxIHx8IHZhbHVlID09PSBcIjFcIikpKSl7XG5cdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgdHJ1ZSk7XG5cdFx0cmV0dXJuIHRpY2sgfHwgXCJcIjtcblx0fWVsc2Uge1xuXHRcdGlmKGVtcHR5ICYmICh2YWx1ZSA9PT0gXCJudWxsXCIgfHwgdmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSl7XG5cdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLCBcIm1peGVkXCIpO1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgZmFsc2UpO1xuXHRcdFx0cmV0dXJuIGNyb3NzIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRhdGV0aW1lJDEoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIERUID0gdGhpcy50YWJsZS5kZXBlbmRlbmN5UmVnaXN0cnkubG9va3VwKFtcImx1eG9uXCIsIFwiRGF0ZVRpbWVcIl0sIFwiRGF0ZVRpbWVcIik7XG5cdHZhciBpbnB1dEZvcm1hdCA9IGZvcm1hdHRlclBhcmFtcy5pbnB1dEZvcm1hdCB8fCBcInl5eXktTU0tZGQgSEg6bW06c3NcIjtcblx0dmFyXHRvdXRwdXRGb3JtYXQgPSBmb3JtYXR0ZXJQYXJhbXMub3V0cHV0Rm9ybWF0IHx8IFwiZGQvTU0veXl5eSBISDptbTpzc1wiO1xuXHR2YXJcdGludmFsaWQgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmludmFsaWRQbGFjZWhvbGRlciAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy5pbnZhbGlkUGxhY2Vob2xkZXIgOiBcIlwiO1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG5cblx0aWYodHlwZW9mIERUICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdHZhciBuZXdEYXRldGltZTtcblxuXHRcdGlmKERULmlzRGF0ZVRpbWUodmFsdWUpKXtcblx0XHRcdG5ld0RhdGV0aW1lID0gdmFsdWU7XG5cdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcodmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0fVxuXG5cdFx0aWYobmV3RGF0ZXRpbWUuaXNWYWxpZCl7XG5cdFx0XHRpZihmb3JtYXR0ZXJQYXJhbXMudGltZXpvbmUpe1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IG5ld0RhdGV0aW1lLnNldFpvbmUoZm9ybWF0dGVyUGFyYW1zLnRpbWV6b25lKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ld0RhdGV0aW1lLnRvRm9ybWF0KG91dHB1dEZvcm1hdCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoaW52YWxpZCA9PT0gdHJ1ZSB8fCAhdmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgaW52YWxpZCA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0cmV0dXJuIGludmFsaWQodmFsdWUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gaW52YWxpZDtcblx0XHRcdH1cblx0XHR9XG5cdH1lbHNlIHtcblx0XHRjb25zb2xlLmVycm9yKFwiRm9ybWF0IEVycm9yIC0gJ2RhdGV0aW1lJyBmb3JtYXR0ZXIgaXMgZGVwZW5kYW50IG9uIGx1eG9uLmpzXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRhdGV0aW1lZGlmZiAoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKSB7XG5cdHZhciBEVCA9IHRoaXMudGFibGUuZGVwZW5kZW5jeVJlZ2lzdHJ5Lmxvb2t1cChbXCJsdXhvblwiLCBcIkRhdGVUaW1lXCJdLCBcIkRhdGVUaW1lXCIpO1xuXHR2YXIgaW5wdXRGb3JtYXQgPSBmb3JtYXR0ZXJQYXJhbXMuaW5wdXRGb3JtYXQgfHwgXCJ5eXl5LU1NLWRkIEhIOm1tOnNzXCI7XG5cdHZhciBpbnZhbGlkID0gdHlwZW9mIGZvcm1hdHRlclBhcmFtcy5pbnZhbGlkUGxhY2Vob2xkZXIgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuaW52YWxpZFBsYWNlaG9sZGVyIDogXCJcIjtcblx0dmFyIHN1ZmZpeCA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuc3VmZml4ICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLnN1ZmZpeCA6IGZhbHNlO1xuXHR2YXIgdW5pdCA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMudW5pdCAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy51bml0IDogXCJkYXlzXCI7XG5cdHZhciBodW1hbml6ZSA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuaHVtYW5pemUgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuaHVtYW5pemUgOiBmYWxzZTtcblx0dmFyIGRhdGUgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmRhdGUgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuZGF0ZSA6IERULm5vdygpO1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG5cblx0aWYodHlwZW9mIERUICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdHZhciBuZXdEYXRldGltZTtcblxuXHRcdGlmKERULmlzRGF0ZVRpbWUodmFsdWUpKXtcblx0XHRcdG5ld0RhdGV0aW1lID0gdmFsdWU7XG5cdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcodmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0fVxuXG5cdFx0aWYgKG5ld0RhdGV0aW1lLmlzVmFsaWQpe1xuXHRcdFx0aWYoaHVtYW5pemUpe1xuXHRcdFx0XHRyZXR1cm4gbmV3RGF0ZXRpbWUuZGlmZihkYXRlLCB1bml0KS50b0h1bWFuKCkgICsgKHN1ZmZpeCA/IFwiIFwiICsgc3VmZml4IDogXCJcIik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBwYXJzZUludChuZXdEYXRldGltZS5kaWZmKGRhdGUsIHVuaXQpW3VuaXRdKSArIChzdWZmaXggPyBcIiBcIiArIHN1ZmZpeCA6IFwiXCIpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmIChpbnZhbGlkID09PSB0cnVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGludmFsaWQgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRyZXR1cm4gaW52YWxpZCh2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gaW52YWxpZDtcblx0XHRcdH1cblx0XHR9XG5cdH1lbHNlIHtcblx0XHRjb25zb2xlLmVycm9yKFwiRm9ybWF0IEVycm9yIC0gJ2RhdGV0aW1lZGlmZicgZm9ybWF0dGVyIGlzIGRlcGVuZGFudCBvbiBsdXhvbi5qc1wiKTtcblx0fVxufVxuXG5mdW5jdGlvbiBsb29rdXAgKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCkge1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG5cblx0aWYgKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXNbdmFsdWVdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0Y29uc29sZS53YXJuKCdNaXNzaW5nIGRpc3BsYXkgdmFsdWUgZm9yICcgKyB2YWx1ZSk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIGZvcm1hdHRlclBhcmFtc1t2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIHN0YXIoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KCksXG5cdG1heFN0YXJzID0gZm9ybWF0dGVyUGFyYW1zICYmIGZvcm1hdHRlclBhcmFtcy5zdGFycyA/IGZvcm1hdHRlclBhcmFtcy5zdGFycyA6IDUsXG5cdHN0YXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHN0YXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJzdmdcIiksXG5cdHN0YXJBY3RpdmUgPSAnPHBvbHlnb24gZmlsbD1cIiNGRkVBMDBcIiBzdHJva2U9XCIjQzFBQjYwXCIgc3Ryb2tlLXdpZHRoPVwiMzcuNjE1MlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS1taXRlcmxpbWl0PVwiMTBcIiBwb2ludHM9XCIyNTkuMjE2LDI5Ljk0MiAzMzAuMjcsMTczLjkxOSA0ODkuMTYsMTk3LjAwNyAzNzQuMTg1LDMwOS4wOCA0MDEuMzMsNDY3LjMxIDI1OS4yMTYsMzkyLjYxMiAxMTcuMTA0LDQ2Ny4zMSAxNDQuMjUsMzA5LjA4IDI5LjI3NCwxOTcuMDA3IDE4OC4xNjUsMTczLjkxOSBcIi8+Jyxcblx0c3RhckluYWN0aXZlID0gJzxwb2x5Z29uIGZpbGw9XCIjRDJEMkQyXCIgc3Ryb2tlPVwiIzY4Njg2OFwiIHN0cm9rZS13aWR0aD1cIjM3LjYxNTJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2UtbWl0ZXJsaW1pdD1cIjEwXCIgcG9pbnRzPVwiMjU5LjIxNiwyOS45NDIgMzMwLjI3LDE3My45MTkgNDg5LjE2LDE5Ny4wMDcgMzc0LjE4NSwzMDkuMDggNDAxLjMzLDQ2Ny4zMSAyNTkuMjE2LDM5Mi42MTIgMTE3LjEwNCw0NjcuMzEgMTQ0LjI1LDMwOS4wOCAyOS4yNzQsMTk3LjAwNyAxODguMTY1LDE3My45MTkgXCIvPic7XG5cblx0Ly9zdHlsZSBzdGFycyBob2xkZXJcblx0c3RhcnMuc3R5bGUudmVydGljYWxBbGlnbiA9IFwibWlkZGxlXCI7XG5cblx0Ly9zdHlsZSBzdGFyXG5cdHN0YXIuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIxNFwiKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIxNFwiKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDUxMiA1MTJcIik7XG5cdHN0YXIuc2V0QXR0cmlidXRlKFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIik7XG5cdHN0YXIuc3R5bGUucGFkZGluZyA9IFwiMCAxcHhcIjtcblxuXHR2YWx1ZSA9IHZhbHVlICYmICFpc05hTih2YWx1ZSkgPyBwYXJzZUludCh2YWx1ZSkgOiAwO1xuXG5cdHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odmFsdWUsIG1heFN0YXJzKSk7XG5cblx0Zm9yKHZhciBpPTE7aTw9IG1heFN0YXJzO2krKyl7XG5cdFx0dmFyIG5leHRTdGFyID0gc3Rhci5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0bmV4dFN0YXIuaW5uZXJIVE1MID0gaSA8PSB2YWx1ZSA/IHN0YXJBY3RpdmUgOiBzdGFySW5hY3RpdmU7XG5cblx0XHRzdGFycy5hcHBlbmRDaGlsZChuZXh0U3Rhcik7XG5cdH1cblxuXHRlbGVtZW50LnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xuXHRlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0ZWxlbWVudC5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBcImVsbGlwc2lzXCI7XG5cblx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblxuXHRyZXR1cm4gc3RhcnM7XG59XG5cbmZ1bmN0aW9uIHRyYWZmaWMoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIHZhbHVlID0gdGhpcy5zYW5pdGl6ZUhUTUwoY2VsbC5nZXRWYWx1ZSgpKSB8fCAwLFxuXHRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHRtYXggPSBmb3JtYXR0ZXJQYXJhbXMgJiYgZm9ybWF0dGVyUGFyYW1zLm1heCA/IGZvcm1hdHRlclBhcmFtcy5tYXggOiAxMDAsXG5cdG1pbiA9IGZvcm1hdHRlclBhcmFtcyAmJiBmb3JtYXR0ZXJQYXJhbXMubWluID8gZm9ybWF0dGVyUGFyYW1zLm1pbiA6IDAsXG5cdGNvbG9ycyA9IGZvcm1hdHRlclBhcmFtcyAmJiB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmNvbG9yICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLmNvbG9yIDogW1wicmVkXCIsIFwib3JhbmdlXCIsIFwiZ3JlZW5cIl0sXG5cdGNvbG9yID0gXCIjNjY2NjY2XCIsXG5cdHBlcmNlbnQsIHBlcmNlbnRWYWx1ZTtcblxuXHRpZihpc05hTih2YWx1ZSkgfHwgdHlwZW9mIGNlbGwuZ2V0VmFsdWUoKSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10cmFmZmljLWxpZ2h0XCIpO1xuXG5cdC8vbWFrZSBzdXJlIHZhbHVlIGlzIGluIHJhbmdlXG5cdHBlcmNlbnRWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIDw9IG1heCA/IHBhcnNlRmxvYXQodmFsdWUpIDogbWF4O1xuXHRwZXJjZW50VmFsdWUgPSBwYXJzZUZsb2F0KHBlcmNlbnRWYWx1ZSkgPj0gbWluID8gcGFyc2VGbG9hdChwZXJjZW50VmFsdWUpIDogbWluO1xuXG5cdC8vd29ya291dCBwZXJjZW50YWdlXG5cdHBlcmNlbnQgPSAobWF4IC0gbWluKSAvIDEwMDtcblx0cGVyY2VudFZhbHVlID0gTWF0aC5yb3VuZCgocGVyY2VudFZhbHVlIC0gbWluKSAvIHBlcmNlbnQpO1xuXG5cdC8vc2V0IGNvbG9yXG5cdHN3aXRjaCh0eXBlb2YgY29sb3JzKXtcblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRjb2xvciA9IGNvbG9ycztcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0Y29sb3IgPSBjb2xvcnModmFsdWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShjb2xvcnMpKXtcblx0XHRcdFx0dmFyIHVuaXQgPSAxMDAgLyBjb2xvcnMubGVuZ3RoO1xuXHRcdFx0XHR2YXIgaW5kZXggPSBNYXRoLmZsb29yKHBlcmNlbnRWYWx1ZSAvIHVuaXQpO1xuXG5cdFx0XHRcdGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGNvbG9ycy5sZW5ndGggLSAxKTtcblx0XHRcdFx0aW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG5cdFx0XHRcdGNvbG9yID0gY29sb3JzW2luZGV4XTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdH1cblxuXHRlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcblxuXHRyZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIHByb2dyZXNzKGNlbGwsIGZvcm1hdHRlclBhcmFtcyA9IHt9LCBvblJlbmRlcmVkKXsgLy9wcm9ncmVzcyBiYXJcblx0dmFyIHZhbHVlID0gdGhpcy5zYW5pdGl6ZUhUTUwoY2VsbC5nZXRWYWx1ZSgpKSB8fCAwLFxuXHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KCksXG5cdG1heCA9IGZvcm1hdHRlclBhcmFtcy5tYXggPyBmb3JtYXR0ZXJQYXJhbXMubWF4IDogMTAwLFxuXHRtaW4gPSBmb3JtYXR0ZXJQYXJhbXMubWluID8gZm9ybWF0dGVyUGFyYW1zLm1pbiA6IDAsXG5cdGxlZ2VuZEFsaWduID0gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZEFsaWduID8gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZEFsaWduIDogXCJjZW50ZXJcIixcblx0cGVyY2VudCwgcGVyY2VudFZhbHVlLCBjb2xvciwgbGVnZW5kLCBsZWdlbmRDb2xvcjtcblxuXHQvL21ha2Ugc3VyZSB2YWx1ZSBpcyBpbiByYW5nZVxuXHRwZXJjZW50VmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSA8PSBtYXggPyBwYXJzZUZsb2F0KHZhbHVlKSA6IG1heDtcblx0cGVyY2VudFZhbHVlID0gcGFyc2VGbG9hdChwZXJjZW50VmFsdWUpID49IG1pbiA/IHBhcnNlRmxvYXQocGVyY2VudFZhbHVlKSA6IG1pbjtcblxuXHQvL3dvcmtvdXQgcGVyY2VudGFnZVxuXHRwZXJjZW50ID0gKG1heCAtIG1pbikgLyAxMDA7XG5cdHBlcmNlbnRWYWx1ZSA9IE1hdGgucm91bmQoKHBlcmNlbnRWYWx1ZSAtIG1pbikgLyBwZXJjZW50KTtcblxuXHQvL3NldCBiYXIgY29sb3Jcblx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuY29sb3Ipe1xuXHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdGNvbG9yID0gZm9ybWF0dGVyUGFyYW1zLmNvbG9yO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRjb2xvciA9IGZvcm1hdHRlclBhcmFtcy5jb2xvcih2YWx1ZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRpZihBcnJheS5pc0FycmF5KGZvcm1hdHRlclBhcmFtcy5jb2xvcikpe1xuXHRcdFx0XHRsZXQgdW5pdCA9IDEwMCAvIGZvcm1hdHRlclBhcmFtcy5jb2xvci5sZW5ndGg7XG5cdFx0XHRcdGxldCBpbmRleCA9IE1hdGguZmxvb3IocGVyY2VudFZhbHVlIC8gdW5pdCk7XG5cblx0XHRcdFx0aW5kZXggPSBNYXRoLm1pbihpbmRleCwgZm9ybWF0dGVyUGFyYW1zLmNvbG9yLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcblx0XHRcdFx0Y29sb3IgPSBmb3JtYXR0ZXJQYXJhbXMuY29sb3JbaW5kZXhdO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29sb3IgPSBcIiMyREMyMTRcIjtcblx0fVxuXG5cdC8vZ2VuZXJhdGUgbGVnZW5kXG5cdHN3aXRjaCh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZCl7XG5cdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0bGVnZW5kID0gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0bGVnZW5kID0gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZCh2YWx1ZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0bGVnZW5kID0gdmFsdWU7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0bGVnZW5kID0gZmFsc2U7XG5cdH1cblxuXHQvL3NldCBsZWdlbmQgY29sb3Jcblx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQ29sb3Ipe1xuXHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdGxlZ2VuZENvbG9yID0gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZENvbG9yO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRsZWdlbmRDb2xvciA9IGZvcm1hdHRlclBhcmFtcy5sZWdlbmRDb2xvcih2YWx1ZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRpZihBcnJheS5pc0FycmF5KGZvcm1hdHRlclBhcmFtcy5sZWdlbmRDb2xvcikpe1xuXHRcdFx0XHRsZXQgdW5pdCA9IDEwMCAvIGZvcm1hdHRlclBhcmFtcy5sZWdlbmRDb2xvci5sZW5ndGg7XG5cdFx0XHRcdGxldCBpbmRleCA9IE1hdGguZmxvb3IocGVyY2VudFZhbHVlIC8gdW5pdCk7XG5cblx0XHRcdFx0aW5kZXggPSBNYXRoLm1pbihpbmRleCwgZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZENvbG9yLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcblx0XHRcdFx0bGVnZW5kQ29sb3IgPSBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQ29sb3JbaW5kZXhdO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGxlZ2VuZENvbG9yID0gXCIjMDAwXCI7XG5cdH1cblxuXHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCIzMHB4XCI7XG5cdGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cblx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHBlcmNlbnRWYWx1ZSk7XG5cblx0dmFyIGJhckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0YmFyRWwuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdGJhckVsLnN0eWxlLndpZHRoID0gcGVyY2VudFZhbHVlICsgXCIlXCI7XG5cdGJhckVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuXHRiYXJFbC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuXHRiYXJFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWF4JywgbWF4KTtcblx0YmFyRWwuc2V0QXR0cmlidXRlKCdkYXRhLW1pbicsIG1pbik7XG5cblx0dmFyIGJhckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdGJhckNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0YmFyQ29udGFpbmVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGJhckNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuXHRpZihsZWdlbmQpe1xuXHRcdHZhciBsZWdlbmRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0bGVnZW5kRWwuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0bGVnZW5kRWwuc3R5bGUudG9wID0gMDtcblx0XHRsZWdlbmRFbC5zdHlsZS5sZWZ0ID0gMDtcblx0XHRsZWdlbmRFbC5zdHlsZS50ZXh0QWxpZ24gPSBsZWdlbmRBbGlnbjtcblx0XHRsZWdlbmRFbC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRcdGxlZ2VuZEVsLnN0eWxlLmNvbG9yID0gbGVnZW5kQ29sb3I7XG5cdFx0bGVnZW5kRWwuaW5uZXJIVE1MID0gbGVnZW5kO1xuXHR9XG5cblx0b25SZW5kZXJlZChmdW5jdGlvbigpe1xuXG5cdFx0Ly9oYW5kbGUgY3VzdG9tIGVsZW1lbnQgbmVlZGVkIGlmIGZvcm1hdHRlciBpcyB0byBiZSBpbmNsdWRlZCBpbiBwcmludGVkL2Rvd25sb2FkZWQgb3V0cHV0XG5cdFx0aWYoIShjZWxsIGluc3RhbmNlb2YgQ2VsbENvbXBvbmVudCkpe1xuXHRcdFx0dmFyIGhvbGRlckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdGhvbGRlckVsLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdFx0aG9sZGVyRWwuc3R5bGUudG9wID0gXCI0cHhcIjtcblx0XHRcdGhvbGRlckVsLnN0eWxlLmJvdHRvbSA9IFwiNHB4XCI7XG5cdFx0XHRob2xkZXJFbC5zdHlsZS5sZWZ0ID0gXCI0cHhcIjtcblx0XHRcdGhvbGRlckVsLnN0eWxlLnJpZ2h0ID0gXCI0cHhcIjtcblxuXHRcdFx0ZWxlbWVudC5hcHBlbmRDaGlsZChob2xkZXJFbCk7XG5cblx0XHRcdGVsZW1lbnQgPSBob2xkZXJFbDtcblx0XHR9XG5cblx0XHRlbGVtZW50LmFwcGVuZENoaWxkKGJhckNvbnRhaW5lcik7XG5cdFx0YmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGJhckVsKTtcblxuXHRcdGlmKGxlZ2VuZCl7XG5cdFx0XHRiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQobGVnZW5kRWwpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNvbG9yKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdGNlbGwuZ2V0RWxlbWVudCgpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuc2FuaXRpemVIVE1MKGNlbGwuZ2V0VmFsdWUoKSk7XG5cdHJldHVybiBcIlwiO1xufVxuXG5mdW5jdGlvbiBidXR0b25UaWNrKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHJldHVybiAnPHN2ZyBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMjQgMjRcIiBoZWlnaHQ9XCIxNFwiIHdpZHRoPVwiMTRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiA+PHBhdGggZmlsbD1cIiMyREMyMTRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgZD1cIk0yMS42NTIsMy4yMTFjLTAuMjkzLTAuMjk1LTAuNzctMC4yOTUtMS4wNjEsMEw5LjQxLDE0LjM0ICBjLTAuMjkzLDAuMjk3LTAuNzcxLDAuMjk3LTEuMDYyLDBMMy40NDksOS4zNTFDMy4zMDQsOS4yMDMsMy4xMTQsOS4xMywyLjkyMyw5LjEyOUMyLjczLDkuMTI4LDIuNTM0LDkuMjAxLDIuMzg3LDkuMzUxICBsLTIuMTY1LDEuOTQ2QzAuMDc4LDExLjQ0NSwwLDExLjYzLDAsMTEuODIzYzAsMC4xOTQsMC4wNzgsMC4zOTcsMC4yMjMsMC41NDRsNC45NCw1LjE4NGMwLjI5MiwwLjI5NiwwLjc3MSwwLjc3NiwxLjA2MiwxLjA3ICBsMi4xMjQsMi4xNDFjMC4yOTIsMC4yOTMsMC43NjksMC4yOTMsMS4wNjIsMGwxNC4zNjYtMTQuMzRjMC4yOTMtMC4yOTQsMC4yOTMtMC43NzcsMC0xLjA3MUwyMS42NTIsMy4yMTF6XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiLz48L3N2Zz4nO1xufVxuXG5mdW5jdGlvbiBidXR0b25Dcm9zcyhjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHRyZXR1cm4gJzxzdmcgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI0IDI0XCIgaGVpZ2h0PVwiMTRcIiB3aWR0aD1cIjE0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgPjxwYXRoIGZpbGw9XCIjQ0UxNTE1XCIgZD1cIk0yMi4yNDUsNC4wMTVjMC4zMTMsMC4zMTMsMC4zMTMsMC44MjYsMCwxLjEzOWwtNi4yNzYsNi4yN2MtMC4zMTMsMC4zMTItMC4zMTMsMC44MjYsMCwxLjE0bDYuMjczLDYuMjcyICBjMC4zMTMsMC4zMTMsMC4zMTMsMC44MjYsMCwxLjE0bC0yLjI4NSwyLjI3N2MtMC4zMTQsMC4zMTItMC44MjgsMC4zMTItMS4xNDIsMGwtNi4yNzEtNi4yNzFjLTAuMzEzLTAuMzEzLTAuODI4LTAuMzEzLTEuMTQxLDAgIGwtNi4yNzYsNi4yNjdjLTAuMzEzLDAuMzEzLTAuODI4LDAuMzEzLTEuMTQxLDBsLTIuMjgyLTIuMjhjLTAuMzEzLTAuMzEzLTAuMzEzLTAuODI2LDAtMS4xNGw2LjI3OC02LjI2OSAgYzAuMzEzLTAuMzEyLDAuMzEzLTAuODI2LDAtMS4xNEwxLjcwOSw1LjE0N2MtMC4zMTQtMC4zMTMtMC4zMTQtMC44MjcsMC0xLjE0bDIuMjg0LTIuMjc4QzQuMzA4LDEuNDE3LDQuODIxLDEuNDE3LDUuMTM1LDEuNzMgIEwxMS40MDUsOGMwLjMxNCwwLjMxNCwwLjgyOCwwLjMxNCwxLjE0MSwwLjAwMWw2LjI3Ni02LjI2N2MwLjMxMi0wLjMxMiwwLjgyNi0wLjMxMiwxLjE0MSwwTDIyLjI0NSw0LjAxNXpcIi8+PC9zdmc+Jztcbn1cblxuZnVuY3Rpb24gdG9nZ2xlKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XHJcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxyXG5cdHNpemUgPSBmb3JtYXR0ZXJQYXJhbXMuc2l6ZSB8fDE1LFxyXG5cdHNpemVQeCA9IHNpemUgKyBcInB4XCIsXHJcblx0Y29udGFpbkVsLCBzd2l0Y2hFbCxcclxuXHRvblZhbHVlID0gZm9ybWF0dGVyUGFyYW1zLmhhc093blByb3BlcnR5KFwib25WYWx1ZVwiKSA/IGZvcm1hdHRlclBhcmFtcy5vblZhbHVlIDogdHJ1ZSxcclxuXHRvZmZWYWx1ZSA9IGZvcm1hdHRlclBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcIm9mZlZhbHVlXCIpID8gZm9ybWF0dGVyUGFyYW1zLm9mZlZhbHVlIDogZmFsc2UsXHJcblxyXG5cclxuXHRzdGF0ZSA9IGZvcm1hdHRlclBhcmFtcy5vblRydXRoeSA/IHZhbHVlIDogdmFsdWUgPT09IG9uVmFsdWU7XHJcblxyXG5cdFxyXG5cdGNvbnRhaW5FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0Y29udGFpbkVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdG9nZ2xlXCIpO1xyXG5cclxuXHRpZihzdGF0ZSl7XHJcblx0XHRjb250YWluRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10b2dnbGUtb25cIik7XHJcblx0XHRjb250YWluRWwuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwicm93LXJldmVyc2VcIjtcclxuXHJcblx0XHRpZihmb3JtYXR0ZXJQYXJhbXMub25Db2xvcil7XHJcblx0XHRcdGNvbnRhaW5FbC5zdHlsZS5iYWNrZ3JvdW5kID0gZm9ybWF0dGVyUGFyYW1zLm9uQ29sb3I7XHJcblx0XHR9XHJcblx0fWVsc2Uge1xyXG5cdFx0aWYoZm9ybWF0dGVyUGFyYW1zLm9mZkNvbG9yKXtcclxuXHRcdFx0Y29udGFpbkVsLnN0eWxlLmJhY2tncm91bmQgPSBmb3JtYXR0ZXJQYXJhbXMub2ZmQ29sb3I7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjb250YWluRWwuc3R5bGUud2lkdGggPSAoMi41ICogc2l6ZSkgKyBcInB4XCI7XHJcblx0Y29udGFpbkVsLnN0eWxlLmJvcmRlclJhZGl1cyA9IHNpemVQeDtcclxuXHJcblx0aWYoZm9ybWF0dGVyUGFyYW1zLmNsaWNrYWJsZSl7XHJcblx0XHRjb250YWluRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcblx0XHRcdGNlbGwuc2V0VmFsdWUoc3RhdGUgPyBvZmZWYWx1ZSA6IG9uVmFsdWUpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRzd2l0Y2hFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0c3dpdGNoRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10b2dnbGUtc3dpdGNoXCIpO1xyXG5cclxuXHRzd2l0Y2hFbC5zdHlsZS5oZWlnaHQgPSBzaXplUHg7XHJcblx0c3dpdGNoRWwuc3R5bGUud2lkdGggPSBzaXplUHg7XHJcblx0c3dpdGNoRWwuc3R5bGUuYm9yZGVyUmFkaXVzID0gc2l6ZVB4O1xyXG5cdFxyXG5cdGNvbnRhaW5FbC5hcHBlbmRDaGlsZChzd2l0Y2hFbCk7XHJcblx0XHJcblx0cmV0dXJuIGNvbnRhaW5FbDtcclxufVxuXG5mdW5jdGlvbiByb3dudW0oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0dmFyIHJvdyA9IGNlbGwuZ2V0Um93KCk7XG5cdHZhciB0YWJsZSA9IGNlbGwuZ2V0VGFibGUoKTtcblxuXHRyb3cud2F0Y2hQb3NpdGlvbigocG9zaXRpb24pID0+IHtcblx0XHRpZiAoZm9ybWF0dGVyUGFyYW1zLnJlbGF0aXZlVG9QYWdlKSB7XG5cdFx0XHRwb3NpdGlvbiArPSB0YWJsZS5tb2R1bGVzLnBhZ2UuZ2V0UGFnZVNpemUoKSAqICh0YWJsZS5tb2R1bGVzLnBhZ2UuZ2V0UGFnZSgpIC0gMSk7XG5cdFx0fVxuXHRcdGNvbnRlbnQuaW5uZXJUZXh0ID0gcG9zaXRpb247XG5cdH0pO1xuXHRcblx0cmV0dXJuIGNvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1oYW5kbGVcIik7XG5cdHJldHVybiBcIjxkaXYgY2xhc3M9J3RhYnVsYXRvci1yb3ctaGFuZGxlLWJveCc+PGRpdiBjbGFzcz0ndGFidWxhdG9yLXJvdy1oYW5kbGUtYmFyJz48L2Rpdj48ZGl2IGNsYXNzPSd0YWJ1bGF0b3Itcm93LWhhbmRsZS1iYXInPjwvZGl2PjxkaXYgY2xhc3M9J3RhYnVsYXRvci1yb3ctaGFuZGxlLWJhcic+PC9kaXY+PC9kaXY+XCI7XG59XG5cbmZ1bmN0aW9uIGFkYXB0YWJsZShjZWxsLCBwYXJhbXMsIG9uUmVuZGVyZWQpe1xyXG5cdHZhciBsb29rdXAsIGZvcm1hdHRlckZ1bmMsIGZvcm1hdHRlclBhcmFtcztcclxuICAgIFxyXG5cdGZ1bmN0aW9uIGRlZmF1bHRMb29rdXAoY2VsbCl7XHJcblx0XHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXHJcblx0XHRmb3JtYXR0ZXIgPSBcInBsYWludGV4dFwiO1xyXG4gICAgICAgIFxyXG5cdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7ICAgICAgICAgICBcclxuXHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcclxuXHRcdFx0XHRmb3JtYXR0ZXIgPSBcInRpY2tDcm9zc1wiO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxyXG5cdFx0XHRcdGlmKHZhbHVlLmluY2x1ZGVzKFwiXFxuXCIpKXtcclxuXHRcdFx0XHRcdGZvcm1hdHRlciA9IFwidGV4dGFyZWFcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcbiAgICAgICAgXHJcblx0XHRyZXR1cm4gZm9ybWF0dGVyO1xyXG5cdH1cclxuICAgIFxyXG5cdGxvb2t1cCA9IHBhcmFtcy5mb3JtYXR0ZXJMb29rdXAgPyBwYXJhbXMuZm9ybWF0dGVyTG9va3VwKGNlbGwpIDogZGVmYXVsdExvb2t1cChjZWxsKTtcclxuXHJcblx0aWYocGFyYW1zLnBhcmFtc0xvb2t1cCl7XHJcblx0XHRmb3JtYXR0ZXJQYXJhbXMgPSB0eXBlb2YgcGFyYW1zLnBhcmFtc0xvb2t1cCA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLnBhcmFtc0xvb2t1cChsb29rdXAsIGNlbGwpIDogcGFyYW1zLnBhcmFtc0xvb2t1cFtsb29rdXBdO1xyXG5cdH1cclxuXHJcblx0Zm9ybWF0dGVyRnVuYyA9IHRoaXMudGFibGUubW9kdWxlcy5mb3JtYXQubG9va3VwRm9ybWF0dGVyKGxvb2t1cCk7XHJcbiAgICBcclxuXHRyZXR1cm4gIGZvcm1hdHRlckZ1bmMuY2FsbCh0aGlzLCBjZWxsLCBmb3JtYXR0ZXJQYXJhbXMgfHwge30sIG9uUmVuZGVyZWQpO1xyXG59XG5cbmZ1bmN0aW9uIGFycmF5JDIoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGRlbGltaXRlciA9IGZvcm1hdHRlclBhcmFtcy5kZWxpbWl0ZXIgfHwgXCIsXCIsXG5cdHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHR0YWJsZSA9IHRoaXMudGFibGUsXG5cdHZhbHVlTWFwO1xuXHRcblx0aWYoZm9ybWF0dGVyUGFyYW1zLnZhbHVlTWFwKXtcblx0XHRpZih0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLnZhbHVlTWFwID09PSBcInN0cmluZ1wiKXtcblx0XHRcdHZhbHVlTWFwID0gZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUubWFwKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIEhlbHBlcnMucmV0cmlldmVOZXN0ZWREYXRhKHRhYmxlLm9wdGlvbnMubmVzdGVkRmllbGRTZXBhcmF0b3IsIGZvcm1hdHRlclBhcmFtcy52YWx1ZU1hcCwgaXRlbSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR2YWx1ZU1hcCA9IGZvcm1hdHRlclBhcmFtcy52YWx1ZU1hcDtcblx0XHR9XG5cdH1cblxuXHRpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7XG5cdFx0aWYodmFsdWVNYXApe1xuXHRcdFx0dmFsdWUgPSB2YWx1ZU1hcCh2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlLmpvaW4oZGVsaW1pdGVyKTtcblx0fWVsc2Uge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBqc29uJDEoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGluZGVudCA9IGZvcm1hdHRlclBhcmFtcy5pbmRlbnQgfHwgXCJcXHRcIixcblx0bXVsdGlsaW5lID0gdHlwZW9mIGZvcm1hdHRlclBhcmFtcy5tdWx0aWxpbmUgPT09IFwidW5kZWZpbmVkXCIgPyB0cnVlIDogZm9ybWF0dGVyUGFyYW1zLm11bHRpbGluZSxcblx0cmVwbGFjZXIgPSBmb3JtYXR0ZXJQYXJhbXMucmVwbGFjZXIgfHwgbnVsbCxcblx0dmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG5cdFxuXHRpZihtdWx0aWxpbmUpe1xuXHRcdGNlbGwuZ2V0RWxlbWVudCgpLnN0eWxlLndoaXRlU3BhY2UgPSBcInByZS13cmFwXCI7XG5cdH1cblxuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBpbmRlbnQpO1xufVxuXG52YXIgZGVmYXVsdEZvcm1hdHRlcnMgPSB7XG5cdHBsYWludGV4dDpwbGFpbnRleHQsXG5cdGh0bWw6aHRtbCxcblx0dGV4dGFyZWE6dGV4dGFyZWEsXG5cdG1vbmV5Om1vbmV5LFxuXHRsaW5rOmxpbmssXG5cdGltYWdlOmltYWdlLFxuXHR0aWNrQ3Jvc3M6dGlja0Nyb3NzLFxuXHRkYXRldGltZTpkYXRldGltZSQxLFxuXHRkYXRldGltZWRpZmY6ZGF0ZXRpbWVkaWZmLFxuXHRsb29rdXA6bG9va3VwLFxuXHRzdGFyOnN0YXIsXG5cdHRyYWZmaWM6dHJhZmZpYyxcblx0cHJvZ3Jlc3M6cHJvZ3Jlc3MsXG5cdGNvbG9yOmNvbG9yLFxuXHRidXR0b25UaWNrOmJ1dHRvblRpY2ssXG5cdGJ1dHRvbkNyb3NzOmJ1dHRvbkNyb3NzLFxuXHR0b2dnbGU6dG9nZ2xlLFxuXHRyb3dudW06cm93bnVtLFxuXHRoYW5kbGU6aGFuZGxlLFxuXHRhZGFwdGFibGU6YWRhcHRhYmxlLFxuXHRhcnJheTphcnJheSQyLFxuXHRqc29uOmpzb24kMSxcbn07XG5cbmNsYXNzIEZvcm1hdCBleHRlbmRzIE1vZHVsZXtcblx0XG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJmb3JtYXRcIjtcblx0XG5cdC8vbG9hZCBkZWZhdWx0c1xuXHRzdGF0aWMgZm9ybWF0dGVycyA9IGRlZmF1bHRGb3JtYXR0ZXJzO1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJQYXJhbXNcIik7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlclByaW50XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJQcmludFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVyQ2xpcGJvYXJkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJDbGlwYm9hcmRQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlckh0bWxPdXRwdXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlckh0bWxPdXRwdXRQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRpdGxlRm9ybWF0dGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0aXRsZUZvcm1hdHRlclBhcmFtc1wiKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1mb3JtYXRcIiwgdGhpcy5mb3JtYXRWYWx1ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtcmVuZGVyZWRcIiwgdGhpcy5jZWxsUmVuZGVyZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbGF5b3V0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1mb3JtYXRcIiwgdGhpcy5mb3JtYXRIZWFkZXIuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdC8vaW5pdGlhbGl6ZSBjb2x1bW4gZm9ybWF0dGVyXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHRjb2x1bW4ubW9kdWxlcy5mb3JtYXQgPSB0aGlzLmxvb2t1cFR5cGVGb3JtYXR0ZXIoY29sdW1uLCBcIlwiKTtcblx0XHRcblx0XHRpZih0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyUHJpbnQgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZm9ybWF0LnByaW50ID0gdGhpcy5sb29rdXBUeXBlRm9ybWF0dGVyKGNvbHVtbiwgXCJQcmludFwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlckNsaXBib2FyZCAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5mb3JtYXQuY2xpcGJvYXJkID0gdGhpcy5sb29rdXBUeXBlRm9ybWF0dGVyKGNvbHVtbiwgXCJDbGlwYm9hcmRcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXJIdG1sT3V0cHV0ICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZvcm1hdC5odG1sT3V0cHV0ID0gdGhpcy5sb29rdXBUeXBlRm9ybWF0dGVyKGNvbHVtbiwgXCJIdG1sT3V0cHV0XCIpO1xuXHRcdH1cblx0fVxuXHRcblx0bG9va3VwVHlwZUZvcm1hdHRlcihjb2x1bW4sIHR5cGUpe1xuXHRcdHZhciBjb25maWcgPSB7cGFyYW1zOmNvbHVtbi5kZWZpbml0aW9uW1wiZm9ybWF0dGVyXCIgKyB0eXBlICsgXCJQYXJhbXNcIl0gfHwge319LFxuXHRcdGZvcm1hdHRlciA9IGNvbHVtbi5kZWZpbml0aW9uW1wiZm9ybWF0dGVyXCIgKyB0eXBlXTtcblx0XHRcblx0XHRjb25maWcuZm9ybWF0dGVyID0gdGhpcy5sb29rdXBGb3JtYXR0ZXIoZm9ybWF0dGVyKTtcblx0XHRcblx0XHRyZXR1cm4gY29uZmlnO1xuXHR9XG5cdFxuXHRcblx0bG9va3VwRm9ybWF0dGVyKGZvcm1hdHRlcil7XG5cdFx0dmFyIGZvcm1hdHRlckZ1bmM7XG5cblx0XHQvL3NldCBjb2x1bW4gZm9ybWF0dGVyXG5cdFx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXIpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZihGb3JtYXQuZm9ybWF0dGVyc1tmb3JtYXR0ZXJdKXtcblx0XHRcdFx0XHRmb3JtYXR0ZXJGdW5jID0gRm9ybWF0LmZvcm1hdHRlcnNbZm9ybWF0dGVyXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkZvcm1hdHRlciBFcnJvciAtIE5vIHN1Y2ggZm9ybWF0dGVyIGZvdW5kOiBcIiwgZm9ybWF0dGVyKTtcblx0XHRcdFx0XHRmb3JtYXR0ZXJGdW5jID0gRm9ybWF0LmZvcm1hdHRlcnMucGxhaW50ZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0Zm9ybWF0dGVyRnVuYyA9IGZvcm1hdHRlcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGZvcm1hdHRlckZ1bmMgPSBGb3JtYXQuZm9ybWF0dGVycy5wbGFpbnRleHQ7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZm9ybWF0dGVyRnVuYztcblx0fVxuXHRcblx0Y2VsbFJlbmRlcmVkKGNlbGwpe1xuXHRcdGlmKGNlbGwubW9kdWxlcy5mb3JtYXQgJiYgY2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZENhbGxiYWNrICYmICFjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkKXtcblx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjaygpO1xuXHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JldHVybiBhIGZvcm1hdHRlZCB2YWx1ZSBmb3IgYSBjb2x1bW4gaGVhZGVyXG5cdGZvcm1hdEhlYWRlcihjb2x1bW4sIHRpdGxlLCBlbCl7XG5cdFx0dmFyIGZvcm1hdHRlciwgcGFyYW1zLCBvblJlbmRlcmVkLCBtb2NrQ2VsbDtcblx0XHRcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi50aXRsZUZvcm1hdHRlcil7XG5cdFx0XHRmb3JtYXR0ZXIgPSB0aGlzLmxvb2t1cEZvcm1hdHRlcihjb2x1bW4uZGVmaW5pdGlvbi50aXRsZUZvcm1hdHRlcik7XG5cdFx0XHRcblx0XHRcdG9uUmVuZGVyZWQgPSAoY2FsbGJhY2spID0+IHtcblx0XHRcdFx0Y29sdW1uLnRpdGxlRm9ybWF0dGVyUmVuZGVyZWQgPSBjYWxsYmFjaztcblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdG1vY2tDZWxsID0ge1xuXHRcdFx0XHRnZXRWYWx1ZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHJldHVybiB0aXRsZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0RWxlbWVudDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHJldHVybiBlbDtcblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0VHlwZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHJldHVybiBcImhlYWRlclwiO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXRDb2x1bW46ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXRUYWJsZTooKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGU7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdHBhcmFtcyA9IGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlRm9ybWF0dGVyUGFyYW1zIHx8IHt9O1xuXHRcdFx0XG5cdFx0XHRwYXJhbXMgPSB0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMoKSA6IHBhcmFtcztcblx0XHRcdFxuXHRcdFx0cmV0dXJuIGZvcm1hdHRlci5jYWxsKHRoaXMsIG1vY2tDZWxsLCBwYXJhbXMsIG9uUmVuZGVyZWQpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0aXRsZTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvL3JldHVybiBhIGZvcm1hdHRlZCB2YWx1ZSBmb3IgYSBjZWxsXG5cdGZvcm1hdFZhbHVlKGNlbGwpe1xuXHRcdHZhciBjb21wb25lbnQgPSBjZWxsLmdldENvbXBvbmVudCgpLFxuXHRcdHBhcmFtcyA9IHR5cGVvZiBjZWxsLmNvbHVtbi5tb2R1bGVzLmZvcm1hdC5wYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IGNlbGwuY29sdW1uLm1vZHVsZXMuZm9ybWF0LnBhcmFtcyhjb21wb25lbnQpIDogY2VsbC5jb2x1bW4ubW9kdWxlcy5mb3JtYXQucGFyYW1zO1xuXHRcdFxuXHRcdGZ1bmN0aW9uIG9uUmVuZGVyZWQoY2FsbGJhY2spe1xuXHRcdFx0aWYoIWNlbGwubW9kdWxlcy5mb3JtYXQpe1xuXHRcdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0ID0ge307XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gY2VsbC5jb2x1bW4ubW9kdWxlcy5mb3JtYXQuZm9ybWF0dGVyLmNhbGwodGhpcywgY29tcG9uZW50LCBwYXJhbXMsIG9uUmVuZGVyZWQpO1xuXHR9XG5cdFxuXHRmb3JtYXRFeHBvcnRWYWx1ZShjZWxsLCB0eXBlKXtcblx0XHR2YXIgZm9ybWF0dGVyID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5mb3JtYXRbdHlwZV0sXG5cdFx0cGFyYW1zO1xuXHRcdFxuXHRcdGlmKGZvcm1hdHRlcil7XG5cdFx0XHRwYXJhbXMgPSB0eXBlb2YgZm9ybWF0dGVyLnBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gZm9ybWF0dGVyLnBhcmFtcyhjZWxsLmdldENvbXBvbmVudCgpKSA6IGZvcm1hdHRlci5wYXJhbXM7XG5cdFx0XHRcblx0XHRcdGZ1bmN0aW9uIG9uUmVuZGVyZWQoY2FsbGJhY2spe1xuXHRcdFx0XHRpZighY2VsbC5tb2R1bGVzLmZvcm1hdCl7XG5cdFx0XHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdCA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZm9ybWF0dGVyLmZvcm1hdHRlci5jYWxsKHRoaXMsIGNlbGwuZ2V0Q29tcG9uZW50KCksIHBhcmFtcywgb25SZW5kZXJlZCk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5mb3JtYXRWYWx1ZShjZWxsKTtcblx0XHR9XG5cdH1cblx0XG5cdHNhbml0aXplSFRNTCh2YWx1ZSl7XG5cdFx0aWYodmFsdWUpe1xuXHRcdFx0dmFyIGVudGl0eU1hcCA9IHtcblx0XHRcdFx0JyYnOiAnJmFtcDsnLFxuXHRcdFx0XHQnPCc6ICcmbHQ7Jyxcblx0XHRcdFx0Jz4nOiAnJmd0OycsXG5cdFx0XHRcdCdcIic6ICcmcXVvdDsnLFxuXHRcdFx0XHRcIidcIjogJyYjMzk7Jyxcblx0XHRcdFx0Jy8nOiAnJiN4MkY7Jyxcblx0XHRcdFx0J2AnOiAnJiN4NjA7Jyxcblx0XHRcdFx0Jz0nOiAnJiN4M0Q7J1xuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIFN0cmluZyh2YWx1ZSkucmVwbGFjZSgvWyY8PlwiJ2A9L10vZywgZnVuY3Rpb24gKHMpIHtcblx0XHRcdFx0cmV0dXJuIGVudGl0eU1hcFtzXTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdH1cblx0XG5cdGVtcHR5VG9TcGFjZSh2YWx1ZSl7XG5cdFx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWx1ZSA9PT0gXCJcIiA/IFwiJm5ic3A7XCIgOiB2YWx1ZTtcblx0fVxuXHRcbn1cblxuY2xhc3MgRnJvemVuQ29sdW1ucyBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwiZnJvemVuQ29sdW1uc1wiO1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmxlZnRDb2x1bW5zID0gW107XG5cdFx0dGhpcy5yaWdodENvbHVtbnMgPSBbXTtcblx0XHR0aGlzLmluaXRpYWxpemF0aW9uTW9kZSA9IFwibGVmdFwiO1xuXHRcdHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cdFx0dGhpcy5ibG9ja2VkID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZnJvemVuXCIpO1xuXHR9XG5cdFxuXHQvL3Jlc2V0IGluaXRpYWwgc3RhdGVcblx0cmVzZXQoKXtcblx0XHR0aGlzLmluaXRpYWxpemF0aW9uTW9kZSA9IFwibGVmdFwiO1xuXHRcdHRoaXMubGVmdENvbHVtbnMgPSBbXTtcblx0XHR0aGlzLnJpZ2h0Q29sdW1ucyA9IFtdO1xuXHRcdHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtbGF5b3V0XCIsIHRoaXMubGF5b3V0Q2VsbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi13aWR0aFwiLCB0aGlzLmxheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1sYXlvdXQtYWZ0ZXJcIiwgdGhpcy5sYXlvdXRSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1sYXlvdXRcIiwgdGhpcy5sYXlvdXQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW5zLWxvYWRpbmdcIiwgdGhpcy5yZXNldC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1hZGRcIiwgdGhpcy5yZWluaXRpYWxpemVDb2x1bW5zLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWRlbGV0ZWRcIiwgdGhpcy5yZWluaXRpYWxpemVDb2x1bW5zLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhpZGVcIiwgdGhpcy5yZWluaXRpYWxpemVDb2x1bW5zLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXNob3dcIiwgdGhpcy5yZWluaXRpYWxpemVDb2x1bW5zLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1ucy1sb2FkZWRcIiwgdGhpcy5yZWluaXRpYWxpemVDb2x1bW5zLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtcmVkcmF3XCIsIHRoaXMubGF5b3V0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwibGF5b3V0LXJlZnJlc2hpbmdcIiwgdGhpcy5ibG9ja0xheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImxheW91dC1yZWZyZXNoZWRcIiwgdGhpcy51bmJsb2NrTGF5b3V0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsYmFyLXZlcnRpY2FsXCIsIHRoaXMuYWRqdXN0Rm9yU2Nyb2xsYmFyLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRibG9ja0xheW91dCgpe1xuXHRcdHRoaXMuYmxvY2tlZCA9IHRydWU7XG5cdH1cblx0XG5cdHVuYmxvY2tMYXlvdXQoKXtcblx0XHR0aGlzLmJsb2NrZWQgPSBmYWxzZTtcblx0fVxuXHRcblx0bGF5b3V0Q2VsbChjZWxsKXtcblx0XHR0aGlzLmxheW91dEVsZW1lbnQoY2VsbC5lbGVtZW50LCBjZWxsLmNvbHVtbik7XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZUNvbHVtbnMoKXtcblx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmxheW91dCgpO1xuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgc3BlY2lmaWMgY29sdW1uXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgY29uZmlnID0ge21hcmdpbjowLCBlZGdlOmZhbHNlfTtcblx0XHRcblx0XHRpZighY29sdW1uLmlzR3JvdXApe1x0XHRcdFxuXHRcdFx0aWYodGhpcy5mcm96ZW5DaGVjayhjb2x1bW4pKXtcblx0XHRcdFx0Y29uZmlnLnBvc2l0aW9uID0gdGhpcy5pbml0aWFsaXphdGlvbk1vZGU7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmluaXRpYWxpemF0aW9uTW9kZSA9PSBcImxlZnRcIil7XG5cdFx0XHRcdFx0dGhpcy5sZWZ0Q29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJpZ2h0Q29sdW1ucy51bnNoaWZ0KGNvbHVtbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuYWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbiA9IGNvbmZpZztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXphdGlvbk1vZGUgPSBcInJpZ2h0XCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRmcm96ZW5DaGVjayhjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5wYXJlbnQuaXNHcm91cCAmJiBjb2x1bW4uZGVmaW5pdGlvbi5mcm96ZW4pe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRnJvemVuIENvbHVtbiBFcnJvciAtIFBhcmVudCBjb2x1bW4gZ3JvdXAgbXVzdCBiZSBmcm96ZW4sIG5vdCBpbmRpdmlkdWFsIGNvbHVtbnMgb3Igc3ViIGNvbHVtbiBncm91cHNcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbHVtbi5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRyZXR1cm4gdGhpcy5mcm96ZW5DaGVjayhjb2x1bW4ucGFyZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gY29sdW1uLmRlZmluaXRpb24uZnJvemVuO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9sYXlvdXQgY2FsY3VsYXRpb24gcm93c1xuXHRsYXlvdXRDYWxjUm93cygpe1xuXHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnRvcEluaXRpYWxpemVkICYmIHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy50b3BSb3cpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyh0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MudG9wUm93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmJvdEluaXRpYWxpemVkICYmIHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5ib3RSb3cpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyh0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuYm90Um93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJncm91cFJvd3NcIikpe1xuXHRcdFx0XHR0aGlzLmxheW91dEdyb3VwQ2FsY3ModGhpcy50YWJsZS5tb2R1bGVzLmdyb3VwUm93cy5nZXRHcm91cHMoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRsYXlvdXRHcm91cENhbGNzKGdyb3Vwcyl7XG5cdFx0Z3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRpZihncm91cC5jYWxjcy50b3Ape1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyhncm91cC5jYWxjcy50b3ApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihncm91cC5jYWxjcy5ib3R0b20pe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyhncm91cC5jYWxjcy5ib3R0b20pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihncm91cC5ncm91cExpc3QgJiYgZ3JvdXAuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMubGF5b3V0R3JvdXBDYWxjcyhncm91cC5ncm91cExpc3QpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2NhbGN1bGF0ZSBjb2x1bW4gcG9zaXRpb25zIGFuZCBsYXlvdXQgaGVhZGVyc1xuXHRsYXlvdXRDb2x1bW5Qb3NpdGlvbihhbGxDZWxscyl7XG5cdFx0dmFyIGxlZnRQYXJlbnRzID0gW107XG5cdFx0XG5cdFx0dmFyIGxlZnRNYXJnaW4gPSAwO1xuXHRcdHZhciByaWdodE1hcmdpbiA9IDA7XG5cdFx0XG5cdFx0dGhpcy5sZWZ0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGkpID0+IHtcdFxuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpblZhbHVlID0gbGVmdE1hcmdpbjtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW4gPSBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luVmFsdWUgKyBcInB4XCI7XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0bGVmdE1hcmdpbiArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoaSA9PSB0aGlzLmxlZnRDb2x1bW5zLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5mcm96ZW4uZWRnZSA9IHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5lZGdlID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRcdHZhciBwYXJlbnRFbCA9IHRoaXMuZ2V0Q29sR3JvdXBQYXJlbnRFbGVtZW50KGNvbHVtbik7XG5cdFx0XHRcdGlmKCFsZWZ0UGFyZW50cy5pbmNsdWRlcyhwYXJlbnRFbCkpe1xuXHRcdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChwYXJlbnRFbCwgY29sdW1uKTtcblx0XHRcdFx0XHRsZWZ0UGFyZW50cy5wdXNoKHBhcmVudEVsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cGFyZW50RWwuY2xhc3NMaXN0LnRvZ2dsZShcInRhYnVsYXRvci1mcm96ZW4tbGVmdFwiLCAgY29sdW1uLm1vZHVsZXMuZnJvemVuLmVkZ2UgJiYgY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uID09PSBcImxlZnRcIik7XG5cdFx0XHRcdHBhcmVudEVsLmNsYXNzTGlzdC50b2dnbGUoXCJ0YWJ1bGF0b3ItZnJvemVuLXJpZ2h0XCIsIGNvbHVtbi5tb2R1bGVzLmZyb3plbi5lZGdlICYmIGNvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbiA9PT0gXCJyaWdodFwiKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KGNvbHVtbi5nZXRFbGVtZW50KCksIGNvbHVtbik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGFsbENlbGxzKXtcblx0XHRcdFx0Y29sdW1uLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoY2VsbC5nZXRFbGVtZW50KHRydWUpLCBjb2x1bW4pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLnJpZ2h0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGkpID0+IHtcblx0XHRcdFxuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpblZhbHVlID0gcmlnaHRNYXJnaW47XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luID0gY29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpblZhbHVlICsgXCJweFwiO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdHJpZ2h0TWFyZ2luICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihpID09IHRoaXMucmlnaHRDb2x1bW5zLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5mcm96ZW4uZWRnZSA9IHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5lZGdlID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudCh0aGlzLmdldENvbEdyb3VwUGFyZW50RWxlbWVudChjb2x1bW4pLCBjb2x1bW4pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoY29sdW1uLmdldEVsZW1lbnQoKSwgY29sdW1uKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoYWxsQ2VsbHMpe1xuXHRcdFx0XHRjb2x1bW4uY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChjZWxsLmdldEVsZW1lbnQodHJ1ZSksIGNvbHVtbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRnZXRDb2xHcm91cFBhcmVudEVsZW1lbnQoY29sdW1uKXtcblx0XHRyZXR1cm4gY29sdW1uLnBhcmVudC5pc0dyb3VwID8gdGhpcy5nZXRDb2xHcm91cFBhcmVudEVsZW1lbnQoY29sdW1uLnBhcmVudCkgOiBjb2x1bW4uZ2V0RWxlbWVudCgpO1xuXHR9XG5cdFxuXHQvL2xheW91dCBjb2x1bW5zIGFwcHJvcHJpYXRlbHlcblx0bGF5b3V0KCl7XHRcblx0XHRpZih0aGlzLmFjdGl2ZSAmJiAhdGhpcy5ibG9ja2VkKXtcblx0XHRcdC8vY2FsY3VsYXRlIGxlZnQgY29sdW1uc1xuXHRcdFx0dGhpcy5sYXlvdXRDb2x1bW5Qb3NpdGlvbigpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlaW5pdGlhbGl6ZVJvd3MoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYXlvdXRDYWxjUm93cygpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVpbml0aWFsaXplUm93cygpe1xuXHRcdHZhciB2aXNpYmxlUm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRWaXNpYmxlUm93cyh0cnVlKTtcblx0XHR2YXIgb3RoZXJSb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd3MoKS5maWx0ZXIocm93ID0+ICF2aXNpYmxlUm93cy5pbmNsdWRlcyhyb3cpKTtcblx0XHRcblx0XHRvdGhlclJvd3MuZm9yRWFjaCgocm93KSA9Pntcblx0XHRcdHJvdy5kZWluaXRpYWxpemUoKTtcblx0XHR9KTtcblx0XHRcblx0XHR2aXNpYmxlUm93cy5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0aWYocm93LnR5cGUgPT09IFwicm93XCIpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRsYXlvdXRSb3cocm93KXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMubGF5b3V0ID09PSBcImZpdERhdGFGaWxsXCIgJiYgdGhpcy5yaWdodENvbHVtbnMubGVuZ3RoKXtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXRUYWJsZUVsZW1lbnQoKS5zdHlsZS5taW5XaWR0aCA9IFwiY2FsYygxMDAlIC0gXCIgKyB0aGlzLnJpZ2h0TWFyZ2luICsgXCIpXCI7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMubGVmdENvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHR2YXIgY2VsbCA9IHJvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0XHRcblx0XHRcdGlmKGNlbGwpe1xuXHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoY2VsbC5nZXRFbGVtZW50KHRydWUpLCBjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMucmlnaHRDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0dmFyIGNlbGwgPSByb3cuZ2V0Q2VsbChjb2x1bW4pO1xuXHRcdFx0XG5cdFx0XHRpZihjZWxsKXtcblx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KGNlbGwuZ2V0RWxlbWVudCh0cnVlKSwgY29sdW1uKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0bGF5b3V0RWxlbWVudChlbGVtZW50LCBjb2x1bW4pe1xuXHRcdHZhciBwb3NpdGlvbjtcblx0XHRcblx0XHRpZihjb2x1bW4ubW9kdWxlcy5mcm96ZW4gJiYgZWxlbWVudCl7XG5cdFx0XHRlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJzdGlja3lcIjtcblxuXHRcdFx0aWYodGhpcy50YWJsZS5ydGwpe1xuXHRcdFx0XHRwb3NpdGlvbiA9IGNvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbiA9PT0gXCJsZWZ0XCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIjtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cG9zaXRpb24gPSBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ucG9zaXRpb247XG5cdFx0XHR9XG5cdFx0XG5cdFx0XHRlbGVtZW50LnN0eWxlW3Bvc2l0aW9uXSA9IGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW47XG5cblx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1mcm96ZW5cIik7XG5cdFx0XHRcblx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcInRhYnVsYXRvci1mcm96ZW4tbGVmdFwiLCAgY29sdW1uLm1vZHVsZXMuZnJvemVuLmVkZ2UgJiYgY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uID09PSBcImxlZnRcIik7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJ0YWJ1bGF0b3ItZnJvemVuLXJpZ2h0XCIsIGNvbHVtbi5tb2R1bGVzLmZyb3plbi5lZGdlICYmIGNvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbiA9PT0gXCJyaWdodFwiKTtcblx0XHR9XG5cdH1cblxuXHRhZGp1c3RGb3JTY3JvbGxiYXIod2lkdGgpe1xuXHRcdGlmKHRoaXMucmlnaHRDb2x1bW5zLmxlbmd0aCl7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29udGVudHNFbGVtZW50KCkuc3R5bGUud2lkdGggPSBcImNhbGMoMTAwJSAtIFwiICsgd2lkdGggKyBcInB4KVwiO1xuXHRcdH1cblx0fVxuXG5cdGdldEZyb3plbkNvbHVtbnMoKXtcblx0XHRyZXR1cm4gdGhpcy5sZWZ0Q29sdW1ucy5jb25jYXQodGhpcy5yaWdodENvbHVtbnMpO1xuXHR9XG5cdFxuXHRfY2FsY1NwYWNlKGNvbHVtbnMsIGluZGV4KXtcblx0XHR2YXIgd2lkdGggPSAwO1xuXHRcdFxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkrKyl7XG5cdFx0XHRpZihjb2x1bW5zW2ldLnZpc2libGUpe1xuXHRcdFx0XHR3aWR0aCArPSBjb2x1bW5zW2ldLmdldFdpZHRoKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB3aWR0aDtcblx0fVxufVxuXG5jbGFzcyBGcm96ZW5Sb3dzIGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJmcm96ZW5Sb3dzXCI7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMudG9wRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0dGhpcy5yb3dzID0gW107XG5cblx0XHQvL3JlZ2lzdGVyIGNvbXBvbmVudCBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJmcmVlemVcIiwgdGhpcy5mcmVlemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwidW5mcmVlemVcIiwgdGhpcy51bmZyZWV6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJpc0Zyb3plblwiLCB0aGlzLmlzUm93RnJvemVuLmJpbmQodGhpcykpO1xuXG5cdFx0Ly9yZWdpc3RlciB0YWJsZSBvcHRpb25zXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZnJvemVuUm93c0ZpZWxkXCIsIFwiaWRcIik7IC8vZmllbGQgdG8gY2hvb3NlIGZyb3plbiByb3dzIGJ5XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZnJvemVuUm93c1wiLCBmYWxzZSk7IC8vaG9sZGVyIGZvciBmcm96ZW4gcm93IGlkZW50aWZpZXJzXG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dmFyXHRmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcblx0XHR0aGlzLnJvd3MgPSBbXTtcblxuXHRcdHRoaXMudG9wRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWZyb3plbi1yb3dzLWhvbGRlclwiKTtcblx0XHRcblx0XHRmcmFnbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuXHRcdGZyYWdtZW50LmFwcGVuZENoaWxkKHRoaXMudG9wRWxlbWVudCk7XG5cblx0XHQvLyB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZWxlbWVudC5hcHBlbmQodGhpcy50b3BFbGVtZW50KTtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29udGVudHNFbGVtZW50KCkuaW5zZXJ0QmVmb3JlKGZyYWdtZW50LCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuaGVhZGVyc0VsZW1lbnQubmV4dFNpYmxpbmcpO1xuXG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRpbmdcIiwgdGhpcy5kZXRhY2hSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXZpc2libGVcIiwgdGhpcy52aXNpYmxlUm93cy5iaW5kKHRoaXMpKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJEaXNwbGF5SGFuZGxlcih0aGlzLmdldFJvd3MuYmluZCh0aGlzKSwgMTApO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZyb3plblJvd3Mpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXByb2Nlc3NlZFwiLCB0aGlzLmluaXRpYWxpemVSb3dzLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkZWRcIiwgdGhpcy5pbml0aWFsaXplUm93LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdpbmdcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXJlc2l6ZWRcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXNob3dcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhpZGVcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlc2l6ZUhvbGRlcldpZHRoKCk7XG5cdH1cblxuXHRyZXNpemVIb2xkZXJXaWR0aCgpe1xuXHRcdHRoaXMudG9wRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5oZWFkZXJzRWxlbWVudC5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0fVxuXG5cdGluaXRpYWxpemVSb3dzKCl7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVJvdyhyb3cpO1xuXHRcdH0pO1xuXHR9XG5cblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBmcm96ZW5Sb3dzID0gdGhpcy50YWJsZS5vcHRpb25zLmZyb3plblJvd3MsXG5cdFx0cm93VHlwZSA9IHR5cGVvZiBmcm96ZW5Sb3dzO1xuXG5cdFx0aWYocm93VHlwZSA9PT0gXCJudW1iZXJcIil7XG5cdFx0XHRpZihyb3cuZ2V0UG9zaXRpb24oKSAmJiAocm93LmdldFBvc2l0aW9uKCkgKyB0aGlzLnJvd3MubGVuZ3RoKSA8PSBmcm96ZW5Sb3dzKXtcblx0XHRcdFx0dGhpcy5mcmVlemVSb3cocm93KTtcblx0XHRcdH1cblx0XHR9ZWxzZSBpZihyb3dUeXBlID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0aWYoZnJvemVuUm93cy5jYWxsKHRoaXMudGFibGUsIHJvdy5nZXRDb21wb25lbnQoKSkpe1xuXHRcdFx0XHR0aGlzLmZyZWV6ZVJvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIGlmKEFycmF5LmlzQXJyYXkoZnJvemVuUm93cykpe1xuXHRcdFx0aWYoZnJvemVuUm93cy5pbmNsdWRlcyhyb3cuZGF0YVt0aGlzLm9wdGlvbnMoXCJmcm96ZW5Sb3dzRmllbGRcIildKSl7XG5cdFx0XHRcdHRoaXMuZnJlZXplUm93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aXNSb3dGcm96ZW4ocm93KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZihyb3cpO1xuXHRcdHJldHVybiBpbmRleCA+IC0xO1xuXHR9XG5cblx0aXNGcm96ZW4oKXtcblx0XHRyZXR1cm4gISF0aGlzLnJvd3MubGVuZ3RoO1xuXHR9XG5cblx0dmlzaWJsZVJvd3Modmlld2FibGUsIHJvd3Mpe1xuXHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvd3MucHVzaChyb3cpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblxuXHQvL2ZpbHRlciBmcm96ZW4gcm93cyBvdXQgb2YgZGlzcGxheSBkYXRhXG5cdGdldFJvd3Mocm93cyl7XG5cdFx0dmFyIG91dHB1dCA9IHJvd3Muc2xpY2UoMCk7XG5cblx0XHR0aGlzLnJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0dmFyIGluZGV4ID0gb3V0cHV0LmluZGV4T2Yocm93KTtcblxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdG91dHB1dC5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZyZWV6ZVJvdyhyb3cpe1xuXHRcdGlmKCFyb3cubW9kdWxlcy5mcm96ZW4pe1xuXHRcdFx0cm93Lm1vZHVsZXMuZnJvemVuID0gdHJ1ZTtcblx0XHRcdHRoaXMudG9wRWxlbWVudC5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdHJvdy5pbml0aWFsaXplKCk7XG5cdFx0XHRyb3cubm9ybWFsaXplSGVpZ2h0KCk7XG5cdFx0XG5cdFx0XHR0aGlzLnJvd3MucHVzaChyb3cpO1xuXG5cdFx0XHR0aGlzLnJlZnJlc2hEYXRhKGZhbHNlLCBcImRpc3BsYXlcIik7XG5cblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblxuXHRcdFx0dGhpcy5zdHlsZVJvd3MoKTtcblxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZyZWV6ZSBFcnJvciAtIFJvdyBpcyBhbHJlYWR5IGZyb3plblwiKTtcblx0XHR9XG5cdH1cblxuXHR1bmZyZWV6ZVJvdyhyb3cpe1xuXHRcdGlmKHJvdy5tb2R1bGVzLmZyb3plbil7XG5cblx0XHRcdHJvdy5tb2R1bGVzLmZyb3plbiA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLmRldGFjaFJvdyhyb3cpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cblx0XHRcdHRoaXMucmVmcmVzaERhdGEoZmFsc2UsIFwiZGlzcGxheVwiKTtcblxuXHRcdFx0aWYodGhpcy5yb3dzLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuc3R5bGVSb3dzKCk7XG5cdFx0XHR9XG5cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGcmVlemUgRXJyb3IgLSBSb3cgaXMgYWxyZWFkeSB1bmZyb3plblwiKTtcblx0XHR9XG5cdH1cblxuXHRkZXRhY2hSb3cocm93KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZihyb3cpO1xuXG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0XHRpZihyb3dFbC5wYXJlbnROb2RlKXtcblx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3dFbCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucm93cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0fVxuXG5cdHN0eWxlUm93cyhyb3cpe1xuXHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3csIGkpID0+IHtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zdHlsZVJvdyhyb3csIGkpO1xuXHRcdH0pO1xuXHR9XG59XG5cbi8vcHVibGljIGdyb3VwIG9iamVjdFxuY2xhc3MgR3JvdXBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3RvciAoZ3JvdXApe1xuXHRcdHRoaXMuX2dyb3VwID0gZ3JvdXA7XG5cdFx0dGhpcy50eXBlID0gXCJHcm91cENvbXBvbmVudFwiO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgcmVjZWl2ZXIpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiB0YXJnZXRbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5fZ3JvdXAuZ3JvdXBNYW5hZ2VyLnRhYmxlLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyLmhhbmRsZShcImdyb3VwXCIsIHRhcmdldC5fZ3JvdXAsIG5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRnZXRLZXkoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAua2V5O1xuXHR9XG5cblx0Z2V0RmllbGQoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAuZmllbGQ7XG5cdH1cblxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLmVsZW1lbnQ7XG5cdH1cblxuXHRnZXRSb3dzKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLmdldFJvd3ModHJ1ZSk7XG5cdH1cblxuXHRnZXRTdWJHcm91cHMoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAuZ2V0U3ViR3JvdXBzKHRydWUpO1xuXHR9XG5cblx0Z2V0UGFyZW50R3JvdXAoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAucGFyZW50ID8gdGhpcy5fZ3JvdXAucGFyZW50LmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblxuXHRpc1Zpc2libGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAudmlzaWJsZTtcblx0fVxuXG5cdHNob3coKXtcblx0XHR0aGlzLl9ncm91cC5zaG93KCk7XG5cdH1cblxuXHRoaWRlKCl7XG5cdFx0dGhpcy5fZ3JvdXAuaGlkZSgpO1xuXHR9XG5cblx0dG9nZ2xlKCl7XG5cdFx0dGhpcy5fZ3JvdXAudG9nZ2xlVmlzaWJpbGl0eSgpO1xuXHR9XG5cblx0c2Nyb2xsVG8ocG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLmdyb3VwTWFuYWdlci50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHRoaXMuX2dyb3VwLCBwb3NpdGlvbiwgaWZWaXNpYmxlKTtcblx0fVxuXG5cdF9nZXRTZWxmKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwO1xuXHR9XG5cblx0Z2V0VGFibGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAuZ3JvdXBNYW5hZ2VyLnRhYmxlO1xuXHR9XG59XG5cbi8vR3JvdXAgZnVuY3Rpb25zXG5jbGFzcyBHcm91cHtcblx0XG5cdGNvbnN0cnVjdG9yKGdyb3VwTWFuYWdlciwgcGFyZW50LCBsZXZlbCwga2V5LCBmaWVsZCwgZ2VuZXJhdG9yLCBvbGRHcm91cCl7XG5cdFx0dGhpcy5ncm91cE1hbmFnZXIgPSBncm91cE1hbmFnZXI7XG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0dGhpcy5rZXkgPSBrZXk7XG5cdFx0dGhpcy5sZXZlbCA9IGxldmVsO1xuXHRcdHRoaXMuZmllbGQgPSBmaWVsZDtcblx0XHR0aGlzLmhhc1N1Ykdyb3VwcyA9IGxldmVsIDwgKGdyb3VwTWFuYWdlci5ncm91cElETG9va3Vwcy5sZW5ndGggLSAxKTtcblx0XHR0aGlzLmFkZFJvdyA9IHRoaXMuaGFzU3ViR3JvdXBzID8gdGhpcy5fYWRkUm93VG9Hcm91cCA6IHRoaXMuX2FkZFJvdztcblx0XHR0aGlzLnR5cGUgPSBcImdyb3VwXCI7IC8vdHlwZSBvZiBlbGVtZW50XG5cdFx0dGhpcy5vbGQgPSBvbGRHcm91cDtcblx0XHR0aGlzLnJvd3MgPSBbXTtcblx0XHR0aGlzLmdyb3VwcyA9IFtdO1xuXHRcdHRoaXMuZ3JvdXBMaXN0ID0gW107XG5cdFx0dGhpcy5nZW5lcmF0b3IgPSBnZW5lcmF0b3I7XG5cdFx0dGhpcy5lbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5lbGVtZW50Q29udGVudHMgPSBmYWxzZTtcblx0XHR0aGlzLmhlaWdodCA9IDA7XG5cdFx0dGhpcy5vdXRlckhlaWdodCA9IDA7XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMuY2FsY3MgPSB7fTtcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5tb2R1bGVzID0ge307XG5cdFx0dGhpcy5hcnJvd0VsZW1lbnQgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnZpc2libGUgPSBvbGRHcm91cCA/IG9sZEdyb3VwLnZpc2libGUgOiAodHlwZW9mIGdyb3VwTWFuYWdlci5zdGFydE9wZW5bbGV2ZWxdICE9PSBcInVuZGVmaW5lZFwiID8gZ3JvdXBNYW5hZ2VyLnN0YXJ0T3BlbltsZXZlbF0gOiBncm91cE1hbmFnZXIuc3RhcnRPcGVuWzBdKTtcblx0XHRcblx0XHR0aGlzLmNvbXBvbmVudCA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5jcmVhdGVFbGVtZW50cygpO1xuXHRcdHRoaXMuYWRkQmluZGluZ3MoKTtcblx0XHRcblx0XHR0aGlzLmNyZWF0ZVZhbHVlR3JvdXBzKCk7XG5cdH1cblx0XG5cdHdpcGUoZWxlbWVudHNPbmx5KXtcblx0XHRpZighZWxlbWVudHNPbmx5KXtcblx0XHRcdGlmKHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goZnVuY3Rpb24oZ3JvdXApe1xuXHRcdFx0XHRcdGdyb3VwLndpcGUoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRpZihyb3cubW9kdWxlcyl7XG5cdFx0XHRcdFx0XHRkZWxldGUgcm93Lm1vZHVsZXMuZ3JvdXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5hcnJvd0VsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLmVsZW1lbnRDb250ZW50cyA9IGZhbHNlO1xuXHR9XG5cdFxuXHRjcmVhdGVFbGVtZW50cygpe1xuXHRcdHZhciBhcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0YXJyb3cuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1hcnJvd1wiKTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvd1wiKTtcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ncm91cFwiKTtcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ncm91cC1sZXZlbC1cIiArIHRoaXMubGV2ZWwpO1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93Z3JvdXBcIik7XG5cdFx0XG5cdFx0dGhpcy5hcnJvd0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHRoaXMuYXJyb3dFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXAtdG9nZ2xlXCIpO1xuXHRcdHRoaXMuYXJyb3dFbGVtZW50LmFwcGVuZENoaWxkKGFycm93KTtcblx0XHRcblx0XHQvL3NldHVwIG1vdmFibGUgcm93c1xuXHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3MgIT09IGZhbHNlICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZEV4aXN0cyhcIm1vdmVSb3dcIikpe1xuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5tb3ZlUm93LmluaXRpYWxpemVHcm91cEhlYWRlcih0aGlzKTtcblx0XHR9XG5cdH1cblx0XG5cdGNyZWF0ZVZhbHVlR3JvdXBzKCl7XG5cdFx0dmFyIGxldmVsID0gdGhpcy5sZXZlbCArIDE7XG5cdFx0aWYodGhpcy5ncm91cE1hbmFnZXIuYWxsb3dlZFZhbHVlcyAmJiB0aGlzLmdyb3VwTWFuYWdlci5hbGxvd2VkVmFsdWVzW2xldmVsXSl7XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci5hbGxvd2VkVmFsdWVzW2xldmVsXS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLl9jcmVhdGVHcm91cCh2YWx1ZSwgbGV2ZWwpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRCaW5kaW5ncygpe1xuXHRcdHZhciB0b2dnbGVFbGVtZW50O1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuZ3JvdXBUb2dnbGVFbGVtZW50KXtcblx0XHRcdHRvZ2dsZUVsZW1lbnQgPSB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmdyb3VwVG9nZ2xlRWxlbWVudCA9PSBcImFycm93XCIgPyB0aGlzLmFycm93RWxlbWVudCA6IHRoaXMuZWxlbWVudDtcblx0XHRcdFxuXHRcdFx0dG9nZ2xlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5ncm91cFRvZ2dsZUVsZW1lbnQgPT09IFwiYXJyb3dcIil7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9hbGxvdyBjbGljayBldmVudCB0byBwcm9wYWdhdGUgYmVmb3JlIHRvZ2dsaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy50b2dnbGVWaXNpYmlsaXR5KCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfY3JlYXRlR3JvdXAoZ3JvdXBJRCwgbGV2ZWwpe1xuXHRcdHZhciBncm91cEtleSA9IGxldmVsICsgXCJfXCIgKyBncm91cElEO1xuXHRcdHZhciBncm91cCA9IG5ldyBHcm91cCh0aGlzLmdyb3VwTWFuYWdlciwgdGhpcywgbGV2ZWwsIGdyb3VwSUQsICB0aGlzLmdyb3VwTWFuYWdlci5ncm91cElETG9va3Vwc1tsZXZlbF0uZmllbGQsIHRoaXMuZ3JvdXBNYW5hZ2VyLmhlYWRlckdlbmVyYXRvcltsZXZlbF0gfHwgdGhpcy5ncm91cE1hbmFnZXIuaGVhZGVyR2VuZXJhdG9yWzBdLCB0aGlzLm9sZCA/IHRoaXMub2xkLmdyb3Vwc1tncm91cEtleV0gOiBmYWxzZSk7XG5cdFx0XG5cdFx0dGhpcy5ncm91cHNbZ3JvdXBLZXldID0gZ3JvdXA7XG5cdFx0dGhpcy5ncm91cExpc3QucHVzaChncm91cCk7XG5cdH1cblx0XG5cdF9hZGRSb3dUb0dyb3VwKHJvdyl7XG5cdFx0XG5cdFx0dmFyIGxldmVsID0gdGhpcy5sZXZlbCArIDE7XG5cdFx0XG5cdFx0aWYodGhpcy5oYXNTdWJHcm91cHMpe1xuXHRcdFx0dmFyIGdyb3VwSUQgPSB0aGlzLmdyb3VwTWFuYWdlci5ncm91cElETG9va3Vwc1tsZXZlbF0uZnVuYyhyb3cuZ2V0RGF0YSgpKSxcblx0XHRcdGdyb3VwS2V5ID0gbGV2ZWwgKyBcIl9cIiArIGdyb3VwSUQ7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLmFsbG93ZWRWYWx1ZXMgJiYgdGhpcy5ncm91cE1hbmFnZXIuYWxsb3dlZFZhbHVlc1tsZXZlbF0pe1xuXHRcdFx0XHRpZih0aGlzLmdyb3Vwc1tncm91cEtleV0pe1xuXHRcdFx0XHRcdHRoaXMuZ3JvdXBzW2dyb3VwS2V5XS5hZGRSb3cocm93KTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZighdGhpcy5ncm91cHNbZ3JvdXBLZXldKXtcblx0XHRcdFx0XHR0aGlzLl9jcmVhdGVHcm91cChncm91cElELCBsZXZlbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZ3JvdXBzW2dyb3VwS2V5XS5hZGRSb3cocm93KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9hZGRSb3cocm93KXtcblx0XHR0aGlzLnJvd3MucHVzaChyb3cpO1xuXHRcdHJvdy5tb2R1bGVzLmdyb3VwID0gdGhpcztcblx0fVxuXHRcblx0aW5zZXJ0Um93KHJvdywgdG8sIGFmdGVyKXtcblx0XHR2YXIgZGF0YSA9IHRoaXMuY29uZm9ybVJvd0RhdGEoe30pO1xuXHRcdFxuXHRcdHJvdy51cGRhdGVEYXRhKGRhdGEpO1xuXHRcdFxuXHRcdHZhciB0b0luZGV4ID0gdGhpcy5yb3dzLmluZGV4T2YodG8pO1xuXHRcdFxuXHRcdGlmKHRvSW5kZXggPiAtMSl7XG5cdFx0XHRpZihhZnRlcil7XG5cdFx0XHRcdHRoaXMucm93cy5zcGxpY2UodG9JbmRleCsxLCAwLCByb3cpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJvd3Muc3BsaWNlKHRvSW5kZXgsIDAsIHJvdyk7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoYWZ0ZXIpe1xuXHRcdFx0XHR0aGlzLnJvd3MucHVzaChyb3cpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJvd3MudW5zaGlmdChyb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyb3cubW9kdWxlcy5ncm91cCA9IHRoaXM7XG5cdFx0XG5cdFx0Ly8gdGhpcy5nZW5lcmF0ZUdyb3VwSGVhZGVyQ29udGVudHMoKTtcblx0XHRcblx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwidGFibGVcIil7XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnJlY2FsY0dyb3VwKHRoaXMpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmdyb3VwTWFuYWdlci51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdH1cblx0XG5cdHNjcm9sbEhlYWRlcihsZWZ0KXtcblx0XHRpZih0aGlzLmFycm93RWxlbWVudCl7XG5cdFx0XHR0aGlzLmFycm93RWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gbGVmdDtcblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihjaGlsZCl7XG5cdFx0XHRcdGNoaWxkLnNjcm9sbEhlYWRlcihsZWZ0KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0Z2V0Um93SW5kZXgocm93KXt9XG5cdFxuXHQvL3VwZGF0ZSByb3cgZGF0YSB0byBtYXRjaCBncm91cGluZyBjb25zdHJhaW50c1xuXHRjb25mb3JtUm93RGF0YShkYXRhKXtcblx0XHRpZih0aGlzLmZpZWxkKXtcblx0XHRcdGRhdGFbdGhpcy5maWVsZF0gPSB0aGlzLmtleTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJEYXRhIENvbmZvcm1pbmcgRXJyb3IgLSBDYW5ub3QgY29uZm9ybSByb3cgZGF0YSB0byBtYXRjaCBuZXcgZ3JvdXAgYXMgZ3JvdXBCeSBpcyBhIGZ1bmN0aW9uXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnBhcmVudCl7XG5cdFx0XHRkYXRhID0gdGhpcy5wYXJlbnQuY29uZm9ybVJvd0RhdGEoZGF0YSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cdFxuXHRyZW1vdmVSb3cocm93KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZihyb3cpO1xuXHRcdHZhciBlbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLnJvd3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoIXRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuZ3JvdXBWYWx1ZXMgJiYgIXRoaXMucm93cy5sZW5ndGgpe1xuXHRcdFx0aWYodGhpcy5wYXJlbnQpe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5yZW1vdmVHcm91cCh0aGlzKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5ncm91cE1hbmFnZXIucmVtb3ZlR3JvdXAodGhpcyk7XG5cdFx0XHR9XHRcdFxuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRcblx0XHRcdGlmKGVsLnBhcmVudE5vZGUpe1xuXHRcdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMuZ3JvdXBNYW5hZ2VyLmJsb2NrUmVkcmF3KXtcblx0XHRcdFx0dGhpcy5nZW5lcmF0ZUdyb3VwSGVhZGVyQ29udGVudHMoKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiKXtcblx0XHRcdFx0XHR0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnJlY2FsY0dyb3VwKHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9XG5cdH1cblx0XG5cdHJlbW92ZUdyb3VwKGdyb3VwKXtcblx0XHR2YXIgZ3JvdXBLZXkgPSBncm91cC5sZXZlbCArIFwiX1wiICsgZ3JvdXAua2V5LFxuXHRcdGluZGV4O1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSl7XG5cdFx0XHRkZWxldGUgdGhpcy5ncm91cHNbZ3JvdXBLZXldO1xuXHRcdFx0XG5cdFx0XHRpbmRleCA9IHRoaXMuZ3JvdXBMaXN0LmluZGV4T2YoZ3JvdXApO1xuXHRcdFx0XG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5ncm91cExpc3Quc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdGlmKHRoaXMucGFyZW50KXtcblx0XHRcdFx0XHR0aGlzLnBhcmVudC5yZW1vdmVHcm91cCh0aGlzKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnJlbW92ZUdyb3VwKHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRIZWFkZXJzQW5kUm93cygpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHRvdXRwdXQucHVzaCh0aGlzKTtcblx0XHRcblx0XHR0aGlzLl92aXNTZXQoKTtcblx0XHRcblx0XHRcblx0XHRpZih0aGlzLmNhbGNzLnRvcCl7XG5cdFx0XHR0aGlzLmNhbGNzLnRvcC5kZXRhY2hFbGVtZW50KCk7XG5cdFx0XHR0aGlzLmNhbGNzLnRvcC5kZWxldGVDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLmNhbGNzLmJvdHRvbSl7XG5cdFx0XHR0aGlzLmNhbGNzLmJvdHRvbS5kZXRhY2hFbGVtZW50KCk7XG5cdFx0XHR0aGlzLmNhbGNzLmJvdHRvbS5kZWxldGVDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRcblx0XHRcblx0XHRpZih0aGlzLnZpc2libGUpe1xuXHRcdFx0aWYodGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihncm91cCl7XG5cdFx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChncm91cC5nZXRIZWFkZXJzQW5kUm93cygpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwidGFibGVcIiAmJiB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmhhc1RvcENhbGNzKCkpe1xuXHRcdFx0XHRcdHRoaXMuY2FsY3MudG9wID0gdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5nZW5lcmF0ZVRvcFJvdyh0aGlzLnJvd3MpO1xuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHRoaXMuY2FsY3MudG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdCh0aGlzLnJvd3MpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcInRhYmxlXCIgJiYgIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuaGFzQm90dG9tQ2FsY3MoKSl7XG5cdFx0XHRcdFx0dGhpcy5jYWxjcy5ib3R0b20gPSB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmdlbmVyYXRlQm90dG9tUm93KHRoaXMucm93cyk7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy5jYWxjcy5ib3R0b20pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoIXRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCAmJiB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwidGFibGVcIil7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSl7XG5cdFx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5oYXNUb3BDYWxjcygpKXtcblx0XHRcdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuZ3JvdXBDbG9zZWRTaG93Q2FsY3Mpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmNhbGNzLnRvcCA9IHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuZ2VuZXJhdGVUb3BSb3codGhpcy5yb3dzKTtcblx0XHRcdFx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy5jYWxjcy50b3ApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmhhc0JvdHRvbUNhbGNzKCkpe1x0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5ncm91cENsb3NlZFNob3dDYWxjcyl7XG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FsY3MuYm90dG9tID0gdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5nZW5lcmF0ZUJvdHRvbVJvdyh0aGlzLnJvd3MpO1xuXHRcdFx0XHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLmNhbGNzLmJvdHRvbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0RGF0YSh2aXNpYmxlLCB0cmFuc2Zvcm0pe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHR0aGlzLl92aXNTZXQoKTtcblx0XHRcblx0XHRpZighdmlzaWJsZSB8fCAodmlzaWJsZSAmJiB0aGlzLnZpc2libGUpKXtcblx0XHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0b3V0cHV0LnB1c2gocm93LmdldERhdGEodHJhbnNmb3JtIHx8IFwiZGF0YVwiKSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0Um93Q291bnQoKXtcblx0XHR2YXIgY291bnQgPSAwO1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0XHRjb3VudCArPSBncm91cC5nZXRSb3dDb3VudCgpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y291bnQgPSB0aGlzLnJvd3MubGVuZ3RoO1xuXHRcdH1cblx0XHRyZXR1cm4gY291bnQ7XG5cdH1cblxuXHRcblx0dG9nZ2xlVmlzaWJpbGl0eSgpe1xuXHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnNob3coKTtcblx0XHR9XG5cdH1cblx0XG5cdGhpZGUoKXtcblx0XHR0aGlzLnZpc2libGUgPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5yb3dNYW5hZ2VyLmdldFJlbmRlck1vZGUoKSA9PSBcImJhc2ljXCIgJiYgIXRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbil7XG5cdFx0XHRcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWdyb3VwLXZpc2libGVcIik7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dmFyIHJvd3MgPSBncm91cC5nZXRIZWFkZXJzQW5kUm93cygpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRyb3cuZGV0YWNoRWxlbWVudCgpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93RWwpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudXBkYXRlR3JvdXBSb3dzKHRydWUpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudXBkYXRlR3JvdXBSb3dzKHRydWUpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaChcImdyb3VwVmlzaWJpbGl0eUNoYW5nZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSwgZmFsc2UpO1xuXHR9XG5cdFxuXHRzaG93KCl7XG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblx0XHRcblx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5yb3dNYW5hZ2VyLmdldFJlbmRlck1vZGUoKSA9PSBcImJhc2ljXCIgJiYgIXRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbil7XG5cdFx0XHRcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWdyb3VwLXZpc2libGVcIik7XG5cdFx0XHRcblx0XHRcdHZhciBwcmV2ID0gdGhpcy5nZW5lcmF0ZUVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0XHR2YXIgcm93cyA9IGdyb3VwLmdldEhlYWRlcnNBbmRSb3dzKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRcdFx0XHRwcmV2LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHJvd0VsLCBwcmV2Lm5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRcdHJvdy5pbml0aWFsaXplKCk7XG5cdFx0XHRcdFx0XHRwcmV2ID0gcm93RWw7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRcdFx0cHJldi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShyb3dFbCwgcHJldi5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0cm93LmluaXRpYWxpemUoKTtcblx0XHRcdFx0XHRwcmV2ID0gcm93RWw7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudXBkYXRlR3JvdXBSb3dzKHRydWUpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaChcImdyb3VwVmlzaWJpbGl0eUNoYW5nZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSwgdHJ1ZSk7XG5cdH1cblx0XG5cdF92aXNTZXQoKXtcblx0XHR2YXIgZGF0YSA9IFtdO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB0aGlzLnZpc2libGUgPT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFxuXHRcdFx0dGhpcy5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdFx0ZGF0YS5wdXNoKHJvdy5nZXREYXRhKCkpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMudmlzaWJsZSA9IHRoaXMudmlzaWJsZSh0aGlzLmtleSwgdGhpcy5nZXRSb3dDb3VudCgpLCBkYXRhLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cdH1cblx0XG5cdGdldFJvd0dyb3VwKHJvdyl7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2U7XG5cdFx0aWYodGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goZnVuY3Rpb24oZ3JvdXApe1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gZ3JvdXAuZ2V0Um93R3JvdXAocm93KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHJlc3VsdCl7XG5cdFx0XHRcdFx0bWF0Y2ggPSByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMucm93cy5maW5kKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHRyZXR1cm4gaXRlbSA9PT0gcm93O1xuXHRcdFx0fSkpe1xuXHRcdFx0XHRtYXRjaCA9IHRoaXM7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxuXHRcblx0Z2V0U3ViR3JvdXBzKGNvbXBvbmVudCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goZnVuY3Rpb24oY2hpbGQpe1xuXHRcdFx0b3V0cHV0LnB1c2goY29tcG9uZW50ID8gY2hpbGQuZ2V0Q29tcG9uZW50KCkgOiBjaGlsZCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0Um93cyhjb21wb25lbnQsIGluY2x1ZGVDaGlsZHJlbil7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdGlmKGluY2x1ZGVDaGlsZHJlbiAmJiB0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChncm91cC5nZXRSb3dzKGNvbXBvbmVudCwgaW5jbHVkZUNoaWxkcmVuKSk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0XHRvdXRwdXQucHVzaChjb21wb25lbnQgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiByb3cpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdlbmVyYXRlR3JvdXBIZWFkZXJDb250ZW50cygpe1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0XG5cdFx0dmFyIHJvd3MgPSB0aGlzLmdldFJvd3MoZmFsc2UsIHRydWUpO1xuXHRcdFxuXHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0ZGF0YS5wdXNoKHJvdy5nZXREYXRhKCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudENvbnRlbnRzID0gdGhpcy5nZW5lcmF0b3IodGhpcy5rZXksIHRoaXMuZ2V0Um93Q291bnQoKSwgZGF0YSwgdGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XG5cdFx0d2hpbGUodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XG5cdFx0aWYodHlwZW9mIHRoaXMuZWxlbWVudENvbnRlbnRzID09PSBcInN0cmluZ1wiKXtcblx0XHRcdHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLmVsZW1lbnRDb250ZW50cztcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50Q29udGVudHMpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMuYXJyb3dFbGVtZW50LCB0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdH1cblx0XG5cdGdldFBhdGgocGF0aCA9IFtdKSB7XG5cdFx0cGF0aC51bnNoaWZ0KHRoaXMua2V5KTtcblx0XHRpZih0aGlzLnBhcmVudCkge1xuXHRcdFx0dGhpcy5wYXJlbnQuZ2V0UGF0aChwYXRoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhdGg7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vIFN0YW5kYXJkIFJvdyBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy9cblx0XG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50Q29udGVudHMgPyB0aGlzLmVsZW1lbnQgOiB0aGlzLmdlbmVyYXRlRWxlbWVudCgpO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZUVsZW1lbnQoKXtcblx0XHR0aGlzLmFkZEJpbmRpbmdzID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5fdmlzU2V0KCk7XG5cdFx0XG5cdFx0aWYodGhpcy52aXNpYmxlKXtcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWdyb3VwLXZpc2libGVcIik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMuZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aDsgKytpKXtcblx0XHRcdHRoaXMuZWxlbWVudC5jaGlsZE5vZGVzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50LmNoaWxkTm9kZXNbaV0pO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmdlbmVyYXRlR3JvdXBIZWFkZXJDb250ZW50cygpO1xuXHRcdFxuXHRcdC8vIHRoaXMuYWRkQmluZGluZ3MoKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cdFxuXHRkZXRhY2hFbGVtZW50KCl7XG5cdFx0aWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9ub3JtYWxpemUgdGhlIGhlaWdodCBvZiBlbGVtZW50cyBpbiB0aGUgcm93XG5cdG5vcm1hbGl6ZUhlaWdodCgpe1xuXHRcdHRoaXMuc2V0SGVpZ2h0KHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKGZvcmNlKXtcblx0XHRpZighdGhpcy5pbml0aWFsaXplZCB8fCBmb3JjZSl7XG5cdFx0XHR0aGlzLm5vcm1hbGl6ZUhlaWdodCgpO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5oZWlnaHQgPSAwO1xuXHRcdFxuXHRcdGlmKEhlbHBlcnMuZWxWaXNpYmxlKHRoaXMuZWxlbWVudCkpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplKHRydWUpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0SGVpZ2h0KGhlaWdodCl7XG5cdFx0aWYodGhpcy5oZWlnaHQgIT0gaGVpZ2h0KXtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0dGhpcy5vdXRlckhlaWdodCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JldHVybiByb3dzIG91dGVyIGhlaWdodFxuXHRnZXRIZWlnaHQoKXtcblx0XHRyZXR1cm4gdGhpcy5vdXRlckhlaWdodDtcblx0fVxuXHRcblx0Z2V0R3JvdXAoKXtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRcblx0cmVpbml0aWFsaXplSGVpZ2h0KCl7fVxuXHRcblx0Y2FsY0hlaWdodCgpe31cblx0XG5cdHNldENlbGxIZWlnaHQoKXt9XG5cdFxuXHRjbGVhckNlbGxIZWlnaHQoKXt9XG5cdFxuXHRkZWluaXRpYWxpemVIZWlnaHQoKXt9XG5cblx0cmVuZGVyZWQoKXt9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIE9iamVjdCBHZW5lcmF0aW9uIC8vLy8vLy8vLy8vLy8vLy8vXG5cdGdldENvbXBvbmVudCgpe1xuXHRcdGlmKCF0aGlzLmNvbXBvbmVudCl7XG5cdFx0XHR0aGlzLmNvbXBvbmVudCA9IG5ldyBHcm91cENvbXBvbmVudCh0aGlzKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuY29tcG9uZW50O1xuXHR9XG59XG5cbmNsYXNzIEdyb3VwUm93cyBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwiZ3JvdXBSb3dzXCI7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBJRExvb2t1cHMgPSBmYWxzZTsgLy9lbmFibGUgdGFibGUgZ3JvdXBpbmcgYW5kIHNldCBmaWVsZCB0byBncm91cCBieVxuXHRcdHRoaXMuc3RhcnRPcGVuID0gW2Z1bmN0aW9uKCl7cmV0dXJuIGZhbHNlO31dOyAvL3N0YXJ0aW5nIHN0YXRlIG9mIGdyb3VwXG5cdFx0dGhpcy5oZWFkZXJHZW5lcmF0b3IgPSBbZnVuY3Rpb24oKXtyZXR1cm4gXCJcIjt9XTtcblx0XHR0aGlzLmdyb3VwTGlzdCA9IFtdOyAvL29yZGVyZWQgbGlzdCBvZiBncm91cHNcblx0XHR0aGlzLmFsbG93ZWRWYWx1ZXMgPSBmYWxzZTtcblx0XHR0aGlzLmdyb3VwcyA9IHt9OyAvL2hvbGQgcm93IGdyb3Vwc1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheUhhbmRsZXIgPSB0aGlzLmdldFJvd3MuYmluZCh0aGlzKTtcblxuXHRcdHRoaXMuYmxvY2tSZWRyYXcgPSBmYWxzZTtcblx0XHRcblx0XHQvL3JlZ2lzdGVyIHRhYmxlIG9wdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cEJ5XCIsIGZhbHNlKTsgLy9lbmFibGUgdGFibGUgZ3JvdXBpbmcgYW5kIHNldCBmaWVsZCB0byBncm91cCBieVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwU3RhcnRPcGVuXCIsIHRydWUpOyAvL3N0YXJ0aW5nIHN0YXRlIG9mIGdyb3VwXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBWYWx1ZXNcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwVXBkYXRlT25DZWxsRWRpdFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJcIiwgZmFsc2UpOyAvL2hlYWRlciBnZW5lcmF0aW9uIGZ1bmN0aW9uXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJQcmludFwiLCBudWxsKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cEhlYWRlckNsaXBib2FyZFwiLCBudWxsKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cEhlYWRlckh0bWxPdXRwdXRcIiwgbnVsbCk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJEb3dubG9hZFwiLCBudWxsKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cFRvZ2dsZUVsZW1lbnRcIiwgXCJhcnJvd1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cENsb3NlZFNob3dDYWxjc1wiLCBmYWxzZSk7XG5cdFx0XG5cdFx0Ly9yZWdpc3RlciB0YWJsZSBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEdyb3VwQnlcIiwgdGhpcy5zZXRHcm91cEJ5LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0R3JvdXBWYWx1ZXNcIiwgdGhpcy5zZXRHcm91cFZhbHVlcy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEdyb3VwU3RhcnRPcGVuXCIsIHRoaXMuc2V0R3JvdXBTdGFydE9wZW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRHcm91cEhlYWRlclwiLCB0aGlzLnNldEdyb3VwSGVhZGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0R3JvdXBzXCIsIHRoaXMudXNlckdldEdyb3Vwcy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEdyb3VwZWREYXRhXCIsIHRoaXMudXNlckdldEdyb3VwZWREYXRhLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdC8vcmVnaXN0ZXIgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImdldEdyb3VwXCIsIHRoaXMucm93R2V0R3JvdXAuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdC8vaW5pdGlhbGl6ZSBncm91cCBjb25maWd1cmF0aW9uXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5fYmxvY2tSZWRyYXdpbmcuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXdpcGVcIiwgdGhpcy5fYmxvY2tSZWRyYXdpbmcuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXdpcGVkXCIsIHRoaXMuX3Jlc3RvcmVfcmVkcmF3aW5nLmJpbmQodGhpcykpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwVXBkYXRlT25DZWxsRWRpdCl7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS11cGRhdGVkXCIsIHRoaXMuY2VsbFVwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtY2hhbmdlZFwiLCB0aGlzLnJlYXNzaWduUm93VG9Hcm91cC5iaW5kKHRoaXMpLCAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1idWlsdFwiLCB0aGlzLmNvbmZpZ3VyZUdyb3VwU2V0dXAuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0aW5nXCIsIHRoaXMucm93RGVsZXRpbmcuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGVkXCIsIHRoaXMucm93c1VwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC1ob3Jpem9udGFsXCIsIHRoaXMuc2Nyb2xsSGVhZGVycy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy13aXBlXCIsIHRoaXMud2lwZS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy1hZGRlZFwiLCB0aGlzLnJvd3NVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctbW92aW5nXCIsIHRoaXMucm93TW92aW5nLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkaW5nLWluZGV4XCIsIHRoaXMucm93QWRkaW5nSW5kZXguYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy1zYW1wbGVcIiwgdGhpcy5yb3dTYW1wbGUuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicmVuZGVyLXZpcnR1YWwtZmlsbFwiLCB0aGlzLnZpcnR1YWxSZW5kZXJGaWxsLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZ2lzdGVyRGlzcGxheUhhbmRsZXIodGhpcy5kaXNwbGF5SGFuZGxlciwgMjApO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdF9ibG9ja1JlZHJhd2luZygpe1xuXHRcdHRoaXMuYmxvY2tSZWRyYXcgPSB0cnVlO1xuXHR9XG5cblx0X3Jlc3RvcmVfcmVkcmF3aW5nKCl7XG5cdFx0dGhpcy5ibG9ja1JlZHJhdyA9IGZhbHNlO1xuXHR9XG5cblx0Y29uZmlndXJlR3JvdXBTZXR1cCgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHZhciBncm91cEJ5ID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnksXG5cdFx0XHRzdGFydE9wZW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBTdGFydE9wZW4sXG5cdFx0XHRncm91cEhlYWRlciA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cEhlYWRlcjtcblx0XHRcdFxuXHRcdFx0dGhpcy5hbGxvd2VkVmFsdWVzID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwVmFsdWVzO1xuXHRcdFx0XG5cdFx0XHRpZihBcnJheS5pc0FycmF5KGdyb3VwQnkpICYmIEFycmF5LmlzQXJyYXkoZ3JvdXBIZWFkZXIpICYmIGdyb3VwQnkubGVuZ3RoID4gZ3JvdXBIZWFkZXIubGVuZ3RoKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRXJyb3IgY3JlYXRpbmcgZ3JvdXAgaGVhZGVycywgZ3JvdXBIZWFkZXIgYXJyYXkgaXMgc2hvcnRlciB0aGFuIGdyb3VwQnkgYXJyYXlcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuaGVhZGVyR2VuZXJhdG9yID0gW2Z1bmN0aW9uKCl7cmV0dXJuIFwiXCI7fV07XG5cdFx0XHR0aGlzLnN0YXJ0T3BlbiA9IFtmdW5jdGlvbigpe3JldHVybiBmYWxzZTt9XTsgLy9zdGFydGluZyBzdGF0ZSBvZiBncm91cFxuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwiZ3JvdXBzfGl0ZW1cIiwgKGxhbmdWYWx1ZSwgbGFuZykgPT4ge1xuXHRcdFx0XHR0aGlzLmhlYWRlckdlbmVyYXRvclswXSA9ICh2YWx1ZSwgY291bnQsIGRhdGEpID0+IHsgLy9oZWFkZXIgbGF5b3V0IGZ1bmN0aW9uXG5cdFx0XHRcdFx0cmV0dXJuICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogdmFsdWUpICsgXCI8c3Bhbj4oXCIgKyBjb3VudCArIFwiIFwiICsgKChjb3VudCA9PT0gMSkgPyBsYW5nVmFsdWUgOiBsYW5nLmdyb3Vwcy5pdGVtcykgKyBcIik8L3NwYW4+XCI7XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cElETG9va3VwcyA9IFtdO1xuXHRcdFx0XG5cdFx0XHRpZihncm91cEJ5KXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiICYmIHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcImJvdGhcIil7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnJlbW92ZUNhbGNzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgY29scyA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRSZWFsQ29sdW1ucygpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbHMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0XHRpZihjb2wuZGVmaW5pdGlvbi50b3BDYWxjKXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmluaXRpYWxpemVUb3BSb3coKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoY29sLmRlZmluaXRpb24uYm90dG9tQ2FsYyl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5pbml0aWFsaXplQm90dG9tUm93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoIUFycmF5LmlzQXJyYXkoZ3JvdXBCeSkpe1xuXHRcdFx0XHRncm91cEJ5ID0gW2dyb3VwQnldO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRncm91cEJ5LmZvckVhY2goKGdyb3VwLCBpKSA9PiB7XG5cdFx0XHRcdHZhciBsb29rdXBGdW5jLCBjb2x1bW47XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0eXBlb2YgZ3JvdXAgPT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHRsb29rdXBGdW5jID0gZ3JvdXA7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlGaWVsZChncm91cCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHRcdGxvb2t1cEZ1bmMgPSBmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRsb29rdXBGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBkYXRhW2dyb3VwXTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmdyb3VwSURMb29rdXBzLnB1c2goe1xuXHRcdFx0XHRcdGZpZWxkOiB0eXBlb2YgZ3JvdXAgPT09IFwiZnVuY3Rpb25cIiA/IGZhbHNlIDogZ3JvdXAsXG5cdFx0XHRcdFx0ZnVuYzpsb29rdXBGdW5jLFxuXHRcdFx0XHRcdHZhbHVlczp0aGlzLmFsbG93ZWRWYWx1ZXMgPyB0aGlzLmFsbG93ZWRWYWx1ZXNbaV0gOiBmYWxzZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoc3RhcnRPcGVuKXtcblx0XHRcdFx0aWYoIUFycmF5LmlzQXJyYXkoc3RhcnRPcGVuKSl7XG5cdFx0XHRcdFx0c3RhcnRPcGVuID0gW3N0YXJ0T3Blbl07XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHN0YXJ0T3Blbi5mb3JFYWNoKChsZXZlbCkgPT4ge1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuc3RhcnRPcGVuID0gc3RhcnRPcGVuO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihncm91cEhlYWRlcil7XG5cdFx0XHRcdHRoaXMuaGVhZGVyR2VuZXJhdG9yID0gQXJyYXkuaXNBcnJheShncm91cEhlYWRlcikgPyBncm91cEhlYWRlciA6IFtncm91cEhlYWRlcl07XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5ncm91cExpc3QgPSBbXTtcblx0XHRcdHRoaXMuZ3JvdXBzID0ge307XG5cdFx0fVxuXHR9XG5cdFxuXHRyb3dTYW1wbGUocm93cywgcHJldlZhbHVlKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR2YXIgZ3JvdXAgPSB0aGlzLmdldEdyb3VwcyhmYWxzZSlbMF07XG5cdFx0XHRcblx0XHRcdHByZXZWYWx1ZS5wdXNoKGdyb3VwLmdldFJvd3MoZmFsc2UpWzBdKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHByZXZWYWx1ZTtcblx0fVxuXHRcblx0dmlydHVhbFJlbmRlckZpbGwoKXtcblx0XHR2YXIgZWwgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIudGFibGVFbGVtZW50O1xuXHRcdHZhciByb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFZpc2libGVSb3dzKCk7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0cm93cyA9IHJvd3MuZmlsdGVyKChyb3cpID0+IHtcblx0XHRcdFx0cmV0dXJuIHJvdy50eXBlICE9PSBcImdyb3VwXCI7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0ZWwuc3R5bGUubWluV2lkdGggPSAhcm93cy5sZW5ndGggPyB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIiA6IFwiXCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHJvd3M7XG5cdFx0fVxuXHR9XG5cdFxuXHRyb3dBZGRpbmdJbmRleChyb3csIGluZGV4LCB0b3Ape1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHRoaXMuYXNzaWduUm93VG9Hcm91cChyb3cpO1xuXHRcdFx0XG5cdFx0XHR2YXIgZ3JvdXBSb3dzID0gcm93Lm1vZHVsZXMuZ3JvdXAucm93cztcblx0XHRcdFxuXHRcdFx0aWYoZ3JvdXBSb3dzLmxlbmd0aCA+IDEpe1xuXHRcdFx0XHRpZighaW5kZXggfHwgKGluZGV4ICYmIGdyb3VwUm93cy5pbmRleE9mKGluZGV4KSA9PSAtMSkpe1xuXHRcdFx0XHRcdGlmKHRvcCl7XG5cdFx0XHRcdFx0XHRpZihncm91cFJvd3NbMF0gIT09IHJvdyl7XG5cdFx0XHRcdFx0XHRcdGluZGV4ID0gZ3JvdXBSb3dzWzBdO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIubW92ZVJvd0luQXJyYXkocm93Lm1vZHVsZXMuZ3JvdXAucm93cywgcm93LCBpbmRleCwgIXRvcCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoZ3JvdXBSb3dzW2dyb3VwUm93cy5sZW5ndGggLTFdICE9PSByb3cpe1xuXHRcdFx0XHRcdFx0XHRpbmRleCA9IGdyb3VwUm93c1tncm91cFJvd3MubGVuZ3RoIC0xXTtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dJbkFycmF5KHJvdy5tb2R1bGVzLmdyb3VwLnJvd3MsIHJvdywgaW5kZXgsICF0b3ApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93SW5BcnJheShyb3cubW9kdWxlcy5ncm91cC5yb3dzLCByb3csIGluZGV4LCAhdG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gaW5kZXg7XG5cdFx0fVxuXHR9XG5cdFxuXHR0cmFja0NoYW5nZXMoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwiZ3JvdXAtY2hhbmdlZFwiKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHNldEdyb3VwQnkoZ3JvdXBzKXtcblx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSA9IGdyb3Vwcztcblx0XHRcblx0XHRpZighdGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemUoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jb25maWd1cmVHcm91cFNldHVwKCk7XG5cblx0XHRpZighZ3JvdXBzICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzID09PSB0cnVlKXtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5yZWluaXRpYWxpemVDYWxjcygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlZnJlc2hEYXRhKCk7XG5cdFx0XG5cdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0fVxuXHRcblx0c2V0R3JvdXBWYWx1ZXMoZ3JvdXBWYWx1ZXMpe1xuXHRcdHRoaXMudGFibGUub3B0aW9ucy5ncm91cFZhbHVlcyA9IGdyb3VwVmFsdWVzO1xuXHRcdHRoaXMuY29uZmlndXJlR3JvdXBTZXR1cCgpO1xuXHRcdHRoaXMucmVmcmVzaERhdGEoKTtcblx0XHRcblx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHR9XG5cdFxuXHRzZXRHcm91cFN0YXJ0T3Blbih2YWx1ZXMpe1xuXHRcdHRoaXMudGFibGUub3B0aW9ucy5ncm91cFN0YXJ0T3BlbiA9IHZhbHVlcztcblx0XHR0aGlzLmNvbmZpZ3VyZUdyb3VwU2V0dXAoKTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR0aGlzLnJlZnJlc2hEYXRhKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiR3JvdXBpbmcgVXBkYXRlIC0gY2FudCByZWZyZXNoIHZpZXcsIG5vIGdyb3VwcyBoYXZlIGJlZW4gc2V0XCIpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0R3JvdXBIZWFkZXIodmFsdWVzKXtcblx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBIZWFkZXIgPSB2YWx1ZXM7XG5cdFx0dGhpcy5jb25maWd1cmVHcm91cFNldHVwKCk7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5yZWZyZXNoRGF0YSgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkdyb3VwaW5nIFVwZGF0ZSAtIGNhbnQgcmVmcmVzaCB2aWV3LCBubyBncm91cHMgaGF2ZSBiZWVuIHNldFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdHVzZXJHZXRHcm91cHModmFsdWVzKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRHcm91cHModHJ1ZSk7XG5cdH1cblx0XG5cdC8vIGdldCBncm91cGVkIHRhYmxlIGRhdGEgaW4gdGhlIHNhbWUgZm9ybWF0IGFzIGdldERhdGEoKVxuXHR1c2VyR2V0R3JvdXBlZERhdGEoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgPyB0aGlzLmdldEdyb3VwZWREYXRhKCkgOiB0aGlzLmdldERhdGEoKTtcblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gQ29tcG9uZW50IEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyb3dHZXRHcm91cChyb3cpe1xuXHRcdHJldHVybiByb3cubW9kdWxlcy5ncm91cCA/IHJvdy5tb2R1bGVzLmdyb3VwLmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyb3dNb3ZpbmcoZnJvbSwgdG8sIGFmdGVyKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHRpZighYWZ0ZXIgJiYgdG8gaW5zdGFuY2VvZiBHcm91cCl7XG5cdFx0XHRcdHRvID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnByZXZEaXNwbGF5Um93KGZyb20pIHx8IHRvO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR2YXIgdG9Hcm91cCA9IHRvIGluc3RhbmNlb2YgR3JvdXAgPyB0byA6IHRvLm1vZHVsZXMuZ3JvdXA7XG5cdFx0XHR2YXIgZnJvbUdyb3VwID0gZnJvbSBpbnN0YW5jZW9mIEdyb3VwID8gZnJvbSA6IGZyb20ubW9kdWxlcy5ncm91cDtcblx0XHRcdFxuXHRcdFx0aWYodG9Hcm91cCA9PT0gZnJvbUdyb3VwKXtcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dJbkFycmF5KHRvR3JvdXAucm93cywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoZnJvbUdyb3VwKXtcblx0XHRcdFx0XHRmcm9tR3JvdXAucmVtb3ZlUm93KGZyb20pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0b0dyb3VwLmluc2VydFJvdyhmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdHJvd0RlbGV0aW5nKHJvdyl7XG5cdFx0Ly9yZW1vdmUgZnJvbSBncm91cFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ICYmIHJvdy5tb2R1bGVzLmdyb3VwKXtcblx0XHRcdHJvdy5tb2R1bGVzLmdyb3VwLnJlbW92ZVJvdyhyb3cpO1xuXHRcdH1cblx0fVxuXHRcblx0cm93c1VwZGF0ZWQocm93KXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR0aGlzLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9XHRcblx0fVxuXHRcblx0Y2VsbFVwZGF0ZWQoY2VsbCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5yZWFzc2lnblJvd1RvR3JvdXAoY2VsbC5yb3cpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gYXBwcm9wcmlhdGUgcm93cyB3aXRoIGdyb3VwIGhlYWRlcnNcblx0Z2V0Um93cyhyb3dzKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLmdyb3VwSURMb29rdXBzLmxlbmd0aCl7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFHcm91cGluZ1wiKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5nZW5lcmF0ZUdyb3Vwcyhyb3dzKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhR3JvdXBlZFwiKSl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFHcm91cGVkXCIsIHRoaXMuZ2V0R3JvdXBzKHRydWUpKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRoaXMudXBkYXRlR3JvdXBSb3dzKCk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gcm93cy5zbGljZSgwKTtcblx0XHR9XG5cdH1cblx0XG5cdGdldEdyb3Vwcyhjb21wb25lbnQpe1xuXHRcdHZhciBncm91cENvbXBvbmVudHMgPSBbXTtcblx0XHRcblx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwKXtcblx0XHRcdGdyb3VwQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCA/IGdyb3VwLmdldENvbXBvbmVudCgpIDogZ3JvdXApO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBncm91cENvbXBvbmVudHM7XG5cdH1cblx0XG5cdGdldENoaWxkR3JvdXBzKGdyb3VwKXtcblx0XHR2YXIgZ3JvdXBDb21wb25lbnRzID0gW107XG5cdFx0XG5cdFx0aWYoIWdyb3VwKXtcblx0XHRcdGdyb3VwID0gdGhpcztcblx0XHR9XG5cdFx0XG5cdFx0Z3JvdXAuZ3JvdXBMaXN0LmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHRpZihjaGlsZC5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0Z3JvdXBDb21wb25lbnRzID0gZ3JvdXBDb21wb25lbnRzLmNvbmNhdCh0aGlzLmdldENoaWxkR3JvdXBzKGNoaWxkKSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGdyb3VwQ29tcG9uZW50cy5wdXNoKGNoaWxkKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZ3JvdXBDb21wb25lbnRzO1xuXHR9XG5cdFxuXHR3aXBlKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihncm91cCl7XG5cdFx0XHRcdGdyb3VwLndpcGUoKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5ncm91cHMgPSB7fTtcblx0XHR9XG5cdH1cblx0XG5cdHB1bGxHcm91cExpc3REYXRhKGdyb3VwTGlzdCkge1xuXHRcdHZhciBncm91cExpc3REYXRhID0gW107XG5cdFx0XG5cdFx0Z3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHR2YXIgZ3JvdXBIZWFkZXIgPSB7fTtcblx0XHRcdGdyb3VwSGVhZGVyLmxldmVsID0gMDtcblx0XHRcdGdyb3VwSGVhZGVyLnJvd0NvdW50ID0gMDtcblx0XHRcdGdyb3VwSGVhZGVyLmhlYWRlckNvbnRlbnQgPSBcIlwiO1xuXHRcdFx0dmFyIGNoaWxkRGF0YSA9IFtdO1xuXHRcdFx0XG5cdFx0XHRpZiAoZ3JvdXAuaGFzU3ViR3JvdXBzKSB7XG5cdFx0XHRcdGNoaWxkRGF0YSA9IHRoaXMucHVsbEdyb3VwTGlzdERhdGEoZ3JvdXAuZ3JvdXBMaXN0KTtcblx0XHRcdFx0XG5cdFx0XHRcdGdyb3VwSGVhZGVyLmxldmVsID0gZ3JvdXAubGV2ZWw7XG5cdFx0XHRcdGdyb3VwSGVhZGVyLnJvd0NvdW50ID0gY2hpbGREYXRhLmxlbmd0aCAtIGdyb3VwLmdyb3VwTGlzdC5sZW5ndGg7IC8vIGRhdGEgbGVuZ3RoIG1pbnVzIG51bWJlciBvZiBzdWItaGVhZGVyc1xuXHRcdFx0XHRncm91cEhlYWRlci5oZWFkZXJDb250ZW50ID0gZ3JvdXAuZ2VuZXJhdG9yKGdyb3VwLmtleSwgZ3JvdXBIZWFkZXIucm93Q291bnQsIGdyb3VwLnJvd3MsIGdyb3VwKTtcblx0XHRcdFx0XG5cdFx0XHRcdGdyb3VwTGlzdERhdGEucHVzaChncm91cEhlYWRlcik7XG5cdFx0XHRcdGdyb3VwTGlzdERhdGEgPSBncm91cExpc3REYXRhLmNvbmNhdChjaGlsZERhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Z3JvdXBIZWFkZXIubGV2ZWwgPSBncm91cC5sZXZlbDtcblx0XHRcdFx0Z3JvdXBIZWFkZXIuaGVhZGVyQ29udGVudCA9IGdyb3VwLmdlbmVyYXRvcihncm91cC5rZXksIGdyb3VwLnJvd3MubGVuZ3RoLCBncm91cC5yb3dzLCBncm91cCk7XG5cdFx0XHRcdGdyb3VwSGVhZGVyLnJvd0NvdW50ID0gZ3JvdXAuZ2V0Um93cygpLmxlbmd0aDtcblx0XHRcdFx0XG5cdFx0XHRcdGdyb3VwTGlzdERhdGEucHVzaChncm91cEhlYWRlcik7XG5cdFx0XHRcdFxuXHRcdFx0XHRncm91cC5nZXRSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0Z3JvdXBMaXN0RGF0YS5wdXNoKHJvdy5nZXREYXRhKFwiZGF0YVwiKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBncm91cExpc3REYXRhO1xuXHR9XG5cdFxuXHRnZXRHcm91cGVkRGF0YSgpe1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLnB1bGxHcm91cExpc3REYXRhKHRoaXMuZ3JvdXBMaXN0KTtcblx0fVxuXHRcblx0Z2V0Um93R3JvdXAocm93KXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLm9wdGlvbnMoXCJkYXRhVHJlZVwiKSl7XG5cdFx0XHRyb3cgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZGF0YVRyZWUuZ2V0VHJlZVBhcmVudFJvb3Qocm93KTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdHZhciByZXN1bHQgPSBncm91cC5nZXRSb3dHcm91cChyb3cpO1xuXHRcdFx0XG5cdFx0XHRpZihyZXN1bHQpe1xuXHRcdFx0XHRtYXRjaCA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gbWF0Y2g7XG5cdH1cblx0XG5cdGNvdW50R3JvdXBzKCl7XG5cdFx0cmV0dXJuIHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aDtcblx0fVxuXHRcblx0Z2VuZXJhdGVHcm91cHMocm93cyl7XG5cdFx0dmFyIG9sZEdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBzID0ge307XG5cdFx0dGhpcy5ncm91cExpc3QgPSBbXTtcblx0XHRcblx0XHRpZih0aGlzLmFsbG93ZWRWYWx1ZXMgJiYgdGhpcy5hbGxvd2VkVmFsdWVzWzBdKXtcblx0XHRcdHRoaXMuYWxsb3dlZFZhbHVlc1swXS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmNyZWF0ZUdyb3VwKHZhbHVlLCAwLCBvbGRHcm91cHMpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHRoaXMuYXNzaWduUm93VG9FeGlzdGluZ0dyb3VwKHJvdywgb2xkR3JvdXBzKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHRoaXMuYXNzaWduUm93VG9Hcm91cChyb3csIG9sZEdyb3Vwcyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0T2JqZWN0LnZhbHVlcyhvbGRHcm91cHMpLmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRncm91cC53aXBlKHRydWUpO1xuXHRcdH0pO1x0XG5cdH1cblx0XG5cdFxuXHRjcmVhdGVHcm91cChncm91cElELCBsZXZlbCwgb2xkR3JvdXBzKXtcblx0XHR2YXIgZ3JvdXBLZXkgPSBsZXZlbCArIFwiX1wiICsgZ3JvdXBJRCxcblx0XHRncm91cDtcblx0XHRcblx0XHRvbGRHcm91cHMgPSBvbGRHcm91cHMgfHwgW107XG5cdFx0XG5cdFx0Z3JvdXAgPSBuZXcgR3JvdXAodGhpcywgZmFsc2UsIGxldmVsLCBncm91cElELCB0aGlzLmdyb3VwSURMb29rdXBzWzBdLmZpZWxkLCB0aGlzLmhlYWRlckdlbmVyYXRvclswXSwgb2xkR3JvdXBzW2dyb3VwS2V5XSk7XG5cdFx0XG5cdFx0dGhpcy5ncm91cHNbZ3JvdXBLZXldID0gZ3JvdXA7XG5cdFx0dGhpcy5ncm91cExpc3QucHVzaChncm91cCk7XG5cdH1cblx0XG5cdGFzc2lnblJvd1RvRXhpc3RpbmdHcm91cChyb3csIG9sZEdyb3Vwcyl7XG5cdFx0dmFyIGdyb3VwSUQgPSB0aGlzLmdyb3VwSURMb29rdXBzWzBdLmZ1bmMocm93LmdldERhdGEoKSksXG5cdFx0Z3JvdXBLZXkgPSBcIjBfXCIgKyBncm91cElEO1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSl7XG5cdFx0XHR0aGlzLmdyb3Vwc1tncm91cEtleV0uYWRkUm93KHJvdyk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhc3NpZ25Sb3dUb0dyb3VwKHJvdywgb2xkR3JvdXBzKXtcblx0XHR2YXIgZ3JvdXBJRCA9IHRoaXMuZ3JvdXBJRExvb2t1cHNbMF0uZnVuYyhyb3cuZ2V0RGF0YSgpKSxcblx0XHRuZXdHcm91cE5lZWRlZCA9ICF0aGlzLmdyb3Vwc1tcIjBfXCIgKyBncm91cElEXTtcblx0XHRcblx0XHRpZihuZXdHcm91cE5lZWRlZCl7XG5cdFx0XHR0aGlzLmNyZWF0ZUdyb3VwKGdyb3VwSUQsIDAsIG9sZEdyb3Vwcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZ3JvdXBzW1wiMF9cIiArIGdyb3VwSURdLmFkZFJvdyhyb3cpO1xuXHRcdFxuXHRcdHJldHVybiAhbmV3R3JvdXBOZWVkZWQ7XG5cdH1cblx0XG5cdHJlYXNzaWduUm93VG9Hcm91cChyb3cpe1xuXHRcdGlmKHJvdy50eXBlID09PSBcInJvd1wiKXtcblx0XHRcdHZhciBvbGRSb3dHcm91cCA9IHJvdy5tb2R1bGVzLmdyb3VwLFxuXHRcdFx0b2xkR3JvdXBQYXRoID0gb2xkUm93R3JvdXAuZ2V0UGF0aCgpLFxuXHRcdFx0bmV3R3JvdXBQYXRoID0gdGhpcy5nZXRFeHBlY3RlZFBhdGgocm93KSxcblx0XHRcdHNhbWVQYXRoO1xuXHRcdFx0XG5cdFx0XHQvLyBmaWd1cmUgb3V0IGlmIG5ldyBncm91cCBwYXRoIGlzIHRoZSBzYW1lIGFzIG9sZCBncm91cCBwYXRoXG5cdFx0XHRzYW1lUGF0aCA9IChvbGRHcm91cFBhdGgubGVuZ3RoID09IG5ld0dyb3VwUGF0aC5sZW5ndGgpICYmIG9sZEdyb3VwUGF0aC5ldmVyeSgoZWxlbWVudCwgaW5kZXgpID0+IHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQgPT09IG5ld0dyb3VwUGF0aFtpbmRleF07XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Ly8gcmVmcmVzaCBpZiB0aGV5IG5ldyBwYXRoIGFuZCBvbGQgcGF0aCBhcmVuJ3QgdGhlIHNhbWUgKGFrYSB0aGUgcm93J3MgZ3JvdXBpbmdzIGhhdmUgY2hhbmdlZClcblx0XHRcdGlmKCFzYW1lUGF0aCkge1xuXHRcdFx0XHRvbGRSb3dHcm91cC5yZW1vdmVSb3cocm93KTtcblx0XHRcdFx0dGhpcy5hc3NpZ25Sb3dUb0dyb3VwKHJvdywgdGhpcy5ncm91cHMpO1xuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Z2V0RXhwZWN0ZWRQYXRoKHJvdykge1xuXHRcdHZhciBncm91cFBhdGggPSBbXSwgcm93RGF0YSA9IHJvdy5nZXREYXRhKCk7XG5cdFx0XG5cdFx0dGhpcy5ncm91cElETG9va3Vwcy5mb3JFYWNoKChncm91cElkKSA9PiB7XG5cdFx0XHRncm91cFBhdGgucHVzaChncm91cElkLmZ1bmMocm93RGF0YSkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBncm91cFBhdGg7XG5cdH1cblx0XG5cdHVwZGF0ZUdyb3VwUm93cyhmb3JjZSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoIXRoaXMuYmxvY2tSZWRyYXcpe1xuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChncm91cC5nZXRIZWFkZXJzQW5kUm93cygpKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihmb3JjZSl7XG5cdFx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdHNjcm9sbEhlYWRlcnMobGVmdCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWwgPT09IFwidmlydHVhbFwiKXtcblx0XHRcdFx0bGVmdCAtPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIudkRvbVBhZExlZnQ7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGxlZnQgPSBsZWZ0ICsgXCJweFwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0XHRncm91cC5zY3JvbGxIZWFkZXIobGVmdCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdHJlbW92ZUdyb3VwKGdyb3VwKXtcblx0XHR2YXIgZ3JvdXBLZXkgPSBncm91cC5sZXZlbCArIFwiX1wiICsgZ3JvdXAua2V5LFxuXHRcdGluZGV4O1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSl7XG5cdFx0XHRkZWxldGUgdGhpcy5ncm91cHNbZ3JvdXBLZXldO1xuXHRcdFx0XG5cdFx0XHRpbmRleCA9IHRoaXMuZ3JvdXBMaXN0LmluZGV4T2YoZ3JvdXApO1xuXHRcdFx0XG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5ncm91cExpc3Quc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNoZWNrQmFzaWNNb2RlR3JvdXBIZWFkZXJXaWR0aCgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnRhYmxlRWxlbWVudCxcblx0XHRvbmx5R3JvdXBIZWFkZXJzID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3csIGluZGV4KSA9Pntcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zdHlsZVJvdyhyb3csIGluZGV4KTtcblx0XHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQocm93LmdldEVsZW1lbnQoKSk7XG5cdFx0XHRyb3cuaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHRcdFxuXHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdG9ubHlHcm91cEhlYWRlcnMgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZihvbmx5R3JvdXBIZWFkZXJzKXtcblx0XHRcdGVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCJcIjtcblx0XHR9XG5cdH1cblx0XG59XG5cbnZhciBkZWZhdWx0VW5kb2VycyA9IHtcblx0Y2VsbEVkaXQ6IGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0YWN0aW9uLmNvbXBvbmVudC5zZXRWYWx1ZVByb2Nlc3NEYXRhKGFjdGlvbi5kYXRhLm9sZFZhbHVlKTtcblx0XHRhY3Rpb24uY29tcG9uZW50LmNlbGxSZW5kZXJlZCgpO1xuXHR9LFxuXG5cdHJvd0FkZDogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHRhY3Rpb24uY29tcG9uZW50LmRlbGV0ZUFjdHVhbCgpO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmNoZWNrUGxhY2Vob2xkZXIoKTtcblx0fSxcblxuXHRyb3dEZWxldGU6IGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0dmFyIG5ld1JvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5hZGRSb3dBY3R1YWwoYWN0aW9uLmRhdGEuZGF0YSwgYWN0aW9uLmRhdGEucG9zLCBhY3Rpb24uZGF0YS5pbmRleCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImdyb3VwUm93c1wiKSl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZWJpbmRSb3coYWN0aW9uLmNvbXBvbmVudCwgbmV3Um93KTtcblxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5jaGVja1BsYWNlaG9sZGVyKCk7XG5cdH0sXG5cblx0cm93TW92ZTogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHR2YXIgYWZ0ZXIgPSAoYWN0aW9uLmRhdGEucG9zRnJvbSAgLSBhY3Rpb24uZGF0YS5wb3NUbykgPiAwO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dBY3R1YWwoYWN0aW9uLmNvbXBvbmVudCwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21Qb3NpdGlvbihhY3Rpb24uZGF0YS5wb3NGcm9tKSwgYWZ0ZXIpO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMoKTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdH0sXG59O1xuXG52YXIgZGVmYXVsdFJlZG9lcnMgPSB7XG5cdGNlbGxFZGl0OiBmdW5jdGlvbihhY3Rpb24pe1xuXHRcdGFjdGlvbi5jb21wb25lbnQuc2V0VmFsdWVQcm9jZXNzRGF0YShhY3Rpb24uZGF0YS5uZXdWYWx1ZSk7XG5cdFx0YWN0aW9uLmNvbXBvbmVudC5jZWxsUmVuZGVyZWQoKTtcblx0fSxcblxuXHRyb3dBZGQ6IGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0dmFyIG5ld1JvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5hZGRSb3dBY3R1YWwoYWN0aW9uLmRhdGEuZGF0YSwgYWN0aW9uLmRhdGEucG9zLCBhY3Rpb24uZGF0YS5pbmRleCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImdyb3VwUm93c1wiKSl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZWJpbmRSb3coYWN0aW9uLmNvbXBvbmVudCwgbmV3Um93KTtcblxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5jaGVja1BsYWNlaG9sZGVyKCk7XG5cdH0sXG5cblx0cm93RGVsZXRlOmZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0YWN0aW9uLmNvbXBvbmVudC5kZWxldGVBY3R1YWwoKTtcblxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5jaGVja1BsYWNlaG9sZGVyKCk7XG5cdH0sXG5cblx0cm93TW92ZTogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIubW92ZVJvd0FjdHVhbChhY3Rpb24uY29tcG9uZW50LCB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93RnJvbVBvc2l0aW9uKGFjdGlvbi5kYXRhLnBvc1RvKSwgYWN0aW9uLmRhdGEuYWZ0ZXIpO1xuXHRcdFxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWdlbmVyYXRlUm93UG9zaXRpb25zKCk7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHR9LFxufTtcblxudmFyIGJpbmRpbmdzJDEgPSB7XHJcblx0dW5kbzpbXCJjdHJsICsgOTBcIiwgXCJtZXRhICsgOTBcIl0sXHJcblx0cmVkbzpbXCJjdHJsICsgODlcIiwgXCJtZXRhICsgODlcIl0sXHJcbn07XG5cbnZhciBhY3Rpb25zJDEgPSB7XHJcblx0dW5kbzpmdW5jdGlvbihlKXtcclxuXHRcdHZhciBjZWxsID0gZmFsc2U7XHJcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaGlzdG9yeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImhpc3RvcnlcIikgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJlZGl0XCIpKXtcclxuXHJcblx0XHRcdGNlbGwgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbDtcclxuXHJcblx0XHRcdGlmKCFjZWxsKXtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmhpc3RvcnkudW5kbygpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cmVkbzpmdW5jdGlvbihlKXtcclxuXHRcdHZhciBjZWxsID0gZmFsc2U7XHJcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaGlzdG9yeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImhpc3RvcnlcIikgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJlZGl0XCIpKXtcclxuXHJcblx0XHRcdGNlbGwgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbDtcclxuXHJcblx0XHRcdGlmKCFjZWxsKXtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmhpc3RvcnkucmVkbygpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxufTtcblxudmFyIGV4dGVuc2lvbnMkMyA9IHtcclxuXHRrZXliaW5kaW5nczp7XHJcblx0XHRiaW5kaW5nczpiaW5kaW5ncyQxLFxyXG5cdFx0YWN0aW9uczphY3Rpb25zJDFcclxuXHR9LFxyXG59O1xuXG5jbGFzcyBIaXN0b3J5IGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJoaXN0b3J5XCI7XG5cdHN0YXRpYyBtb2R1bGVFeHRlbnNpb25zID0gZXh0ZW5zaW9ucyQzO1xuXG5cdC8vbG9hZCBkZWZhdWx0c1xuXHRzdGF0aWMgdW5kb2VycyA9IGRlZmF1bHRVbmRvZXJzO1xuXHRzdGF0aWMgcmVkb2VycyA9IGRlZmF1bHRSZWRvZXJzO1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmhpc3RvcnkgPSBbXTtcblx0XHR0aGlzLmluZGV4ID0gLTE7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJoaXN0b3J5XCIsIGZhbHNlKTsgLy9lbmFibGUgZWRpdCBoaXN0b3J5XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmhpc3Rvcnkpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLXVwZGF0ZWRcIiwgdGhpcy5jZWxsVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1kZWxldGVcIiwgdGhpcy5jbGVhckNvbXBvbmVudEhpc3RvcnkuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGVcIiwgdGhpcy5yb3dEZWxldGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXdpcGVcIiwgdGhpcy5jbGVhci5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWFkZGVkXCIsIHRoaXMucm93QWRkZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1tb3ZlXCIsIHRoaXMucm93TW92ZWQuYmluZCh0aGlzKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJ1bmRvXCIsIHRoaXMudW5kby5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInJlZG9cIiwgdGhpcy5yZWRvLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SGlzdG9yeVVuZG9TaXplXCIsIHRoaXMuZ2V0SGlzdG9yeVVuZG9TaXplLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SGlzdG9yeVJlZG9TaXplXCIsIHRoaXMuZ2V0SGlzdG9yeVJlZG9TaXplLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiY2xlYXJIaXN0b3J5XCIsIHRoaXMuY2xlYXIuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRyb3dNb3ZlZChmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHRoaXMuYWN0aW9uKFwicm93TW92ZVwiLCBmcm9tLCB7cG9zRnJvbTpmcm9tLmdldFBvc2l0aW9uKCksIHBvc1RvOnRvLmdldFBvc2l0aW9uKCksIHRvOnRvLCBhZnRlcjphZnRlcn0pO1xuXHR9XG5cblx0cm93QWRkZWQocm93LCBkYXRhLCBwb3MsIGluZGV4KXtcblx0XHR0aGlzLmFjdGlvbihcInJvd0FkZFwiLCByb3csIHtkYXRhOmRhdGEsIHBvczpwb3MsIGluZGV4OmluZGV4fSk7XG5cdH1cblxuXHRyb3dEZWxldGVkKHJvdyl7XG5cdFx0dmFyIGluZGV4LCByb3dzO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXG5cdFx0XHRyb3dzID0gcm93LmdldENvbXBvbmVudCgpLmdldEdyb3VwKCkuX2dldFNlbGYoKS5yb3dzO1xuXHRcdFx0aW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcblxuXHRcdFx0aWYoaW5kZXgpe1xuXHRcdFx0XHRpbmRleCA9IHJvd3NbaW5kZXgtMV07XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aW5kZXggPSByb3cudGFibGUucm93TWFuYWdlci5nZXRSb3dJbmRleChyb3cpO1xuXG5cdFx0XHRpZihpbmRleCl7XG5cdFx0XHRcdGluZGV4ID0gcm93LnRhYmxlLnJvd01hbmFnZXIucm93c1tpbmRleC0xXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmFjdGlvbihcInJvd0RlbGV0ZVwiLCByb3csIHtkYXRhOnJvdy5nZXREYXRhKCksIHBvczohaW5kZXgsIGluZGV4OmluZGV4fSk7XG5cdH1cblxuXHRjZWxsVXBkYXRlZChjZWxsKXtcblx0XHR0aGlzLmFjdGlvbihcImNlbGxFZGl0XCIsIGNlbGwsIHtvbGRWYWx1ZTpjZWxsLm9sZFZhbHVlLCBuZXdWYWx1ZTpjZWxsLnZhbHVlfSk7XG5cdH1cblxuXHRjbGVhcigpe1xuXHRcdHRoaXMuaGlzdG9yeSA9IFtdO1xuXHRcdHRoaXMuaW5kZXggPSAtMTtcblx0fVxuXG5cdGFjdGlvbih0eXBlLCBjb21wb25lbnQsIGRhdGEpe1xuXHRcdHRoaXMuaGlzdG9yeSA9IHRoaXMuaGlzdG9yeS5zbGljZSgwLCB0aGlzLmluZGV4ICsgMSk7XG5cblx0XHR0aGlzLmhpc3RvcnkucHVzaCh7XG5cdFx0XHR0eXBlOnR5cGUsXG5cdFx0XHRjb21wb25lbnQ6Y29tcG9uZW50LFxuXHRcdFx0ZGF0YTpkYXRhLFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5pbmRleCArKztcblx0fVxuXG5cdGdldEhpc3RvcnlVbmRvU2l6ZSgpe1xuXHRcdHJldHVybiB0aGlzLmluZGV4ICsgMTtcblx0fVxuXG5cdGdldEhpc3RvcnlSZWRvU2l6ZSgpe1xuXHRcdHJldHVybiB0aGlzLmhpc3RvcnkubGVuZ3RoIC0gKHRoaXMuaW5kZXggKyAxKTtcblx0fVxuXG5cdGNsZWFyQ29tcG9uZW50SGlzdG9yeShjb21wb25lbnQpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuaGlzdG9yeS5maW5kSW5kZXgoZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRyZXR1cm4gaXRlbS5jb21wb25lbnQgPT09IGNvbXBvbmVudDtcblx0XHR9KTtcblxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5oaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRpZihpbmRleCA8PSB0aGlzLmluZGV4KXtcblx0XHRcdFx0dGhpcy5pbmRleC0tO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmNsZWFyQ29tcG9uZW50SGlzdG9yeShjb21wb25lbnQpO1xuXHRcdH1cblx0fVxuXG5cdHVuZG8oKXtcblx0XHRpZih0aGlzLmluZGV4ID4gLTEpe1xuXHRcdFx0bGV0IGFjdGlvbiA9IHRoaXMuaGlzdG9yeVt0aGlzLmluZGV4XTtcblxuXHRcdFx0SGlzdG9yeS51bmRvZXJzW2FjdGlvbi50eXBlXS5jYWxsKHRoaXMsIGFjdGlvbik7XG5cblx0XHRcdHRoaXMuaW5kZXgtLTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiaGlzdG9yeVVuZG9cIiwgYWN0aW9uLnR5cGUsIGFjdGlvbi5jb21wb25lbnQuZ2V0Q29tcG9uZW50KCksIGFjdGlvbi5kYXRhKTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKHRoaXMub3B0aW9ucyhcImhpc3RvcnlcIikgPyBcIkhpc3RvcnkgVW5kbyBFcnJvciAtIE5vIG1vcmUgaGlzdG9yeSB0byB1bmRvXCIgOiBcIkhpc3RvcnkgbW9kdWxlIG5vdCBlbmFibGVkXCIpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJlZG8oKXtcblx0XHRpZih0aGlzLmhpc3RvcnkubGVuZ3RoLTEgPiB0aGlzLmluZGV4KXtcblxuXHRcdFx0dGhpcy5pbmRleCsrO1xuXG5cdFx0XHRsZXQgYWN0aW9uID0gdGhpcy5oaXN0b3J5W3RoaXMuaW5kZXhdO1xuXG5cdFx0XHRIaXN0b3J5LnJlZG9lcnNbYWN0aW9uLnR5cGVdLmNhbGwodGhpcywgYWN0aW9uKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiaGlzdG9yeVJlZG9cIiwgYWN0aW9uLnR5cGUsIGFjdGlvbi5jb21wb25lbnQuZ2V0Q29tcG9uZW50KCksIGFjdGlvbi5kYXRhKTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKHRoaXMub3B0aW9ucyhcImhpc3RvcnlcIikgPyBcIkhpc3RvcnkgUmVkbyBFcnJvciAtIE5vIG1vcmUgaGlzdG9yeSB0byByZWRvXCIgOiBcIkhpc3RvcnkgbW9kdWxlIG5vdCBlbmFibGVkXCIpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vcmViaW5kIHJvd3MgdG8gbmV3IGVsZW1lbnQgYWZ0ZXIgZGVsZXRpb25cblx0X3JlYmluZFJvdyhvbGRSb3csIG5ld1Jvdyl7XG5cdFx0dGhpcy5oaXN0b3J5LmZvckVhY2goZnVuY3Rpb24oYWN0aW9uKXtcblx0XHRcdGlmKGFjdGlvbi5jb21wb25lbnQgaW5zdGFuY2VvZiBSb3cpe1xuXHRcdFx0XHRpZihhY3Rpb24uY29tcG9uZW50ID09PSBvbGRSb3cpe1xuXHRcdFx0XHRcdGFjdGlvbi5jb21wb25lbnQgPSBuZXdSb3c7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIGlmKGFjdGlvbi5jb21wb25lbnQgaW5zdGFuY2VvZiBDZWxsKXtcblx0XHRcdFx0aWYoYWN0aW9uLmNvbXBvbmVudC5yb3cgPT09IG9sZFJvdyl7XG5cdFx0XHRcdFx0dmFyIGZpZWxkID0gYWN0aW9uLmNvbXBvbmVudC5jb2x1bW4uZ2V0RmllbGQoKTtcblxuXHRcdFx0XHRcdGlmKGZpZWxkKXtcblx0XHRcdFx0XHRcdGFjdGlvbi5jb21wb25lbnQgPSBuZXdSb3cuZ2V0Q2VsbChmaWVsZCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5jbGFzcyBIdG1sVGFibGVJbXBvcnQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcImh0bWxUYWJsZUltcG9ydFwiO1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmZpZWxkSW5kZXggPSBbXTtcblx0XHR0aGlzLmhhc0luZGV4ID0gZmFsc2U7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy50YWJsZUVsZW1lbnRDaGVjaygpO1xuXHR9XG5cblx0dGFibGVFbGVtZW50Q2hlY2soKXtcblx0XHRpZih0aGlzLnRhYmxlLm9yaWdpbmFsRWxlbWVudCAmJiB0aGlzLnRhYmxlLm9yaWdpbmFsRWxlbWVudC50YWdOYW1lID09PSBcIlRBQkxFXCIpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcmlnaW5hbEVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLnBhcnNlVGFibGUoKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHBhcnNlIGRhdGEgZnJvbSBlbXB0eSB0YWJsZSB0YWcsIFRhYnVsYXRvciBzaG91bGQgYmUgaW5pdGlhbGl6ZWQgb24gYSBkaXYgdGFnIHVubGVzcyBpbXBvcnRpbmcgZGF0YSBmcm9tIGEgdGFibGUgZWxlbWVudC5cIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VUYWJsZSgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZS5vcmlnaW5hbEVsZW1lbnQsXG5cdFx0b3B0aW9ucyA9IHRoaXMudGFibGUub3B0aW9ucyxcblx0XHRoZWFkZXJzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRoXCIpLFxuXHRcdHJvd3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0sXG5cdFx0ZGF0YSA9IFtdO1xuXG5cdFx0dGhpcy5oYXNJbmRleCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiaHRtbEltcG9ydGluZ1wiKTtcblxuXHRcdHJvd3MgPSByb3dzID8gcm93cy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRyXCIpIDogW107XG5cblx0XHQvL2NoZWNrIGZvciBUYWJ1bGF0b3IgaW5saW5lIG9wdGlvbnNcblx0XHR0aGlzLl9leHRyYWN0T3B0aW9ucyhlbGVtZW50LCBvcHRpb25zKTtcblxuXHRcdGlmKGhlYWRlcnMubGVuZ3RoKXtcblx0XHRcdHRoaXMuX2V4dHJhY3RIZWFkZXJzKGhlYWRlcnMsIHJvd3MpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX2dlbmVyYXRlQmxhbmtIZWFkZXJzKGhlYWRlcnMsIHJvd3MpO1xuXHRcdH1cblxuXHRcdC8vaXRlcmF0ZSB0aHJvdWdoIHRhYmxlIHJvd3MgYW5kIGJ1aWxkIGRhdGEgc2V0XG5cdFx0Zm9yKHZhciBpbmRleCA9IDA7IGluZGV4IDwgcm93cy5sZW5ndGg7IGluZGV4Kyspe1xuXHRcdFx0dmFyIHJvdyA9IHJvd3NbaW5kZXhdLFxuXHRcdFx0Y2VsbHMgPSByb3cuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKSxcblx0XHRcdGl0ZW0gPSB7fTtcblxuXHRcdFx0Ly9jcmVhdGUgaW5kZXggaWYgdGhlIGRvbid0IGV4aXN0IGluIHRhYmxlXG5cdFx0XHRpZighdGhpcy5oYXNJbmRleCl7XG5cdFx0XHRcdGl0ZW1bb3B0aW9ucy5pbmRleF0gPSBpbmRleDtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0dmFyIGNlbGwgPSBjZWxsc1tpXTtcblx0XHRcdFx0aWYodHlwZW9mIHRoaXMuZmllbGRJbmRleFtpXSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0aXRlbVt0aGlzLmZpZWxkSW5kZXhbaV1dID0gY2VsbC5pbm5lckhUTUw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9hZGQgcm93IGRhdGEgdG8gaXRlbVxuXHRcdFx0ZGF0YS5wdXNoKGl0ZW0pO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuZGF0YSA9IGRhdGE7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJodG1sSW1wb3J0ZWRcIik7XG5cdH1cblxuXHQvL2V4dHJhY3QgdGFidWxhdG9yIGF0dHJpYnV0ZSBvcHRpb25zXG5cdF9leHRyYWN0T3B0aW9ucyhlbGVtZW50LCBvcHRpb25zLCBkZWZhdWx0T3B0aW9ucyl7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG5cdFx0dmFyIG9wdGlvbnNBcnIgPSBkZWZhdWx0T3B0aW9ucyA/IE9iamVjdC5rZXlzKGRlZmF1bHRPcHRpb25zKSA6IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuXHRcdHZhciBvcHRpb25zTGlzdCA9IHt9O1xuXG5cdFx0b3B0aW9uc0Fyci5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRvcHRpb25zTGlzdFtpdGVtLnRvTG93ZXJDYXNlKCldID0gaXRlbTtcblx0XHR9KTtcblxuXHRcdGZvcih2YXIgaW5kZXggaW4gYXR0cmlidXRlcyl7XG5cdFx0XHR2YXIgYXR0cmliID0gYXR0cmlidXRlc1tpbmRleF07XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0aWYoYXR0cmliICYmIHR5cGVvZiBhdHRyaWIgPT0gXCJvYmplY3RcIiAmJiBhdHRyaWIubmFtZSAmJiBhdHRyaWIubmFtZS5pbmRleE9mKFwidGFidWxhdG9yLVwiKSA9PT0gMCl7XG5cdFx0XHRcdG5hbWUgPSBhdHRyaWIubmFtZS5yZXBsYWNlKFwidGFidWxhdG9yLVwiLCBcIlwiKTtcblxuXHRcdFx0XHRpZih0eXBlb2Ygb3B0aW9uc0xpc3RbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdG9wdGlvbnNbb3B0aW9uc0xpc3RbbmFtZV1dID0gdGhpcy5fYXR0cmliVmFsdWUoYXR0cmliLnZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vZ2V0IHZhbHVlIG9mIGF0dHJpYnV0ZVxuXHRfYXR0cmliVmFsdWUodmFsdWUpe1xuXHRcdGlmKHZhbHVlID09PSBcInRydWVcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZih2YWx1ZSA9PT0gXCJmYWxzZVwiKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHQvL2ZpbmQgY29sdW1uIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZFxuXHRfZmluZENvbCh0aXRsZSl7XG5cdFx0dmFyIG1hdGNoID0gdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMuZmluZCgoY29sdW1uKSA9PiB7XG5cdFx0XHRyZXR1cm4gY29sdW1uLnRpdGxlID09PSB0aXRsZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBtYXRjaCB8fCBmYWxzZTtcblx0fVxuXG5cdC8vZXh0cmFjdCBjb2x1bW4gZnJvbSBoZWFkZXJzXG5cdF9leHRyYWN0SGVhZGVycyhoZWFkZXJzLCByb3dzKXtcblx0XHRmb3IodmFyIGluZGV4ID0gMDsgaW5kZXggPCBoZWFkZXJzLmxlbmd0aDsgaW5kZXgrKyl7XG5cdFx0XHR2YXIgaGVhZGVyID0gaGVhZGVyc1tpbmRleF0sXG5cdFx0XHRleGlzdHMgPSBmYWxzZSxcblx0XHRcdGNvbCA9IHRoaXMuX2ZpbmRDb2woaGVhZGVyLnRleHRDb250ZW50KSxcblx0XHRcdHdpZHRoO1xuXG5cdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRleGlzdHMgPSB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb2wgPSB7dGl0bGU6aGVhZGVyLnRleHRDb250ZW50LnRyaW0oKX07XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFjb2wuZmllbGQpIHtcblx0XHRcdFx0Y29sLmZpZWxkID0gaGVhZGVyLnRleHRDb250ZW50LnRyaW0oKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2VBbGwoXCIgXCIsIFwiX1wiKTtcblx0XHRcdH1cblxuXHRcdFx0d2lkdGggPSBoZWFkZXIuZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG5cblx0XHRcdGlmKHdpZHRoICYmICFjb2wud2lkdGgpXHR7XG5cdFx0XHRcdGNvbC53aWR0aCA9IHdpZHRoO1xuXHRcdFx0fVxuXG5cdFx0XHQvL2NoZWNrIGZvciBUYWJ1bGF0b3IgaW5saW5lIG9wdGlvbnNcblx0XHRcdHRoaXMuX2V4dHJhY3RPcHRpb25zKGhlYWRlciwgY29sLCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIub3B0aW9uc0xpc3QucmVnaXN0ZXJlZERlZmF1bHRzKTtcblxuXHRcdFx0dGhpcy5maWVsZEluZGV4W2luZGV4XSA9IGNvbC5maWVsZDtcblxuXHRcdFx0aWYoY29sLmZpZWxkID09IHRoaXMudGFibGUub3B0aW9ucy5pbmRleCl7XG5cdFx0XHRcdHRoaXMuaGFzSW5kZXggPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighZXhpc3RzKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMucHVzaChjb2wpO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG5cblx0Ly9nZW5lcmF0ZSBibGFuayBoZWFkZXJzXG5cdF9nZW5lcmF0ZUJsYW5rSGVhZGVycyhoZWFkZXJzLCByb3dzKXtcblx0XHRmb3IodmFyIGluZGV4ID0gMDsgaW5kZXggPCBoZWFkZXJzLmxlbmd0aDsgaW5kZXgrKyl7XG5cdFx0XHR2YXIgaGVhZGVyID0gaGVhZGVyc1tpbmRleF0sXG5cdFx0XHRjb2wgPSB7dGl0bGU6XCJcIiwgZmllbGQ6XCJjb2xcIiArIGluZGV4fTtcblxuXHRcdFx0dGhpcy5maWVsZEluZGV4W2luZGV4XSA9IGNvbC5maWVsZDtcblxuXHRcdFx0dmFyIHdpZHRoID0gaGVhZGVyLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpO1xuXG5cdFx0XHRpZih3aWR0aCl7XG5cdFx0XHRcdGNvbC53aWR0aCA9IHdpZHRoO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1ucy5wdXNoKGNvbCk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGNzdihpbnB1dCl7XG5cdHZhciBkYXRhID0gW10sXG5cdHJvdyA9IDAsIFxuXHRjb2wgPSAwLFxuXHRpblF1b3RlID0gZmFsc2U7XG4gICAgXG5cdC8vSXRlcmF0ZSBvdmVyIGVhY2ggY2hhcmFjdGVyXG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpbnB1dC5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRsZXQgY2hhciA9IGlucHV0W2luZGV4XSwgXG5cdFx0bmV4dENoYXIgPSBpbnB1dFtpbmRleCsxXTsgICAgICBcbiAgICAgICAgXG5cdFx0Ly9Jbml0aWFsaXplIGVtcHR5IHJvd1xuXHRcdGlmKCFkYXRhW3Jvd10pe1xuXHRcdFx0ZGF0YVtyb3ddID0gW107XG5cdFx0fVxuXG5cdFx0Ly9Jbml0aWFsaXplIGVtcHR5IGNvbHVtblxuXHRcdGlmKCFkYXRhW3Jvd11bY29sXSl7XG5cdFx0XHRkYXRhW3Jvd11bY29sXSA9IFwiXCI7XG5cdFx0fVxuICAgICAgICBcblx0XHQvL0hhbmRsZSBxdW90YXRpb24gbWFyayBpbnNpZGUgc3RyaW5nXG5cdFx0aWYgKGNoYXIgPT0gJ1wiJyAmJiBpblF1b3RlICYmIG5leHRDaGFyID09ICdcIicpIHsgXG5cdFx0XHRkYXRhW3Jvd11bY29sXSArPSBjaGFyOyBcblx0XHRcdGluZGV4Kys7XG5cdFx0XHRjb250aW51ZTsgXG5cdFx0fVxuICAgICAgICBcblx0XHQvL0JlZ2luIC8gRW5kIFF1b3RlXG5cdFx0aWYgKGNoYXIgPT0gJ1wiJykgeyBcblx0XHRcdGluUXVvdGUgPSAhaW5RdW90ZTtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cbiAgICAgICAgXG5cdFx0Ly9OZXh0IGNvbHVtbiAoaWYgbm90IGluIHF1b3RlKVxuXHRcdGlmIChjaGFyID09ICcsJyAmJiAhaW5RdW90ZSkgeyBcblx0XHRcdGNvbCsrO1xuXHRcdFx0Y29udGludWU7IFxuXHRcdH1cbiAgICAgICAgXG5cdFx0Ly9OZXcgcm93IGlmIG5ldyBsaW5lIGFuZCBub3QgaW4gcXVvdGUgKENSTEYpIFxuXHRcdGlmIChjaGFyID09ICdcXHInICYmIG5leHRDaGFyID09ICdcXG4nICYmICFpblF1b3RlKSB7IFxuXHRcdFx0Y29sID0gMDsgXG5cdFx0XHRyb3crKzsgXG5cdFx0XHRpbmRleCsrOyBcblx0XHRcdGNvbnRpbnVlOyBcblx0XHR9XG4gICAgICAgIFxuXHRcdC8vTmV3IHJvdyBpZiBuZXcgbGluZSBhbmQgbm90IGluIHF1b3RlIChDUiBvciBMRikgXG5cdFx0aWYgKChjaGFyID09ICdcXHInIHx8IGNoYXIgPT0gJ1xcbicpICYmICFpblF1b3RlKSB7IFxuXHRcdFx0Y29sID0gMDtcblx0XHRcdHJvdysrO1xuXHRcdFx0Y29udGludWU7IFxuXHRcdH1cblxuXHRcdC8vTm9ybWFsIENoYXJhY3RlciwgYXBwZW5kIHRvIGNvbHVtblxuXHRcdGRhdGFbcm93XVtjb2xdICs9IGNoYXI7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24ganNvbihpbnB1dCl7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoaW5wdXQpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRjb25zb2xlLndhcm4oXCJKU09OIEltcG9ydCBFcnJvciAtIEZpbGUgY29udGVudHMgaXMgaW52YWxpZCBKU09OXCIsIGUpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGFycmF5JDEgKGlucHV0KXtcblx0cmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiB4bHN4KGlucHV0KXtcclxuXHR2YXIgWExTWExpYiA9IHRoaXMuZGVwZW5kZW5jeVJlZ2lzdHJ5Lmxvb2t1cChcIlhMU1hcIiksXHJcblx0d29ya2Jvb2syID0gWExTWExpYi5yZWFkKGlucHV0KSxcclxuXHRzaGVldCA9IHdvcmtib29rMi5TaGVldHNbd29ya2Jvb2syLlNoZWV0TmFtZXNbMF1dO1xyXG5cdFxyXG5cdHJldHVybiBYTFNYTGliLnV0aWxzLnNoZWV0X3RvX2pzb24oc2hlZXQsIHtoZWFkZXI6IDEgfSk7XHJcbn1cblxudmFyIGRlZmF1bHRJbXBvcnRlcnMgPSB7XG5cdGNzdjpjc3YsXG5cdGpzb246anNvbixcblx0YXJyYXk6YXJyYXkkMSxcblx0eGxzeDp4bHN4LFxufTtcblxuY2xhc3MgSW1wb3J0IGV4dGVuZHMgTW9kdWxle1xuXHRcblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcImltcG9ydFwiO1xuXHRcblx0Ly9sb2FkIGRlZmF1bHRzXG5cdHN0YXRpYyBpbXBvcnRlcnMgPSBkZWZhdWx0SW1wb3J0ZXJzO1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbXBvcnRGb3JtYXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaW1wb3J0UmVhZGVyXCIsIFwidGV4dFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbXBvcnRIZWFkZXJUcmFuc2Zvcm1cIik7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaW1wb3J0VmFsdWVUcmFuc2Zvcm1cIik7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaW1wb3J0RGF0YVZhbGlkYXRvclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbXBvcnRGaWxlVmFsaWRhdG9yXCIpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJpbXBvcnRcIiwgdGhpcy5pbXBvcnRGcm9tRmlsZS5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaW1wb3J0Rm9ybWF0KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1sb2FkaW5nXCIsIHRoaXMubG9hZERhdGFDaGVjay5iaW5kKHRoaXMpLCAxMCk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtbG9hZFwiLCB0aGlzLmxvYWREYXRhLmJpbmQodGhpcyksIDEwKTtcblx0XHR9XG5cdH1cblx0XG5cdGxvYWREYXRhQ2hlY2soZGF0YSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRGb3JtYXQgJiYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiIHx8IChBcnJheS5pc0FycmF5KGRhdGEpICYmIGRhdGEubGVuZ3RoICYmIEFycmF5LmlzQXJyYXkoZGF0YSkpKTtcblx0fVxuXHRcblx0bG9hZERhdGEoZGF0YSwgcGFyYW1zLCBjb25maWcsIHNpbGVudCwgcHJldmlvdXNEYXRhKXtcblx0XHRyZXR1cm4gdGhpcy5pbXBvcnREYXRhKHRoaXMubG9va3VwSW1wb3J0ZXIoKSwgZGF0YSlcblx0XHRcdC50aGVuKHRoaXMuc3RydWN0dXJlRGF0YS5iaW5kKHRoaXMpKVxuXHRcdFx0LmNhdGNoKChlcnIpID0+IHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkltcG9ydCBFcnJvcjpcIiwgZXJyIHx8IFwiVW5hYmxlIHRvIGltcG9ydCBkYXRhXCIpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcblx0XHRcdH0pO1xuXHR9XG5cdFxuXHRsb29rdXBJbXBvcnRlcihpbXBvcnRGb3JtYXQpe1xuXHRcdHZhciBpbXBvcnRlcjtcblx0XHRcblx0XHRpZighaW1wb3J0Rm9ybWF0KXtcblx0XHRcdGltcG9ydEZvcm1hdCA9IHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRGb3JtYXQ7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHR5cGVvZiBpbXBvcnRGb3JtYXQgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0aW1wb3J0ZXIgPSBJbXBvcnQuaW1wb3J0ZXJzW2ltcG9ydEZvcm1hdF07XG5cdFx0fWVsc2Uge1xuXHRcdFx0aW1wb3J0ZXIgPSBpbXBvcnRGb3JtYXQ7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFpbXBvcnRlcil7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiSW1wb3J0IEVycm9yIC0gSW1wb3J0ZXIgbm90IGZvdW5kOlwiLCBpbXBvcnRGb3JtYXQpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gaW1wb3J0ZXI7XG5cdH1cblx0XG5cdGltcG9ydEZyb21GaWxlKGltcG9ydEZvcm1hdCwgZXh0ZW5zaW9uLCBpbXBvcnRSZWFkZXIpe1xuXHRcdHZhciBpbXBvcnRlciA9IHRoaXMubG9va3VwSW1wb3J0ZXIoaW1wb3J0Rm9ybWF0KTtcblx0XHRcblx0XHRpZihpbXBvcnRlcil7XG5cdFx0XHRyZXR1cm4gdGhpcy5waWNrRmlsZShleHRlbnNpb24sIGltcG9ydFJlYWRlcilcblx0XHRcdFx0LnRoZW4odGhpcy5pbXBvcnREYXRhLmJpbmQodGhpcywgaW1wb3J0ZXIpKVxuXHRcdFx0XHQudGhlbih0aGlzLnN0cnVjdHVyZURhdGEuYmluZCh0aGlzKSlcblx0XHRcdFx0LnRoZW4odGhpcy5tdXRhdGVEYXRhLmJpbmQodGhpcykpXG5cdFx0XHRcdC50aGVuKHRoaXMudmFsaWRhdGVEYXRhLmJpbmQodGhpcykpXG5cdFx0XHRcdC50aGVuKHRoaXMuc2V0RGF0YS5iaW5kKHRoaXMpKVxuXHRcdFx0XHQuY2F0Y2goKGVycikgPT4ge1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2goXCJpbXBvcnQtZXJyb3JcIiwgZXJyKTtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJpbXBvcnRFcnJvclwiLCBlcnIpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJJbXBvcnQgRXJyb3I6XCIsIGVyciB8fCBcIlVuYWJsZSB0byBpbXBvcnQgZmlsZVwiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLnRhYmxlLmRhdGFMb2FkZXIuYWxlcnRFcnJvcigpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLmRhdGFMb2FkZXIuY2xlYXJBbGVydCgpO1xuXHRcdFx0XHRcdH0sIDMwMDApO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdHBpY2tGaWxlKGV4dGVuc2lvbnMsIGltcG9ydFJlYWRlcil7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnR5cGUgPSBcImZpbGVcIjtcblx0XHRcdGlucHV0LmFjY2VwdCA9IGV4dGVuc2lvbnM7XG5cdFx0XHRcblx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGUpID0+IHtcblx0XHRcdFx0dmFyIGZpbGUgPSBpbnB1dC5maWxlc1swXSxcblx0XHRcdFx0cmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKSxcblx0XHRcdFx0dmFsaWQgPSB0aGlzLnZhbGlkYXRlRmlsZShmaWxlKTtcblxuXHRcdFx0XHRpZih2YWxpZCA9PT0gdHJ1ZSl7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2goXCJpbXBvcnQtaW1wb3J0aW5nXCIsIGlucHV0LmZpbGVzKTtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJpbXBvcnRJbXBvcnRpbmdcIiwgaW5wdXQuZmlsZXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0XHRzd2l0Y2goaW1wb3J0UmVhZGVyIHx8IHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRSZWFkZXIpe1xuXHRcdFx0XHRcdFx0Y2FzZSBcImJ1ZmZlclwiOlxuXHRcdFx0XHRcdFx0XHRyZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRjYXNlIFwiYmluYXJ5XCI6XG5cdFx0XHRcdFx0XHRcdHJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcoZmlsZSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRjYXNlIFwidXJsXCI6XG5cdFx0XHRcdFx0XHRcdHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y2FzZSBcInRleHRcIjpcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZWFkZXIub25sb2FkID0gKGUpID0+IHtcblx0XHRcdFx0XHRcdHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZWFkZXIub25lcnJvciA9IChlKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJGaWxlIExvYWQgRXJyb3IgLSBVbmFibGUgdG8gcmVhZCBmaWxlXCIpO1xuXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZWplY3QodmFsaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImltcG9ydC1jaG9vc2VcIik7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJpbXBvcnRDaG9vc2VcIik7XG5cdFx0XHRpbnB1dC5jbGljaygpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRpbXBvcnREYXRhKGltcG9ydGVyLCBmaWxlQ29udGVudHMpe1xuXHRcdHZhciBkYXRhO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuZGF0YUxvYWRlci5hbGVydExvYWRlcigpO1xuXHRcdFxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0ZGF0YSA9IGltcG9ydGVyLmNhbGwodGhpcy50YWJsZSwgZmlsZUNvbnRlbnRzKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGRhdGEgaW5zdGFuY2VvZiBQcm9taXNlKXtcblx0XHRcdFx0XHRyZXNvbHZlKGRhdGEpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YSA/IHJlc29sdmUoZGF0YSkgOiByZWplY3QoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgMTApO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRzdHJ1Y3R1cmVEYXRhKHBhcnNlZERhdGEpe1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0XG5cdFx0aWYoQXJyYXkuaXNBcnJheShwYXJzZWREYXRhKSAmJiBwYXJzZWREYXRhLmxlbmd0aCAmJiBBcnJheS5pc0FycmF5KHBhcnNlZERhdGFbMF0pKXtcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hdXRvQ29sdW1ucyl7XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnN0cnVjdHVyZUFycmF5VG9PYmplY3QocGFyc2VkRGF0YSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnN0cnVjdHVyZUFycmF5VG9Db2x1bW5zKHBhcnNlZERhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gcGFyc2VkRGF0YTtcblx0XHR9XG5cdH1cblx0XG5cdG11dGF0ZURhdGEoZGF0YSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpe1xuXHRcdFx0ZGF0YS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy50YWJsZS5tb2R1bGVzLm11dGF0b3IudHJhbnNmb3JtUm93KHJvdywgXCJpbXBvcnRcIikpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0b3V0cHV0ID0gZGF0YTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0dHJhbnNmb3JtSGVhZGVyKGhlYWRlcnMpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaW1wb3J0SGVhZGVyVHJhbnNmb3JtKXtcblx0XHRcdGhlYWRlcnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLnRhYmxlLm9wdGlvbnMuaW1wb3J0SGVhZGVyVHJhbnNmb3JtLmNhbGwodGhpcy50YWJsZSwgaXRlbSwgaGVhZGVycykpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIGhlYWRlcnM7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdHRyYW5zZm9ybURhdGEocm93KXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaW1wb3J0VmFsdWVUcmFuc2Zvcm0pe1xuXHRcdFx0cm93LmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy50YWJsZS5vcHRpb25zLmltcG9ydFZhbHVlVHJhbnNmb3JtLmNhbGwodGhpcy50YWJsZSwgaXRlbSwgcm93KSk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gcm93O1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRzdHJ1Y3R1cmVBcnJheVRvT2JqZWN0KHBhcnNlZERhdGEpe1xuXHRcdHZhciBjb2x1bW5zID0gdGhpcy50cmFuc2Zvcm1IZWFkZXIocGFyc2VkRGF0YS5zaGlmdCgpKTtcdFxuXHRcdFxuXHRcdHZhciBkYXRhID0gcGFyc2VkRGF0YS5tYXAoKHZhbHVlcykgPT4ge1xuXHRcdFx0dmFyIHJvdyA9IHt9O1xuXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnRyYW5zZm9ybURhdGEodmFsdWVzKTtcblx0XHRcdFxuXHRcdFx0Y29sdW1ucy5mb3JFYWNoKChrZXksIGkpID0+IHtcblx0XHRcdFx0cm93W2tleV0gPSB2YWx1ZXNbaV07XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHJvdztcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXHRcblx0c3RydWN0dXJlQXJyYXlUb0NvbHVtbnMocGFyc2VkRGF0YSl7XG5cdFx0dmFyIGRhdGEgPSBbXSxcblx0XHRmaXJzdFJvdyA9IHRoaXMudHJhbnNmb3JtSGVhZGVyKHBhcnNlZERhdGFbMF0pLFxuXHRcdGNvbHVtbnMgPSB0aGlzLnRhYmxlLmdldENvbHVtbnMoKTtcblx0XHRcblx0XHQvL3JlbW92ZSBmaXJzdCByb3cgaWYgaXQgaXMgdGhlIGNvbHVtbiBuYW1lc1xuXHRcdGlmKGNvbHVtbnNbMF0gJiYgZmlyc3RSb3dbMF0pe1xuXHRcdFx0aWYoY29sdW1uc1swXS5nZXREZWZpbml0aW9uKCkudGl0bGUgPT09IGZpcnN0Um93WzBdKXtcblx0XHRcdFx0cGFyc2VkRGF0YS5zaGlmdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvL2NvbnZlcnQgcm93IGFycmF5cyB0byBvYmplY3RzXG5cdFx0cGFyc2VkRGF0YS5mb3JFYWNoKChyb3dEYXRhKSA9PiB7XG5cdFx0XHR2YXIgcm93ID0ge307XG5cblx0XHRcdHJvd0RhdGEgPSB0aGlzLnRyYW5zZm9ybURhdGEocm93RGF0YSk7XG5cdFx0XHRcblx0XHRcdHJvd0RhdGEuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG5cdFx0XHRcdHZhciBjb2x1bW4gPSBjb2x1bW5zW2luZGV4XTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0cm93W2NvbHVtbi5nZXRGaWVsZCgpXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0ZGF0YS5wdXNoKHJvdyk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHR2YWxpZGF0ZUZpbGUoZmlsZSl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmltcG9ydEZpbGVWYWxpZGF0b3Ipe1xuXHRcdFx0cmV0dXJuIHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRGaWxlVmFsaWRhdG9yLmNhbGwodGhpcy50YWJsZSwgZmlsZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHR2YWxpZGF0ZURhdGEoZGF0YSl7XG5cdFx0dmFyIHJlc3VsdDtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnREYXRhVmFsaWRhdG9yKXtcblx0XHRcdHJlc3VsdCA9IHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnREYXRhVmFsaWRhdG9yLmNhbGwodGhpcy50YWJsZSwgZGF0YSk7XG5cblx0XHRcdGlmKHJlc3VsdCA9PT0gdHJ1ZSl7XG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzdWx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXHRcblx0c2V0RGF0YShkYXRhKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwiaW1wb3J0LWltcG9ydGVkXCIsIGRhdGEpO1xuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImltcG9ydEltcG9ydGVkXCIsIGRhdGEpO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuZGF0YUxvYWRlci5jbGVhckFsZXJ0KCk7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuc2V0RGF0YShkYXRhKTtcblx0fVxufVxuXG5jbGFzcyBJbnRlcmFjdGlvbiBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwiaW50ZXJhY3Rpb25cIjtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5ldmVudE1hcCA9IHtcblx0XHRcdC8vcm93IGV2ZW50c1xuXHRcdFx0cm93Q2xpY2s6XCJyb3ctY2xpY2tcIixcblx0XHRcdHJvd0RibENsaWNrOlwicm93LWRibGNsaWNrXCIsXG5cdFx0XHRyb3dDb250ZXh0Olwicm93LWNvbnRleHRtZW51XCIsXG5cdFx0XHRyb3dNb3VzZUVudGVyOlwicm93LW1vdXNlZW50ZXJcIixcblx0XHRcdHJvd01vdXNlTGVhdmU6XCJyb3ctbW91c2VsZWF2ZVwiLFxuXHRcdFx0cm93TW91c2VPdmVyOlwicm93LW1vdXNlb3ZlclwiLFxuXHRcdFx0cm93TW91c2VPdXQ6XCJyb3ctbW91c2VvdXRcIixcblx0XHRcdHJvd01vdXNlTW92ZTpcInJvdy1tb3VzZW1vdmVcIixcblx0XHRcdHJvd01vdXNlRG93bjpcInJvdy1tb3VzZWRvd25cIixcblx0XHRcdHJvd01vdXNlVXA6XCJyb3ctbW91c2V1cFwiLFxuXHRcdFx0cm93VGFwOlwicm93XCIsXG5cdFx0XHRyb3dEYmxUYXA6XCJyb3dcIixcblx0XHRcdHJvd1RhcEhvbGQ6XCJyb3dcIixcblxuXHRcdFx0Ly9jZWxsIGV2ZW50c1xuXHRcdFx0Y2VsbENsaWNrOlwiY2VsbC1jbGlja1wiLFxuXHRcdFx0Y2VsbERibENsaWNrOlwiY2VsbC1kYmxjbGlja1wiLFxuXHRcdFx0Y2VsbENvbnRleHQ6XCJjZWxsLWNvbnRleHRtZW51XCIsXG5cdFx0XHRjZWxsTW91c2VFbnRlcjpcImNlbGwtbW91c2VlbnRlclwiLFxuXHRcdFx0Y2VsbE1vdXNlTGVhdmU6XCJjZWxsLW1vdXNlbGVhdmVcIixcblx0XHRcdGNlbGxNb3VzZU92ZXI6XCJjZWxsLW1vdXNlb3ZlclwiLFxuXHRcdFx0Y2VsbE1vdXNlT3V0OlwiY2VsbC1tb3VzZW91dFwiLFxuXHRcdFx0Y2VsbE1vdXNlTW92ZTpcImNlbGwtbW91c2Vtb3ZlXCIsXG5cdFx0XHRjZWxsTW91c2VEb3duOlwiY2VsbC1tb3VzZWRvd25cIixcblx0XHRcdGNlbGxNb3VzZVVwOlwiY2VsbC1tb3VzZXVwXCIsXG5cdFx0XHRjZWxsVGFwOlwiY2VsbFwiLFxuXHRcdFx0Y2VsbERibFRhcDpcImNlbGxcIixcblx0XHRcdGNlbGxUYXBIb2xkOlwiY2VsbFwiLFxuXG5cdFx0XHQvL2NvbHVtbiBoZWFkZXIgZXZlbnRzXG5cdFx0XHRoZWFkZXJDbGljazpcImNvbHVtbi1jbGlja1wiLFxuXHRcdFx0aGVhZGVyRGJsQ2xpY2s6XCJjb2x1bW4tZGJsY2xpY2tcIixcblx0XHRcdGhlYWRlckNvbnRleHQ6XCJjb2x1bW4tY29udGV4dG1lbnVcIixcblx0XHRcdGhlYWRlck1vdXNlRW50ZXI6XCJjb2x1bW4tbW91c2VlbnRlclwiLFxuXHRcdFx0aGVhZGVyTW91c2VMZWF2ZTpcImNvbHVtbi1tb3VzZWxlYXZlXCIsXG5cdFx0XHRoZWFkZXJNb3VzZU92ZXI6XCJjb2x1bW4tbW91c2VvdmVyXCIsXG5cdFx0XHRoZWFkZXJNb3VzZU91dDpcImNvbHVtbi1tb3VzZW91dFwiLFxuXHRcdFx0aGVhZGVyTW91c2VNb3ZlOlwiY29sdW1uLW1vdXNlbW92ZVwiLFxuXHRcdFx0aGVhZGVyTW91c2VEb3duOlwiY29sdW1uLW1vdXNlZG93blwiLFxuXHRcdFx0aGVhZGVyTW91c2VVcDpcImNvbHVtbi1tb3VzZXVwXCIsXG5cdFx0XHRoZWFkZXJUYXA6XCJjb2x1bW5cIixcblx0XHRcdGhlYWRlckRibFRhcDpcImNvbHVtblwiLFxuXHRcdFx0aGVhZGVyVGFwSG9sZDpcImNvbHVtblwiLFxuXG5cdFx0XHQvL2dyb3VwIGhlYWRlclxuXHRcdFx0Z3JvdXBDbGljazpcImdyb3VwLWNsaWNrXCIsXG5cdFx0XHRncm91cERibENsaWNrOlwiZ3JvdXAtZGJsY2xpY2tcIixcblx0XHRcdGdyb3VwQ29udGV4dDpcImdyb3VwLWNvbnRleHRtZW51XCIsXG5cdFx0XHRncm91cE1vdXNlRW50ZXI6XCJncm91cC1tb3VzZWVudGVyXCIsXG5cdFx0XHRncm91cE1vdXNlTGVhdmU6XCJncm91cC1tb3VzZWxlYXZlXCIsXG5cdFx0XHRncm91cE1vdXNlT3ZlcjpcImdyb3VwLW1vdXNlb3ZlclwiLFxuXHRcdFx0Z3JvdXBNb3VzZU91dDpcImdyb3VwLW1vdXNlb3V0XCIsXG5cdFx0XHRncm91cE1vdXNlTW92ZTpcImdyb3VwLW1vdXNlbW92ZVwiLFxuXHRcdFx0Z3JvdXBNb3VzZURvd246XCJncm91cC1tb3VzZWRvd25cIixcblx0XHRcdGdyb3VwTW91c2VVcDpcImdyb3VwLW1vdXNldXBcIixcblx0XHRcdGdyb3VwVGFwOlwiZ3JvdXBcIixcblx0XHRcdGdyb3VwRGJsVGFwOlwiZ3JvdXBcIixcblx0XHRcdGdyb3VwVGFwSG9sZDpcImdyb3VwXCIsXG5cdFx0fTtcblxuXHRcdHRoaXMuc3Vic2NyaWJlcnMgPSB7fTtcblxuXHRcdHRoaXMudG91Y2hTdWJzY3JpYmVycyA9IHt9O1xuXG5cdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycyA9IHt9O1xuXG5cdFx0dGhpcy50b3VjaFdhdGNoZXJzID0ge1xuXHRcdFx0cm93Ontcblx0XHRcdFx0dGFwOm51bGwsXG5cdFx0XHRcdHRhcERibDpudWxsLFxuXHRcdFx0XHR0YXBIb2xkOm51bGwsXG5cdFx0XHR9LFxuXHRcdFx0Y2VsbDp7XG5cdFx0XHRcdHRhcDpudWxsLFxuXHRcdFx0XHR0YXBEYmw6bnVsbCxcblx0XHRcdFx0dGFwSG9sZDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdGNvbHVtbjp7XG5cdFx0XHRcdHRhcDpudWxsLFxuXHRcdFx0XHR0YXBEYmw6bnVsbCxcblx0XHRcdFx0dGFwSG9sZDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdGdyb3VwOntcblx0XHRcdFx0dGFwOm51bGwsXG5cdFx0XHRcdHRhcERibDpudWxsLFxuXHRcdFx0XHR0YXBIb2xkOm51bGwsXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJDbGlja1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRGJsQ2xpY2tcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckNvbnRleHRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlRW50ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlTGVhdmVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlT3ZlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VPdXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlTW92ZVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VEb3duXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJNb3VzZVVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJUYXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckRibFRhcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyVGFwSG9sZFwiKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsQ2xpY2tcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxEYmxDbGlja1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbENvbnRleHRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxNb3VzZUVudGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VMZWF2ZVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbE1vdXNlT3ZlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbE1vdXNlT3V0XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VNb3ZlXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VEb3duXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VVcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbFRhcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbERibFRhcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbFRhcEhvbGRcIik7XG5cblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVFeHRlcm5hbEV2ZW50cygpO1xuXG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWRibGNsaWNrXCIsIHRoaXMuY2VsbENvbnRlbnRzU2VsZWN0aW9uRml4ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGwtaG9yaXpvbnRhbFwiLCB0aGlzLmNsZWFyVG91Y2hXYXRjaGVycy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC12ZXJ0aWNhbFwiLCB0aGlzLmNsZWFyVG91Y2hXYXRjaGVycy5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGNsZWFyVG91Y2hXYXRjaGVycygpe1xuXHRcdHZhciB0eXBlcyA9IE9iamVjdC52YWx1ZXModGhpcy50b3VjaFdhdGNoZXJzKTtcblxuXHRcdHR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcblx0XHRcdGZvcihsZXQga2V5IGluIHR5cGUpe1xuXHRcdFx0XHR0eXBlW2tleV0gPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFx0XG5cdGNlbGxDb250ZW50c1NlbGVjdGlvbkZpeGVyKGUsIGNlbGwpe1xuXHRcdHZhciByYW5nZTtcblxuXHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZWRpdFwiKSl7XG5cdFx0XHRpZiAodGhpcy50YWJsZS5tb2R1bGVzLmVkaXQuY3VycmVudENlbGwgPT09IGNlbGwpe1xuXHRcdFx0XHRyZXR1cm47IC8vcHJldmVudCBpbnN0YW50IHNlbGVjdGlvbiBvZiBlZGl0b3IgY29udGVudFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHRyeXtcblx0XHRcdGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHsgLy8gSUVcblx0XHRcdFx0cmFuZ2UgPSBkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xuXHRcdFx0XHRyYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdHJhbmdlLnNlbGVjdCgpO1xuXHRcdFx0fSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG5cdFx0XHRcdHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcblx0XHRcdFx0cmFuZ2Uuc2VsZWN0Tm9kZShjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcblx0XHRcdFx0d2luZG93LmdldFNlbGVjdGlvbigpLmFkZFJhbmdlKHJhbmdlKTtcblx0XHRcdH1cblx0XHR9Y2F0Y2goZSl7fVxuXHR9XG5cblx0aW5pdGlhbGl6ZUV4dGVybmFsRXZlbnRzKCl7XG5cdFx0Zm9yKGxldCBrZXkgaW4gdGhpcy5ldmVudE1hcCl7XG5cdFx0XHR0aGlzLnN1YnNjcmlwdGlvbkNoYW5nZUV4dGVybmFsKGtleSwgdGhpcy5zdWJzY3JpcHRpb25DaGFuZ2VkLmJpbmQodGhpcywga2V5KSk7XG5cdFx0fVxuXHR9XG5cblx0c3Vic2NyaXB0aW9uQ2hhbmdlZChrZXksIGFkZGVkKXtcblx0XHRpZihhZGRlZCl7XG5cdFx0XHRpZighdGhpcy5zdWJzY3JpYmVyc1trZXldKXtcblx0XHRcdFx0aWYodGhpcy5ldmVudE1hcFtrZXldLmluY2x1ZGVzKFwiLVwiKSl7XG5cdFx0XHRcdFx0dGhpcy5zdWJzY3JpYmVyc1trZXldID0gdGhpcy5oYW5kbGUuYmluZCh0aGlzLCBrZXkpO1xuXHRcdFx0XHRcdHRoaXMuc3Vic2NyaWJlKHRoaXMuZXZlbnRNYXBba2V5XSwgdGhpcy5zdWJzY3JpYmVyc1trZXldKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc3Vic2NyaWJlVG91Y2hFdmVudHMoa2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMuZXZlbnRNYXBba2V5XS5pbmNsdWRlcyhcIi1cIikpe1xuXHRcdFx0XHRpZih0aGlzLnN1YnNjcmliZXJzW2tleV0gJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnNba2V5XSAgJiYgIXRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKGtleSkpe1xuXHRcdFx0XHRcdHRoaXMudW5zdWJzY3JpYmUodGhpcy5ldmVudE1hcFtrZXldLCB0aGlzLnN1YnNjcmliZXJzW2tleV0pO1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnN1YnNjcmliZXJzW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy51bnN1YnNjcmliZVRvdWNoRXZlbnRzKGtleSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblxuXHRzdWJzY3JpYmVUb3VjaEV2ZW50cyhrZXkpe1xuXHRcdHZhciB0eXBlID0gdGhpcy5ldmVudE1hcFtrZXldO1xuXG5cdFx0aWYoIXRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hzdGFydFwiXSl7XG5cdFx0XHR0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoc3RhcnRcIl0gPSB0aGlzLmhhbmRsZVRvdWNoLmJpbmQodGhpcywgdHlwZSwgXCJzdGFydFwiKTtcblx0XHRcdHRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hlbmRcIl0gPSB0aGlzLmhhbmRsZVRvdWNoLmJpbmQodGhpcywgdHlwZSwgXCJlbmRcIik7XG5cblx0XHRcdHRoaXMuc3Vic2NyaWJlKHR5cGUgKyBcIi10b3VjaHN0YXJ0XCIsIHRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hzdGFydFwiXSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZSh0eXBlICsgXCItdG91Y2hlbmRcIiwgdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaGVuZFwiXSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdWJzY3JpYmVyc1trZXldID0gdHJ1ZTtcblx0fVxuXG5cdHVuc3Vic2NyaWJlVG91Y2hFdmVudHMoa2V5KXtcblx0XHR2YXIgbm9Ub3VjaCA9IHRydWUsXG5cdFx0dHlwZSA9IHRoaXMuZXZlbnRNYXBba2V5XTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlcnNba2V5XSAmJiAhdGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoa2V5KSl7XG5cdFx0XHRkZWxldGUgdGhpcy5zdWJzY3JpYmVyc1trZXldO1xuXG5cdFx0XHRmb3IobGV0IGkgaW4gdGhpcy5ldmVudE1hcCl7XG5cdFx0XHRcdGlmKHRoaXMuZXZlbnRNYXBbaV0gPT09IHR5cGUpe1xuXHRcdFx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlcnNbaV0pe1xuXHRcdFx0XHRcdFx0bm9Ub3VjaCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihub1RvdWNoKXtcblx0XHRcdFx0dGhpcy51bnN1YnNjcmliZSh0eXBlICsgXCItdG91Y2hzdGFydFwiLCB0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoc3RhcnRcIl0pO1xuXHRcdFx0XHR0aGlzLnVuc3Vic2NyaWJlKHR5cGUgKyBcIi10b3VjaGVuZFwiLCB0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoZW5kXCJdKTtcblxuXHRcdFx0XHRkZWxldGUgdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaHN0YXJ0XCJdO1xuXHRcdFx0XHRkZWxldGUgdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaGVuZFwiXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGRlZiA9IGNvbHVtbi5kZWZpbml0aW9uO1xuXG5cdFx0Zm9yKGxldCBrZXkgaW4gdGhpcy5ldmVudE1hcCl7XG5cdFx0XHRpZihkZWZba2V5XSl7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaXB0aW9uQ2hhbmdlZChrZXksIHRydWUpO1xuXG5cdFx0XHRcdGlmKCF0aGlzLmNvbHVtblN1YnNjcmliZXJzW2tleV0pe1xuXHRcdFx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnNba2V5XSA9IFtdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVyc1trZXldLnB1c2goY29sdW1uKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRoYW5kbGUoYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChhY3Rpb24sIGUsIGNvbXBvbmVudCk7XG5cdH1cblxuXHRoYW5kbGVUb3VjaCh0eXBlLCBhY3Rpb24sIGUsIGNvbXBvbmVudCl7XG5cdFx0dmFyIHdhdGNoZXJzID0gdGhpcy50b3VjaFdhdGNoZXJzW3R5cGVdO1xuXG5cdFx0aWYodHlwZSA9PT0gXCJjb2x1bW5cIil7XG5cdFx0XHR0eXBlID0gXCJoZWFkZXJcIjtcblx0XHR9XG5cblx0XHRzd2l0Y2goYWN0aW9uKXtcblx0XHRcdGNhc2UgXCJzdGFydFwiOlxuXHRcdFx0XHR3YXRjaGVycy50YXAgPSB0cnVlO1xuXG5cdFx0XHRcdGNsZWFyVGltZW91dCh3YXRjaGVycy50YXBIb2xkKTtcblxuXHRcdFx0XHR3YXRjaGVycy50YXBIb2xkID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHdhdGNoZXJzLnRhcEhvbGQpO1xuXHRcdFx0XHRcdHdhdGNoZXJzLnRhcEhvbGQgPSBudWxsO1xuXG5cdFx0XHRcdFx0d2F0Y2hlcnMudGFwID0gbnVsbDtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwRGJsKTtcblx0XHRcdFx0XHR3YXRjaGVycy50YXBEYmwgPSBudWxsO1xuXG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHR5cGUgKyBcIlRhcEhvbGRcIiwgZSwgIGNvbXBvbmVudCk7XG5cdFx0XHRcdH0sIDEwMDApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImVuZFwiOlxuXHRcdFx0XHRpZih3YXRjaGVycy50YXApe1xuXG5cdFx0XHRcdFx0d2F0Y2hlcnMudGFwID0gbnVsbDtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQodHlwZSArIFwiVGFwXCIsIGUsICBjb21wb25lbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYod2F0Y2hlcnMudGFwRGJsKXtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwRGJsKTtcblx0XHRcdFx0XHR3YXRjaGVycy50YXBEYmwgPSBudWxsO1xuXG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHR5cGUgKyBcIkRibFRhcFwiLCBlLCAgY29tcG9uZW50KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdhdGNoZXJzLnRhcERibCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHdhdGNoZXJzLnRhcERibCk7XG5cdFx0XHRcdFx0XHR3YXRjaGVycy50YXBEYmwgPSBudWxsO1xuXHRcdFx0XHRcdH0sIDMwMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwSG9sZCk7XG5cdFx0XHRcdHdhdGNoZXJzLnRhcEhvbGQgPSBudWxsO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRkaXNwYXRjaEV2ZW50KGFjdGlvbiwgZSwgY29tcG9uZW50KXtcblx0XHR2YXIgY29tcG9uZW50T2JqID0gY29tcG9uZW50LmdldENvbXBvbmVudCgpLFxuXHRcdGNhbGxiYWNrO1xuXG5cdFx0aWYodGhpcy5jb2x1bW5TdWJzY3JpYmVyc1thY3Rpb25dKXtcblxuXHRcdFx0aWYoY29tcG9uZW50IGluc3RhbmNlb2YgQ2VsbCl7XG5cdFx0XHRcdGNhbGxiYWNrID0gY29tcG9uZW50LmNvbHVtbi5kZWZpbml0aW9uW2FjdGlvbl07XG5cdFx0XHR9ZWxzZSBpZihjb21wb25lbnQgaW5zdGFuY2VvZiBDb2x1bW4pe1xuXHRcdFx0XHRjYWxsYmFjayA9IGNvbXBvbmVudC5kZWZpbml0aW9uW2FjdGlvbl07XG5cdFx0XHR9XG5cblx0XHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdFx0Y2FsbGJhY2soZSwgY29tcG9uZW50T2JqKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoYWN0aW9uLCBlLCBjb21wb25lbnRPYmopO1xuXHR9XG59XG5cbnZhciBkZWZhdWx0QmluZGluZ3MgPSB7XG5cdG5hdlByZXY6XCJzaGlmdCArIDlcIixcblx0bmF2TmV4dDo5LFxuXHRuYXZVcDozOCxcblx0bmF2RG93bjo0MCxcblx0bmF2TGVmdDozNyxcblx0bmF2UmlnaHQ6MzksXG5cdHNjcm9sbFBhZ2VVcDozMyxcblx0c2Nyb2xsUGFnZURvd246MzQsXG5cdHNjcm9sbFRvU3RhcnQ6MzYsXG5cdHNjcm9sbFRvRW5kOjM1LFxufTtcblxudmFyIGRlZmF1bHRBY3Rpb25zID0ge1xuXHRrZXlCbG9jazpmdW5jdGlvbihlKXtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0fSxcblxuXHRzY3JvbGxQYWdlVXA6ZnVuY3Rpb24oZSl7XG5cdFx0dmFyIHJvd01hbmFnZXIgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIsXG5cdFx0bmV3UG9zID0gcm93TWFuYWdlci5zY3JvbGxUb3AgLSByb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYocm93TWFuYWdlci5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdGlmKG5ld1BvcyA+PSAwKXtcblx0XHRcdFx0cm93TWFuYWdlci5lbGVtZW50LnNjcm9sbFRvcCA9IG5ld1Bvcztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cm93TWFuYWdlci5zY3JvbGxUb1Jvdyhyb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKClbMF0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5mb2N1cygpO1xuXHR9LFxuXG5cdHNjcm9sbFBhZ2VEb3duOmZ1bmN0aW9uKGUpe1xuXHRcdHZhciByb3dNYW5hZ2VyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLFxuXHRcdG5ld1BvcyA9IHJvd01hbmFnZXIuc2Nyb2xsVG9wICsgcm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodCxcblx0XHRzY3JvbGxNYXggPSByb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYocm93TWFuYWdlci5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdGlmKG5ld1BvcyA8PSBzY3JvbGxNYXgpe1xuXHRcdFx0XHRyb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wID0gbmV3UG9zO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKVtyb3dNYW5hZ2VyLmRpc3BsYXlSb3dzQ291bnQgLSAxXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmZvY3VzKCk7XG5cblx0fSxcblxuXHRzY3JvbGxUb1N0YXJ0OmZ1bmN0aW9uKGUpe1xuXHRcdHZhciByb3dNYW5hZ2VyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyO1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYocm93TWFuYWdlci5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdHJvd01hbmFnZXIuc2Nyb2xsVG9Sb3cocm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpWzBdKTtcblx0XHR9XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuZm9jdXMoKTtcblx0fSxcblxuXHRzY3JvbGxUb0VuZDpmdW5jdGlvbihlKXtcblx0XHR2YXIgcm93TWFuYWdlciA9IHRoaXMudGFibGUucm93TWFuYWdlcjtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmKHJvd01hbmFnZXIuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHRyb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKVtyb3dNYW5hZ2VyLmRpc3BsYXlSb3dzQ291bnQgLSAxXSk7XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmZvY3VzKCk7XG5cdH0sXG5cblx0bmF2UHJldjpmdW5jdGlvbihlKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcHJldlwiLCBlKTtcblx0fSxcblxuXHRuYXZOZXh0OmZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1uZXh0XCIsIGUpO1xuXHR9LFxuXG5cdG5hdkxlZnQ6ZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LWxlZnRcIiwgZSk7XG5cdH0sXG5cblx0bmF2UmlnaHQ6ZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LXJpZ2h0XCIsIGUpO1xuXHR9LFxuXG5cdG5hdlVwOmZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi11cFwiLCBlKTtcblx0fSxcblxuXHRuYXZEb3duOmZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1kb3duXCIsIGUpO1xuXHR9LFxufTtcblxuY2xhc3MgS2V5YmluZGluZ3MgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcImtleWJpbmRpbmdzXCI7XG5cblx0Ly9sb2FkIGRlZmF1bHRzXG5cdHN0YXRpYyBiaW5kaW5ncyA9IGRlZmF1bHRCaW5kaW5ncztcblx0c3RhdGljIGFjdGlvbnMgPSBkZWZhdWx0QWN0aW9ucztcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy53YXRjaEtleXMgPSBudWxsO1xuXHRcdHRoaXMucHJlc3NlZEtleXMgPSBudWxsO1xuXHRcdHRoaXMua2V5dXBCaW5kaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5rZXlkb3duQmluZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwia2V5YmluZGluZ3NcIiwge30pOyAvL2FycmF5IGZvciBrZXliaW5kaW5nc1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInRhYkVuZE5ld1Jvd1wiLCBmYWxzZSk7IC8vY3JlYXRlIG5ldyByb3cgd2hlbiB0YWIgdG8gZW5kIG9mIHRhYmxlXG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy50YWJsZS5vcHRpb25zLmtleWJpbmRpbmdzLFxuXHRcdG1lcmdlZEJpbmRpbmdzID0ge307XG5cblx0XHR0aGlzLndhdGNoS2V5cyA9IHt9O1xuXHRcdHRoaXMucHJlc3NlZEtleXMgPSBbXTtcblxuXHRcdGlmKGJpbmRpbmdzICE9PSBmYWxzZSl7XG5cdFx0XHRPYmplY3QuYXNzaWduKG1lcmdlZEJpbmRpbmdzLCBLZXliaW5kaW5ncy5iaW5kaW5ncyk7XG5cdFx0XHRPYmplY3QuYXNzaWduKG1lcmdlZEJpbmRpbmdzLCBiaW5kaW5ncyk7XG5cblx0XHRcdHRoaXMubWFwQmluZGluZ3MobWVyZ2VkQmluZGluZ3MpO1xuXHRcdFx0dGhpcy5iaW5kRXZlbnRzKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuY2xlYXJCaW5kaW5ncy5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdG1hcEJpbmRpbmdzKGJpbmRpbmdzKXtcblx0XHRmb3IobGV0IGtleSBpbiBiaW5kaW5ncyl7XG5cdFx0XHRpZihLZXliaW5kaW5ncy5hY3Rpb25zW2tleV0pe1xuXHRcdFx0XHRpZihiaW5kaW5nc1trZXldKXtcblx0XHRcdFx0XHRpZih0eXBlb2YgYmluZGluZ3Nba2V5XSAhPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc1trZXldID0gW2JpbmRpbmdzW2tleV1dO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJpbmRpbmdzW2tleV0uZm9yRWFjaCgoYmluZGluZykgPT4ge1xuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdMaXN0ID0gQXJyYXkuaXNBcnJheShiaW5kaW5nKSA/ICBiaW5kaW5nIDogW2JpbmRpbmddO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRiaW5kaW5nTGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWFwQmluZGluZyhrZXksIGl0ZW0pO1xuXHRcdFx0XHRcdFx0fSk7XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiS2V5IEJpbmRpbmcgRXJyb3IgLSBubyBzdWNoIGFjdGlvbjpcIiwga2V5KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRtYXBCaW5kaW5nKGFjdGlvbiwgc3ltYm9sc0xpc3Qpe1xuXHRcdHZhciBiaW5kaW5nID0ge1xuXHRcdFx0YWN0aW9uOiBLZXliaW5kaW5ncy5hY3Rpb25zW2FjdGlvbl0sXG5cdFx0XHRrZXlzOiBbXSxcblx0XHRcdGN0cmw6IGZhbHNlLFxuXHRcdFx0c2hpZnQ6IGZhbHNlLFxuXHRcdFx0bWV0YTogZmFsc2UsXG5cdFx0fTtcblxuXHRcdHZhciBzeW1ib2xzID0gc3ltYm9sc0xpc3QudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKS5qb2luKFwiXCIpLnNwbGl0KFwiK1wiKTtcblxuXHRcdHN5bWJvbHMuZm9yRWFjaCgoc3ltYm9sKSA9PiB7XG5cdFx0XHRzd2l0Y2goc3ltYm9sKXtcblx0XHRcdFx0Y2FzZSBcImN0cmxcIjpcblx0XHRcdFx0XHRiaW5kaW5nLmN0cmwgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJzaGlmdFwiOlxuXHRcdFx0XHRcdGJpbmRpbmcuc2hpZnQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJtZXRhXCI6XG5cdFx0XHRcdFx0YmluZGluZy5tZXRhID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHN5bWJvbCA9IGlzTmFOKHN5bWJvbCkgPyBzeW1ib2wudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApIDogcGFyc2VJbnQoc3ltYm9sKTtcblx0XHRcdFx0XHRiaW5kaW5nLmtleXMucHVzaChzeW1ib2wpO1xuXG5cdFx0XHRcdFx0aWYoIXRoaXMud2F0Y2hLZXlzW3N5bWJvbF0pe1xuXHRcdFx0XHRcdFx0dGhpcy53YXRjaEtleXNbc3ltYm9sXSA9IFtdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMud2F0Y2hLZXlzW3N5bWJvbF0ucHVzaChiaW5kaW5nKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGJpbmRFdmVudHMoKXtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHR0aGlzLmtleXVwQmluZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGNvZGUgPSBlLmtleUNvZGU7XG5cdFx0XHR2YXIgYmluZGluZ3MgPSBzZWxmLndhdGNoS2V5c1tjb2RlXTtcblxuXHRcdFx0aWYoYmluZGluZ3Mpe1xuXG5cdFx0XHRcdHNlbGYucHJlc3NlZEtleXMucHVzaChjb2RlKTtcblxuXHRcdFx0XHRiaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uKGJpbmRpbmcpe1xuXHRcdFx0XHRcdHNlbGYuY2hlY2tCaW5kaW5nKGUsIGJpbmRpbmcpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5rZXlkb3duQmluZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGNvZGUgPSBlLmtleUNvZGU7XG5cdFx0XHR2YXIgYmluZGluZ3MgPSBzZWxmLndhdGNoS2V5c1tjb2RlXTtcblxuXHRcdFx0aWYoYmluZGluZ3Mpe1xuXG5cdFx0XHRcdHZhciBpbmRleCA9IHNlbGYucHJlc3NlZEtleXMuaW5kZXhPZihjb2RlKTtcblxuXHRcdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0XHRzZWxmLnByZXNzZWRLZXlzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMua2V5dXBCaW5kaW5nKTtcblxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5rZXlkb3duQmluZGluZyk7XG5cdH1cblxuXHRjbGVhckJpbmRpbmdzKCl7XG5cdFx0aWYodGhpcy5rZXl1cEJpbmRpbmcpe1xuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMua2V5dXBCaW5kaW5nKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmtleWRvd25CaW5kaW5nKXtcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5rZXlkb3duQmluZGluZyk7XG5cdFx0fVxuXHR9XG5cblx0Y2hlY2tCaW5kaW5nKGUsIGJpbmRpbmcpe1xuXHRcdHZhciBtYXRjaCA9IHRydWU7XG5cblx0XHRpZihlLmN0cmxLZXkgPT0gYmluZGluZy5jdHJsICYmIGUuc2hpZnRLZXkgPT0gYmluZGluZy5zaGlmdCAmJiBlLm1ldGFLZXkgPT0gYmluZGluZy5tZXRhKXtcblx0XHRcdGJpbmRpbmcua2V5cy5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdFx0dmFyIGluZGV4ID0gdGhpcy5wcmVzc2VkS2V5cy5pbmRleE9mKGtleSk7XG5cblx0XHRcdFx0aWYoaW5kZXggPT0gLTEpe1xuXHRcdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdGJpbmRpbmcuYWN0aW9uLmNhbGwodGhpcywgZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5jbGFzcyBNZW51IGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJtZW51XCI7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMubWVudUNvbnRhaW5lciA9IG51bGw7XG5cdFx0dGhpcy5uZXN0ZWRNZW51QmxvY2sgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmN1cnJlbnRDb21wb25lbnQgPSBudWxsO1xuXHRcdHRoaXMucm9vdFBvcHVwID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzID0ge307XG5cdFx0XG5cdFx0Ly8gdGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibWVudUNvbnRhaW5lclwiLCB1bmRlZmluZWQpOyAvL2RlcHJlY2F0ZWRcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyb3dDb250ZXh0TWVudVwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93Q2xpY2tNZW51XCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyb3dEYmxDbGlja01lbnVcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwQ29udGV4dE1lbnVcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwQ2xpY2tNZW51XCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cERibENsaWNrTWVudVwiLCBmYWxzZSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckNvbnRleHRNZW51XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJDbGlja01lbnVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckRibENsaWNrTWVudVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTWVudVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTWVudUljb25cIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNvbnRleHRNZW51XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjbGlja01lbnVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImRibENsaWNrTWVudVwiKTtcblx0XHRcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZVJvd1dhdGNoZXJzKCk7XG5cdFx0dGhpcy5pbml0aWFsaXplR3JvdXBXYXRjaGVycygpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRkZXByZWNhdGVkT3B0aW9uc0NoZWNrKCl7XG5cdFx0Ly8gaWYoIXRoaXMuZGVwcmVjYXRpb25DaGVjayhcIm1lbnVDb250YWluZXJcIiwgXCJwb3B1cENvbnRhaW5lclwiKSl7XG5cdFx0Ly8gXHR0aGlzLnRhYmxlLm9wdGlvbnMucG9wdXBDb250YWluZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMubWVudUNvbnRhaW5lcjtcblx0XHQvLyB9XG5cdH1cdFxuXHRcblx0aW5pdGlhbGl6ZVJvd1dhdGNoZXJzKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJvd0NvbnRleHRNZW51KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWNvbnRleHRtZW51XCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5yb3dDb250ZXh0TWVudSkpO1xuXHRcdFx0dGhpcy50YWJsZS5vbihcInJvd1RhcEhvbGRcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0NvbnRleHRNZW51KSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dDbGlja01lbnUpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctY2xpY2tcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0NsaWNrTWVudSkpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93RGJsQ2xpY2tNZW51KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRibGNsaWNrXCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5yb3dEYmxDbGlja01lbnUpKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVHcm91cFdhdGNoZXJzKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dE1lbnUpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1jb250ZXh0bWVudVwiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDb250ZXh0TWVudSkpO1xuXHRcdFx0dGhpcy50YWJsZS5vbihcImdyb3VwVGFwSG9sZFwiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDb250ZXh0TWVudSkpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDbGlja01lbnUpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1jbGlja1wiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDbGlja01lbnUpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwRGJsQ2xpY2tNZW51KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZ3JvdXAtZGJsY2xpY2tcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwRGJsQ2xpY2tNZW51KSk7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhclx0ZGVmID0gY29sdW1uLmRlZmluaXRpb247XG5cdFx0XG5cdFx0Ly9oYW5kbGUgY29sdW1uIGV2ZW50c1xuXHRcdGlmKGRlZi5oZWFkZXJDb250ZXh0TWVudSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0TWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNvbnRleHRNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckNvbnRleHRNZW51XCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tY29udGV4dG1lbnVcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0TWVudSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwiaGVhZGVyVGFwSG9sZFwiLCB0aGlzLmxvYWRNZW51VGFibGVDb2x1bW5FdmVudC5iaW5kKHRoaXMsIFwiaGVhZGVyQ29udGV4dE1lbnVcIikpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuaGVhZGVyQ2xpY2tNZW51ICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrTWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrTWVudSA9IHRoaXMubG9hZE1lbnVUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJDbGlja01lbnVcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1jbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrTWVudSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5oZWFkZXJEYmxDbGlja01lbnUgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tNZW51KXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckRibENsaWNrTWVudVwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWRibGNsaWNrXCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tNZW51KTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmhlYWRlck1lbnUpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uSGVhZGVyTWVudShjb2x1bW4pO1xuXHRcdH1cblx0XHRcblx0XHQvL2hhbmRsZSBjZWxsIGV2ZW50c1xuXHRcdGlmKGRlZi5jb250ZXh0TWVudSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jb250ZXh0TWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNvbnRleHRNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJjb250ZXh0TWVudVwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1jb250ZXh0bWVudVwiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNvbnRleHRNZW51KTtcblx0XHRcdHRoaXMudGFibGUub24oXCJjZWxsVGFwSG9sZFwiLCB0aGlzLmxvYWRNZW51VGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImNvbnRleHRNZW51XCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmNsaWNrTWVudSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja01lbnUpe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja01lbnUgPSB0aGlzLmxvYWRNZW51VGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImNsaWNrTWVudVwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1jbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNsaWNrTWVudSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5kYmxDbGlja01lbnUgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tNZW51KXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJkYmxDbGlja01lbnVcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZGJsY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5kYmxDbGlja01lbnUpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbkhlYWRlck1lbnUoY29sdW1uKXtcblx0XHR2YXIgaWNvbiA9IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlck1lbnVJY29uLFxuXHRcdGhlYWRlck1lbnVFbDtcblx0XHRcblx0XHRoZWFkZXJNZW51RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHRoZWFkZXJNZW51RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXItcG9wdXAtYnV0dG9uXCIpO1xuXHRcdFxuXHRcdGlmKGljb24pe1xuXHRcdFx0aWYodHlwZW9mIGljb24gPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGljb24gPSBpY29uKGNvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGljb24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdGhlYWRlck1lbnVFbC5hcHBlbmRDaGlsZChpY29uKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aGVhZGVyTWVudUVsLmlubmVySFRNTCA9IGljb247XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aGVhZGVyTWVudUVsLmlubmVySFRNTCA9IFwiJnZlbGxpcDtcIjtcblx0XHR9XG5cdFx0XG5cdFx0aGVhZGVyTWVudUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sb2FkTWVudUV2ZW50KGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlck1lbnUsIGUsIGNvbHVtbik7XG5cdFx0fSk7XG5cdFx0XG5cdFx0Y29sdW1uLnRpdGxlRWxlbWVudC5pbnNlcnRCZWZvcmUoaGVhZGVyTWVudUVsLCBjb2x1bW4udGl0bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHR9XG5cdFxuXHRsb2FkTWVudVRhYmxlQ2VsbEV2ZW50KG9wdGlvbiwgZSwgY2VsbCl7XG5cdFx0aWYoY2VsbC5fY2VsbCl7XG5cdFx0XHRjZWxsID0gY2VsbC5fY2VsbDtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbltvcHRpb25dKXtcblx0XHRcdHRoaXMubG9hZE1lbnVFdmVudChjZWxsLmNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0sIGUsIGNlbGwpO1xuXHRcdH1cblx0fVxuXHRcblx0bG9hZE1lbnVUYWJsZUNvbHVtbkV2ZW50KG9wdGlvbiwgZSwgY29sdW1uKXtcblx0XHRpZihjb2x1bW4uX2NvbHVtbil7XG5cdFx0XHRjb2x1bW4gPSBjb2x1bW4uX2NvbHVtbjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSl7XG5cdFx0XHR0aGlzLmxvYWRNZW51RXZlbnQoY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSwgZSwgY29sdW1uKTtcblx0XHR9XG5cdH1cblx0XG5cdGxvYWRNZW51RXZlbnQobWVudSwgZSwgY29tcG9uZW50KXtcblx0XHRpZihjb21wb25lbnQuX2dyb3VwKXtcblx0XHRcdGNvbXBvbmVudCA9IGNvbXBvbmVudC5fZ3JvdXA7XG5cdFx0fWVsc2UgaWYoY29tcG9uZW50Ll9yb3cpe1xuXHRcdFx0Y29tcG9uZW50ID0gY29tcG9uZW50Ll9yb3c7XG5cdFx0fVxuXHRcdFxuXHRcdG1lbnUgPSB0eXBlb2YgbWVudSA9PSBcImZ1bmN0aW9uXCIgPyBtZW51LmNhbGwodGhpcy50YWJsZSwgZSwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKSA6IG1lbnU7XG5cdFx0XG5cdFx0dGhpcy5sb2FkTWVudShlLCBjb21wb25lbnQsIG1lbnUpO1xuXHR9XG5cdFxuXHRsb2FkTWVudShlLCBjb21wb25lbnQsIG1lbnUsIHBhcmVudEVsLCBwYXJlbnRQb3B1cCl7XG5cdFx0dmFyIHRvdWNoID0gIShlIGluc3RhbmNlb2YgTW91c2VFdmVudCksXHRcdFxuXHRcdG1lbnVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0cG9wdXA7XG5cdFx0XG5cdFx0bWVudUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbWVudVwiKTtcblx0XHRcblx0XHRpZighdG91Y2gpe1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0XHRcblx0XHQvL2Fib3J0IGlmIG5vIG1lbnUgc2V0XG5cdFx0aWYoIW1lbnUgfHwgIW1lbnUubGVuZ3RoKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoIXBhcmVudEVsKXtcblx0XHRcdGlmKHRoaXMubmVzdGVkTWVudUJsb2NrKXtcblx0XHRcdFx0Ly9hYm9ydCBpZiBjaGlsZCBtZW51IGFscmVhZHkgb3BlblxuXHRcdFx0XHRpZih0aGlzLnJvb3RQb3B1cCl7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubmVzdGVkTWVudUJsb2NrID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5uZXN0ZWRNZW51QmxvY2sgPSBmYWxzZTtcblx0XHRcdFx0fSwgMTAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5yb290UG9wdXApe1xuXHRcdFx0XHR0aGlzLnJvb3RQb3B1cC5oaWRlKCk7XHRcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5yb290UG9wdXAgPSBwb3B1cCA9IHRoaXMucG9wdXAobWVudUVsKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdHBvcHVwID0gcGFyZW50UG9wdXAuY2hpbGQobWVudUVsKTtcblx0XHR9XG5cdFx0XG5cdFx0bWVudS5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHR2YXIgaXRlbUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0XHRcdGxhYmVsID0gaXRlbS5sYWJlbCxcblx0XHRcdGRpc2FibGVkID0gaXRlbS5kaXNhYmxlZDtcblx0XHRcdFxuXHRcdFx0aWYoaXRlbS5zZXBhcmF0b3Ipe1xuXHRcdFx0XHRpdGVtRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tZW51LXNlcGFyYXRvclwiKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aXRlbUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbWVudS1pdGVtXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodHlwZW9mIGxhYmVsID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0bGFiZWwgPSBsYWJlbC5jYWxsKHRoaXMudGFibGUsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGxhYmVsIGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdFx0aXRlbUVsLmFwcGVuZENoaWxkKGxhYmVsKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGl0ZW1FbC5pbm5lckhUTUwgPSBsYWJlbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYodHlwZW9mIGRpc2FibGVkID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0ZGlzYWJsZWQgPSBkaXNhYmxlZC5jYWxsKHRoaXMudGFibGUsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGRpc2FibGVkKXtcblx0XHRcdFx0XHRpdGVtRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tZW51LWl0ZW0tZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0aXRlbUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKGl0ZW0ubWVudSAmJiBpdGVtLm1lbnUubGVuZ3RoKXtcblx0XHRcdFx0XHRcdGl0ZW1FbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5sb2FkTWVudShlLCBjb21wb25lbnQsIGl0ZW0ubWVudSwgaXRlbUVsLCBwb3B1cCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihpdGVtLmFjdGlvbil7XG5cdFx0XHRcdFx0XHRcdGl0ZW1FbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmFjdGlvbihlLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGl0ZW0ubWVudSAmJiBpdGVtLm1lbnUubGVuZ3RoKXtcblx0XHRcdFx0XHRpdGVtRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tZW51LWl0ZW0tc3VibWVudVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRtZW51RWwuYXBwZW5kQ2hpbGQoaXRlbUVsKTtcblx0XHR9KTtcblx0XHRcblx0XHRtZW51RWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRpZih0aGlzLnJvb3RQb3B1cCl7XG5cdFx0XHRcdHRoaXMucm9vdFBvcHVwLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRwb3B1cC5zaG93KHBhcmVudEVsIHx8IGUpO1xuXHRcdFxuXHRcdGlmKHBvcHVwID09PSB0aGlzLnJvb3RQb3B1cCl7XG5cdFx0XHR0aGlzLnJvb3RQb3B1cC5oaWRlT25CbHVyKCgpID0+IHtcblx0XHRcdFx0dGhpcy5yb290UG9wdXAgPSBudWxsO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5jdXJyZW50Q29tcG9uZW50KXtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwibWVudS1jbG9zZWRcIiwgbWVudSwgcG9wdXApO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1lbnVDbG9zZWRcIiwgdGhpcy5jdXJyZW50Q29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0XHR0aGlzLmN1cnJlbnRDb21wb25lbnQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5jdXJyZW50Q29tcG9uZW50ID0gY29tcG9uZW50O1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwibWVudS1vcGVuZWRcIiwgbWVudSwgcG9wdXApO1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibWVudU9wZW5lZFwiLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBNb3ZlQ29sdW1ucyBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwibW92ZUNvbHVtblwiO1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCA9IHRoaXMuY3JlYXRlUGxhY2Vob2xkZXJFbGVtZW50KCk7XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQgPSBmYWxzZTsgLy9mbG9hdGluZyBjb2x1bW4gaGVhZGVyIGVsZW1lbnRcblx0XHR0aGlzLmNoZWNrVGltZW91dCA9IGZhbHNlOyAvL2NsaWNrIGNoZWNrIHRpbWVvdXQgaG9sZGVyXG5cdFx0dGhpcy5jaGVja1BlcmlvZCA9IDI1MDsgLy9wZXJpb2QgdG8gd2FpdCBvbiBtb3VzZWRvd24gdG8gY29uc2lkZXIgdGhpcyBhIG1vdmUgYW5kIG5vdCBhIGNsaWNrXG5cdFx0dGhpcy5tb3ZpbmcgPSBmYWxzZTsgLy9jdXJyZW50bHkgbW92aW5nIGNvbHVtblxuXHRcdHRoaXMudG9Db2wgPSBmYWxzZTsgLy9kZXN0aW5hdGlvbiBjb2x1bW5cblx0XHR0aGlzLnRvQ29sQWZ0ZXIgPSBmYWxzZTsgLy9wb3NpdGlvbiBvZiBtb3ZpbmcgY29sdW1uIHJlbGF0aXZlIHRvIHRoZSBkZXN0aW5hdGlvbiBjb2x1bW5cblx0XHR0aGlzLnN0YXJ0WCA9IDA7IC8vc3RhcnRpbmcgcG9zaXRpb24gd2l0aGluIGhlYWRlciBlbGVtZW50XG5cdFx0dGhpcy5hdXRvU2Nyb2xsTWFyZ2luID0gNDA7IC8vYXV0byBzY3JvbGwgb24gZWRnZSB3aGVuIHdpdGhpbiBtYXJnaW5cblx0XHR0aGlzLmF1dG9TY3JvbGxTdGVwID0gNTsgLy9hdXRvIHNjcm9sbCBkaXN0YW5jZSBpbiBwaXhlbHNcblx0XHR0aGlzLmF1dG9TY3JvbGxUaW1lb3V0ID0gZmFsc2U7IC8vYXV0byBzY3JvbGwgdGltZW91dFxuXHRcdHRoaXMudG91Y2hNb3ZlID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5tb3ZlSG92ZXIgPSB0aGlzLm1vdmVIb3Zlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZW5kTW92ZSA9IHRoaXMuZW5kTW92ZS5iaW5kKHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVDb2x1bW5zXCIsIGZhbHNlKTsgLy9lbmFibGUgbW92YWJsZSBjb2x1bW5zXG5cdH1cblx0XG5cdGNyZWF0ZVBsYWNlaG9sZGVyRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2xcIik7XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtcGxhY2Vob2xkZXJcIik7XG5cdFx0XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVDb2x1bW5zKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJhbGVydC1zaG93XCIsIHRoaXMuYWJvcnRNb3ZlLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXG5cdGFib3J0TW92ZSgpe1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLmNoZWNrVGltZW91dCk7XG5cdH1cblx0XG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y29uZmlnID0ge30sXG5cdFx0Y29sRWw7XG5cblx0XHRpZighY29sdW1uLm1vZHVsZXMuZnJvemVuICYmICFjb2x1bW4uaXNHcm91cCAmJiAhY29sdW1uLmlzUm93SGVhZGVyKXtcblx0XHRcdGNvbEVsID0gY29sdW1uLmdldEVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0Y29uZmlnLm1vdXNlbW92ZSA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihjb2x1bW4ucGFyZW50ID09PSBzZWxmLm1vdmluZy5wYXJlbnQpe1xuXHRcdFx0XHRcdGlmKCgoKHNlbGYudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCkgLSBIZWxwZXJzLmVsT2Zmc2V0KGNvbEVsKS5sZWZ0KSArIHNlbGYudGFibGUuY29sdW1uTWFuYWdlci5jb250ZW50c0VsZW1lbnQuc2Nyb2xsTGVmdCkgPiAoY29sdW1uLmdldFdpZHRoKCkgLyAyKSl7XG5cdFx0XHRcdFx0XHRpZihzZWxmLnRvQ29sICE9PSBjb2x1bW4gfHwgIXNlbGYudG9Db2xBZnRlcil7XG5cdFx0XHRcdFx0XHRcdGNvbEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYucGxhY2Vob2xkZXJFbGVtZW50LCBjb2xFbC5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0XHRcdHNlbGYubW92ZUNvbHVtbihjb2x1bW4sIHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGlmKHNlbGYudG9Db2wgIT09IGNvbHVtbiB8fCBzZWxmLnRvQ29sQWZ0ZXIpe1xuXHRcdFx0XHRcdFx0XHRjb2xFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgY29sRWwpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLm1vdmVDb2x1bW4oY29sdW1uLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LmJpbmQoc2VsZik7XG5cdFx0XHRcblx0XHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdHNlbGYudG91Y2hNb3ZlID0gZmFsc2U7XG5cdFx0XHRcdGlmKGUud2hpY2ggPT09IDEpe1xuXHRcdFx0XHRcdHNlbGYuY2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0c2VsZi5zdGFydE1vdmUoZSwgY29sdW1uKTtcblx0XHRcdFx0XHR9LCBzZWxmLmNoZWNrUGVyaW9kKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRpZihzZWxmLmNoZWNrVGltZW91dCl7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoc2VsZi5jaGVja1RpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHNlbGYuYmluZFRvdWNoRXZlbnRzKGNvbHVtbik7XG5cdFx0fVxuXHRcdFxuXHRcdGNvbHVtbi5tb2R1bGVzLm1vdmVDb2x1bW4gPSBjb25maWc7XG5cdH1cblx0XG5cdGJpbmRUb3VjaEV2ZW50cyhjb2x1bW4pe1xuXHRcdHZhciBjb2xFbCA9IGNvbHVtbi5nZXRFbGVtZW50KCksXG5cdFx0c3RhcnRYTW92ZSA9IGZhbHNlLCAvL3NoaWZ0aW5nIGNlbnRlciBwb3NpdGlvbiBvZiB0aGUgY2VsbFxuXHRcdG5leHRDb2wsIHByZXZDb2wsIG5leHRDb2xXaWR0aCwgcHJldkNvbFdpZHRoLCBuZXh0Q29sV2lkdGhMYXN0LCBwcmV2Q29sV2lkdGhMYXN0O1xuXHRcdFxuXHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIChlKSA9PiB7XG5cdFx0XHR0aGlzLmNoZWNrVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnRvdWNoTW92ZSA9IHRydWU7XG5cdFx0XHRcdG5leHRDb2wgPSBjb2x1bW4ubmV4dENvbHVtbigpO1xuXHRcdFx0XHRuZXh0Q29sV2lkdGggPSBuZXh0Q29sID8gbmV4dENvbC5nZXRXaWR0aCgpLzIgOiAwO1xuXHRcdFx0XHRwcmV2Q29sID0gY29sdW1uLnByZXZDb2x1bW4oKTtcblx0XHRcdFx0cHJldkNvbFdpZHRoID0gcHJldkNvbCA/IHByZXZDb2wuZ2V0V2lkdGgoKS8yIDogMDtcblx0XHRcdFx0bmV4dENvbFdpZHRoTGFzdCA9IDA7XG5cdFx0XHRcdHByZXZDb2xXaWR0aExhc3QgPSAwO1xuXHRcdFx0XHRzdGFydFhNb3ZlID0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnN0YXJ0TW92ZShlLCBjb2x1bW4pO1xuXHRcdFx0fSwgdGhpcy5jaGVja1BlcmlvZCk7XG5cdFx0fSwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHRcblx0XHRjb2xFbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIChlKSA9PiB7XG5cdFx0XHR2YXIgZGlmZiwgbW92ZVRvQ29sO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLm1vdmluZyl7XG5cdFx0XHRcdHRoaXMubW92ZUhvdmVyKGUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIXN0YXJ0WE1vdmUpe1xuXHRcdFx0XHRcdHN0YXJ0WE1vdmUgPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGRpZmYgPSBlLnRvdWNoZXNbMF0ucGFnZVggLSBzdGFydFhNb3ZlO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZGlmZiA+IDApe1xuXHRcdFx0XHRcdGlmKG5leHRDb2wgJiYgZGlmZiAtIG5leHRDb2xXaWR0aExhc3QgPiBuZXh0Q29sV2lkdGgpe1xuXHRcdFx0XHRcdFx0bW92ZVRvQ29sID0gbmV4dENvbDtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYobW92ZVRvQ29sICE9PSBjb2x1bW4pe1xuXHRcdFx0XHRcdFx0XHRzdGFydFhNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuXHRcdFx0XHRcdFx0XHRtb3ZlVG9Db2wuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBtb3ZlVG9Db2wuZ2V0RWxlbWVudCgpLm5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tb3ZlQ29sdW1uKG1vdmVUb0NvbCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYocHJldkNvbCAmJiAtZGlmZiAtIHByZXZDb2xXaWR0aExhc3QgPiAgcHJldkNvbFdpZHRoKXtcblx0XHRcdFx0XHRcdG1vdmVUb0NvbCA9IHByZXZDb2w7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKG1vdmVUb0NvbCAhPT0gY29sdW1uKXtcblx0XHRcdFx0XHRcdFx0c3RhcnRYTW92ZSA9IGUudG91Y2hlc1swXS5wYWdlWDtcblx0XHRcdFx0XHRcdFx0bW92ZVRvQ29sLmdldEVsZW1lbnQoKS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCwgbW92ZVRvQ29sLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubW92ZUNvbHVtbihtb3ZlVG9Db2wsIGZhbHNlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKG1vdmVUb0NvbCl7XG5cdFx0XHRcdFx0bmV4dENvbCA9IG1vdmVUb0NvbC5uZXh0Q29sdW1uKCk7XG5cdFx0XHRcdFx0bmV4dENvbFdpZHRoTGFzdCA9IG5leHRDb2xXaWR0aDtcblx0XHRcdFx0XHRuZXh0Q29sV2lkdGggPSBuZXh0Q29sID8gbmV4dENvbC5nZXRXaWR0aCgpIC8gMiA6IDA7XG5cdFx0XHRcdFx0cHJldkNvbCA9IG1vdmVUb0NvbC5wcmV2Q29sdW1uKCk7XG5cdFx0XHRcdFx0cHJldkNvbFdpZHRoTGFzdCA9IHByZXZDb2xXaWR0aDtcblx0XHRcdFx0XHRwcmV2Q29sV2lkdGggPSBwcmV2Q29sID8gcHJldkNvbC5nZXRXaWR0aCgpIC8gMiA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXHRcdFxuXHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCAoZSkgPT4ge1xuXHRcdFx0aWYodGhpcy5jaGVja1RpbWVvdXQpe1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5jaGVja1RpbWVvdXQpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5tb3Zpbmcpe1xuXHRcdFx0XHR0aGlzLmVuZE1vdmUoZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHN0YXJ0TW92ZShlLCBjb2x1bW4pe1xuXHRcdHZhciBlbGVtZW50ID0gY29sdW1uLmdldEVsZW1lbnQoKSxcblx0XHRoZWFkZXJFbGVtZW50ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbnRlbnRzRWxlbWVudCgpLFxuXHRcdGhlYWRlcnNFbGVtZW50ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldEhlYWRlcnNFbGVtZW50KCk7XG5cdFx0XG5cdFx0Ly9QcmV2ZW50IG1vdmluZyBjb2x1bW5zIHdoZW4gcmFuZ2Ugc2VsZWN0aW9uIGlzIGFjdGl2ZVxuXHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5zZWxlY3RSYW5nZSAmJiB0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0UmFuZ2UuY29sdW1uU2VsZWN0aW9uKXtcblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5zZWxlY3RSYW5nZS5tb3VzZWRvd24gJiYgdGhpcy50YWJsZS5tb2R1bGVzLnNlbGVjdFJhbmdlLnNlbGVjdGluZyA9PT0gXCJjb2x1bW5cIil7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLm1vdmluZyA9IGNvbHVtbjtcblx0XHR0aGlzLnN0YXJ0WCA9ICh0aGlzLnRvdWNoTW92ZSA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgpIC0gSGVscGVycy5lbE9mZnNldChlbGVtZW50KS5sZWZ0O1xuXHRcdFxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblx0XHRcblx0XHQvL2NyZWF0ZSBwbGFjZWhvbGRlclxuXHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnN0eWxlLndpZHRoID0gY29sdW1uLmdldFdpZHRoKCkgKyBcInB4XCI7XG5cdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gY29sdW1uLmdldEhlaWdodCgpICsgXCJweFwiO1xuXHRcdFxuXHRcdGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQsIGVsZW1lbnQpO1xuXHRcdGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0XHRcblx0XHQvL2NyZWF0ZSBob3ZlciBlbGVtZW50XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQgPSBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLW1vdmluZ1wiKTtcblx0XHRcblx0XHRoZWFkZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaG92ZXJFbGVtZW50KTtcblx0XHRcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gXCIwXCI7XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUuYm90dG9tID0gKGhlYWRlckVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gaGVhZGVyc0VsZW1lbnQub2Zmc2V0SGVpZ2h0KSArIFwicHhcIjtcblx0XHRcblx0XHRpZighdGhpcy50b3VjaE1vdmUpe1xuXHRcdFx0dGhpcy5fYmluZE1vdXNlTW92ZSgpO1xuXHRcdFx0XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlSG92ZXIpO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmVuZE1vdmUpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLm1vdmVIb3ZlcihlKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4tbW92aW5nXCIsIGUsIHRoaXMubW92aW5nKTtcblx0fVxuXHRcblx0X2JpbmRNb3VzZU1vdmUoKXtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMubW92ZUNvbHVtbi5tb3VzZW1vdmUpe1xuXHRcdFx0XHRjb2x1bW4uZ2V0RWxlbWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgY29sdW1uLm1vZHVsZXMubW92ZUNvbHVtbi5tb3VzZW1vdmUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRfdW5iaW5kTW91c2VNb3ZlKCl7XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLm1vdmVDb2x1bW4ubW91c2Vtb3ZlKXtcblx0XHRcdFx0Y29sdW1uLmdldEVsZW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGNvbHVtbi5tb2R1bGVzLm1vdmVDb2x1bW4ubW91c2Vtb3ZlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0bW92ZUNvbHVtbihjb2x1bW4sIGFmdGVyKXtcblx0XHR2YXIgbW92aW5nQ2VsbHMgPSB0aGlzLm1vdmluZy5nZXRDZWxscygpO1xuXHRcdFxuXHRcdHRoaXMudG9Db2wgPSBjb2x1bW47XG5cdFx0dGhpcy50b0NvbEFmdGVyID0gYWZ0ZXI7XG5cdFx0XG5cdFx0aWYoYWZ0ZXIpe1xuXHRcdFx0Y29sdW1uLmdldENlbGxzKCkuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKXtcblx0XHRcdFx0dmFyIGNlbGxFbCA9IGNlbGwuZ2V0RWxlbWVudCh0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNlbGxFbC5wYXJlbnROb2RlICYmIG1vdmluZ0NlbGxzW2ldKXtcblx0XHRcdFx0XHRjZWxsRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobW92aW5nQ2VsbHNbaV0uZ2V0RWxlbWVudCgpLCBjZWxsRWwubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb2x1bW4uZ2V0Q2VsbHMoKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpe1xuXHRcdFx0XHR2YXIgY2VsbEVsID0gY2VsbC5nZXRFbGVtZW50KHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbEVsLnBhcmVudE5vZGUgJiYgbW92aW5nQ2VsbHNbaV0pe1xuXHRcdFx0XHRcdGNlbGxFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShtb3ZpbmdDZWxsc1tpXS5nZXRFbGVtZW50KCksIGNlbGxFbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0ZW5kTW92ZShlKXtcblx0XHRpZihlLndoaWNoID09PSAxIHx8IHRoaXMudG91Y2hNb3ZlKXtcblx0XHRcdHRoaXMuX3VuYmluZE1vdXNlTW92ZSgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLm1vdmluZy5nZXRFbGVtZW50KCksIHRoaXMucGxhY2Vob2xkZXJFbGVtZW50Lm5leHRTaWJsaW5nKTtcblx0XHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQpO1xuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmhvdmVyRWxlbWVudCk7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50b0NvbCl7XG5cdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5tb3ZlQ29sdW1uQWN0dWFsKHRoaXMubW92aW5nLCB0aGlzLnRvQ29sLCB0aGlzLnRvQ29sQWZ0ZXIpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vdmluZyA9IGZhbHNlO1xuXHRcdFx0dGhpcy50b0NvbCA9IGZhbHNlO1xuXHRcdFx0dGhpcy50b0NvbEFmdGVyID0gZmFsc2U7XG5cdFx0XHRcblx0XHRcdGlmKCF0aGlzLnRvdWNoTW92ZSl7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdmVIb3Zlcik7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5lbmRNb3ZlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdG1vdmVIb3ZlcihlKXtcblx0XHR2YXIgY29sdW1uSG9sZGVyID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbnRlbnRzRWxlbWVudCgpLFxuXHRcdHNjcm9sbExlZnQgPSBjb2x1bW5Ib2xkZXIuc2Nyb2xsTGVmdCxcblx0XHR4UG9zID0gKCh0aGlzLnRvdWNoTW92ZSA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgpIC0gSGVscGVycy5lbE9mZnNldChjb2x1bW5Ib2xkZXIpLmxlZnQpICsgc2Nyb2xsTGVmdCxcblx0XHRzY3JvbGxQb3M7XG5cdFx0XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUubGVmdCA9ICh4UG9zIC0gdGhpcy5zdGFydFgpICsgXCJweFwiO1xuXHRcdFxuXHRcdGlmKHhQb3MgLSBzY3JvbGxMZWZ0IDwgdGhpcy5hdXRvU2Nyb2xsTWFyZ2luKXtcblx0XHRcdGlmKCF0aGlzLmF1dG9TY3JvbGxUaW1lb3V0KXtcblx0XHRcdFx0dGhpcy5hdXRvU2Nyb2xsVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHNjcm9sbFBvcyA9IE1hdGgubWF4KDAsc2Nyb2xsTGVmdC01KTtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RWxlbWVudCgpLnNjcm9sbExlZnQgPSBzY3JvbGxQb3M7XG5cdFx0XHRcdFx0dGhpcy5hdXRvU2Nyb2xsVGltZW91dCA9IGZhbHNlO1xuXHRcdFx0XHR9LCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoc2Nyb2xsTGVmdCArIGNvbHVtbkhvbGRlci5jbGllbnRXaWR0aCAtIHhQb3MgPCB0aGlzLmF1dG9TY3JvbGxNYXJnaW4pe1xuXHRcdFx0aWYoIXRoaXMuYXV0b1Njcm9sbFRpbWVvdXQpe1xuXHRcdFx0XHR0aGlzLmF1dG9TY3JvbGxUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0c2Nyb2xsUG9zID0gTWF0aC5taW4oY29sdW1uSG9sZGVyLmNsaWVudFdpZHRoLCBzY3JvbGxMZWZ0KzUpO1xuXHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXRFbGVtZW50KCkuc2Nyb2xsTGVmdCA9IHNjcm9sbFBvcztcblx0XHRcdFx0XHR0aGlzLmF1dG9TY3JvbGxUaW1lb3V0ID0gZmFsc2U7XG5cdFx0XHRcdH0sIDEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG52YXIgZGVmYXVsdFNlbmRlcnMgPSB7XHJcblx0ZGVsZXRlOmZ1bmN0aW9uKGZyb21Sb3csIHRvUm93LCB0b1RhYmxlKXtcclxuXHRcdGZyb21Sb3cuZGVsZXRlKCk7XHJcblx0fVxyXG59O1xuXG52YXIgZGVmYXVsdFJlY2VpdmVycyA9IHtcclxuXHRpbnNlcnQ6ZnVuY3Rpb24oZnJvbVJvdywgdG9Sb3csIGZyb21UYWJsZSl7XHJcblx0XHR0aGlzLnRhYmxlLmFkZFJvdyhmcm9tUm93LmdldERhdGEoKSwgdW5kZWZpbmVkLCB0b1Jvdyk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHRhZGQ6ZnVuY3Rpb24oZnJvbVJvdywgdG9Sb3csIGZyb21UYWJsZSl7XHJcblx0XHR0aGlzLnRhYmxlLmFkZFJvdyhmcm9tUm93LmdldERhdGEoKSk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHR1cGRhdGU6ZnVuY3Rpb24oZnJvbVJvdywgdG9Sb3csIGZyb21UYWJsZSl7XHJcblx0XHRpZih0b1Jvdyl7XHJcblx0XHRcdHRvUm93LnVwZGF0ZShmcm9tUm93LmdldERhdGEoKSk7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9LFxyXG5cclxuXHRyZXBsYWNlOmZ1bmN0aW9uKGZyb21Sb3csIHRvUm93LCBmcm9tVGFibGUpe1xyXG5cdFx0aWYodG9Sb3cpe1xyXG5cdFx0XHR0aGlzLnRhYmxlLmFkZFJvdyhmcm9tUm93LmdldERhdGEoKSwgdW5kZWZpbmVkLCB0b1Jvdyk7XHJcblx0XHRcdHRvUm93LmRlbGV0ZSgpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSxcclxufTtcblxuY2xhc3MgTW92ZVJvd3MgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcIm1vdmVSb3dcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIHNlbmRlcnMgPSBkZWZhdWx0U2VuZGVycztcblx0c3RhdGljIHJlY2VpdmVycyA9IGRlZmF1bHRSZWNlaXZlcnM7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50ID0gdGhpcy5jcmVhdGVQbGFjZWhvbGRlckVsZW1lbnQoKTtcblx0XHR0aGlzLmhvdmVyRWxlbWVudCA9IGZhbHNlOyAvL2Zsb2F0aW5nIHJvdyBoZWFkZXIgZWxlbWVudFxuXHRcdHRoaXMuY2hlY2tUaW1lb3V0ID0gZmFsc2U7IC8vY2xpY2sgY2hlY2sgdGltZW91dCBob2xkZXJcblx0XHR0aGlzLmNoZWNrUGVyaW9kID0gMTUwOyAvL3BlcmlvZCB0byB3YWl0IG9uIG1vdXNlZG93biB0byBjb25zaWRlciB0aGlzIGEgbW92ZSBhbmQgbm90IGEgY2xpY2tcblx0XHR0aGlzLm1vdmluZyA9IGZhbHNlOyAvL2N1cnJlbnRseSBtb3Zpbmcgcm93XG5cdFx0dGhpcy50b1JvdyA9IGZhbHNlOyAvL2Rlc3RpbmF0aW9uIHJvd1xuXHRcdHRoaXMudG9Sb3dBZnRlciA9IGZhbHNlOyAvL3Bvc2l0aW9uIG9mIG1vdmluZyByb3cgcmVsYXRpdmUgdG8gdGhlIGRlc3RpbmF0aW9uIHJvd1xuXHRcdHRoaXMuaGFzSGFuZGxlID0gZmFsc2U7IC8vcm93IGhhcyBoYW5kbGUgaW5zdGVhZCBvZiBmdWxseSBtb3ZhYmxlIHJvd1xuXHRcdHRoaXMuc3RhcnRZID0gMDsgLy9zdGFydGluZyBZIHBvc2l0aW9uIHdpdGhpbiBoZWFkZXIgZWxlbWVudFxuXHRcdHRoaXMuc3RhcnRYID0gMDsgLy9zdGFydGluZyBYIHBvc2l0aW9uIHdpdGhpbiBoZWFkZXIgZWxlbWVudFxuXG5cdFx0dGhpcy5tb3ZlSG92ZXIgPSB0aGlzLm1vdmVIb3Zlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZW5kTW92ZSA9IHRoaXMuZW5kTW92ZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMudGFibGVSb3dEcm9wRXZlbnQgPSBmYWxzZTtcblxuXHRcdHRoaXMudG91Y2hNb3ZlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNvbm5lY3Rpb24gPSBmYWxzZTtcblx0XHR0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMgPSBmYWxzZTtcblx0XHR0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNFbGVtZW50cyA9IGZhbHNlO1xuXHRcdHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzID0gW107XG5cdFx0dGhpcy5jb25uZWN0aW9ucyA9IFtdO1xuXG5cdFx0dGhpcy5jb25uZWN0ZWRUYWJsZSA9IGZhbHNlO1xuXHRcdHRoaXMuY29ubmVjdGVkUm93ID0gZmFsc2U7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJtb3ZhYmxlUm93c1wiLCBmYWxzZSk7IC8vZW5hYmxlIG1vdmFibGUgcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVSb3dzQ29ubmVjdGVkVGFibGVzXCIsIGZhbHNlKTsgLy90YWJsZXMgZm9yIG1vdmFibGUgcm93cyB0byBiZSBjb25uZWN0ZWQgdG9cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJtb3ZhYmxlUm93c0Nvbm5lY3RlZEVsZW1lbnRzXCIsIGZhbHNlKTsgLy9vdGhlciBlbGVtZW50cyBmb3IgbW92YWJsZSByb3dzIHRvIGJlIGNvbm5lY3RlZCB0b1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVSb3dzU2VuZGVyXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJtb3ZhYmxlUm93c1JlY2VpdmVyXCIsIFwiaW5zZXJ0XCIpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInJvd0hhbmRsZVwiKTtcblx0fVxuXG5cdGNyZWF0ZVBsYWNlaG9sZGVyRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvd1wiKTtcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1wbGFjZWhvbGRlclwiKTtcblxuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3Mpe1xuXHRcdFx0dGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzID0gdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzQ29ubmVjdGVkVGFibGVzO1xuXHRcdFx0dGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHMgPSB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NDb25uZWN0ZWRFbGVtZW50cztcblxuXHRcdFx0dGhpcy5jb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzIHx8IHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzO1xuXG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtaW5pdFwiLCB0aGlzLmluaXRpYWxpemVDZWxsLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplR3JvdXBIZWFkZXIoZ3JvdXApe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRjb25maWcgPSB7fTtcblxuXHRcdC8vaW50ZXIgdGFibGUgZHJhZyBkcm9wXG5cdFx0Y29uZmlnLm1vdXNldXAgPSBmdW5jdGlvbihlKXtcblx0XHRcdHNlbGYudGFibGVSb3dEcm9wKGUsIGdyb3VwKTtcblx0XHR9LmJpbmQoc2VsZik7XG5cblx0XHQvL3NhbWUgdGFibGUgZHJhZyBkcm9wXG5cdFx0Y29uZmlnLm1vdXNlbW92ZSA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIHJvd0VsO1xuXG5cdFx0XHRpZigoKGUucGFnZVkgLSBIZWxwZXJzLmVsT2Zmc2V0KGdyb3VwLmVsZW1lbnQpLnRvcCkgKyBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3ApID4gKGdyb3VwLmdldEhlaWdodCgpIC8gMikpe1xuXHRcdFx0XHRpZihzZWxmLnRvUm93ICE9PSBncm91cCB8fCAhc2VsZi50b1Jvd0FmdGVyKXtcblx0XHRcdFx0XHRyb3dFbCA9IGdyb3VwLmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgcm93RWwubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdHNlbGYubW92ZVJvdyhncm91cCwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoc2VsZi50b1JvdyAhPT0gZ3JvdXAgfHwgc2VsZi50b1Jvd0FmdGVyKXtcblx0XHRcdFx0XHRyb3dFbCA9IGdyb3VwLmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRpZihyb3dFbC5wcmV2aW91c1NpYmxpbmcpe1xuXHRcdFx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5wbGFjZWhvbGRlckVsZW1lbnQsIHJvd0VsKTtcblx0XHRcdFx0XHRcdHNlbGYubW92ZVJvdyhncm91cCwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0uYmluZChzZWxmKTtcblxuXHRcdGdyb3VwLm1vZHVsZXMubW92ZVJvdyA9IGNvbmZpZztcblx0fVxuXG5cdGluaXRpYWxpemVSb3cocm93KXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y29uZmlnID0ge30sXG5cdFx0cm93RWw7XG5cblx0XHQvL2ludGVyIHRhYmxlIGRyYWcgZHJvcFxuXHRcdGNvbmZpZy5tb3VzZXVwID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRzZWxmLnRhYmxlUm93RHJvcChlLCByb3cpO1xuXHRcdH0uYmluZChzZWxmKTtcblxuXHRcdC8vc2FtZSB0YWJsZSBkcmFnIGRyb3Bcblx0XHRjb25maWcubW91c2Vtb3ZlID0gZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0XHRpZigoKGUucGFnZVkgLSBIZWxwZXJzLmVsT2Zmc2V0KHJvd0VsKS50b3ApICsgc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wKSA+IChyb3cuZ2V0SGVpZ2h0KCkgLyAyKSl7XG5cdFx0XHRcdGlmKHNlbGYudG9Sb3cgIT09IHJvdyB8fCAhc2VsZi50b1Jvd0FmdGVyKXtcblx0XHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgcm93RWwubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdHNlbGYubW92ZVJvdyhyb3csIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHNlbGYudG9Sb3cgIT09IHJvdyB8fCBzZWxmLnRvUm93QWZ0ZXIpe1xuXHRcdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYucGxhY2Vob2xkZXJFbGVtZW50LCByb3dFbCk7XG5cdFx0XHRcdFx0c2VsZi5tb3ZlUm93KHJvdywgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fS5iaW5kKHNlbGYpO1xuXG5cblx0XHRpZighdGhpcy5oYXNIYW5kbGUpe1xuXG5cdFx0XHRyb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRcdHJvd0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKGUud2hpY2ggPT09IDEpe1xuXHRcdFx0XHRcdHNlbGYuY2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0c2VsZi5zdGFydE1vdmUoZSwgcm93KTtcblx0XHRcdFx0XHR9LCBzZWxmLmNoZWNrUGVyaW9kKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJvd0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRpZihzZWxmLmNoZWNrVGltZW91dCl7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoc2VsZi5jaGVja1RpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuYmluZFRvdWNoRXZlbnRzKHJvdywgcm93LmdldEVsZW1lbnQoKSk7XG5cdFx0fVxuXG5cdFx0cm93Lm1vZHVsZXMubW92ZVJvdyA9IGNvbmZpZztcblx0fVxuXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5yb3dIYW5kbGUgJiYgdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzICE9PSBmYWxzZSl7XG5cdFx0XHR0aGlzLmhhc0hhbmRsZSA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZUNlbGwoY2VsbCl7XG5cdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi5yb3dIYW5kbGUgJiYgdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzICE9PSBmYWxzZSl7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRjZWxsRWwgPSBjZWxsLmdldEVsZW1lbnQodHJ1ZSk7XG5cblx0XHRcdGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRzZWxmLmNoZWNrVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHNlbGYuc3RhcnRNb3ZlKGUsIGNlbGwucm93KTtcblx0XHRcdFx0XHR9LCBzZWxmLmNoZWNrUGVyaW9kKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoZS53aGljaCA9PT0gMSl7XG5cdFx0XHRcdFx0aWYoc2VsZi5jaGVja1RpbWVvdXQpe1xuXHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHNlbGYuY2hlY2tUaW1lb3V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmJpbmRUb3VjaEV2ZW50cyhjZWxsLnJvdywgY2VsbEVsKTtcblx0XHR9XG5cdH1cblxuXHRiaW5kVG91Y2hFdmVudHMocm93LCBlbGVtZW50KXtcblx0XHR2YXIgc3RhcnRZTW92ZSA9IGZhbHNlLCAvL3NoaWZ0aW5nIGNlbnRlciBwb3NpdGlvbiBvZiB0aGUgY2VsbFxuXHRcdG5leHRSb3csIHByZXZSb3csIG5leHRSb3dIZWlnaHQsIHByZXZSb3dIZWlnaHQsIG5leHRSb3dIZWlnaHRMYXN0LCBwcmV2Um93SGVpZ2h0TGFzdDtcblxuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgKGUpID0+IHtcblx0XHRcdHRoaXMuY2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMudG91Y2hNb3ZlID0gdHJ1ZTtcblx0XHRcdFx0bmV4dFJvdyA9IHJvdy5uZXh0Um93KCk7XG5cdFx0XHRcdG5leHRSb3dIZWlnaHQgPSBuZXh0Um93ID8gbmV4dFJvdy5nZXRIZWlnaHQoKS8yIDogMDtcblx0XHRcdFx0cHJldlJvdyA9IHJvdy5wcmV2Um93KCk7XG5cdFx0XHRcdHByZXZSb3dIZWlnaHQgPSBwcmV2Um93ID8gcHJldlJvdy5nZXRIZWlnaHQoKS8yIDogMDtcblx0XHRcdFx0bmV4dFJvd0hlaWdodExhc3QgPSAwO1xuXHRcdFx0XHRwcmV2Um93SGVpZ2h0TGFzdCA9IDA7XG5cdFx0XHRcdHN0YXJ0WU1vdmUgPSBmYWxzZTtcblxuXHRcdFx0XHR0aGlzLnN0YXJ0TW92ZShlLCByb3cpO1xuXHRcdFx0fSwgdGhpcy5jaGVja1BlcmlvZCk7XG5cdFx0fSwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHR0aGlzLm1vdmluZywgdGhpcy50b1JvdywgdGhpcy50b1Jvd0FmdGVyO1xuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCAoZSkgPT4ge1xuXG5cdFx0XHR2YXIgZGlmZiwgbW92ZVRvUm93O1xuXG5cdFx0XHRpZih0aGlzLm1vdmluZyl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHR0aGlzLm1vdmVIb3ZlcihlKTtcblxuXHRcdFx0XHRpZighc3RhcnRZTW92ZSl7XG5cdFx0XHRcdFx0c3RhcnRZTW92ZSA9IGUudG91Y2hlc1swXS5wYWdlWTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZmYgPSBlLnRvdWNoZXNbMF0ucGFnZVkgLSBzdGFydFlNb3ZlO1xuXG5cdFx0XHRcdGlmKGRpZmYgPiAwKXtcblx0XHRcdFx0XHRpZihuZXh0Um93ICYmIGRpZmYgLSBuZXh0Um93SGVpZ2h0TGFzdCA+IG5leHRSb3dIZWlnaHQpe1xuXHRcdFx0XHRcdFx0bW92ZVRvUm93ID0gbmV4dFJvdztcblxuXHRcdFx0XHRcdFx0aWYobW92ZVRvUm93ICE9PSByb3cpe1xuXHRcdFx0XHRcdFx0XHRzdGFydFlNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuXHRcdFx0XHRcdFx0XHRtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpLm5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tb3ZlUm93KG1vdmVUb1JvdywgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYocHJldlJvdyAmJiAtZGlmZiAtIHByZXZSb3dIZWlnaHRMYXN0ID4gIHByZXZSb3dIZWlnaHQpe1xuXHRcdFx0XHRcdFx0bW92ZVRvUm93ID0gcHJldlJvdztcblxuXHRcdFx0XHRcdFx0aWYobW92ZVRvUm93ICE9PSByb3cpe1xuXHRcdFx0XHRcdFx0XHRzdGFydFlNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuXHRcdFx0XHRcdFx0XHRtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tb3ZlUm93KG1vdmVUb1JvdywgZmFsc2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKG1vdmVUb1Jvdyl7XG5cdFx0XHRcdFx0bmV4dFJvdyA9IG1vdmVUb1Jvdy5uZXh0Um93KCk7XG5cdFx0XHRcdFx0bmV4dFJvd0hlaWdodExhc3QgPSBuZXh0Um93SGVpZ2h0O1xuXHRcdFx0XHRcdG5leHRSb3dIZWlnaHQgPSBuZXh0Um93ID8gbmV4dFJvdy5nZXRIZWlnaHQoKSAvIDIgOiAwO1xuXHRcdFx0XHRcdHByZXZSb3cgPSBtb3ZlVG9Sb3cucHJldlJvdygpO1xuXHRcdFx0XHRcdHByZXZSb3dIZWlnaHRMYXN0ID0gcHJldlJvd0hlaWdodDtcblx0XHRcdFx0XHRwcmV2Um93SGVpZ2h0ID0gcHJldlJvdyA/IHByZXZSb3cuZ2V0SGVpZ2h0KCkgLyAyIDogMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgKGUpID0+IHtcblx0XHRcdGlmKHRoaXMuY2hlY2tUaW1lb3V0KXtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tUaW1lb3V0KTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMubW92aW5nKXtcblx0XHRcdFx0dGhpcy5lbmRNb3ZlKGUpO1xuXHRcdFx0XHR0aGlzLnRvdWNoTW92ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0X2JpbmRNb3VzZU1vdmUoKXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmKChyb3cudHlwZSA9PT0gXCJyb3dcIiB8fCByb3cudHlwZSA9PT0gXCJncm91cFwiKSAmJiByb3cubW9kdWxlcy5tb3ZlUm93ICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKXtcblx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdF91bmJpbmRNb3VzZU1vdmUoKXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmKChyb3cudHlwZSA9PT0gXCJyb3dcIiB8fCByb3cudHlwZSA9PT0gXCJncm91cFwiKSAmJiByb3cubW9kdWxlcy5tb3ZlUm93ICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKXtcblx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHN0YXJ0TW92ZShlLCByb3cpe1xuXHRcdHZhciBlbGVtZW50ID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdHRoaXMuc2V0U3RhcnRQb3NpdGlvbihlLCByb3cpO1xuXG5cdFx0dGhpcy5tb3ZpbmcgPSByb3c7XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cblx0XHQvL2NyZWF0ZSBwbGFjZWhvbGRlclxuXHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnN0eWxlLndpZHRoID0gcm93LmdldFdpZHRoKCkgKyBcInB4XCI7XG5cdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gcm93LmdldEhlaWdodCgpICsgXCJweFwiO1xuXG5cdFx0aWYoIXRoaXMuY29ubmVjdGlvbil7XG5cdFx0XHRlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBlbGVtZW50KTtcblx0XHRcdGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3Zpbmdyb3ctc2VuZGluZ1wiKTtcblx0XHRcdHRoaXMuY29ubmVjdFRvVGFibGVzKHJvdyk7XG5cdFx0fVxuXG5cdFx0Ly9jcmVhdGUgaG92ZXIgZWxlbWVudFxuXHRcdHRoaXMuaG92ZXJFbGVtZW50ID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3ZpbmdcIik7XG5cblx0XHRpZih0aGlzLmNvbm5lY3Rpb24pe1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmhvdmVyRWxlbWVudCk7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gXCIwXCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS50b3AgPSBcIjBcIjtcblx0XHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy50YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoICsgXCJweFwiO1xuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFRhYmxlRWxlbWVudCgpLmFwcGVuZENoaWxkKHRoaXMuaG92ZXJFbGVtZW50KTtcblxuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUubGVmdCA9IFwiMFwiO1xuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUudG9wID0gXCIwXCI7XG5cblx0XHRcdHRoaXMuX2JpbmRNb3VzZU1vdmUoKTtcblx0XHR9XG5cblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlSG92ZXIpO1xuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5lbmRNb3ZlKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd01vdmluZ1wiLCByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXG5cdFx0dGhpcy5tb3ZlSG92ZXIoZSk7XG5cdH1cblxuXHRzZXRTdGFydFBvc2l0aW9uKGUsIHJvdyl7XG5cdFx0dmFyIHBhZ2VYID0gdGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuXHRcdHBhZ2VZID0gdGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZLFxuXHRcdGVsZW1lbnQsIHBvc2l0aW9uO1xuXG5cdFx0ZWxlbWVudCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0aWYodGhpcy5jb25uZWN0aW9uKXtcblx0XHRcdHBvc2l0aW9uID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0dGhpcy5zdGFydFggPSBwb3NpdGlvbi5sZWZ0IC0gcGFnZVggKyB3aW5kb3cucGFnZVhPZmZzZXQ7XG5cdFx0XHR0aGlzLnN0YXJ0WSA9IHBvc2l0aW9uLnRvcCAtIHBhZ2VZICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuc3RhcnRZID0gKHBhZ2VZIC0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApO1xuXHRcdH1cblx0fVxuXG5cdGVuZE1vdmUoZSl7XG5cdFx0aWYoIWUgfHwgZS53aGljaCA9PT0gMSB8fCB0aGlzLnRvdWNoTW92ZSl7XG5cdFx0XHR0aGlzLl91bmJpbmRNb3VzZU1vdmUoKTtcblxuXHRcdFx0aWYoIXRoaXMuY29ubmVjdGlvbil7XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubW92aW5nLmdldEVsZW1lbnQoKSwgdGhpcy5wbGFjZWhvbGRlckVsZW1lbnQubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmhvdmVyRWxlbWVudCk7XG5cblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblxuXHRcdFx0aWYodGhpcy50b1Jvdyl7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93KHRoaXMubW92aW5nLCB0aGlzLnRvUm93LCB0aGlzLnRvUm93QWZ0ZXIpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dNb3ZlQ2FuY2VsbGVkXCIsIHRoaXMubW92aW5nLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3ZpbmcgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9Sb3cgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9Sb3dBZnRlciA9IGZhbHNlO1xuXG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlSG92ZXIpO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmVuZE1vdmUpO1xuXG5cdFx0XHRpZih0aGlzLmNvbm5lY3Rpb24pe1xuXHRcdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1tb3Zpbmdyb3ctc2VuZGluZ1wiKTtcblx0XHRcdFx0dGhpcy5kaXNjb25uZWN0RnJvbVRhYmxlcygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdG1vdmVSb3cocm93LCBhZnRlcil7XG5cdFx0dGhpcy50b1JvdyA9IHJvdztcblx0XHR0aGlzLnRvUm93QWZ0ZXIgPSBhZnRlcjtcblx0fVxuXG5cdG1vdmVIb3ZlcihlKXtcblx0XHRpZih0aGlzLmNvbm5lY3Rpb24pe1xuXHRcdFx0dGhpcy5tb3ZlSG92ZXJDb25uZWN0aW9ucy5jYWxsKHRoaXMsIGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMubW92ZUhvdmVyVGFibGUuY2FsbCh0aGlzLCBlKTtcblx0XHR9XG5cdH1cblxuXHRtb3ZlSG92ZXJUYWJsZShlKXtcblx0XHR2YXIgcm93SG9sZGVyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldEVsZW1lbnQoKSxcblx0XHRzY3JvbGxUb3AgPSByb3dIb2xkZXIuc2Nyb2xsVG9wLFxuXHRcdHlQb3MgPSAoKHRoaXMudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWSkgLSByb3dIb2xkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wKSArIHNjcm9sbFRvcDtcblx0XHRcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS50b3AgPSBNYXRoLm1pbih5UG9zIC0gdGhpcy5zdGFydFksIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbEhlaWdodCAtIHRoaXMuaG92ZXJFbGVtZW50Lm9mZnNldEhlaWdodCkgKyBcInB4XCI7XG5cdH1cblxuXHRtb3ZlSG92ZXJDb25uZWN0aW9ucyhlKXtcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gKHRoaXMuc3RhcnRYICsgKHRoaXMudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCkpICsgXCJweFwiO1xuXHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLnRvcCA9ICh0aGlzLnN0YXJ0WSArICh0aGlzLnRvdWNoTW92ZSA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVkpKSArIFwicHhcIjtcblx0fVxuXG5cdGVsZW1lbnRSb3dEcm9wKGUsIGVsZW1lbnQsIHJvdyl7XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibW92YWJsZVJvd3NFbGVtZW50RHJvcFwiLCBlLCBlbGVtZW50LCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiBmYWxzZSk7XG5cdH1cblxuXHQvL2VzdGFibGlzaCBjb25uZWN0aW9uIHdpdGggb3RoZXIgdGFibGVzXG5cdGNvbm5lY3RUb1RhYmxlcyhyb3cpe1xuXHRcdHZhciBjb25uZWN0aW9uVGFibGVzO1xuXG5cdFx0aWYodGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzKXtcblx0XHRcdGNvbm5lY3Rpb25UYWJsZXMgPSB0aGlzLmNvbW1zQ29ubmVjdGlvbnModGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibW92YWJsZVJvd3NTZW5kaW5nU3RhcnRcIiwgY29ubmVjdGlvblRhYmxlcyk7XG5cblx0XHRcdHRoaXMuY29tbXNTZW5kKHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc1RhYmxlcywgXCJtb3ZlUm93XCIsIFwiY29ubmVjdFwiLCB7XG5cdFx0XHRcdHJvdzpyb3csXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNFbGVtZW50cyl7XG5cblx0XHRcdHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzID0gW107XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzKSl7XG5cdFx0XHRcdHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzID0gW3RoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzXTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHMuZm9yRWFjaCgocXVlcnkpID0+IHtcblx0XHRcdFx0aWYodHlwZW9mIHF1ZXJ5ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHR0aGlzLmNvbm5lY3Rpb25FbGVtZW50cyA9IHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSkpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jb25uZWN0aW9uRWxlbWVudHMucHVzaChxdWVyeSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmNvbm5lY3Rpb25FbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG5cdFx0XHRcdHZhciBkcm9wRXZlbnQgPSAoZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudFJvd0Ryb3AoZSwgZWxlbWVudCwgdGhpcy5tb3ZpbmcpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZHJvcEV2ZW50KTtcblx0XHRcdFx0ZWxlbWVudC50YWJ1bGF0b3JFbGVtZW50RHJvcEV2ZW50ID0gZHJvcEV2ZW50O1xuXG5cdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3Zpbmdyb3ctcmVjZWl2aW5nXCIpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Ly9kaXNjb25uZWN0IGZyb20gb3RoZXIgdGFibGVzXG5cdGRpc2Nvbm5lY3RGcm9tVGFibGVzKCl7XG5cdFx0dmFyIGNvbm5lY3Rpb25UYWJsZXM7XG5cblx0XHRpZih0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMpe1xuXHRcdFx0Y29ubmVjdGlvblRhYmxlcyA9IHRoaXMuY29tbXNDb25uZWN0aW9ucyh0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1NlbmRpbmdTdG9wXCIsIGNvbm5lY3Rpb25UYWJsZXMpO1xuXG5cdFx0XHR0aGlzLmNvbW1zU2VuZCh0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMsIFwibW92ZVJvd1wiLCBcImRpc2Nvbm5lY3RcIik7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb25uZWN0aW9uRWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLW1vdmluZ3Jvdy1yZWNlaXZpbmdcIik7XG5cdFx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGVsZW1lbnQudGFidWxhdG9yRWxlbWVudERyb3BFdmVudCk7XG5cdFx0XHRkZWxldGUgZWxlbWVudC50YWJ1bGF0b3JFbGVtZW50RHJvcEV2ZW50O1xuXHRcdH0pO1xuXHR9XG5cblx0Ly9hY2NlcHQgaW5jb21taW5nIGNvbm5lY3Rpb25cblx0Y29ubmVjdCh0YWJsZSwgcm93KXtcblx0XHRpZighdGhpcy5jb25uZWN0ZWRUYWJsZSl7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFRhYmxlID0gdGFibGU7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFJvdyA9IHJvdztcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbW92aW5ncm93LXJlY2VpdmluZ1wiKTtcblxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdGlmKHJvdy50eXBlID09PSBcInJvd1wiICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cgJiYgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZXVwKXtcblx0XHRcdFx0XHRyb3cuZ2V0RWxlbWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2V1cCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnRhYmxlUm93RHJvcEV2ZW50ID0gdGhpcy50YWJsZVJvd0Ryb3AuYmluZCh0aGlzKTtcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudGFibGVSb3dEcm9wRXZlbnQpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1JlY2VpdmluZ1N0YXJ0XCIsIHJvdywgdGFibGUpO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlIFJvdyBFcnJvciAtIFRhYmxlIGNhbm5vdCBhY2NlcHQgY29ubmVjdGlvbiwgYWxyZWFkeSBjb25uZWN0ZWQgdG8gdGFibGU6XCIsIHRoaXMuY29ubmVjdGVkVGFibGUpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vY2xvc2UgaW5jb21pbmcgY29ubmVjdGlvblxuXHRkaXNjb25uZWN0KHRhYmxlKXtcblx0XHRpZih0YWJsZSA9PT0gdGhpcy5jb25uZWN0ZWRUYWJsZSl7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFRhYmxlID0gZmFsc2U7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFJvdyA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1tb3Zpbmdyb3ctcmVjZWl2aW5nXCIpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0XHRpZihyb3cudHlwZSA9PT0gXCJyb3dcIiAmJiByb3cubW9kdWxlcy5tb3ZlUm93ICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2V1cCl7XG5cdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCByb3cubW9kdWxlcy5tb3ZlUm93Lm1vdXNldXApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudGFibGVSb3dEcm9wRXZlbnQpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1JlY2VpdmluZ1N0b3BcIiwgdGFibGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgUm93IEVycm9yIC0gdHJ5aW5nIHRvIGRpc2Nvbm5lY3QgZnJvbSBub24gY29ubmVjdGVkIHRhYmxlXCIpO1xuXHRcdH1cblx0fVxuXG5cdGRyb3BDb21wbGV0ZSh0YWJsZSwgcm93LCBzdWNjZXNzKXtcblx0XHR2YXIgc2VuZGVyID0gZmFsc2U7XG5cblx0XHRpZihzdWNjZXNzKXtcblxuXHRcdFx0c3dpdGNoKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NTZW5kZXIpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0c2VuZGVyID0gTW92ZVJvd3Muc2VuZGVyc1t0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NTZW5kZXJdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdHNlbmRlciA9IHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1NlbmRlcjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0aWYoc2VuZGVyKXtcblx0XHRcdFx0c2VuZGVyLmNhbGwodGhpcywgdGhpcy5tb3ZpbmcgPyB0aGlzLm1vdmluZy5nZXRDb21wb25lbnQoKSA6IHVuZGVmaW5lZCwgcm93ID8gcm93LmdldENvbXBvbmVudCgpIDogdW5kZWZpbmVkLCB0YWJsZSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1NlbmRlcil7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTW92ZXIgUm93IEVycm9yIC0gbm8gbWF0Y2hpbmcgc2VuZGVyIGZvdW5kOlwiLCB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NTZW5kZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1vdmFibGVSb3dzU2VudFwiLCB0aGlzLm1vdmluZy5nZXRDb21wb25lbnQoKSwgcm93ID8gcm93LmdldENvbXBvbmVudCgpIDogdW5kZWZpbmVkLCB0YWJsZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibW92YWJsZVJvd3NTZW50RmFpbGVkXCIsIHRoaXMubW92aW5nLmdldENvbXBvbmVudCgpLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRhYmxlKTtcblx0XHR9XG5cblx0XHR0aGlzLmVuZE1vdmUoKTtcblx0fVxuXG5cdHRhYmxlUm93RHJvcChlLCByb3cpe1xuXHRcdHZhciByZWNlaXZlciA9IGZhbHNlLFxuXHRcdHN1Y2Nlc3MgPSBmYWxzZTtcblxuXHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cblx0XHRzd2l0Y2godHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1JlY2VpdmVyKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0cmVjZWl2ZXIgPSBNb3ZlUm93cy5yZWNlaXZlcnNbdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzUmVjZWl2ZXJdO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdHJlY2VpdmVyID0gdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzUmVjZWl2ZXI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGlmKHJlY2VpdmVyKXtcblx0XHRcdHN1Y2Nlc3MgPSByZWNlaXZlci5jYWxsKHRoaXMsIHRoaXMuY29ubmVjdGVkUm93LmdldENvbXBvbmVudCgpLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRoaXMuY29ubmVjdGVkVGFibGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmVyIFJvdyBFcnJvciAtIG5vIG1hdGNoaW5nIHJlY2VpdmVyIGZvdW5kOlwiLCB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NSZWNlaXZlcik7XG5cdFx0fVxuXG5cdFx0aWYoc3VjY2Vzcyl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1JlY2VpdmVkXCIsIHRoaXMuY29ubmVjdGVkUm93LmdldENvbXBvbmVudCgpLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRoaXMuY29ubmVjdGVkVGFibGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1vdmFibGVSb3dzUmVjZWl2ZWRGYWlsZWRcIiwgdGhpcy5jb25uZWN0ZWRSb3cuZ2V0Q29tcG9uZW50KCksIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHVuZGVmaW5lZCwgdGhpcy5jb25uZWN0ZWRUYWJsZSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb21tc1NlbmQodGhpcy5jb25uZWN0ZWRUYWJsZSwgXCJtb3ZlUm93XCIsIFwiZHJvcGNvbXBsZXRlXCIsIHtcblx0XHRcdHJvdzpyb3csXG5cdFx0XHRzdWNjZXNzOnN1Y2Nlc3MsXG5cdFx0fSk7XG5cdH1cblxuXHRjb21tc1JlY2VpdmVkKHRhYmxlLCBhY3Rpb24sIGRhdGEpe1xuXHRcdHN3aXRjaChhY3Rpb24pe1xuXHRcdFx0Y2FzZSBcImNvbm5lY3RcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29ubmVjdCh0YWJsZSwgZGF0YS5yb3cpO1xuXG5cdFx0XHRjYXNlIFwiZGlzY29ubmVjdFwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5kaXNjb25uZWN0KHRhYmxlKTtcblxuXHRcdFx0Y2FzZSBcImRyb3Bjb21wbGV0ZVwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5kcm9wQ29tcGxldGUodGFibGUsIGRhdGEucm93LCBkYXRhLnN1Y2Nlc3MpO1xuXHRcdH1cblx0fVxufVxuXG52YXIgZGVmYXVsdE11dGF0b3JzID0ge307XG5cbmNsYXNzIE11dGF0b3IgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcIm11dGF0b3JcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIG11dGF0b3JzID0gZGVmYXVsdE11dGF0b3JzO1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmFsbG93ZWRUeXBlcyA9IFtcIlwiLCBcImRhdGFcIiwgXCJlZGl0XCIsIFwiY2xpcGJvYXJkXCIsIFwiaW1wb3J0XCJdOyAvL2xpc3Qgb2YgbXV0YXRpb24gdHlwZXNcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JEYXRhXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yRGF0YVBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwibXV0YXRvckVkaXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JFZGl0UGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yQ2xpcGJvYXJkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yQ2xpcGJvYXJkUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9ySW1wb3J0XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9ySW1wb3J0UGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdGVMaW5rXCIpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1jaGFuZ2luZ1wiLCB0aGlzLnRyYW5zZm9ybUNlbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLWNoYW5nZWRcIiwgdGhpcy5tdXRhdGVMaW5rLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1pbml0LWJlZm9yZVwiLCB0aGlzLnJvd0RhdGFDaGFuZ2VkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtY2hhbmdpbmdcIiwgdGhpcy5yb3dEYXRhQ2hhbmdlZC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdHJvd0RhdGFDaGFuZ2VkKHJvdywgdGVtcERhdGEsIHVwZGF0ZWREYXRhKXtcblx0XHRyZXR1cm4gdGhpcy50cmFuc2Zvcm1Sb3codGVtcERhdGEsIFwiZGF0YVwiLCB1cGRhdGVkRGF0YSk7XG5cdH1cblxuXHQvL2luaXRpYWxpemUgY29sdW1uIG11dGF0b3Jcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBtYXRjaCA9IGZhbHNlLFxuXHRcdGNvbmZpZyA9IHt9O1xuXG5cdFx0dGhpcy5hbGxvd2VkVHlwZXMuZm9yRWFjaCgodHlwZSkgPT4ge1xuXHRcdFx0dmFyIGtleSA9IFwibXV0YXRvclwiICsgKHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpKSxcblx0XHRcdG11dGF0b3I7XG5cblx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uW2tleV0pe1xuXHRcdFx0XHRtdXRhdG9yID0gdGhpcy5sb29rdXBNdXRhdG9yKGNvbHVtbi5kZWZpbml0aW9uW2tleV0pO1xuXG5cdFx0XHRcdGlmKG11dGF0b3Ipe1xuXHRcdFx0XHRcdG1hdGNoID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGNvbmZpZ1trZXldID0ge1xuXHRcdFx0XHRcdFx0bXV0YXRvcjptdXRhdG9yLFxuXHRcdFx0XHRcdFx0cGFyYW1zOiBjb2x1bW4uZGVmaW5pdGlvbltrZXkgKyBcIlBhcmFtc1wiXSB8fCB7fSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZihtYXRjaCl7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5tdXRhdGUgPSBjb25maWc7XG5cdFx0fVxuXHR9XG5cblx0bG9va3VwTXV0YXRvcih2YWx1ZSl7XG5cdFx0dmFyIG11dGF0b3IgPSBmYWxzZTtcblxuXHRcdC8vc2V0IGNvbHVtbiBtdXRhdG9yXG5cdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdGlmKE11dGF0b3IubXV0YXRvcnNbdmFsdWVdKXtcblx0XHRcdFx0XHRtdXRhdG9yID0gTXV0YXRvci5tdXRhdG9yc1t2YWx1ZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJNdXRhdG9yIEVycm9yIC0gTm8gc3VjaCBtdXRhdG9yIGZvdW5kLCBpZ25vcmluZzogXCIsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdG11dGF0b3IgPSB2YWx1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG11dGF0b3I7XG5cdH1cblxuXHQvL2FwcGx5IG11dGF0b3IgdG8gcm93XG5cdHRyYW5zZm9ybVJvdyhkYXRhLCB0eXBlLCB1cGRhdGVkRGF0YSl7XG5cdFx0dmFyIGtleSA9IFwibXV0YXRvclwiICsgKHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpKSxcblx0XHR2YWx1ZTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKFwia2V5XCIsIGtleSlcblxuXHRcdGlmKHRoaXMuZW5hYmxlZCl7XG5cblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci50cmF2ZXJzZSgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdHZhciBtdXRhdG9yLCBwYXJhbXMsIGNvbXBvbmVudDtcblxuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5tdXRhdGUpe1xuXHRcdFx0XHRcdG11dGF0b3IgPSBjb2x1bW4ubW9kdWxlcy5tdXRhdGVba2V5XSB8fCBjb2x1bW4ubW9kdWxlcy5tdXRhdGUubXV0YXRvciB8fCBmYWxzZTtcblxuXHRcdFx0XHRcdGlmKG11dGF0b3Ipe1xuXHRcdFx0XHRcdFx0dmFsdWUgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZSh0eXBlb2YgdXBkYXRlZERhdGEgIT09IFwidW5kZWZpbmVkXCIgPyB1cGRhdGVkRGF0YSA6IGRhdGEpO1xuXG5cdFx0XHRcdFx0XHRpZigodHlwZSA9PSBcImRhdGFcIiAmJiAhdXBkYXRlZERhdGEpfHwgdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdFx0Y29tcG9uZW50ID0gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgbXV0YXRvci5wYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IG11dGF0b3IucGFyYW1zKHZhbHVlLCBkYXRhLCB0eXBlLCBjb21wb25lbnQpIDogbXV0YXRvci5wYXJhbXM7XG5cdFx0XHRcdFx0XHRcdGNvbHVtbi5zZXRGaWVsZFZhbHVlKGRhdGEsIG11dGF0b3IubXV0YXRvcih2YWx1ZSwgZGF0YSwgdHlwZSwgcGFyYW1zLCBjb21wb25lbnQpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0Ly9hcHBseSBtdXRhdG9yIHRvIG5ldyBjZWxsIHZhbHVlXG5cdHRyYW5zZm9ybUNlbGwoY2VsbCwgdmFsdWUpe1xuXHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMubXV0YXRlKXtcblx0XHRcdHZhciBtdXRhdG9yID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5tdXRhdGUubXV0YXRvckVkaXQgfHwgY2VsbC5jb2x1bW4ubW9kdWxlcy5tdXRhdGUubXV0YXRvciB8fCBmYWxzZSxcblx0XHRcdHRlbXBEYXRhID0ge307XG5cblx0XHRcdGlmKG11dGF0b3Ipe1xuXHRcdFx0XHR0ZW1wRGF0YSA9IE9iamVjdC5hc3NpZ24odGVtcERhdGEsIGNlbGwucm93LmdldERhdGEoKSk7XG5cdFx0XHRcdGNlbGwuY29sdW1uLnNldEZpZWxkVmFsdWUodGVtcERhdGEsIHZhbHVlKTtcblx0XHRcdFx0cmV0dXJuIG11dGF0b3IubXV0YXRvcih2YWx1ZSwgdGVtcERhdGEsIFwiZWRpdFwiLCBtdXRhdG9yLnBhcmFtcywgY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0bXV0YXRlTGluayhjZWxsKXtcblx0XHR2YXIgbGlua3MgPSBjZWxsLmNvbHVtbi5kZWZpbml0aW9uLm11dGF0ZUxpbms7XG5cblx0XHRpZihsaW5rcyl7XG5cdFx0XHRpZighQXJyYXkuaXNBcnJheShsaW5rcykpe1xuXHRcdFx0XHRsaW5rcyA9IFtsaW5rc107XG5cdFx0XHR9XG5cblx0XHRcdGxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0XHRcdFx0dmFyIGxpbmtDZWxsID0gY2VsbC5yb3cuZ2V0Q2VsbChsaW5rKTtcblxuXHRcdFx0XHRpZihsaW5rQ2VsbCl7XG5cdFx0XHRcdFx0bGlua0NlbGwuc2V0VmFsdWUobGlua0NlbGwuZ2V0VmFsdWUoKSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGVuYWJsZSgpe1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cdH1cblxuXHRkaXNhYmxlKCl7XG5cdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gcm93cyhwYWdlU2l6ZSwgY3VycmVudFJvdywgY3VycmVudFBhZ2UsIHRvdGFsUm93cywgdG90YWxQYWdlcyl7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHRzaG93aW5nRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0dmFsdWVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHRvZkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHRvdGFsRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0cm93c0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfHNob3dpbmdcIiwgKHZhbHVlKSA9PiB7XG5cdFx0c2hvd2luZ0VsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblxuXHR0aGlzLnRhYmxlLm1vZHVsZXMubG9jYWxpemUubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGNvdW50ZXJ8b2ZcIiwgKHZhbHVlKSA9PiB7XG5cdFx0b2ZFbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0fSk7XG5cblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfHJvd3NcIiwgKHZhbHVlKSA9PiB7XG5cdFx0cm93c0VsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblxuXHRpZih0b3RhbFJvd3Mpe1xuXHRcdHZhbHVlRWwuaW5uZXJIVE1MID0gXCIgXCIgKyBjdXJyZW50Um93ICsgXCItXCIgKyBNYXRoLm1pbigoY3VycmVudFJvdyArIHBhZ2VTaXplIC0gMSksIHRvdGFsUm93cykgKyBcIiBcIjtcblx0XHRcblx0XHR0b3RhbEVsLmlubmVySFRNTCA9IFwiIFwiICsgdG90YWxSb3dzICsgXCIgXCI7XG5cdFx0XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoc2hvd2luZ0VsKTtcblx0XHRlbC5hcHBlbmRDaGlsZCh2YWx1ZUVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZChvZkVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZCh0b3RhbEVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZChyb3dzRWwpO1xuXHR9ZWxzZSB7XG5cdFx0dmFsdWVFbC5pbm5lckhUTUwgPSBcIiAwIFwiO1xuXG5cdFx0ZWwuYXBwZW5kQ2hpbGQoc2hvd2luZ0VsKTtcblx0XHRlbC5hcHBlbmRDaGlsZCh2YWx1ZUVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZChyb3dzRWwpO1xuXHR9XG5cdFxuXHRyZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIHBhZ2VzKHBhZ2VTaXplLCBjdXJyZW50Um93LCBjdXJyZW50UGFnZSwgdG90YWxSb3dzLCB0b3RhbFBhZ2VzKXtcblxuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0c2hvd2luZ0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHZhbHVlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0b2ZFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHR0b3RhbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHJvd3NFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfHNob3dpbmdcIiwgKHZhbHVlKSA9PiB7XG5cdFx0c2hvd2luZ0VsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblx0XG5cdHZhbHVlRWwuaW5uZXJIVE1MID0gXCIgXCIgKyBjdXJyZW50UGFnZSArIFwiIFwiO1xuXHRcblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfG9mXCIsICh2YWx1ZSkgPT4ge1xuXHRcdG9mRWwuaW5uZXJIVE1MID0gdmFsdWU7XG5cdH0pO1xuXHRcblx0dG90YWxFbC5pbm5lckhUTUwgPSBcIiBcIiArIHRvdGFsUGFnZXMgKyBcIiBcIjtcblx0XG5cdHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5sYW5nQmluZChcInBhZ2luYXRpb258Y291bnRlcnxwYWdlc1wiLCAodmFsdWUpID0+IHtcblx0XHRyb3dzRWwuaW5uZXJIVE1MID0gdmFsdWU7XG5cdH0pO1xuXHRcblx0ZWwuYXBwZW5kQ2hpbGQoc2hvd2luZ0VsKTtcblx0ZWwuYXBwZW5kQ2hpbGQodmFsdWVFbCk7XG5cdGVsLmFwcGVuZENoaWxkKG9mRWwpO1xuXHRlbC5hcHBlbmRDaGlsZCh0b3RhbEVsKTtcblx0ZWwuYXBwZW5kQ2hpbGQocm93c0VsKTtcblx0XG5cdHJldHVybiBlbDtcbn1cblxudmFyIGRlZmF1bHRQYWdlQ291bnRlcnMgPSB7XG5cdHJvd3M6cm93cyxcblx0cGFnZXM6cGFnZXMsXG59O1xuXG5jbGFzcyBQYWdlIGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJwYWdlXCI7XG5cblx0Ly9sb2FkIGRlZmF1bHRzXG5cdHN0YXRpYyBwYWdlQ291bnRlcnMgPSBkZWZhdWx0UGFnZUNvdW50ZXJzO1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLm1vZGUgPSBcImxvY2FsXCI7XG5cdFx0dGhpcy5wcm9ncmVzc2l2ZUxvYWQgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBudWxsO1xuXHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLnBhZ2VDb3VudGVyID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLnNpemUgPSAwO1xuXHRcdHRoaXMucGFnZSA9IDE7XG5cdFx0dGhpcy5jb3VudCA9IDU7XG5cdFx0dGhpcy5tYXggPSAxO1xuXG5cdFx0dGhpcy5yZW1vdGVSb3dDb3VudEVzdGltYXRlID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxMb2FkID0gdHJ1ZTtcblx0XHR0aGlzLmRhdGFDaGFuZ2luZyA9IGZhbHNlOyAvL2ZsYWcgdG8gY2hlY2sgaWYgZGF0YSBpcyBiZWluZyBjaGFuZ2VkIGJ5IHRoaXMgbW9kdWxlXG5cdFx0XG5cdFx0dGhpcy5wYWdlU2l6ZXMgPSBbXTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uXCIsIGZhbHNlKTsgLy9zZXQgcGFnaW5hdGlvbiB0eXBlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbk1vZGVcIiwgXCJsb2NhbFwiKTsgLy9sb2NhbCBvciByZW1vdGUgcGFnaW5hdGlvblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25TaXplXCIsIGZhbHNlKTsgLy9zZXQgbnVtYmVyIG9mIHJvd3MgdG8gYSBwYWdlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkluaXRpYWxQYWdlXCIsIDEpOyAvL2luaXRpYWwgcGFnZSB0byBzaG93IG9uIGxvYWRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uQ291bnRlclwiLCBmYWxzZSk7ICAvLyBzZXQgcGFnaW5hdGlvbiBjb3VudGVyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50XCIsIGZhbHNlKTsgIC8vIHNldCBwYWdpbmF0aW9uIGNvdW50ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uQnV0dG9uQ291bnRcIiwgNSk7ICAvLyBzZXQgY291bnQgb2YgcGFnZSBidXR0b25cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uU2l6ZVNlbGVjdG9yXCIsIGZhbHNlKTsgLy9hZGQgcGFnaW5hdGlvbiBzaXplIHNlbGVjdG9yIGVsZW1lbnRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uRWxlbWVudFwiLCBmYWxzZSk7IC8vZWxlbWVudCB0byBob2xkIHBhZ2luYXRpb24gbnVtYmVyc1xuXHRcdC8vIHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25EYXRhU2VudFwiLCB7fSk7IC8vcGFnaW5hdGlvbiBkYXRhIHNlbnQgdG8gdGhlIHNlcnZlclxuXHRcdC8vIHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25EYXRhUmVjZWl2ZWRcIiwge30pOyAvL3BhZ2luYXRpb24gZGF0YSByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uQWRkUm93XCIsIFwicGFnZVwiKTsgLy9hZGQgcm93cyBvbiB0YWJsZSBvciBwYWdlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbk91dE9mUmFuZ2VcIiwgZmFsc2UpOyAvL3Jlc2V0IHRoZSBjdXJyZW50IHBhZ2Ugd2hlbiB0aGUgbGFzdCBwYWdlIDwgdGhpcy5wYWdlLCB2YWx1ZXM6IGZhbHNlfGZ1bmN0aW9ufGFueSB2YWx1ZSBhY2NlcHRlZCBieSBzZXRQYWdlKClcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcm9ncmVzc2l2ZUxvYWRcIiwgZmFsc2UpOyAvL3Byb2dyZXNzaXZlIGxvYWRpbmdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcm9ncmVzc2l2ZUxvYWREZWxheVwiLCAwKTsgLy9kZWxheSBiZXR3ZWVuIHJlcXVlc3RzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJvZ3Jlc3NpdmVMb2FkU2Nyb2xsTWFyZ2luXCIsIDApOyAvL21hcmdpbiBiZWZvcmUgc2Nyb2xsIGJlZ2luc1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0TWF4UGFnZVwiLCB0aGlzLnNldE1heFBhZ2UuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRQYWdlXCIsIHRoaXMuc2V0UGFnZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldFBhZ2VUb1Jvd1wiLCB0aGlzLnVzZXJTZXRQYWdlVG9Sb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRQYWdlU2l6ZVwiLCB0aGlzLnVzZXJTZXRQYWdlU2l6ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldFBhZ2VTaXplXCIsIHRoaXMuZ2V0UGFnZVNpemUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJwcmV2aW91c1BhZ2VcIiwgdGhpcy5wcmV2aW91c1BhZ2UuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJuZXh0UGFnZVwiLCB0aGlzLm5leHRQYWdlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0UGFnZVwiLCB0aGlzLmdldFBhZ2UuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRQYWdlTWF4XCIsIHRoaXMuZ2V0UGFnZU1heC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHQvL3JlZ2lzdGVyIGNvbXBvbmVudCBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJwYWdlVG9cIiwgdGhpcy5zZXRQYWdlVG9Sb3cuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbil7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGVkXCIsIHRoaXMucm93c1VwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1hZGRlZFwiLCB0aGlzLnJvd3NVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXByb2Nlc3NlZFwiLCB0aGlzLmluaXRpYWxMb2FkQ29tcGxldGUuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWJ1aWx0XCIsIHRoaXMuY2FsY3VsYXRlUGFnZVNpemVzLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJmb290ZXItcmVkcmF3XCIsIHRoaXMuZm9vdGVyUmVkcmF3LmJpbmQodGhpcykpO1xuXG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkFkZFJvdyA9PSBcInBhZ2VcIil7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWFkZGluZy1wb3NpdGlvblwiLCB0aGlzLnJvd0FkZGluZ1Bvc2l0aW9uLmJpbmQodGhpcykpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbk1vZGUgPT09IFwicmVtb3RlXCIpe1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcGFyYW1zXCIsIHRoaXMucmVtb3RlUGFnZVBhcmFtcy5iaW5kKHRoaXMpKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLWxvYWRlZFwiLCB0aGlzLl9wYXJzZVJlbW90ZURhdGEuYmluZCh0aGlzKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWQpe1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiUHJvZ3Jlc3NpdmUgTG9hZCBFcnJvciAtIFBhZ2luYXRpb24gYW5kIHByb2dyZXNzaXZlIGxvYWQgY2Fubm90IGJlIHVzZWQgYXQgdGhlIHNhbWUgdGltZVwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5yZWdpc3RlckRpc3BsYXlIYW5kbGVyKHRoaXMucmVzdE9uUmVuZGVyQmVmb3JlLmJpbmQodGhpcyksIDQwKTtcblx0XHRcdHRoaXMucmVnaXN0ZXJEaXNwbGF5SGFuZGxlcih0aGlzLmdldFJvd3MuYmluZCh0aGlzKSwgNTApO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVQYWdlQ291bnRlcigpO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplUGFnaW5hdG9yKCk7XG5cdFx0fWVsc2UgaWYodGhpcy50YWJsZS5vcHRpb25zLnByb2dyZXNzaXZlTG9hZCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcGFyYW1zXCIsIHRoaXMucmVtb3RlUGFnZVBhcmFtcy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1sb2FkZWRcIiwgdGhpcy5fcGFyc2VSZW1vdGVEYXRhLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1idWlsdFwiLCB0aGlzLmNhbGN1bGF0ZVBhZ2VTaXplcy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wcm9jZXNzZWRcIiwgdGhpcy5pbml0aWFsTG9hZENvbXBsZXRlLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemVQcm9ncmVzc2l2ZSh0aGlzLnRhYmxlLm9wdGlvbnMucHJvZ3Jlc3NpdmVMb2FkKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnByb2dyZXNzaXZlTG9hZCA9PT0gXCJzY3JvbGxcIil7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsLXZlcnRpY2FsXCIsIHRoaXMuc2Nyb2xsVmVydGljYWwuYmluZCh0aGlzKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyb3dBZGRpbmdQb3NpdGlvbihyb3csIHRvcCl7XG5cdFx0dmFyIHJvd01hbmFnZXIgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIsXG5cdFx0ZGlzcGxheVJvd3MgPSByb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCksXG5cdFx0aW5kZXg7XG5cdFx0XG5cdFx0aWYodG9wKXtcblx0XHRcdGlmKGRpc3BsYXlSb3dzLmxlbmd0aCl7XG5cdFx0XHRcdGluZGV4ID0gZGlzcGxheVJvd3NbMF07XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHJvd01hbmFnZXIuYWN0aXZlUm93cy5sZW5ndGgpe1xuXHRcdFx0XHRcdGluZGV4ID0gcm93TWFuYWdlci5hY3RpdmVSb3dzW3Jvd01hbmFnZXIuYWN0aXZlUm93cy5sZW5ndGgtMV07XG5cdFx0XHRcdFx0dG9wID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihkaXNwbGF5Um93cy5sZW5ndGgpe1xuXHRcdFx0XHRpbmRleCA9IGRpc3BsYXlSb3dzW2Rpc3BsYXlSb3dzLmxlbmd0aCAtIDFdO1xuXHRcdFx0XHR0b3AgPSBkaXNwbGF5Um93cy5sZW5ndGggPCB0aGlzLnNpemUgPyBmYWxzZSA6IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB7aW5kZXgsIHRvcH07XG5cdH1cblx0XG5cdGNhbGN1bGF0ZVBhZ2VTaXplcygpe1xuXHRcdHZhciB0ZXN0RWxSb3csIHRlc3RFbENlbGw7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25TaXplKXtcblx0XHRcdHRoaXMuc2l6ZSA9IHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uU2l6ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0ZXN0RWxSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0dGVzdEVsUm93LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93XCIpO1xuXHRcdFx0dGVzdEVsUm93LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHRcdFx0XG5cdFx0XHR0ZXN0RWxDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHRlc3RFbENlbGwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jZWxsXCIpO1xuXHRcdFx0dGVzdEVsQ2VsbC5pbm5lckhUTUwgPSBcIlBhZ2UgUm93IFRlc3RcIjtcblx0XHRcdFxuXHRcdFx0dGVzdEVsUm93LmFwcGVuZENoaWxkKHRlc3RFbENlbGwpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VGFibGVFbGVtZW50KCkuYXBwZW5kQ2hpbGQodGVzdEVsUm93KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zaXplID0gTWF0aC5mbG9vcih0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RWxlbWVudCgpLmNsaWVudEhlaWdodCAvIHRlc3RFbFJvdy5vZmZzZXRIZWlnaHQpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VGFibGVFbGVtZW50KCkucmVtb3ZlQ2hpbGQodGVzdEVsUm93KTtcblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJwYWdlU2l6ZUNoYW5nZWRcIiwgdGhpcy5zaXplKTtcblx0XHRcblx0XHR0aGlzLmdlbmVyYXRlUGFnZVNpemVTZWxlY3RMaXN0KCk7XG5cdH1cblx0XG5cdGluaXRpYWxMb2FkQ29tcGxldGUoKXtcblx0XHR0aGlzLmluaXRpYWxMb2FkID0gZmFsc2U7XG5cdH1cblx0XG5cdHJlbW90ZVBhZ2VQYXJhbXMoZGF0YSwgY29uZmlnLCBzaWxlbnQsIHBhcmFtcyl7XG5cdFx0aWYoIXRoaXMuaW5pdGlhbExvYWQpe1xuXHRcdFx0aWYoKHRoaXMucHJvZ3Jlc3NpdmVMb2FkICYmICFzaWxlbnQpIHx8ICghdGhpcy5wcm9ncmVzc2l2ZUxvYWQgJiYgIXRoaXMuZGF0YUNoYW5naW5nKSl7XG5cdFx0XHRcdHRoaXMucmVzZXQodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vY29uZmlndXJlIHJlcXVlc3QgcGFyYW1zXG5cdFx0cGFyYW1zLnBhZ2UgPSB0aGlzLnBhZ2U7XG5cdFx0XG5cdFx0Ly9zZXQgcGFnZSBzaXplIGlmIGRlZmluZWRcblx0XHRpZih0aGlzLnNpemUpe1xuXHRcdFx0cGFyYW1zLnNpemUgPSB0aGlzLnNpemU7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHR1c2VyU2V0UGFnZVRvUm93KHJvdyl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb24pe1xuXHRcdFx0cm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3cocm93KTtcblx0XHRcdFxuXHRcdFx0aWYocm93KXtcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UGFnZVRvUm93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHR9XG5cdFxuXHR1c2VyU2V0UGFnZVNpemUoc2l6ZSl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb24pe1xuXHRcdFx0dGhpcy5zZXRQYWdlU2l6ZShzaXplKTtcblx0XHRcdHJldHVybiB0aGlzLnNldFBhZ2UoMSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0c2Nyb2xsVmVydGljYWwodG9wLCBkaXIpe1xuXHRcdHZhciBlbGVtZW50LCBkaWZmLCBtYXJnaW47XG5cdFx0aWYoIWRpciAmJiAhdGhpcy50YWJsZS5kYXRhTG9hZGVyLmxvYWRpbmcpe1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRFbGVtZW50KCk7XG5cdFx0XHRkaWZmID0gZWxlbWVudC5zY3JvbGxIZWlnaHQgLSBlbGVtZW50LmNsaWVudEhlaWdodCAtIHRvcDtcblx0XHRcdG1hcmdpbiA9IHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWRTY3JvbGxNYXJnaW4gfHwgKGVsZW1lbnQuY2xpZW50SGVpZ2h0ICogMik7XG5cdFx0XHRcblx0XHRcdGlmKGRpZmYgPCBtYXJnaW4pe1xuXHRcdFx0XHR0aGlzLm5leHRQYWdlKClcblx0XHRcdFx0XHQuY2F0Y2goKCkgPT4ge30pOyAvL2NvbnN1bWUgdGhlIGV4Y2VwdGlvbiB0aHJvd24gd2hlbiBvbiB0aGUgbGFzdCBwYWdlXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZXN0T25SZW5kZXJCZWZvcmUocm93cywgcmVuZGVySW5Qb3NpdGlvbil7XG5cdFx0aWYoIXJlbmRlckluUG9zaXRpb24pe1xuXHRcdFx0aWYodGhpcy5tb2RlID09PSBcImxvY2FsXCIpe1xuXHRcdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cdFxuXHRyb3dzVXBkYXRlZCgpe1xuXHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSwgXCJhbGxcIik7XG5cdH1cblx0XG5cdGNyZWF0ZUVsZW1lbnRzKCl7XG5cdFx0dmFyIGJ1dHRvbjtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wYWdpbmF0b3JcIik7XG5cdFx0XG5cdFx0dGhpcy5wYWdlc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHR0aGlzLnBhZ2VzRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBhZ2VzXCIpO1xuXHRcdFxuXHRcdGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cdFx0YnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGFnZVwiKTtcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImJ1dHRvblwiKTtcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImJ1dHRvblwiKTtcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIlwiKTtcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgXCJcIik7XG5cdFx0XG5cdFx0dGhpcy5maXJzdEJ1dCA9IGJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0dGhpcy5maXJzdEJ1dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIiwgXCJmaXJzdFwiKTtcblx0XHRcblx0XHR0aGlzLnByZXZCdXQgPSBidXR0b24uY2xvbmVOb2RlKHRydWUpO1xuXHRcdHRoaXMucHJldkJ1dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIiwgXCJwcmV2XCIpO1xuXHRcdFxuXHRcdHRoaXMubmV4dEJ1dCA9IGJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0dGhpcy5uZXh0QnV0LnNldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiLCBcIm5leHRcIik7XG5cdFx0XG5cdFx0dGhpcy5sYXN0QnV0ID0gYnV0dG9uLmNsb25lTm9kZSh0cnVlKTtcblx0XHR0aGlzLmxhc3RCdXQuc2V0QXR0cmlidXRlKFwiZGF0YS1wYWdlXCIsIFwibGFzdFwiKTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvblNpemVTZWxlY3Rvcil7XG5cdFx0XHR0aGlzLnBhZ2VTaXplU2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcblx0XHRcdHRoaXMucGFnZVNpemVTZWxlY3QuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wYWdlLXNpemVcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZW5lcmF0ZVBhZ2VTaXplU2VsZWN0TGlzdCgpe1xuXHRcdHZhciBwYWdlU2l6ZXMgPSBbXTtcblx0XHRcblx0XHRpZih0aGlzLnBhZ2VTaXplU2VsZWN0KXtcblx0XHRcdFxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheSh0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvblNpemVTZWxlY3Rvcikpe1xuXHRcdFx0XHRwYWdlU2l6ZXMgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvblNpemVTZWxlY3Rvcjtcblx0XHRcdFx0dGhpcy5wYWdlU2l6ZXMgPSBwYWdlU2l6ZXM7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnBhZ2VTaXplcy5pbmRleE9mKHRoaXMuc2l6ZSkgPT0gLTEpe1xuXHRcdFx0XHRcdHBhZ2VTaXplcy51bnNoaWZ0KHRoaXMuc2l6ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMucGFnZVNpemVzLmluZGV4T2YodGhpcy5zaXplKSA9PSAtMSl7XG5cdFx0XHRcdFx0cGFnZVNpemVzID0gW107XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCA1OyBpKyspe1xuXHRcdFx0XHRcdFx0cGFnZVNpemVzLnB1c2godGhpcy5zaXplICogaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMucGFnZVNpemVzID0gcGFnZVNpemVzO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cGFnZVNpemVzID0gdGhpcy5wYWdlU2l6ZXM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0d2hpbGUodGhpcy5wYWdlU2l6ZVNlbGVjdC5maXJzdENoaWxkKSB0aGlzLnBhZ2VTaXplU2VsZWN0LnJlbW92ZUNoaWxkKHRoaXMucGFnZVNpemVTZWxlY3QuZmlyc3RDaGlsZCk7XG5cdFx0XHRcblx0XHRcdHBhZ2VTaXplcy5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdHZhciBpdGVtRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuXHRcdFx0XHRpdGVtRWwudmFsdWUgPSBpdGVtO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoaXRlbSA9PT0gdHJ1ZSl7XG5cdFx0XHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258YWxsXCIsIGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0XHRcdGl0ZW1FbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGl0ZW1FbC5pbm5lckhUTUwgPSBpdGVtO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMucGFnZVNpemVTZWxlY3QuYXBwZW5kQ2hpbGQoaXRlbUVsKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnBhZ2VTaXplU2VsZWN0LnZhbHVlID0gdGhpcy5zaXplO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZVBhZ2VDb3VudGVyKCl7XG5cdFx0dmFyIGNvdW50ZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXIsXG5cdFx0cGFnZUNvdW50ZXIgPSBudWxsO1xuXHRcdFxuXHRcdGlmKGNvdW50ZXIpe1xuXHRcdFx0aWYodHlwZW9mIGNvdW50ZXIgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdHBhZ2VDb3VudGVyID0gY291bnRlcjtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cGFnZUNvdW50ZXIgPSBQYWdlLnBhZ2VDb3VudGVyc1tjb3VudGVyXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYocGFnZUNvdW50ZXIpe1xuXHRcdFx0XHR0aGlzLnBhZ2VDb3VudGVyID0gcGFnZUNvdW50ZXI7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnBhZ2VDb3VudGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcdFx0XHR0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBhZ2UtY291bnRlclwiKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGFnaW5hdGlvbiBFcnJvciAtIE5vIHN1Y2ggcGFnZSBjb3VudGVyIGZvdW5kOiBcIiwgY291bnRlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3NldHVwIHBhZ2luYXRpb25cblx0aW5pdGlhbGl6ZVBhZ2luYXRvcihoaWRkZW4pe1xuXHRcdHZhciBwYWdlU2VsZWN0TGFiZWwsIHBhZ2luYXRpb25Db3VudGVySG9sZGVyO1xuXHRcdFxuXHRcdGlmKCFoaWRkZW4pe1xuXHRcdFx0Ly9idWlsZCBwYWdpbmF0aW9uIGVsZW1lbnRcblx0XHRcdFxuXHRcdFx0Ly9iaW5kIGxvY2FsaXphdGlvbnNcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGZpcnN0XCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmZpcnN0QnV0LmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGZpcnN0X3RpdGxlXCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmZpcnN0QnV0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdmFsdWUpO1xuXHRcdFx0XHR0aGlzLmZpcnN0QnV0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxwcmV2XCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnByZXZCdXQuaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258cHJldl90aXRsZVwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wcmV2QnV0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdmFsdWUpO1xuXHRcdFx0XHR0aGlzLnByZXZCdXQuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufG5leHRcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMubmV4dEJ1dC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxuZXh0X3RpdGxlXCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLm5leHRCdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSk7XG5cdFx0XHRcdHRoaXMubmV4dEJ1dC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258bGFzdFwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5sYXN0QnV0LmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGxhc3RfdGl0bGVcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMubGFzdEJ1dC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblx0XHRcdFx0dGhpcy5sYXN0QnV0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHQvL2NsaWNrIGJpbmRpbmdzXG5cdFx0XHR0aGlzLmZpcnN0QnV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2V0UGFnZSgxKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnByZXZCdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRcdFx0dGhpcy5wcmV2aW91c1BhZ2UoKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLm5leHRCdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRcdFx0dGhpcy5uZXh0UGFnZSgpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFzdEJ1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnNldFBhZ2UodGhpcy5tYXgpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uRWxlbWVudCl7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCA9IHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uRWxlbWVudDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5wYWdlU2l6ZVNlbGVjdCl7XG5cdFx0XHRcdHBhZ2VTZWxlY3RMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufHBhZ2Vfc2l6ZVwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBhZ2VTaXplU2VsZWN0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMucGFnZVNpemVTZWxlY3Quc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdmFsdWUpO1xuXHRcdFx0XHRcdHBhZ2VTZWxlY3RMYWJlbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQocGFnZVNlbGVjdExhYmVsKTtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucGFnZVNpemVTZWxlY3QpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5wYWdlU2l6ZVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5zZXRQYWdlU2l6ZSh0aGlzLnBhZ2VTaXplU2VsZWN0LnZhbHVlID09IFwidHJ1ZVwiID8gdHJ1ZSA6IHRoaXMucGFnZVNpemVTZWxlY3QudmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMuc2V0UGFnZSgxKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vYXBwZW5kIHRvIERPTVxuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZmlyc3RCdXQpO1xuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucHJldkJ1dCk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5wYWdlc0VsZW1lbnQpO1xuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMubmV4dEJ1dCk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5sYXN0QnV0KTtcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uRWxlbWVudCl7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlcil7XG5cblx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50KXtcblx0XHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlckVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5wYWdlQ291bnRlckVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0fWVsc2UgaWYodHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlckVsZW1lbnQgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdFx0XHRwYWdpbmF0aW9uQ291bnRlckhvbGRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyRWxlbWVudCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZihwYWdpbmF0aW9uQ291bnRlckhvbGRlcil7XG5cdFx0XHRcdFx0XHRcdFx0cGFnaW5hdGlvbkNvdW50ZXJIb2xkZXIuYXBwZW5kQ2hpbGQodGhpcy5wYWdlQ291bnRlckVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGFnaW5hdGlvbiBFcnJvciAtIFVuYWJsZSB0byBmaW5kIGVsZW1lbnQgbWF0Y2hpbmcgcGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50IHNlbGVjdG9yOlwiLCB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuZm9vdGVyQXBwZW5kKHRoaXMucGFnZUNvdW50ZXJFbGVtZW50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZm9vdGVyQXBwZW5kKHRoaXMuZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucGFnZSA9IHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uSW5pdGlhbFBhZ2U7XG5cdFx0XHR0aGlzLmNvdW50ID0gdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25CdXR0b25Db3VudDtcblx0XHR9XG5cdFx0XG5cdFx0Ly9zZXQgZGVmYXVsdCB2YWx1ZXNcblx0XHR0aGlzLm1vZGUgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbk1vZGU7XG5cdH1cblx0XG5cdGluaXRpYWxpemVQcm9ncmVzc2l2ZShtb2RlKXtcblx0XHR0aGlzLmluaXRpYWxpemVQYWdpbmF0b3IodHJ1ZSk7XG5cdFx0dGhpcy5tb2RlID0gXCJwcm9ncmVzc2l2ZV9cIiArIG1vZGU7XG5cdFx0dGhpcy5wcm9ncmVzc2l2ZUxvYWQgPSB0cnVlO1xuXHR9XG5cdFxuXHR0cmFja0NoYW5nZXMoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwicGFnZS1jaGFuZ2VkXCIpO1xuXHR9XG5cdFxuXHQvL2NhbGN1bGF0ZSBtYXhpbXVtIHBhZ2UgZnJvbSBudW1iZXIgb2Ygcm93c1xuXHRzZXRNYXhSb3dzKHJvd0NvdW50KXtcblx0XHRpZighcm93Q291bnQpe1xuXHRcdFx0dGhpcy5tYXggPSAxO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMubWF4ID0gdGhpcy5zaXplID09PSB0cnVlID8gIDEgOiBNYXRoLmNlaWwocm93Q291bnQvdGhpcy5zaXplKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYWdlID4gdGhpcy5tYXgpe1xuXHRcdFx0dGhpcy5wYWdlID0gdGhpcy5tYXg7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3Jlc2V0IHRvIGZpcnN0IHBhZ2Ugd2l0aG91dCB0cmlnZ2VyaW5nIGFjdGlvblxuXHRyZXNldChmb3JjZSl7XG5cdFx0aWYoIXRoaXMuaW5pdGlhbExvYWQpe1xuXHRcdFx0aWYodGhpcy5tb2RlID09IFwibG9jYWxcIiB8fCBmb3JjZSl7XG5cdFx0XHRcdHRoaXMucGFnZSA9IDE7XG5cdFx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3NldCB0aGUgbWF4aW11bSBwYWdlXG5cdHNldE1heFBhZ2UobWF4KXtcblx0XHRcblx0XHRtYXggPSBwYXJzZUludChtYXgpO1xuXHRcdFxuXHRcdHRoaXMubWF4ID0gbWF4IHx8IDE7XG5cdFx0XG5cdFx0aWYodGhpcy5wYWdlID4gdGhpcy5tYXgpe1xuXHRcdFx0dGhpcy5wYWdlID0gdGhpcy5tYXg7XG5cdFx0XHR0aGlzLnRyaWdnZXIoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc2V0IGN1cnJlbnQgcGFnZSBudW1iZXJcblx0c2V0UGFnZShwYWdlKXtcblx0XHRzd2l0Y2gocGFnZSl7XG5cdFx0XHRjYXNlIFwiZmlyc3RcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UGFnZSgxKTtcblx0XG5cdFx0XHRjYXNlIFwicHJldlwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5wcmV2aW91c1BhZ2UoKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcIm5leHRcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMubmV4dFBhZ2UoKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImxhc3RcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UGFnZSh0aGlzLm1heCk7XG5cdFx0fVxuXHRcdFxuXHRcdHBhZ2UgPSBwYXJzZUludChwYWdlKTtcblx0XHRcblx0XHRpZigocGFnZSA+IDAgJiYgcGFnZSA8PSB0aGlzLm1heCkgfHwgdGhpcy5tb2RlICE9PSBcImxvY2FsXCIpe1xuXHRcdFx0dGhpcy5wYWdlID0gcGFnZTtcblx0XHRcdFxuXHRcdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRoaXMudHJpZ2dlcigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2luYXRpb24gRXJyb3IgLSBSZXF1ZXN0ZWQgcGFnZSBpcyBvdXQgb2YgcmFuZ2Ugb2YgMSAtIFwiICsgdGhpcy5tYXggKyBcIjpcIiwgcGFnZSk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdHNldFBhZ2VUb1Jvdyhyb3cpe1xuXHRcdHZhciByb3dzID0gdGhpcy5kaXNwbGF5Um93cygtMSk7XG5cdFx0dmFyIGluZGV4ID0gcm93cy5pbmRleE9mKHJvdyk7XG5cdFxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dmFyIHBhZ2UgPSB0aGlzLnNpemUgPT09IHRydWUgPyAxIDogTWF0aC5jZWlsKChpbmRleCArIDEpIC8gdGhpcy5zaXplKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0UGFnZShwYWdlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJQYWdpbmF0aW9uIEVycm9yIC0gUmVxdWVzdGVkIHJvdyBpcyBub3QgdmlzaWJsZVwiKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0UGFnZVNpemUoc2l6ZSl7XG5cdFx0aWYoc2l6ZSAhPT0gdHJ1ZSl7XG5cdFx0XHRzaXplID0gcGFyc2VJbnQoc2l6ZSk7XG5cdFx0fVxuXG5cdFx0aWYoc2l6ZSA+IDApe1xuXHRcdFx0dGhpcy5zaXplID0gc2l6ZTtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBhZ2VTaXplQ2hhbmdlZFwiLCBzaXplKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYWdlU2l6ZVNlbGVjdCl7XG5cdFx0XHQvLyB0aGlzLnBhZ2VTaXplU2VsZWN0LnZhbHVlID0gc2l6ZTtcblx0XHRcdHRoaXMuZ2VuZXJhdGVQYWdlU2l6ZVNlbGVjdExpc3QoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0fVxuXHRcblx0X3NldFBhZ2VDb3VudGVyKHRvdGFsUm93cywgc2l6ZSwgY3VycmVudFJvdyl7XG5cdFx0dmFyIGNvbnRlbnQ7XG5cdFx0XG5cdFx0aWYodGhpcy5wYWdlQ291bnRlcil7XG5cblx0XHRcdGlmKHRoaXMubW9kZSA9PT0gXCJyZW1vdGVcIil7XG5cdFx0XHRcdHNpemUgPSB0aGlzLnNpemU7XG5cdFx0XHRcdGN1cnJlbnRSb3cgPSAoKHRoaXMucGFnZSAtIDEpICogdGhpcy5zaXplKSArIDE7XG5cdFx0XHRcdHRvdGFsUm93cyA9IHRoaXMucmVtb3RlUm93Q291bnRFc3RpbWF0ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29udGVudCA9IHRoaXMucGFnZUNvdW50ZXIuY2FsbCh0aGlzLCBzaXplLCBjdXJyZW50Um93LCB0aGlzLnBhZ2UsIHRvdGFsUm93cywgdGhpcy5tYXgpO1xuXHRcdFx0XG5cdFx0XHRzd2l0Y2godHlwZW9mIGNvbnRlbnQpe1xuXHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0aWYoY29udGVudCBpbnN0YW5jZW9mIE5vZGUpe1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly9jbGVhciBwcmV2aW91cyBjZWxsIGNvbnRlbnRzXG5cdFx0XHRcdFx0XHR3aGlsZSh0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5maXJzdENoaWxkKSB0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihjb250ZW50ICE9IG51bGwpe1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJQYWdlIENvdW50ZXIgRXJyb3IgLSBQYWdlIENvdW50ZXIgaGFzIHJldHVybmVkIGEgdHlwZSBvZiBvYmplY3QsIHRoZSBvbmx5IHZhbGlkIHBhZ2UgY291bnRlciBvYmplY3QgcmV0dXJuIGlzIGFuIGluc3RhbmNlIG9mIE5vZGUsIHRoZSBwYWdlIGNvdW50ZXIgcmV0dXJuZWQ6XCIsIGNvbnRlbnQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhpcy5wYWdlQ291bnRlckVsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vc2V0dXAgdGhlIHBhZ2luYXRpb24gYnV0dG9uc1xuXHRfc2V0UGFnZUJ1dHRvbnMoKXtcblx0XHRsZXQgbGVmdFNpemUgPSBNYXRoLmZsb29yKCh0aGlzLmNvdW50LTEpIC8gMik7XG5cdFx0bGV0IHJpZ2h0U2l6ZSA9IE1hdGguY2VpbCgodGhpcy5jb3VudC0xKSAvIDIpO1xuXHRcdGxldCBtaW4gPSB0aGlzLm1heCAtIHRoaXMucGFnZSArIGxlZnRTaXplICsgMSA8IHRoaXMuY291bnQgPyB0aGlzLm1heC10aGlzLmNvdW50KzE6IE1hdGgubWF4KHRoaXMucGFnZS1sZWZ0U2l6ZSwxKTtcblx0XHRsZXQgbWF4ID0gdGhpcy5wYWdlIDw9IHJpZ2h0U2l6ZT8gTWF0aC5taW4odGhpcy5jb3VudCwgdGhpcy5tYXgpIDpNYXRoLm1pbih0aGlzLnBhZ2UrcmlnaHRTaXplLCB0aGlzLm1heCk7XG5cdFx0XG5cdFx0d2hpbGUodGhpcy5wYWdlc0VsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5wYWdlc0VsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5wYWdlc0VsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XG5cdFx0aWYodGhpcy5wYWdlID09IDEpe1xuXHRcdFx0dGhpcy5maXJzdEJ1dC5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHR0aGlzLnByZXZCdXQuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZmlyc3RCdXQuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMucHJldkJ1dC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnBhZ2UgPT0gdGhpcy5tYXgpe1xuXHRcdFx0dGhpcy5sYXN0QnV0LmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdHRoaXMubmV4dEJ1dC5kaXNhYmxlZCA9IHRydWU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5sYXN0QnV0LmRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLm5leHRCdXQuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0Zm9yKGxldCBpID0gbWluOyBpIDw9IG1heDsgaSsrKXtcblx0XHRcdGlmKGk+MCAmJiBpIDw9IHRoaXMubWF4KXtcblx0XHRcdFx0dGhpcy5wYWdlc0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fZ2VuZXJhdGVQYWdlQnV0dG9uKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5mb290ZXJSZWRyYXcoKTtcblx0fVxuXHRcblx0X2dlbmVyYXRlUGFnZUJ1dHRvbihwYWdlKXtcblx0XHR2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0XHRcblx0XHRidXR0b24uY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wYWdlXCIpO1xuXHRcdGlmKHBhZ2UgPT0gdGhpcy5wYWdlKXtcblx0XHRcdGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuXHRcdH1cblx0XHRcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImJ1dHRvblwiKTtcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImJ1dHRvblwiKTtcblx0XHRcblx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxwYWdlX3RpdGxlXCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdmFsdWUgKyBcIiBcIiArIHBhZ2UpO1xuXHRcdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHZhbHVlICsgXCIgXCIgKyBwYWdlKTtcblx0XHR9KTtcblx0XHRcblx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1wYWdlXCIsIHBhZ2UpO1xuXHRcdGJ1dHRvbi50ZXh0Q29udGVudCA9IHBhZ2U7XG5cdFx0XG5cdFx0YnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0dGhpcy5zZXRQYWdlKHBhZ2UpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBidXR0b247XG5cdH1cblx0XG5cdC8vcHJldmlvdXMgcGFnZVxuXHRwcmV2aW91c1BhZ2UoKXtcblx0XHRpZih0aGlzLnBhZ2UgPiAxKXtcblx0XHRcdHRoaXMucGFnZS0tO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdGhpcy50cmlnZ2VyKCk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJQYWdpbmF0aW9uIEVycm9yIC0gUHJldmlvdXMgcGFnZSB3b3VsZCBiZSBsZXNzIHRoYW4gcGFnZSAxOlwiLCAwKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9uZXh0IHBhZ2Vcblx0bmV4dFBhZ2UoKXtcblx0XHRpZih0aGlzLnBhZ2UgPCB0aGlzLm1heCl7XG5cdFx0XHR0aGlzLnBhZ2UrKztcblx0XHRcdFxuXHRcdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRoaXMudHJpZ2dlcigpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoIXRoaXMucHJvZ3Jlc3NpdmVMb2FkKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGFnaW5hdGlvbiBFcnJvciAtIE5leHQgcGFnZSB3b3VsZCBiZSBncmVhdGVyIHRoYW4gbWF4aW11bSBwYWdlIG9mIFwiICsgdGhpcy5tYXggKyBcIjpcIiwgdGhpcy5tYXggKyAxKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gY3VycmVudCBwYWdlIG51bWJlclxuXHRnZXRQYWdlKCl7XG5cdFx0cmV0dXJuIHRoaXMucGFnZTtcblx0fVxuXHRcblx0Ly9yZXR1cm4gbWF4IHBhZ2UgbnVtYmVyXG5cdGdldFBhZ2VNYXgoKXtcblx0XHRyZXR1cm4gdGhpcy5tYXg7XG5cdH1cblx0XG5cdGdldFBhZ2VTaXplKHNpemUpe1xuXHRcdHJldHVybiB0aGlzLnNpemU7XG5cdH1cblx0XG5cdGdldE1vZGUoKXtcblx0XHRyZXR1cm4gdGhpcy5tb2RlO1xuXHR9XG5cdFxuXHQvL3JldHVybiBhcHByb3ByaWF0ZSByb3dzIGZvciBjdXJyZW50IHBhZ2Vcblx0Z2V0Um93cyhkYXRhKXtcblx0XHR2YXIgYWN0dWFsUm93UGFnZVNpemUgPSAwLFxuXHRcdG91dHB1dCwgc3RhcnQsIGVuZCwgYWN0dWFsU3RhcnRSb3c7XG5cblx0XHR2YXIgYWN0dWFsUm93cyA9IGRhdGEuZmlsdGVyKChyb3cpID0+IHtcblx0XHRcdHJldHVybiByb3cudHlwZSA9PT0gXCJyb3dcIjtcblx0XHR9KTtcblx0XHRcblx0XHRpZih0aGlzLm1vZGUgPT0gXCJsb2NhbFwiKXtcblx0XHRcdG91dHB1dCA9IFtdO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnNldE1heFJvd3MoZGF0YS5sZW5ndGgpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnNpemUgPT09IHRydWUpe1xuXHRcdFx0XHRzdGFydCA9IDA7XG5cdFx0XHRcdGVuZCA9IGRhdGEubGVuZ3RoO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRzdGFydCA9IHRoaXMuc2l6ZSAqICh0aGlzLnBhZ2UgLSAxKTtcblx0XHRcdFx0ZW5kID0gc3RhcnQgKyBwYXJzZUludCh0aGlzLnNpemUpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLl9zZXRQYWdlQnV0dG9ucygpO1xuXHRcdFx0XG5cdFx0XHRmb3IobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKXtcblx0XHRcdFx0bGV0IHJvdyA9IGRhdGFbaV07XG5cblx0XHRcdFx0aWYocm93KXtcblx0XHRcdFx0XHRvdXRwdXQucHVzaChyb3cpO1xuXG5cdFx0XHRcdFx0aWYocm93LnR5cGUgPT09IFwicm93XCIpe1xuXHRcdFx0XHRcdFx0aWYoIWFjdHVhbFN0YXJ0Um93KXtcblx0XHRcdFx0XHRcdFx0YWN0dWFsU3RhcnRSb3cgPSByb3c7XG5cdFx0XHRcdFx0XHR9XHRcblxuXHRcdFx0XHRcdFx0YWN0dWFsUm93UGFnZVNpemUrKztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5fc2V0UGFnZUNvdW50ZXIoYWN0dWFsUm93cy5sZW5ndGgsIGFjdHVhbFJvd1BhZ2VTaXplLCBhY3R1YWxTdGFydFJvdyA/IChhY3R1YWxSb3dzLmluZGV4T2YoYWN0dWFsU3RhcnRSb3cpICsgMSkgOiAwKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLl9zZXRQYWdlQnV0dG9ucygpO1xuXHRcdFx0dGhpcy5fc2V0UGFnZUNvdW50ZXIoYWN0dWFsUm93cy5sZW5ndGgpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZGF0YS5zbGljZSgwKTtcblx0XHR9XG5cdH1cblx0XG5cdHRyaWdnZXIoKXtcblx0XHR2YXIgbGVmdDtcblx0XHRcblx0XHRzd2l0Y2godGhpcy5tb2RlKXtcblx0XHRcdGNhc2UgXCJsb2NhbFwiOlxuXHRcdFx0XHRsZWZ0ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbExlZnQ7XG5cdFx0XHRcblx0XHRcdFx0dGhpcy5yZWZyZXNoRGF0YSgpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJwYWdlTG9hZGVkXCIsIHRoaXMuZ2V0UGFnZSgpKTtcblx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJyZW1vdGVcIjpcblx0XHRcdFx0dGhpcy5kYXRhQ2hhbmdpbmcgPSB0cnVlO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5yZWxvYWREYXRhKG51bGwpXG5cdFx0XHRcdFx0LmZpbmFsbHkoKCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5kYXRhQ2hhbmdpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcInByb2dyZXNzaXZlX2xvYWRcIjpcblx0XHRcdGNhc2UgXCJwcm9ncmVzc2l2ZV9zY3JvbGxcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMucmVsb2FkRGF0YShudWxsLCB0cnVlKTtcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGFnaW5hdGlvbiBFcnJvciAtIG5vIHN1Y2ggcGFnaW5hdGlvbiBtb2RlOlwiLCB0aGlzLm1vZGUpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdF9wYXJzZVJlbW90ZURhdGEoZGF0YSl7XG5cdFx0dmFyIG1hcmdpbiwgcGFnaW5hdGlvbk91dE9mUmFuZ2U7XG5cdFx0XG5cdFx0aWYodHlwZW9mIGRhdGEubGFzdF9wYWdlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGNvbnNvbGUud2FybihcIlJlbW90ZSBQYWdpbmF0aW9uIEVycm9yIC0gU2VydmVyIHJlc3BvbnNlIG1pc3NpbmcgJ1wiICsgKHRoaXMub3B0aW9ucyhcImRhdGFSZWNlaXZlUGFyYW1zXCIpLmxhc3RfcGFnZSB8fCBcImxhc3RfcGFnZVwiKSArIFwiJyBwcm9wZXJ0eVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGF0YS5kYXRhKXtcblx0XHRcdHRoaXMubWF4ID0gcGFyc2VJbnQoZGF0YS5sYXN0X3BhZ2UpIHx8IDE7XG5cblx0XHRcdHRoaXMucmVtb3RlUm93Q291bnRFc3RpbWF0ZSA9IHR5cGVvZiBkYXRhLmxhc3Rfcm93ICE9PSBcInVuZGVmaW5lZFwiID8gZGF0YS5sYXN0X3JvdyA6IChkYXRhLmxhc3RfcGFnZSAqIHRoaXMuc2l6ZSAtICh0aGlzLnBhZ2UgPT0gZGF0YS5sYXN0X3BhZ2UgPyAodGhpcy5zaXplIC0gZGF0YS5kYXRhLmxlbmd0aCkgOiAwKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucHJvZ3Jlc3NpdmVMb2FkKXtcblx0XHRcdFx0c3dpdGNoKHRoaXMubW9kZSl7XG5cdFx0XHRcdFx0Y2FzZSBcInByb2dyZXNzaXZlX2xvYWRcIjpcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRoaXMucGFnZSA9PSAxKXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNldERhdGEoZGF0YS5kYXRhLCBmYWxzZSwgdGhpcy5wYWdlID09IDEpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93cyhkYXRhLmRhdGEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy5wYWdlIDwgdGhpcy5tYXgpe1xuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLm5leHRQYWdlKCk7XG5cdFx0XHRcdFx0XHRcdH0sIHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWREZWxheSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwicHJvZ3Jlc3NpdmVfc2Nyb2xsXCI6XG5cdFx0XHRcdFx0XHRkYXRhID0gdGhpcy5wYWdlID09PSAxID8gZGF0YS5kYXRhIDogdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERhdGEoKS5jb25jYXQoZGF0YS5kYXRhKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zZXREYXRhKGRhdGEsIHRoaXMucGFnZSAhPT0gMSwgdGhpcy5wYWdlID09IDEpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0bWFyZ2luID0gdGhpcy50YWJsZS5vcHRpb25zLnByb2dyZXNzaXZlTG9hZFNjcm9sbE1hcmdpbiB8fCAodGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50SGVpZ2h0ICogMik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxIZWlnaHQgPD0gKHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodCArIG1hcmdpbikpe1xuXHRcdFx0XHRcdFx0XHRpZih0aGlzLnBhZ2UgPCB0aGlzLm1heCl7XG5cdFx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLm5leHRQYWdlKCk7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9ZWxzZSB7XG5cblx0XHRcdFx0aWYodGhpcy5wYWdlID4gdGhpcy5tYXgpe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggXCJSZW1vdGUgUGFnaW5hdGlvbiBFcnJvciAtIFNlcnZlciByZXR1cm5lZCBsYXN0IHBhZ2UgdmFsdWUgbG93ZXIgdGhhbiB0aGUgY3VycmVudCBwYWdlXCIgKTtcblxuXHRcdFx0XHRcdHBhZ2luYXRpb25PdXRPZlJhbmdlID0gdGhpcy5vcHRpb25zKCdwYWdpbmF0aW9uT3V0T2ZSYW5nZScpO1xuXG5cdFx0XHRcdFx0aWYocGFnaW5hdGlvbk91dE9mUmFuZ2Upe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UGFnZSh0eXBlb2YgcGFnaW5hdGlvbk91dE9mUmFuZ2UgPT09ICdmdW5jdGlvbicgPyBwYWdpbmF0aW9uT3V0T2ZSYW5nZS5jYWxsKHRoaXMsIHRoaXMucGFnZSwgdGhpcy5tYXgpIDpcdHBhZ2luYXRpb25PdXRPZlJhbmdlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBsZWZ0ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbExlZnQ7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBhZ2VMb2FkZWRcIiwgIHRoaXMuZ2V0UGFnZSgpKTtcblx0XHRcdFx0Ly8gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcdC8vIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiUmVtb3RlIFBhZ2luYXRpb24gRXJyb3IgLSBTZXJ2ZXIgcmVzcG9uc2UgbWlzc2luZyAnXCIgKyAodGhpcy5vcHRpb25zKFwiZGF0YVJlY2VpdmVQYXJhbXNcIikuZGF0YSB8fCBcImRhdGFcIikgKyBcIicgcHJvcGVydHlcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBkYXRhLmRhdGE7XG5cdH1cblx0XG5cdC8vaGFuZGxlIHRoZSBmb290ZXIgZWxlbWVudCBiZWluZyByZWRyYXduXG5cdGZvb3RlclJlZHJhdygpe1xuXHRcdHZhciBmb290ZXIgPSB0aGlzLnRhYmxlLmZvb3Rlck1hbmFnZXIuY29udGFpbmVyRWxlbWVudDtcblxuXHRcdGlmKChNYXRoLmNlaWwoZm9vdGVyLmNsaWVudFdpZHRoKSAtIGZvb3Rlci5zY3JvbGxXaWR0aCkgPCAwKXtcblx0XHRcdHRoaXMucGFnZXNFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5wYWdlc0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuXHRcdFx0XG5cdFx0XHRpZigoTWF0aC5jZWlsKGZvb3Rlci5jbGllbnRXaWR0aCkgLSBmb290ZXIuc2Nyb2xsV2lkdGgpIDwgMCl7XG5cdFx0XHRcdHRoaXMucGFnZXNFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8vIHJlYWQgcGVyc2lzdGFuY2UgaW5mb3JtYXRpb24gZnJvbSBzdG9yYWdlXG52YXIgZGVmYXVsdFJlYWRlcnMgPSB7XG5cdGxvY2FsOmZ1bmN0aW9uKGlkLCB0eXBlKXtcblx0XHR2YXIgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGlkICsgXCItXCIgKyB0eXBlKTtcblxuXHRcdHJldHVybiBkYXRhID8gSlNPTi5wYXJzZShkYXRhKSA6IGZhbHNlO1xuXHR9LFxuXHRjb29raWU6ZnVuY3Rpb24oaWQsIHR5cGUpe1xuXHRcdHZhciBjb29raWUgPSBkb2N1bWVudC5jb29raWUsXG5cdFx0a2V5ID0gaWQgKyBcIi1cIiArIHR5cGUsXG5cdFx0Y29va2llUG9zID0gY29va2llLmluZGV4T2Yoa2V5ICsgXCI9XCIpLFxuXHRcdGVuZCwgZGF0YTtcblxuXHRcdC8vaWYgY29va2llIGV4aXN0cywgZGVjb2RlIGFuZCBsb2FkIGNvbHVtbiBkYXRhIGludG8gdGFidWxhdG9yXG5cdFx0aWYoY29va2llUG9zID4gLTEpe1xuXHRcdFx0Y29va2llID0gY29va2llLnNsaWNlKGNvb2tpZVBvcyk7XG5cblx0XHRcdGVuZCA9IGNvb2tpZS5pbmRleE9mKFwiO1wiKTtcblxuXHRcdFx0aWYoZW5kID4gLTEpe1xuXHRcdFx0XHRjb29raWUgPSBjb29raWUuc2xpY2UoMCwgZW5kKTtcblx0XHRcdH1cblxuXHRcdFx0ZGF0YSA9IGNvb2tpZS5yZXBsYWNlKGtleSArIFwiPVwiLCBcIlwiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkgOiBmYWxzZTtcblx0fVxufTtcblxuLy93cml0ZSBwZXJzaXN0ZW5jZSBpbmZvcm1hdGlvbiB0byBzdG9yYWdlXG52YXIgZGVmYXVsdFdyaXRlcnMgPSB7XG5cdGxvY2FsOmZ1bmN0aW9uKGlkLCB0eXBlLCBkYXRhKXtcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShpZCArIFwiLVwiICsgdHlwZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuXHR9LFxuXHRjb29raWU6ZnVuY3Rpb24oaWQsIHR5cGUsIGRhdGEpe1xuXHRcdHZhciBleHBpcmVEYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdGV4cGlyZURhdGUuc2V0RGF0ZShleHBpcmVEYXRlLmdldERhdGUoKSArIDEwMDAwKTtcblxuXHRcdGRvY3VtZW50LmNvb2tpZSA9IGlkICsgXCItXCIgKyB0eXBlICsgXCI9XCIgKyBKU09OLnN0cmluZ2lmeShkYXRhKSArIFwiOyBleHBpcmVzPVwiICsgZXhwaXJlRGF0ZS50b1VUQ1N0cmluZygpO1xuXHR9XG59O1xuXG5jbGFzcyBQZXJzaXN0ZW5jZSBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwicGVyc2lzdGVuY2VcIjtcblxuXHRzdGF0aWMgbW9kdWxlSW5pdE9yZGVyID0gLTEwO1xuXG5cdC8vbG9hZCBkZWZhdWx0c1xuXHRzdGF0aWMgcmVhZGVycyA9IGRlZmF1bHRSZWFkZXJzO1xuXHRzdGF0aWMgd3JpdGVycyA9IGRlZmF1bHRXcml0ZXJzO1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLm1vZGUgPSBcIlwiO1xuXHRcdHRoaXMuaWQgPSBcIlwiO1xuXHRcdC8vIHRoaXMucGVyc2lzdFByb3BzID0gW1wiZmllbGRcIiwgXCJ3aWR0aFwiLCBcInZpc2libGVcIl07XG5cdFx0dGhpcy5kZWZXYXRjaGVyQmxvY2sgPSBmYWxzZTtcblx0XHR0aGlzLmNvbmZpZyA9IHt9O1xuXHRcdHRoaXMucmVhZEZ1bmMgPSBmYWxzZTtcblx0XHR0aGlzLndyaXRlRnVuYyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGVyc2lzdGVuY2VcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBlcnNpc3RlbmNlSURcIiwgXCJcIik7IC8va2V5IGZvciBwZXJzaXN0ZW50IHN0b3JhZ2Vcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwZXJzaXN0ZW5jZU1vZGVcIiwgdHJ1ZSk7IC8vbW9kZSBmb3Igc3RvcmluZyBwZXJzaXN0ZW5jZSBpbmZvcm1hdGlvblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBlcnNpc3RlbmNlUmVhZGVyRnVuY1wiLCBmYWxzZSk7IC8vZnVuY3Rpb24gZm9yIGhhbmRsaW5nIHBlcnNpc3RlbmNlIGRhdGEgcmVhZGluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBlcnNpc3RlbmNlV3JpdGVyRnVuY1wiLCBmYWxzZSk7IC8vZnVuY3Rpb24gZm9yIGhhbmRsaW5nIHBlcnNpc3RlbmNlIGRhdGEgd3JpdGluZ1xuXHR9XG5cblx0Ly8gVGVzdCBmb3Igd2hldGhlciBsb2NhbFN0b3JhZ2UgaXMgYXZhaWxhYmxlIGZvciB1c2UuXG5cdGxvY2FsU3RvcmFnZVRlc3QoKSB7XG5cdFx0dmFyICB0ZXN0S2V5ID0gIFwiX3RhYnVsYXRvcl90ZXN0XCI7XG5cblx0XHR0cnkge1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCB0ZXN0S2V5LCB0ZXN0S2V5KTtcblx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSggdGVzdEtleSApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly9zZXR1cCBwYXJhbWV0ZXJzXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2Upe1xuXHRcdFx0Ly9kZXRlcm1pbmUgcGVyc2lzdGVudCBsYXlvdXQgc3RvcmFnZSB0eXBlXG5cdFx0XHR2YXIgbW9kZSA9IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZU1vZGUsXG5cdFx0XHRpZCA9IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZUlELFxuXHRcdFx0cmV0cmlldmVkRGF0YTtcblxuXHRcdFx0dGhpcy5tb2RlID0gbW9kZSAhPT0gdHJ1ZSA/ICBtb2RlIDogKHRoaXMubG9jYWxTdG9yYWdlVGVzdCgpID8gXCJsb2NhbFwiIDogXCJjb29raWVcIik7XG5cblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVJlYWRlckZ1bmMpe1xuXHRcdFx0XHRpZih0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuYyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHR0aGlzLnJlYWRGdW5jID0gdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuYztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKFBlcnNpc3RlbmNlLnJlYWRlcnNbdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuY10pe1xuXHRcdFx0XHRcdFx0dGhpcy5yZWFkRnVuYyA9IFBlcnNpc3RlbmNlLnJlYWRlcnNbdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuY107XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGVyc2lzdGVuY2UgUmVhZCBFcnJvciAtIGludmFsaWQgcmVhZGVyIHNldFwiLCB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VSZWFkZXJGdW5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoUGVyc2lzdGVuY2UucmVhZGVyc1t0aGlzLm1vZGVdKXtcblx0XHRcdFx0XHR0aGlzLnJlYWRGdW5jID0gUGVyc2lzdGVuY2UucmVhZGVyc1t0aGlzLm1vZGVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGVyc2lzdGVuY2UgUmVhZCBFcnJvciAtIGludmFsaWQgcmVhZGVyIHNldFwiLCB0aGlzLm1vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmMpe1xuXHRcdFx0XHRpZih0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlV3JpdGVyRnVuYyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHR0aGlzLndyaXRlRnVuYyA9IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmM7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpZihQZXJzaXN0ZW5jZS53cml0ZXJzW3RoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmNdKXtcblx0XHRcdFx0XHRcdHRoaXMud3JpdGVGdW5jID0gUGVyc2lzdGVuY2Uud3JpdGVyc1t0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VXcml0ZXJGdW5jXTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJQZXJzaXN0ZW5jZSBXcml0ZSBFcnJvciAtIGludmFsaWQgcmVhZGVyIHNldFwiLCB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VXcml0ZXJGdW5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoUGVyc2lzdGVuY2Uud3JpdGVyc1t0aGlzLm1vZGVdKXtcblx0XHRcdFx0XHR0aGlzLndyaXRlRnVuYyA9IFBlcnNpc3RlbmNlLndyaXRlcnNbdGhpcy5tb2RlXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlBlcnNpc3RlbmNlIFdyaXRlIEVycm9yIC0gaW52YWxpZCB3cml0ZXIgc2V0XCIsIHRoaXMubW9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9zZXQgc3RvcmFnZSB0YWdcblx0XHRcdHRoaXMuaWQgPSBcInRhYnVsYXRvci1cIiArIChpZCB8fCAodGhpcy50YWJsZS5lbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpIHx8IFwiXCIpKTtcblxuXHRcdFx0dGhpcy5jb25maWcgPSB7XG5cdFx0XHRcdHNvcnQ6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlIHx8IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZS5zb3J0LFxuXHRcdFx0XHRmaWx0ZXI6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlIHx8IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZS5maWx0ZXIsXG5cdFx0XHRcdGhlYWRlckZpbHRlcjp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlLmhlYWRlckZpbHRlcixcblx0XHRcdFx0Z3JvdXA6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlIHx8IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZS5ncm91cCxcblx0XHRcdFx0cGFnZTp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlLnBhZ2UsXG5cdFx0XHRcdGNvbHVtbnM6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlID8gW1widGl0bGVcIiwgXCJ3aWR0aFwiLCBcInZpc2libGVcIl0gOiB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UuY29sdW1ucyxcblx0XHRcdH07XG5cblx0XHRcdC8vbG9hZCBwYWdpbmF0aW9uIGRhdGEgaWYgbmVlZGVkXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5wYWdlKXtcblx0XHRcdFx0cmV0cmlldmVkRGF0YSA9IHRoaXMucmV0cmlldmVEYXRhKFwicGFnZVwiKTtcblxuXHRcdFx0XHRpZihyZXRyaWV2ZWREYXRhKXtcblx0XHRcdFx0XHRpZih0eXBlb2YgcmV0cmlldmVkRGF0YS5wYWdpbmF0aW9uU2l6ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodGhpcy5jb25maWcucGFnZSA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5wYWdlLnNpemUpKXtcblx0XHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uU2l6ZSA9IHJldHJpZXZlZERhdGEucGFnaW5hdGlvblNpemU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYodHlwZW9mIHJldHJpZXZlZERhdGEucGFnaW5hdGlvbkluaXRpYWxQYWdlICE9PSBcInVuZGVmaW5lZFwiICYmICh0aGlzLmNvbmZpZy5wYWdlID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLnBhZ2UucGFnZSkpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Jbml0aWFsUGFnZSA9IHJldHJpZXZlZERhdGEucGFnaW5hdGlvbkluaXRpYWxQYWdlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL2xvYWQgZ3JvdXAgZGF0YSBpZiBuZWVkZWRcblx0XHRcdGlmKHRoaXMuY29uZmlnLmdyb3VwKXtcblx0XHRcdFx0cmV0cmlldmVkRGF0YSA9IHRoaXMucmV0cmlldmVEYXRhKFwiZ3JvdXBcIik7XG5cblx0XHRcdFx0aWYocmV0cmlldmVkRGF0YSl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIHJldHJpZXZlZERhdGEuZ3JvdXBCeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodGhpcy5jb25maWcuZ3JvdXAgPT09IHRydWUgfHwgdGhpcy5jb25maWcuZ3JvdXAuZ3JvdXBCeSkpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgPSByZXRyaWV2ZWREYXRhLmdyb3VwQnk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHR5cGVvZiByZXRyaWV2ZWREYXRhLmdyb3VwU3RhcnRPcGVuICE9PSBcInVuZGVmaW5lZFwiICYmICh0aGlzLmNvbmZpZy5ncm91cCA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5ncm91cC5ncm91cFN0YXJ0T3Blbikpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmdyb3VwU3RhcnRPcGVuID0gcmV0cmlldmVkRGF0YS5ncm91cFN0YXJ0T3Blbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodHlwZW9mIHJldHJpZXZlZERhdGEuZ3JvdXBIZWFkZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgKHRoaXMuY29uZmlnLmdyb3VwID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmdyb3VwLmdyb3VwSGVhZGVyKSl7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBIZWFkZXIgPSByZXRyaWV2ZWREYXRhLmdyb3VwSGVhZGVyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5jb2x1bW5zKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSB0aGlzLmxvYWQoXCJjb2x1bW5zXCIsIHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXNob3dcIiwgdGhpcy5zYXZlLmJpbmQodGhpcywgXCJjb2x1bW5zXCIpKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taGlkZVwiLCB0aGlzLnNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3ZlZFwiLCB0aGlzLnNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWJ1aWx0XCIsIHRoaXMudGFibGVCdWlsdC5iaW5kKHRoaXMpLCAwKTtcblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdcIiwgdGhpcy50YWJsZVJlZHJhdy5iaW5kKHRoaXMpKTtcblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJmaWx0ZXItY2hhbmdlZFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwiZmlsdGVyXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZmlsdGVyLWNoYW5nZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImhlYWRlckZpbHRlclwiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInNvcnQtY2hhbmdlZFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwic29ydFwiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImdyb3VwLWNoYW5nZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImdyb3VwXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicGFnZS1jaGFuZ2VkXCIsIHRoaXMuZXZlbnRTYXZlLmJpbmQodGhpcywgXCJwYWdlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXJlc2l6ZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4td2lkdGhcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJsYXlvdXQtcmVmcmVzaGVkXCIsIHRoaXMuZXZlbnRTYXZlLmJpbmQodGhpcywgXCJjb2x1bW5zXCIpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldENvbHVtbkxheW91dFwiLCB0aGlzLmdldENvbHVtbkxheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldENvbHVtbkxheW91dFwiLCB0aGlzLnNldENvbHVtbkxheW91dC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGV2ZW50U2F2ZSh0eXBlKXtcblx0XHRpZih0aGlzLmNvbmZpZ1t0eXBlXSl7XG5cdFx0XHR0aGlzLnNhdmUodHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0dGFibGVCdWlsdCgpe1xuXHRcdHZhciBzb3J0ZXJzLCBmaWx0ZXJzLCBoZWFkZXJGaWx0ZXJzO1xuXG5cdFx0aWYodGhpcy5jb25maWcuc29ydCl7XG5cdFx0XHRzb3J0ZXJzID0gdGhpcy5sb2FkKFwic29ydFwiKTtcblxuXHRcdFx0aWYoIXNvcnRlcnMgPT09IGZhbHNlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxTb3J0ID0gc29ydGVycztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZih0aGlzLmNvbmZpZy5maWx0ZXIpe1xuXHRcdFx0ZmlsdGVycyA9IHRoaXMubG9hZChcImZpbHRlclwiKTtcblxuXHRcdFx0aWYoIWZpbHRlcnMgPT09IGZhbHNlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxGaWx0ZXIgPSBmaWx0ZXJzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZih0aGlzLmNvbmZpZy5oZWFkZXJGaWx0ZXIpe1xuXHRcdFx0aGVhZGVyRmlsdGVycyA9IHRoaXMubG9hZChcImhlYWRlckZpbHRlclwiKTtcblxuXHRcdFx0aWYoIWhlYWRlckZpbHRlcnMgPT09IGZhbHNlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxIZWFkZXJGaWx0ZXIgPSBoZWFkZXJGaWx0ZXJzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0fVxuXG5cdHRhYmxlUmVkcmF3KGZvcmNlKXtcblx0XHRpZihmb3JjZSAmJiB0aGlzLmNvbmZpZy5jb2x1bW5zKXtcblx0XHRcdHRoaXMuc2F2ZShcImNvbHVtbnNcIik7XG5cdFx0fVxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRnZXRDb2x1bW5MYXlvdXQoKXtcblx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbHVtbnModGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbHVtbnMoKSk7XG5cdH1cblxuXHRzZXRDb2x1bW5MYXlvdXQobGF5b3V0KXtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuc2V0Q29sdW1ucyh0aGlzLm1lcmdlRGVmaW5pdGlvbih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1ucywgbGF5b3V0LCB0cnVlKSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgZGVmLCBrZXlzO1xuXG5cdFx0aWYodGhpcy5jb25maWcuY29sdW1ucyl7XG5cdFx0XHR0aGlzLmRlZldhdGNoZXJCbG9jayA9IHRydWU7XG5cblx0XHRcdGRlZiA9IGNvbHVtbi5nZXREZWZpbml0aW9uKCk7XG5cblx0XHRcdGtleXMgPSB0aGlzLmNvbmZpZy5jb2x1bW5zID09PSB0cnVlID8gT2JqZWN0LmtleXMoZGVmKSA6IHRoaXMuY29uZmlnLmNvbHVtbnM7XG5cblx0XHRcdGtleXMuZm9yRWFjaCgoa2V5KT0+e1xuXHRcdFx0XHR2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlZiwga2V5KTtcblx0XHRcdFx0dmFyIHZhbHVlID0gZGVmW2tleV07XG5cblx0XHRcdFx0aWYocHJvcHMpe1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWYsIGtleSwge1xuXHRcdFx0XHRcdFx0c2V0OiAobmV3VmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBuZXdWYWx1ZTtcblxuXHRcdFx0XHRcdFx0XHRpZighdGhpcy5kZWZXYXRjaGVyQmxvY2spe1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2F2ZShcImNvbHVtbnNcIik7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZihwcm9wcy5zZXQpe1xuXHRcdFx0XHRcdFx0XHRcdHByb3BzLnNldChuZXdWYWx1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXQ6KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZihwcm9wcy5nZXQpe1xuXHRcdFx0XHRcdFx0XHRcdHByb3BzLmdldCgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZGVmV2F0Y2hlckJsb2NrID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly9sb2FkIHNhdmVkIGRlZmluaXRpb25zXG5cdGxvYWQodHlwZSwgY3VycmVudCl7XG5cdFx0dmFyIGRhdGEgPSB0aGlzLnJldHJpZXZlRGF0YSh0eXBlKTtcblxuXHRcdGlmKGN1cnJlbnQpe1xuXHRcdFx0ZGF0YSA9IGRhdGEgPyB0aGlzLm1lcmdlRGVmaW5pdGlvbihjdXJyZW50LCBkYXRhKSA6IGN1cnJlbnQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHQvL3JldHJpZXZlIGRhdGEgZnJvbSBtZW1vcnlcblx0cmV0cmlldmVEYXRhKHR5cGUpe1xuXHRcdHJldHVybiB0aGlzLnJlYWRGdW5jID8gdGhpcy5yZWFkRnVuYyh0aGlzLmlkLCB0eXBlKSA6IGZhbHNlO1xuXHR9XG5cblx0Ly9tZXJnZSBvbGQgYW5kIG5ldyBjb2x1bW4gZGVmaW5pdGlvbnNcblx0bWVyZ2VEZWZpbml0aW9uKG9sZENvbHMsIG5ld0NvbHMsIG1lcmdlQWxsTmV3KXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRuZXdDb2xzID0gbmV3Q29scyB8fCBbXTtcblxuXHRcdG5ld0NvbHMuZm9yRWFjaCgoY29sdW1uLCB0bykgPT4ge1xuXHRcdFx0dmFyIGZyb20gPSB0aGlzLl9maW5kQ29sdW1uKG9sZENvbHMsIGNvbHVtbiksXG5cdFx0XHRrZXlzO1xuXG5cdFx0XHRpZihmcm9tKXtcblx0XHRcdFx0aWYobWVyZ2VBbGxOZXcpe1xuXHRcdFx0XHRcdGtleXMgPSBPYmplY3Qua2V5cyhjb2x1bW4pO1xuXHRcdFx0XHR9ZWxzZSBpZih0aGlzLmNvbmZpZy5jb2x1bW5zID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmNvbHVtbnMgPT0gdW5kZWZpbmVkKXtcblx0XHRcdFx0XHRrZXlzID0gIE9iamVjdC5rZXlzKGZyb20pO1xuXHRcdFx0XHRcdGtleXMucHVzaChcIndpZHRoXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0a2V5cyA9IHRoaXMuY29uZmlnLmNvbHVtbnM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXlzLmZvckVhY2goKGtleSk9Pntcblx0XHRcdFx0XHRpZihrZXkgIT09IFwiY29sdW1uc1wiICYmIHR5cGVvZiBjb2x1bW5ba2V5XSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRmcm9tW2tleV0gPSBjb2x1bW5ba2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKGZyb20uY29sdW1ucyl7XG5cdFx0XHRcdFx0ZnJvbS5jb2x1bW5zID0gdGhpcy5tZXJnZURlZmluaXRpb24oZnJvbS5jb2x1bW5zLCBjb2x1bW4uY29sdW1ucyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvdXRwdXQucHVzaChmcm9tKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG9sZENvbHMuZm9yRWFjaCgoY29sdW1uLCBpKSA9PiB7XG5cdFx0XHR2YXIgZnJvbSA9IHRoaXMuX2ZpbmRDb2x1bW4obmV3Q29scywgY29sdW1uKTtcblxuXHRcdFx0aWYgKCFmcm9tKSB7XG5cdFx0XHRcdGlmKG91dHB1dC5sZW5ndGg+aSl7XG5cdFx0XHRcdFx0b3V0cHV0LnNwbGljZShpLCAwLCBjb2x1bW4pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goY29sdW1uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vZmluZCBtYXRjaGluZyBjb2x1bW5zXG5cdF9maW5kQ29sdW1uKGNvbHVtbnMsIHN1YmplY3Qpe1xuXHRcdHZhciB0eXBlID0gc3ViamVjdC5jb2x1bW5zID8gXCJncm91cFwiIDogKHN1YmplY3QuZmllbGQgPyBcImZpZWxkXCIgOiBcIm9iamVjdFwiKTtcblxuXHRcdHJldHVybiBjb2x1bW5zLmZpbmQoZnVuY3Rpb24oY29sKXtcblx0XHRcdHN3aXRjaCh0eXBlKXtcblx0XHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdFx0cmV0dXJuIGNvbC50aXRsZSA9PT0gc3ViamVjdC50aXRsZSAmJiBjb2wuY29sdW1ucy5sZW5ndGggPT09IHN1YmplY3QuY29sdW1ucy5sZW5ndGg7XG5cblx0XHRcdFx0Y2FzZSBcImZpZWxkXCI6XG5cdFx0XHRcdFx0cmV0dXJuIGNvbC5maWVsZCA9PT0gc3ViamVjdC5maWVsZDtcblxuXHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0cmV0dXJuIGNvbCA9PT0gc3ViamVjdDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vc2F2ZSBkYXRhXG5cdHNhdmUodHlwZSl7XG5cdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdHN3aXRjaCh0eXBlKXtcblx0XHRcdGNhc2UgXCJjb2x1bW5zXCI6XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnBhcnNlQ29sdW1ucyh0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1ucygpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmaWx0ZXJcIjpcblx0XHRcdFx0ZGF0YSA9IHRoaXMudGFibGUubW9kdWxlcy5maWx0ZXIuZ2V0RmlsdGVycygpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImhlYWRlckZpbHRlclwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy50YWJsZS5tb2R1bGVzLmZpbHRlci5nZXRIZWFkZXJGaWx0ZXJzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwic29ydFwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy52YWxpZGF0ZVNvcnRlcnModGhpcy50YWJsZS5tb2R1bGVzLnNvcnQuZ2V0U29ydCgpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJncm91cFwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy5nZXRHcm91cENvbmZpZygpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInBhZ2VcIjpcblx0XHRcdFx0ZGF0YSA9IHRoaXMuZ2V0UGFnZUNvbmZpZygpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRpZih0aGlzLndyaXRlRnVuYyl7XG5cdFx0XHR0aGlzLndyaXRlRnVuYyh0aGlzLmlkLCB0eXBlLCBkYXRhKTtcblx0XHR9XG5cblx0fVxuXG5cdC8vZW5zdXJlIHNvcnRlcnMgY29udGFpbiBubyBmdW5jdGlvbiBkYXRhXG5cdHZhbGlkYXRlU29ydGVycyhkYXRhKXtcblx0XHRkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRpdGVtLmNvbHVtbiA9IGl0ZW0uZmllbGQ7XG5cdFx0XHRkZWxldGUgaXRlbS5maWVsZDtcblx0XHR9KTtcblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0Z2V0R3JvdXBDb25maWcoKXtcblx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0aWYodGhpcy5jb25maWcuZ3JvdXApe1xuXHRcdFx0aWYodGhpcy5jb25maWcuZ3JvdXAgPT09IHRydWUgfHwgdGhpcy5jb25maWcuZ3JvdXAuZ3JvdXBCeSl7XG5cdFx0XHRcdGRhdGEuZ3JvdXBCeSA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5O1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5ncm91cCA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5ncm91cC5ncm91cFN0YXJ0T3Blbil7XG5cdFx0XHRcdGRhdGEuZ3JvdXBTdGFydE9wZW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBTdGFydE9wZW47XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMuY29uZmlnLmdyb3VwID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmdyb3VwLmdyb3VwSGVhZGVyKXtcblx0XHRcdFx0ZGF0YS5ncm91cEhlYWRlciA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cEhlYWRlcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdGdldFBhZ2VDb25maWcoKXtcblx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0aWYodGhpcy5jb25maWcucGFnZSl7XG5cdFx0XHRpZih0aGlzLmNvbmZpZy5wYWdlID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLnBhZ2Uuc2l6ZSl7XG5cdFx0XHRcdGRhdGEucGFnaW5hdGlvblNpemUgPSB0aGlzLnRhYmxlLm1vZHVsZXMucGFnZS5nZXRQYWdlU2l6ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5wYWdlID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLnBhZ2UucGFnZSl7XG5cdFx0XHRcdGRhdGEucGFnaW5hdGlvbkluaXRpYWxQYWdlID0gdGhpcy50YWJsZS5tb2R1bGVzLnBhZ2UuZ2V0UGFnZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblxuXHQvL3BhcnNlIGNvbHVtbnMgZm9yIGRhdGEgdG8gc3RvcmVcblx0cGFyc2VDb2x1bW5zKGNvbHVtbnMpe1xuXHRcdHZhciBkZWZpbml0aW9ucyA9IFtdLFxuXHRcdGV4Y2x1ZGVkS2V5cyA9IFtcImhlYWRlckNvbnRleHRNZW51XCIsIFwiaGVhZGVyTWVudVwiLCBcImNvbnRleHRNZW51XCIsIFwiY2xpY2tNZW51XCJdO1xuXG5cdFx0Y29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHZhciBkZWZTdG9yZSA9IHt9LFxuXHRcdFx0Y29sRGVmID0gY29sdW1uLmdldERlZmluaXRpb24oKSxcblx0XHRcdGtleXM7XG5cblx0XHRcdGlmKGNvbHVtbi5pc0dyb3VwKXtcblx0XHRcdFx0ZGVmU3RvcmUudGl0bGUgPSBjb2xEZWYudGl0bGU7XG5cdFx0XHRcdGRlZlN0b3JlLmNvbHVtbnMgPSB0aGlzLnBhcnNlQ29sdW1ucyhjb2x1bW4uZ2V0Q29sdW1ucygpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0ZGVmU3RvcmUuZmllbGQgPSBjb2x1bW4uZ2V0RmllbGQoKTtcblxuXHRcdFx0XHRpZih0aGlzLmNvbmZpZy5jb2x1bW5zID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmNvbHVtbnMgPT0gdW5kZWZpbmVkKXtcblx0XHRcdFx0XHRrZXlzID0gIE9iamVjdC5rZXlzKGNvbERlZik7XG5cdFx0XHRcdFx0a2V5cy5wdXNoKFwid2lkdGhcIik7XG5cdFx0XHRcdFx0a2V5cy5wdXNoKFwidmlzaWJsZVwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGtleXMgPSB0aGlzLmNvbmZpZy5jb2x1bW5zO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0a2V5cy5mb3JFYWNoKChrZXkpPT57XG5cdFx0XHRcdFx0c3dpdGNoKGtleSl7XG5cdFx0XHRcdFx0XHRjYXNlIFwid2lkdGhcIjpcblx0XHRcdFx0XHRcdFx0ZGVmU3RvcmUud2lkdGggPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwidmlzaWJsZVwiOlxuXHRcdFx0XHRcdFx0XHRkZWZTdG9yZS52aXNpYmxlID0gY29sdW1uLnZpc2libGU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRpZih0eXBlb2YgY29sRGVmW2tleV0gIT09IFwiZnVuY3Rpb25cIiAmJiBleGNsdWRlZEtleXMuaW5kZXhPZihrZXkpID09PSAtMSl7XG5cdFx0XHRcdFx0XHRcdFx0ZGVmU3RvcmVba2V5XSA9IGNvbERlZltrZXldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmaW5pdGlvbnMucHVzaChkZWZTdG9yZSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZGVmaW5pdGlvbnM7XG5cdH1cbn1cblxuY2xhc3MgUG9wdXAgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwicG9wdXBcIjtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycyA9IHt9O1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJvd0NvbnRleHRQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93Q2xpY2tQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93RGJsQ2xpY2tQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBDb250ZXh0UG9wdXBcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwQ2xpY2tQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBEYmxDbGlja1BvcHVwXCIsIGZhbHNlKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyQ29udGV4dFBvcHVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJDbGlja1BvcHVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJEYmxDbGlja1BvcHVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJQb3B1cFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyUG9wdXBJY29uXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjb250ZXh0UG9wdXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNsaWNrUG9wdXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImRibENsaWNrUG9wdXBcIik7XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwicG9wdXBcIiwgdGhpcy5fY29tcG9uZW50UG9wdXBDYWxsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcInBvcHVwXCIsIHRoaXMuX2NvbXBvbmVudFBvcHVwQ2FsbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJwb3B1cFwiLCB0aGlzLl9jb21wb25lbnRQb3B1cENhbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiZ3JvdXBcIiwgXCJwb3B1cFwiLCB0aGlzLl9jb21wb25lbnRQb3B1cENhbGwuYmluZCh0aGlzKSk7XG5cdFx0XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVSb3dXYXRjaGVycygpO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZUdyb3VwV2F0Y2hlcnMoKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdF9jb21wb25lbnRQb3B1cENhbGwoY29tcG9uZW50LCBjb250ZW50cywgcG9zaXRpb24pe1xuXHRcdHRoaXMubG9hZFBvcHVwRXZlbnQoY29udGVudHMsIG51bGwsIGNvbXBvbmVudCwgcG9zaXRpb24pO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplUm93V2F0Y2hlcnMoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dFBvcHVwKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWNvbnRleHRtZW51XCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dFBvcHVwKSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwicm93VGFwSG9sZFwiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0NvbnRleHRQb3B1cCkpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93Q2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1jbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0NsaWNrUG9wdXApKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93RGJsQ2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYmxjbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0RibENsaWNrUG9wdXApKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVHcm91cFdhdGNoZXJzKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dFBvcHVwKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZ3JvdXAtY29udGV4dG1lbnVcIiwgdGhpcy5sb2FkUG9wdXBFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5ncm91cENvbnRleHRQb3B1cCkpO1xuXHRcdFx0dGhpcy50YWJsZS5vbihcImdyb3VwVGFwSG9sZFwiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dFBvcHVwKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cENsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1jbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ2xpY2tQb3B1cCkpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cERibENsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1kYmxjbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwRGJsQ2xpY2tQb3B1cCkpO1xuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgZGVmID0gY29sdW1uLmRlZmluaXRpb247XG5cdFx0XG5cdFx0Ly9oYW5kbGUgY29sdW1uIGV2ZW50c1xuXHRcdGlmKGRlZi5oZWFkZXJDb250ZXh0UG9wdXAgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ29udGV4dFBvcHVwKXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ29udGV4dFBvcHVwID0gdGhpcy5sb2FkUG9wdXBUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJDb250ZXh0UG9wdXBcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1jb250ZXh0bWVudVwiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNvbnRleHRQb3B1cCk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwiaGVhZGVyVGFwSG9sZFwiLCB0aGlzLmxvYWRQb3B1cFRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckNvbnRleHRQb3B1cFwiKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5oZWFkZXJDbGlja1BvcHVwICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDbGlja1BvcHVwID0gdGhpcy5sb2FkUG9wdXBUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJDbGlja1BvcHVwXCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDbGlja1BvcHVwKTtcblx0XHRcblx0XHRcblx0XHR9aWYoZGVmLmhlYWRlckRibENsaWNrUG9wdXAgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckRibENsaWNrUG9wdXAgPSB0aGlzLmxvYWRQb3B1cFRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckRibENsaWNrUG9wdXBcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1kYmxjbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckRibENsaWNrUG9wdXApO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuaGVhZGVyUG9wdXApe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uSGVhZGVyUG9wdXAoY29sdW1uKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9oYW5kbGUgY2VsbCBldmVudHNcblx0XHRpZihkZWYuY29udGV4dFBvcHVwICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNvbnRleHRQb3B1cCl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNvbnRleHRQb3B1cCA9IHRoaXMubG9hZFBvcHVwVGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImNvbnRleHRQb3B1cFwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1jb250ZXh0bWVudVwiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNvbnRleHRQb3B1cCk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwiY2VsbFRhcEhvbGRcIiwgdGhpcy5sb2FkUG9wdXBUYWJsZUNlbGxFdmVudC5iaW5kKHRoaXMsIFwiY29udGV4dFBvcHVwXCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmNsaWNrUG9wdXAgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNsaWNrUG9wdXAgPSB0aGlzLmxvYWRQb3B1cFRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJjbGlja1BvcHVwXCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWNsaWNrXCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY2xpY2tQb3B1cCk7XG5cdFx0fVxuXG5cdFx0aWYoZGVmLmRibENsaWNrUG9wdXAgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmRibENsaWNrUG9wdXAgPSB0aGlzLmxvYWRQb3B1cFRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJkYmxDbGlja1BvcHVwXCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWNsaWNrXCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tQb3B1cCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQ29sdW1uSGVhZGVyUG9wdXAoY29sdW1uKXtcblx0XHR2YXIgaWNvbiA9IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlclBvcHVwSWNvbixcblx0XHRoZWFkZXJQb3B1cEVsO1xuXHRcdFxuXHRcdGhlYWRlclBvcHVwRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHRoZWFkZXJQb3B1cEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvblwiKTtcblxuXHRcdGlmKGljb24pe1xuXHRcdFx0aWYodHlwZW9mIGljb24gPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGljb24gPSBpY29uKGNvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKGljb24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdGhlYWRlclBvcHVwRWwuYXBwZW5kQ2hpbGQoaWNvbik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGhlYWRlclBvcHVwRWwuaW5uZXJIVE1MID0gaWNvbjtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRoZWFkZXJQb3B1cEVsLmlubmVySFRNTCA9IFwiJnZlbGxpcDtcIjtcblx0XHR9XG5cdFx0XG5cdFx0aGVhZGVyUG9wdXBFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcblx0XHRcdHRoaXMubG9hZFBvcHVwRXZlbnQoY29sdW1uLmRlZmluaXRpb24uaGVhZGVyUG9wdXAsIGUsIGNvbHVtbik7XG5cdFx0fSk7XG5cdFx0XG5cdFx0Y29sdW1uLnRpdGxlRWxlbWVudC5pbnNlcnRCZWZvcmUoaGVhZGVyUG9wdXBFbCwgY29sdW1uLnRpdGxlRWxlbWVudC5maXJzdENoaWxkKTtcblx0fVxuXHRcblx0bG9hZFBvcHVwVGFibGVDZWxsRXZlbnQob3B0aW9uLCBlLCBjZWxsKXtcblx0XHRpZihjZWxsLl9jZWxsKXtcblx0XHRcdGNlbGwgPSBjZWxsLl9jZWxsO1xuXHRcdH1cblx0XHRcblx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0pe1xuXHRcdFx0dGhpcy5sb2FkUG9wdXBFdmVudChjZWxsLmNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0sIGUsIGNlbGwpO1xuXHRcdH1cblx0fVxuXHRcblx0bG9hZFBvcHVwVGFibGVDb2x1bW5FdmVudChvcHRpb24sIGUsIGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLl9jb2x1bW4pe1xuXHRcdFx0Y29sdW1uID0gY29sdW1uLl9jb2x1bW47XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0pe1xuXHRcdFx0dGhpcy5sb2FkUG9wdXBFdmVudChjb2x1bW4uZGVmaW5pdGlvbltvcHRpb25dLCBlLCBjb2x1bW4pO1xuXHRcdH1cblx0fVxuXHRcblx0bG9hZFBvcHVwRXZlbnQoY29udGVudHMsIGUsIGNvbXBvbmVudCwgcG9zaXRpb24pe1xuXHRcdHZhciByZW5kZXJlZENhbGxiYWNrO1xuXG5cdFx0ZnVuY3Rpb24gb25SZW5kZXJlZChjYWxsYmFjayl7XG5cdFx0XHRyZW5kZXJlZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbXBvbmVudC5fZ3JvdXApe1xuXHRcdFx0Y29tcG9uZW50ID0gY29tcG9uZW50Ll9ncm91cDtcblx0XHR9ZWxzZSBpZihjb21wb25lbnQuX3Jvdyl7XG5cdFx0XHRjb21wb25lbnQgPSBjb21wb25lbnQuX3Jvdztcblx0XHR9XG5cdFx0XG5cdFx0Y29udGVudHMgPSB0eXBlb2YgY29udGVudHMgPT0gXCJmdW5jdGlvblwiID8gY29udGVudHMuY2FsbCh0aGlzLnRhYmxlLCBlLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCksICBvblJlbmRlcmVkKSA6IGNvbnRlbnRzO1xuXHRcdFxuXHRcdHRoaXMubG9hZFBvcHVwKGUsIGNvbXBvbmVudCwgY29udGVudHMsIHJlbmRlcmVkQ2FsbGJhY2ssIHBvc2l0aW9uKTtcblx0fVxuXHRcblx0bG9hZFBvcHVwKGUsIGNvbXBvbmVudCwgY29udGVudHMsIHJlbmRlcmVkQ2FsbGJhY2ssIHBvc2l0aW9uKXtcblx0XHR2YXIgdG91Y2ggPSAhKGUgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSxcblx0XHRjb250ZW50c0VsLCBwb3B1cDtcblx0XHRcblx0XHRpZihjb250ZW50cyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdGNvbnRlbnRzRWwgPSBjb250ZW50cztcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb250ZW50c0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdGNvbnRlbnRzRWwuaW5uZXJIVE1MID0gY29udGVudHM7XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnRlbnRzRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wb3B1cFwiKTtcblxuXHRcdGNvbnRlbnRzRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9Pntcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fSk7XG5cblx0XHRpZighdG91Y2gpe1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0XHRcblx0XHRwb3B1cCA9IHRoaXMucG9wdXAoY29udGVudHNFbCk7XG5cblx0XHRpZih0eXBlb2YgcmVuZGVyZWRDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHBvcHVwLnJlbmRlckNhbGxiYWNrKHJlbmRlcmVkQ2FsbGJhY2spO1xuXHRcdH1cblxuXHRcdGlmKGUpe1xuXHRcdFx0cG9wdXAuc2hvdyhlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRwb3B1cC5zaG93KGNvbXBvbmVudC5nZXRFbGVtZW50KCksIHBvc2l0aW9uIHx8IFwiY2VudGVyXCIpO1xuXHRcdH1cblxuXHRcdFxuXHRcdHBvcHVwLmhpZGVPbkJsdXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicG9wdXBDbG9zZWRcIiwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBvcHVwT3BlbmVkXCIsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdH1cbn1cblxuY2xhc3MgUHJpbnQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcInByaW50XCI7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuZWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMubWFudWFsQmxvY2sgPSBmYWxzZTtcblx0XHR0aGlzLmJlZm9yZXByaW50RXZlbnRIYW5kbGVyID0gbnVsbDtcblx0XHR0aGlzLmFmdGVycHJpbnRFdmVudEhhbmRsZXIgPSBudWxsO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJpbnRBc0h0bWxcIiwgZmFsc2UpOyAvL2VuYWJsZSBwcmludCBhcyBodG1sXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJpbnRGb3JtYXR0ZXJcIiwgZmFsc2UpOyAvL3ByaW50aW5nIHBhZ2UgZm9ybWF0dGVyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJpbnRIZWFkZXJcIiwgZmFsc2UpOyAvL3BhZ2UgaGVhZGVyIGNvbnRlbnRzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJpbnRGb290ZXJcIiwgZmFsc2UpOyAvL3BhZ2UgZm9vdGVyIGNvbnRlbnRzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJpbnRTdHlsZWRcIiwgdHJ1ZSk7IC8vZW5hYmxlIHByaW50IGFzIGh0bWwgc3R5bGluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByaW50Um93UmFuZ2VcIiwgXCJ2aXNpYmxlXCIpOyAvL3Jlc3RyaWN0IHByaW50IHRvIHZpc2libGUgcm93cyBvbmx5XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJpbnRDb25maWdcIiwge30pOyAvL3ByaW50IGNvbmZpZyBvcHRpb25zXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwicHJpbnRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRpdGxlUHJpbnRcIik7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnByaW50QXNIdG1sKXtcblx0XHRcdHRoaXMuYmVmb3JlcHJpbnRFdmVudEhhbmRsZXIgPSB0aGlzLnJlcGxhY2VUYWJsZS5iaW5kKHRoaXMpO1xuXHRcdFx0dGhpcy5hZnRlcnByaW50RXZlbnRIYW5kbGVyID0gdGhpcy5jbGVhbnVwLmJpbmQodGhpcyk7XG5cblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlcHJpbnRcIiwgdGhpcy5iZWZvcmVwcmludEV2ZW50SGFuZGxlciApO1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJhZnRlcnByaW50XCIsIHRoaXMuYWZ0ZXJwcmludEV2ZW50SGFuZGxlcik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5kZXN0cm95LmJpbmQodGhpcykpO1xuXHRcdH1cblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwicHJpbnRcIiwgdGhpcy5wcmludEZ1bGxzY3JlZW4uYmluZCh0aGlzKSk7XG5cdH1cblxuXHRkZXN0cm95KCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnByaW50QXNIdG1sKXtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImJlZm9yZXByaW50XCIsIHRoaXMuYmVmb3JlcHJpbnRFdmVudEhhbmRsZXIgKTtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImFmdGVycHJpbnRcIiwgdGhpcy5hZnRlcnByaW50RXZlbnRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHJlcGxhY2VUYWJsZSgpe1xuXHRcdGlmKCF0aGlzLm1hbnVhbEJsb2NrKXtcblx0XHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZVwiKTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMudGFibGUubW9kdWxlcy5leHBvcnQuZ2VuZXJhdGVUYWJsZSh0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRDb25maWcsIHRoaXMudGFibGUub3B0aW9ucy5wcmludFN0eWxlZCwgdGhpcy50YWJsZS5vcHRpb25zLnByaW50Um93UmFuZ2UsIFwicHJpbnRcIikpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5lbGVtZW50LCB0aGlzLnRhYmxlLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuXG5cdGNsZWFudXAoKXtcblx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbi1oaWRlXCIpO1xuXG5cdFx0aWYodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0fVxuXHR9XG5cblx0cHJpbnRGdWxsc2NyZWVuKHZpc2libGUsIHN0eWxlLCBjb25maWcpe1xuXHRcdHZhciBzY3JvbGxYID0gd2luZG93LnNjcm9sbFgsXG5cdFx0c2Nyb2xsWSA9IHdpbmRvdy5zY3JvbGxZLFxuXHRcdGhlYWRlckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0XHRmb290ZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0dGFibGVFbCA9IHRoaXMudGFibGUubW9kdWxlcy5leHBvcnQuZ2VuZXJhdGVUYWJsZSh0eXBlb2YgY29uZmlnICE9IFwidW5kZWZpbmVkXCIgPyBjb25maWcgOiB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRDb25maWcsIHR5cGVvZiBzdHlsZSAhPSBcInVuZGVmaW5lZFwiID8gc3R5bGUgOiB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRTdHlsZWQsIHZpc2libGUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnByaW50Um93UmFuZ2UsIFwicHJpbnRcIiksXG5cdFx0aGVhZGVyQ29udGVudCwgZm9vdGVyQ29udGVudDtcblxuXHRcdHRoaXMubWFudWFsQmxvY2sgPSB0cnVlO1xuXG5cdFx0dGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC1mdWxsc2NyZWVuXCIpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnByaW50SGVhZGVyKXtcblx0XHRcdGhlYWRlckVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtaGVhZGVyXCIpO1xuXG5cdFx0XHRoZWFkZXJDb250ZW50ID0gdHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5wcmludEhlYWRlciA9PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRIZWFkZXIuY2FsbCh0aGlzLnRhYmxlKSA6IHRoaXMudGFibGUub3B0aW9ucy5wcmludEhlYWRlcjtcblxuXHRcdFx0aWYodHlwZW9mIGhlYWRlckNvbnRlbnQgPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdGhlYWRlckVsLmlubmVySFRNTCA9IGhlYWRlckNvbnRlbnQ7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGhlYWRlckVsLmFwcGVuZENoaWxkKGhlYWRlckNvbnRlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWwpO1xuXHRcdH1cblxuXHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0YWJsZUVsKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wcmludEZvb3Rlcil7XG5cdFx0XHRmb290ZXJFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LWZvb3RlclwiKTtcblxuXHRcdFx0Zm9vdGVyQ29udGVudCA9IHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRGb290ZXIgPT0gXCJmdW5jdGlvblwiID8gdGhpcy50YWJsZS5vcHRpb25zLnByaW50Rm9vdGVyLmNhbGwodGhpcy50YWJsZSkgOiB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRGb290ZXI7XG5cblxuXHRcdFx0aWYodHlwZW9mIGZvb3RlckNvbnRlbnQgPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdGZvb3RlckVsLmlubmVySFRNTCA9IGZvb3RlckNvbnRlbnQ7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGZvb3RlckVsLmFwcGVuZENoaWxkKGZvb3RlckNvbnRlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZm9vdGVyRWwpO1xuXHRcdH1cblxuXHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC1mdWxsc2NyZWVuLWhpZGVcIik7XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnByaW50Rm9ybWF0dGVyKXtcblx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5wcmludEZvcm1hdHRlcih0aGlzLmVsZW1lbnQsIHRhYmxlRWwpO1xuXHRcdH1cblxuXHRcdHdpbmRvdy5wcmludCgpO1xuXG5cdFx0dGhpcy5jbGVhbnVwKCk7XG5cblx0XHR3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsWCwgc2Nyb2xsWSk7XG5cblx0XHR0aGlzLm1hbnVhbEJsb2NrID0gZmFsc2U7XG5cdH1cbn1cblxuY2xhc3MgUmVhY3RpdmVEYXRhIGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJyZWFjdGl2ZURhdGFcIjtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5kYXRhID0gZmFsc2U7XG5cdFx0dGhpcy5ibG9ja2VkID0gZmFsc2U7IC8vYmxvY2sgcmVhY3Rpdml0eSB3aGlsZSBwZXJmb3JtaW5nIHVwZGF0ZVxuXHRcdHRoaXMub3JpZ0Z1bmNzID0ge307IC8vIGhvbGQgb3JpZ2luYWwgZGF0YSBhcnJheSBmdW5jdGlvbnMgdG8gYWxsb3cgcmVwbGFjZW1lbnQgYWZ0ZXIgZGF0YSBpcyBkb25lIHdpdGhcblx0XHR0aGlzLmN1cnJlbnRWZXJzaW9uID0gMDtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZWFjdGl2ZURhdGFcIiwgZmFsc2UpOyAvL2VuYWJsZSBkYXRhIHJlYWN0aXZpdHlcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZWFjdGl2ZURhdGEpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLXNhdmUtYmVmb3JlXCIsIHRoaXMuYmxvY2suYmluZCh0aGlzLCBcImNlbGxzYXZlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1zYXZlLWFmdGVyXCIsIHRoaXMudW5ibG9jay5iaW5kKHRoaXMsIFwiY2VsbHNhdmVcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1zYXZlLWJlZm9yZVwiLCB0aGlzLmJsb2NrLmJpbmQodGhpcywgXCJyb3dzYXZlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtc2F2ZS1hZnRlclwiLCB0aGlzLnVuYmxvY2suYmluZCh0aGlzLCBcInJvd3NhdmVcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1pbml0LWFmdGVyXCIsIHRoaXMud2F0Y2hSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcHJvY2Vzc2luZ1wiLCB0aGlzLndhdGNoRGF0YS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtZGVzdHJveVwiLCB0aGlzLnVud2F0Y2hEYXRhLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXHRcblx0d2F0Y2hEYXRhKGRhdGEpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHR2ZXJzaW9uO1xuXHRcdFxuXHRcdHRoaXMuY3VycmVudFZlcnNpb24gKys7XG5cdFx0XG5cdFx0dmVyc2lvbiA9IHRoaXMuY3VycmVudFZlcnNpb247XG5cdFx0XG5cdFx0dGhpcy51bndhdGNoRGF0YSgpO1xuXHRcdFxuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0XG5cdFx0Ly9vdmVycmlkZSBhcnJheSBwdXNoIGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3MucHVzaCA9IGRhdGEucHVzaDtcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBcInB1c2hcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0XHRcdHJlc3VsdDtcblxuXHRcdFx0XHRpZighc2VsZi5ibG9ja2VkICYmIHZlcnNpb24gPT09IHNlbGYuY3VycmVudFZlcnNpb24pe1x0XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtcHVzaFwiKTtcblxuXHRcdFx0XHRcdGFyZ3MuZm9yRWFjaCgoYXJnKSA9PiB7XG5cdFx0XHRcdFx0XHRzZWxmLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93QWN0dWFsKGFyZywgZmFsc2UpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJlc3VsdCA9IHNlbGYub3JpZ0Z1bmNzLnB1c2guYXBwbHkoZGF0YSwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXB1c2hcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0Ly9vdmVycmlkZSBhcnJheSB1bnNoaWZ0IGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3MudW5zaGlmdCA9IGRhdGEudW5zaGlmdDtcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBcInVuc2hpZnRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0XHRcdHJlc3VsdDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtdW5zaGlmdFwiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRhcmdzLmZvckVhY2goKGFyZykgPT4ge1xuXHRcdFx0XHRcdFx0c2VsZi50YWJsZS5yb3dNYW5hZ2VyLmFkZFJvd0FjdHVhbChhcmcsIHRydWUpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJlc3VsdCA9IHNlbGYub3JpZ0Z1bmNzLnVuc2hpZnQuYXBwbHkoZGF0YSwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXVuc2hpZnRcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0XG5cdFx0Ly9vdmVycmlkZSBhcnJheSBzaGlmdCBmdW5jdGlvblxuXHRcdHRoaXMub3JpZ0Z1bmNzLnNoaWZ0ID0gZGF0YS5zaGlmdDtcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBcInNoaWZ0XCIsIHtcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciByb3csIHJlc3VsdDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtc2hpZnRcIik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoc2VsZi5kYXRhLmxlbmd0aCl7XG5cdFx0XHRcdFx0XHRyb3cgPSBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93RnJvbURhdGFPYmplY3Qoc2VsZi5kYXRhWzBdKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYocm93KXtcblx0XHRcdFx0XHRcdFx0cm93LmRlbGV0ZUFjdHVhbCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlc3VsdCA9IHNlbGYub3JpZ0Z1bmNzLnNoaWZ0LmNhbGwoZGF0YSk7XG5cblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXNoaWZ0XCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdC8vb3ZlcnJpZGUgYXJyYXkgcG9wIGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3MucG9wID0gZGF0YS5wb3A7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJwb3BcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIHJvdywgcmVzdWx0O1xuXHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtcG9wXCIpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHNlbGYuZGF0YS5sZW5ndGgpe1xuXHRcdFx0XHRcdFx0cm93ID0gc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21EYXRhT2JqZWN0KHNlbGYuZGF0YVtzZWxmLmRhdGEubGVuZ3RoIC0gMV0pO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdFx0XHRyb3cuZGVsZXRlQWN0dWFsKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmVzdWx0ID0gc2VsZi5vcmlnRnVuY3MucG9wLmNhbGwoZGF0YSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwiZGF0YS1wb3BcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdFxuXHRcdC8vb3ZlcnJpZGUgYXJyYXkgc3BsaWNlIGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3Muc3BsaWNlID0gZGF0YS5zcGxpY2U7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJzcGxpY2VcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0XHRcdHN0YXJ0ID0gYXJnc1swXSA8IDAgPyBkYXRhLmxlbmd0aCArIGFyZ3NbMF0gOiBhcmdzWzBdLFxuXHRcdFx0XHRlbmQgPSBhcmdzWzFdLFxuXHRcdFx0XHRuZXdSb3dzID0gYXJnc1syXSA/IGFyZ3Muc2xpY2UoMikgOiBmYWxzZSxcblx0XHRcdFx0c3RhcnRSb3csIHJlc3VsdDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtc3BsaWNlXCIpO1xuXHRcdFx0XHRcdC8vYWRkIG5ldyByb3dzXG5cdFx0XHRcdFx0aWYobmV3Um93cyl7XG5cdFx0XHRcdFx0XHRzdGFydFJvdyA9IGRhdGFbc3RhcnRdID8gc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21EYXRhT2JqZWN0KGRhdGFbc3RhcnRdKSA6IGZhbHNlO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihzdGFydFJvdyl7XG5cdFx0XHRcdFx0XHRcdG5ld1Jvd3MuZm9yRWFjaCgocm93RGF0YSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYudGFibGUucm93TWFuYWdlci5hZGRSb3dBY3R1YWwocm93RGF0YSwgdHJ1ZSwgc3RhcnRSb3csIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0bmV3Um93cyA9IG5ld1Jvd3Muc2xpY2UoKS5yZXZlcnNlKCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRuZXdSb3dzLmZvckVhY2goKHJvd0RhdGEpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93QWN0dWFsKHJvd0RhdGEsIHRydWUsIGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vZGVsZXRlIHJlbW92ZWQgcm93c1xuXHRcdFx0XHRcdGlmKGVuZCAhPT0gMCl7XG5cdFx0XHRcdFx0XHR2YXIgb2xkUm93cyA9IGRhdGEuc2xpY2Uoc3RhcnQsIHR5cGVvZiBhcmdzWzFdID09PSBcInVuZGVmaW5lZFwiID8gYXJnc1sxXSA6IHN0YXJ0ICsgZW5kKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0b2xkUm93cy5mb3JFYWNoKChyb3dEYXRhLCBpKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHZhciByb3cgPSBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93RnJvbURhdGFPYmplY3Qocm93RGF0YSk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdFx0XHRcdHJvdy5kZWxldGVBY3R1YWwoaSAhPT0gb2xkUm93cy5sZW5ndGggLSAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKG5ld1Jvd3MgfHwgZW5kICE9PSAwKXtcblx0XHRcdFx0XHRcdHNlbGYudGFibGUucm93TWFuYWdlci5yZVJlbmRlckluUG9zaXRpb24oKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXN1bHQgPSBzZWxmLm9yaWdGdW5jcy5zcGxpY2UuYXBwbHkoZGF0YSwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXNwbGljZVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIHJlc3VsdCA7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHVud2F0Y2hEYXRhKCl7XG5cdFx0aWYodGhpcy5kYXRhICE9PSBmYWxzZSl7XG5cdFx0XHRmb3IodmFyIGtleSBpbiB0aGlzLm9yaWdGdW5jcyl7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmRhdGEsIGtleSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOnRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6dHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdGhpcy5vcmlnRnVuY3Mua2V5LFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHdhdGNoUm93KHJvdyl7XG5cdFx0dmFyIGRhdGEgPSByb3cuZ2V0RGF0YSgpO1xuXHRcdFxuXHRcdGZvcih2YXIga2V5IGluIGRhdGEpe1xuXHRcdFx0dGhpcy53YXRjaEtleShyb3csIGRhdGEsIGtleSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZSl7XG5cdFx0XHR0aGlzLndhdGNoVHJlZUNoaWxkcmVuKHJvdyk7XG5cdFx0fVxuXHR9XG5cdFxuXHR3YXRjaFRyZWVDaGlsZHJlbiAocm93KXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y2hpbGRGaWVsZCA9IHJvdy5nZXREYXRhKClbdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlQ2hpbGRGaWVsZF0sXG5cdFx0b3JpZ0Z1bmNzID0ge307XG5cdFx0XG5cdFx0aWYoY2hpbGRGaWVsZCl7XG5cdFx0XHRcblx0XHRcdG9yaWdGdW5jcy5wdXNoID0gY2hpbGRGaWVsZC5wdXNoO1xuXHRcdFx0XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGRGaWVsZCwgXCJwdXNoXCIsIHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6ICgpID0+IHtcblx0XHRcdFx0XHRpZighc2VsZi5ibG9ja2VkKXtcblx0XHRcdFx0XHRcdHNlbGYuYmxvY2soXCJ0cmVlLXB1c2hcIik7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHZhciByZXN1bHQgPSBvcmlnRnVuY3MucHVzaC5hcHBseShjaGlsZEZpZWxkLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZWJ1aWxkVHJlZShyb3cpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJ0cmVlLXB1c2hcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRvcmlnRnVuY3MudW5zaGlmdCA9IGNoaWxkRmllbGQudW5zaGlmdDtcblx0XHRcdFxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkRmllbGQsIFwidW5zaGlmdFwiLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYoIXNlbGYuYmxvY2tlZCl7XG5cdFx0XHRcdFx0XHRzZWxmLmJsb2NrKFwidHJlZS11bnNoaWZ0XCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gIG9yaWdGdW5jcy51bnNoaWZ0LmFwcGx5KGNoaWxkRmllbGQsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0XHR0aGlzLnJlYnVpbGRUcmVlKHJvdyk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHNlbGYudW5ibG9jayhcInRyZWUtdW5zaGlmdFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdG9yaWdGdW5jcy5zaGlmdCA9IGNoaWxkRmllbGQuc2hpZnQ7XG5cdFx0XHRcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZEZpZWxkLCBcInNoaWZ0XCIsIHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6ICgpID0+IHtcblx0XHRcdFx0XHRpZighc2VsZi5ibG9ja2VkKXtcblx0XHRcdFx0XHRcdHNlbGYuYmxvY2soXCJ0cmVlLXNoaWZ0XCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gIG9yaWdGdW5jcy5zaGlmdC5jYWxsKGNoaWxkRmllbGQpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZWJ1aWxkVHJlZShyb3cpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJ0cmVlLXNoaWZ0XCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0b3JpZ0Z1bmNzLnBvcCA9IGNoaWxkRmllbGQucG9wO1xuXHRcdFx0XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGRGaWVsZCwgXCJwb3BcIiwge1xuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogKCkgPT4ge1xuXHRcdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQpe1xuXHRcdFx0XHRcdFx0c2VsZi5ibG9jayhcInRyZWUtcG9wXCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gIG9yaWdGdW5jcy5wb3AuY2FsbChjaGlsZEZpZWxkKTtcblx0XHRcdFx0XHRcdHRoaXMucmVidWlsZFRyZWUocm93KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwidHJlZS1wb3BcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRvcmlnRnVuY3Muc3BsaWNlID0gY2hpbGRGaWVsZC5zcGxpY2U7XG5cdFx0XHRcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZEZpZWxkLCBcInNwbGljZVwiLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYoIXNlbGYuYmxvY2tlZCl7XG5cdFx0XHRcdFx0XHRzZWxmLmJsb2NrKFwidHJlZS1zcGxpY2VcIik7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHZhciByZXN1bHQgPSAgb3JpZ0Z1bmNzLnNwbGljZS5hcHBseShjaGlsZEZpZWxkLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZWJ1aWxkVHJlZShyb3cpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJ0cmVlLXNwbGljZVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWJ1aWxkVHJlZShyb3cpe1xuXHRcdHRoaXMudGFibGUubW9kdWxlcy5kYXRhVHJlZS5pbml0aWFsaXplUm93KHJvdyk7XG5cdFx0dGhpcy50YWJsZS5tb2R1bGVzLmRhdGFUcmVlLmxheW91dFJvdyhyb3cpO1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWZyZXNoQWN0aXZlRGF0YShcInRyZWVcIiwgZmFsc2UsIHRydWUpO1xuXHR9XG5cdFxuXHR3YXRjaEtleShyb3csIGRhdGEsIGtleSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkYXRhLCBrZXkpLFxuXHRcdHZhbHVlID0gZGF0YVtrZXldLFxuXHRcdHZlcnNpb24gPSB0aGlzLmN1cnJlbnRWZXJzaW9uO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhLCBrZXksIHtcblx0XHRcdHNldDogKG5ld1ZhbHVlKSA9PiB7XG5cdFx0XHRcdHZhbHVlID0gbmV3VmFsdWU7XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImtleVwiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgdXBkYXRlID0ge307XG5cdFx0XHRcdFx0dXBkYXRlW2tleV0gPSBuZXdWYWx1ZTtcblx0XHRcdFx0XHRyb3cudXBkYXRlRGF0YSh1cGRhdGUpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHNlbGYudW5ibG9jayhcImtleVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYocHJvcHMuc2V0KXtcblx0XHRcdFx0XHRwcm9wcy5zZXQobmV3VmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Z2V0OigpID0+IHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHByb3BzLmdldCl7XG5cdFx0XHRcdFx0cHJvcHMuZ2V0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0dW53YXRjaFJvdyhyb3cpe1xuXHRcdHZhciBkYXRhID0gcm93LmdldERhdGEoKTtcblx0XHRcblx0XHRmb3IodmFyIGtleSBpbiBkYXRhKXtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhLCBrZXksIHtcblx0XHRcdFx0dmFsdWU6ZGF0YVtrZXldLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRibG9jayhrZXkpe1xuXHRcdGlmKCF0aGlzLmJsb2NrZWQpe1xuXHRcdFx0dGhpcy5ibG9ja2VkID0ga2V5O1xuXHRcdH1cblx0fVxuXHRcblx0dW5ibG9jayhrZXkpe1xuXHRcdGlmKHRoaXMuYmxvY2tlZCA9PT0ga2V5KXtcblx0XHRcdHRoaXMuYmxvY2tlZCA9IGZhbHNlO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBSZXNpemVDb2x1bW5zIGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJyZXNpemVDb2x1bW5zXCI7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnN0YXJ0Q29sdW1uID0gZmFsc2U7XG5cdFx0dGhpcy5zdGFydFggPSBmYWxzZTtcblx0XHR0aGlzLnN0YXJ0V2lkdGggPSBmYWxzZTtcblx0XHR0aGlzLmxhdGVzdFggPSBmYWxzZTtcblx0XHR0aGlzLmhhbmRsZSA9IG51bGw7XG5cdFx0dGhpcy5pbml0aWFsTmV4dENvbHVtbiA9IG51bGw7XG5cdFx0dGhpcy5uZXh0Q29sdW1uID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInJlc2l6YWJsZVwiLCB0cnVlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZXNpemFibGVDb2x1bW5GaXRcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc2l6YWJsZUNvbHVtbkd1aWRlXCIsIGZhbHNlKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXJlbmRlcmVkXCIsIHRoaXMubGF5b3V0Q29sdW1uSGVhZGVyLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplRXZlbnRXYXRjaGVycygpe1xuXHRcdGlmKCF0aGlzLmluaXRpYWxpemVkKXtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXJlbmRlcmVkXCIsIHRoaXMubGF5b3V0Q2VsbEhhbmRsZXMuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZGVsZXRlXCIsIHRoaXMuZGVJbml0aWFsaXplQ29tcG9uZW50LmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtaGVpZ2h0XCIsIHRoaXMucmVzaXplSGFuZGxlLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW92ZWRcIiwgdGhpcy5jb2x1bW5MYXlvdXRVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1oaWRlXCIsIHRoaXMuZGVJbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tc2hvd1wiLCB0aGlzLmNvbHVtbkxheW91dFVwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi13aWR0aFwiLCB0aGlzLmNvbHVtbldpZHRoVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tZGVsZXRlXCIsIHRoaXMuZGVJbml0aWFsaXplQ29tcG9uZW50LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taGVpZ2h0XCIsIHRoaXMucmVzaXplSGFuZGxlLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRsYXlvdXRDZWxsSGFuZGxlcyhjZWxsKXtcblx0XHRpZihjZWxsLnJvdy50eXBlID09PSBcInJvd1wiKXtcblx0XHRcdHRoaXMuZGVJbml0aWFsaXplQ29tcG9uZW50KGNlbGwpO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKFwiY2VsbFwiLCBjZWxsLCBjZWxsLmNvbHVtbiwgY2VsbC5lbGVtZW50KTtcblx0XHR9XG5cdH1cblx0XG5cdGxheW91dENvbHVtbkhlYWRlcihjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnJlc2l6YWJsZSl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVFdmVudFdhdGNoZXJzKCk7XG5cdFx0XHR0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudChjb2x1bW4pO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKFwiaGVhZGVyXCIsIGNvbHVtbiwgY29sdW1uLCBjb2x1bW4uZWxlbWVudCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRjb2x1bW5MYXlvdXRVcGRhdGVkKGNvbHVtbil7XG5cdFx0dmFyIHByZXYgPSBjb2x1bW4ucHJldkNvbHVtbigpO1xuXHRcdFxuXHRcdHRoaXMucmVpbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0XG5cdFx0aWYocHJldil7XG5cdFx0XHR0aGlzLnJlaW5pdGlhbGl6ZUNvbHVtbihwcmV2KTtcblx0XHR9XG5cdH1cblx0XG5cdGNvbHVtbldpZHRoVXBkYXRlZChjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZyb3plbil7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5sZWZ0Q29sdW1ucy5pbmNsdWRlcyhjb2x1bW4pKXtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMubGVmdENvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5yZWluaXRpYWxpemVDb2x1bW4oY29sKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSBpZih0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5yaWdodENvbHVtbnMuaW5jbHVkZXMoY29sdW1uKSl7XG5cdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLnJpZ2h0Q29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0XHR0aGlzLnJlaW5pdGlhbGl6ZUNvbHVtbihjb2wpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmcm96ZW5Db2x1bW5PZmZzZXQoY29sdW1uKXtcblx0XHR2YXIgb2Zmc2V0ID0gZmFsc2U7XG5cblx0XHRpZihjb2x1bW4ubW9kdWxlcy5mcm96ZW4pe1xuXHRcdFx0b2Zmc2V0ID0gY29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpblZhbHVlOyBcblxuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uID09PSBcImxlZnRcIil7XG5cdFx0XHRcdG9mZnNldCArPSBjb2x1bW4uZ2V0V2lkdGgoKSAtIDM7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKG9mZnNldCl7XG5cdFx0XHRcdFx0b2Zmc2V0IC09IDM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2Zmc2V0ICE9PSBmYWxzZSA/IG9mZnNldCArIFwicHhcIiA6IGZhbHNlO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgZnJvemVuT2Zmc2V0ID0gdGhpcy5mcm96ZW5Db2x1bW5PZmZzZXQoY29sdW1uKTtcblx0XHRcblx0XHRjb2x1bW4uY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0aWYoY2VsbC5tb2R1bGVzLnJlc2l6ZSAmJiBjZWxsLm1vZHVsZXMucmVzaXplLmhhbmRsZUVsKXtcblx0XHRcdFx0aWYoZnJvemVuT2Zmc2V0KXtcblx0XHRcdFx0XHRjZWxsLm1vZHVsZXMucmVzaXplLmhhbmRsZUVsLnN0eWxlW2NvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbl0gPSBmcm96ZW5PZmZzZXQ7XG5cdFx0XHRcdFx0Y2VsbC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbC5zdHlsZVtcInotaW5kZXhcIl0gPSAxMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbC5lbGVtZW50LmFmdGVyKGNlbGwubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLnJlc2l6ZSAmJiBjb2x1bW4ubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwpe1xuXHRcdFx0aWYoZnJvemVuT2Zmc2V0KXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMucmVzaXplLmhhbmRsZUVsLnN0eWxlW2NvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbl0gPSBmcm96ZW5PZmZzZXQ7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbHVtbi5lbGVtZW50LmFmdGVyKGNvbHVtbi5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQ29sdW1uKHR5cGUsIGNvbXBvbmVudCwgY29sdW1uLCBlbGVtZW50KXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0dmFyaWFibGVIZWlnaHQgPSBmYWxzZSxcblx0XHRtb2RlID0gY29sdW1uLmRlZmluaXRpb24ucmVzaXphYmxlLFxuXHRcdGNvbmZpZyA9IHt9LFxuXHRcdG5lYXJlc3RDb2x1bW4gPSBjb2x1bW4uZ2V0TGFzdENvbHVtbigpO1xuXHRcdFxuXHRcdC8vc2V0IGNvbHVtbiByZXNpemUgbW9kZVxuXHRcdGlmKHR5cGUgPT09IFwiaGVhZGVyXCIpe1xuXHRcdFx0dmFyaWFibGVIZWlnaHQgPSBjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXIgPT0gXCJ0ZXh0YXJlYVwiIHx8IGNvbHVtbi5kZWZpbml0aW9uLnZhcmlhYmxlSGVpZ2h0O1xuXHRcdFx0Y29uZmlnID0ge3ZhcmlhYmxlSGVpZ2h0OnZhcmlhYmxlSGVpZ2h0fTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoKG1vZGUgPT09IHRydWUgfHwgbW9kZSA9PSB0eXBlKSAmJiB0aGlzLl9jaGVja1Jlc2l6YWJpbGl0eShuZWFyZXN0Q29sdW1uKSl7XG5cdFx0XHRcblx0XHRcdHZhciBoYW5kbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cdFx0XHRoYW5kbGUuY2xhc3NOYW1lID0gXCJ0YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGVcIjtcblx0XHRcdFxuXHRcdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR2YXIgaGFuZGxlRG93biA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRzZWxmLnN0YXJ0Q29sdW1uID0gY29sdW1uO1xuXHRcdFx0XHRzZWxmLmluaXRpYWxOZXh0Q29sdW1uID0gc2VsZi5uZXh0Q29sdW1uID0gbmVhcmVzdENvbHVtbi5uZXh0Q29sdW1uKCk7XG5cdFx0XHRcdHNlbGYuX21vdXNlRG93bihlLCBuZWFyZXN0Q29sdW1uLCBoYW5kbGUpO1xuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgaGFuZGxlRG93bik7XG5cdFx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgaGFuZGxlRG93biwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHRcdFxuXHRcdFx0Ly9yZXNpemUgY29sdW1uIG9uICBkb3VibGUgY2xpY2tcblx0XHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0dmFyIG9sZFdpZHRoID0gbmVhcmVzdENvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0bmVhcmVzdENvbHVtbi5yZWluaXRpYWxpemVXaWR0aCh0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKG9sZFdpZHRoICE9PSBuZWFyZXN0Q29sdW1uLmdldFdpZHRoKCkpe1xuXHRcdFx0XHRcdHNlbGYuZGlzcGF0Y2goXCJjb2x1bW4tcmVzaXplZFwiLCBuZWFyZXN0Q29sdW1uKTtcblx0XHRcdFx0XHRzZWxmLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5SZXNpemVkXCIsIG5lYXJlc3RDb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuKXtcblx0XHRcdFx0aGFuZGxlLnN0eWxlLnBvc2l0aW9uID0gXCJzdGlja3lcIjtcblx0XHRcdFx0aGFuZGxlLnN0eWxlW2NvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbl0gPSB0aGlzLmZyb3plbkNvbHVtbk9mZnNldChjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb25maWcuaGFuZGxlRWwgPSBoYW5kbGU7XG5cdFx0XHRcblx0XHRcdGlmKGVsZW1lbnQucGFyZW50Tm9kZSAmJiBjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdGVsZW1lbnQuYWZ0ZXIoaGFuZGxlKTtcdFx0XHRcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Y29tcG9uZW50Lm1vZHVsZXMucmVzaXplID0gY29uZmlnO1xuXHR9XG5cdFxuXHRkZUluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudChjb2x1bW4pO1xuXHRcdFxuXHRcdGNvbHVtbi5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHR0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudChjZWxsKTtcblx0XHR9KTtcblx0fVxuXHRcblx0ZGVJbml0aWFsaXplQ29tcG9uZW50KGNvbXBvbmVudCl7XG5cdFx0dmFyIGhhbmRsZUVsO1xuXHRcdFxuXHRcdGlmKGNvbXBvbmVudC5tb2R1bGVzLnJlc2l6ZSl7XG5cdFx0XHRoYW5kbGVFbCA9IGNvbXBvbmVudC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbDtcblx0XHRcdFxuXHRcdFx0aWYoaGFuZGxlRWwgJiYgaGFuZGxlRWwucGFyZW50RWxlbWVudCl7XG5cdFx0XHRcdGhhbmRsZUVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoaGFuZGxlRWwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVzaXplSGFuZGxlKGNvbXBvbmVudCwgaGVpZ2h0KXtcblx0XHRpZihjb21wb25lbnQubW9kdWxlcy5yZXNpemUgJiYgY29tcG9uZW50Lm1vZHVsZXMucmVzaXplLmhhbmRsZUVsKXtcblx0XHRcdGNvbXBvbmVudC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZXNpemUoZSwgY29sdW1uKXtcblx0XHR2YXIgeCA9IHR5cGVvZiBlLmNsaWVudFggPT09IFwidW5kZWZpbmVkXCIgPyBlLnRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WCxcblx0XHRzdGFydERpZmYgPSB4IC0gdGhpcy5zdGFydFgsXG5cdFx0bW92ZURpZmYgPSB4IC0gdGhpcy5sYXRlc3RYLFxuXHRcdGJsb2NrZWRCZWZvcmUsIGJsb2NrZWRBZnRlcjtcblxuXHRcdHRoaXMubGF0ZXN0WCA9IHg7XG5cblx0XHRpZih0aGlzLnRhYmxlLnJ0bCl7XG5cdFx0XHRzdGFydERpZmYgPSAtc3RhcnREaWZmO1xuXHRcdFx0bW92ZURpZmYgPSAtbW92ZURpZmY7XG5cdFx0fVxuXG5cdFx0YmxvY2tlZEJlZm9yZSA9IGNvbHVtbi53aWR0aCA9PSBjb2x1bW4ubWluV2lkdGggfHwgY29sdW1uLndpZHRoID09IGNvbHVtbi5tYXhXaWR0aDtcblxuXHRcdGNvbHVtbi5zZXRXaWR0aCh0aGlzLnN0YXJ0V2lkdGggKyBzdGFydERpZmYpO1xuXG5cdFx0YmxvY2tlZEFmdGVyID0gY29sdW1uLndpZHRoID09IGNvbHVtbi5taW5XaWR0aCB8fCBjb2x1bW4ud2lkdGggPT0gY29sdW1uLm1heFdpZHRoO1xuXG5cdFx0aWYobW92ZURpZmYgPCAwKXtcblx0XHRcdHRoaXMubmV4dENvbHVtbiA9IHRoaXMuaW5pdGlhbE5leHRDb2x1bW47XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc2l6YWJsZUNvbHVtbkZpdCAmJiB0aGlzLm5leHRDb2x1bW4gJiYgIShibG9ja2VkQmVmb3JlICYmIGJsb2NrZWRBZnRlcikpe1xuXHRcdFx0bGV0IGNvbFdpZHRoID0gdGhpcy5uZXh0Q29sdW1uLmdldFdpZHRoKCk7XG5cblx0XHRcdGlmKG1vdmVEaWZmID4gMCl7XG5cdFx0XHRcdGlmKGNvbFdpZHRoIDw9IHRoaXMubmV4dENvbHVtbi5taW5XaWR0aCl7XG5cdFx0XHRcdFx0dGhpcy5uZXh0Q29sdW1uID0gdGhpcy5uZXh0Q29sdW1uLm5leHRDb2x1bW4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLm5leHRDb2x1bW4pe1xuXHRcdFx0XHR0aGlzLm5leHRDb2x1bW4uc2V0V2lkdGgodGhpcy5uZXh0Q29sdW1uLmdldFdpZHRoKCkgLSBtb3ZlRGlmZik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlcmVuZGVyQ29sdW1ucyh0cnVlKTtcblxuXHRcdGlmKCF0aGlzLnRhYmxlLmJyb3dzZXJTbG93ICYmIGNvbHVtbi5tb2R1bGVzLnJlc2l6ZSAmJiBjb2x1bW4ubW9kdWxlcy5yZXNpemUudmFyaWFibGVIZWlnaHQpe1xuXHRcdFx0Y29sdW1uLmNoZWNrQ2VsbEhlaWdodHMoKTtcblx0XHR9XG5cdH1cblxuXHRjYWxjR3VpZGVQb3NpdGlvbihlLCBjb2x1bW4sIGhhbmRsZSkge1xuXHRcdHZhciBtb3VzZVggPSB0eXBlb2YgZS5jbGllbnRYID09PSBcInVuZGVmaW5lZFwiID8gZS50b3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFgsXG5cdFx0aGFuZGxlWCA9IGhhbmRsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54IC0gdGhpcy50YWJsZS5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLngsXG5cdFx0dGFibGVYID0gdGhpcy50YWJsZS5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLngsXG5cdFx0Y29sdW1uWCA9IGNvbHVtbi5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB0YWJsZVgsXG5cdFx0bW91c2VEaWZmID0gbW91c2VYIC0gdGhpcy5zdGFydFgsXG5cdFx0cG9zID0gTWF0aC5tYXgoaGFuZGxlWCArIG1vdXNlRGlmZiwgY29sdW1uWCArIGNvbHVtbi5taW5XaWR0aCk7XG5cblx0XHRpZihjb2x1bW4ubWF4V2lkdGgpe1xuXHRcdFx0cG9zID0gTWF0aC5taW4ocG9zLCBjb2x1bW5YICsgY29sdW1uLm1heFdpZHRoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcG9zO1xuXHR9XG5cblx0X2NoZWNrUmVzaXphYmlsaXR5KGNvbHVtbil7XG5cdFx0cmV0dXJuIGNvbHVtbi5kZWZpbml0aW9uLnJlc2l6YWJsZTtcblx0fVxuXHRcblx0X21vdXNlRG93bihlLCBjb2x1bW4sIGhhbmRsZSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGd1aWRlRWw7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5SZXNpemluZ1wiLCBjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXG5cdFx0aWYoc2VsZi50YWJsZS5vcHRpb25zLnJlc2l6YWJsZUNvbHVtbkd1aWRlKXtcblx0XHRcdGd1aWRlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHRcdGd1aWRlRWwuY2xhc3NMaXN0LmFkZCgndGFidWxhdG9yLWNvbC1yZXNpemUtZ3VpZGUnKTtcblx0XHRcdHNlbGYudGFibGUuZWxlbWVudC5hcHBlbmRDaGlsZChndWlkZUVsKTtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRndWlkZUVsLnN0eWxlLmxlZnQgPSBzZWxmLmNhbGNHdWlkZVBvc2l0aW9uKGUsIGNvbHVtbiwgaGFuZGxlKSArIFwicHhcIjtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHNlbGYudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblxuXHRcdGZ1bmN0aW9uIG1vdXNlTW92ZShlKXtcblx0XHRcdGlmKHNlbGYudGFibGUub3B0aW9ucy5yZXNpemFibGVDb2x1bW5HdWlkZSl7XG5cdFx0XHRcdGd1aWRlRWwuc3R5bGUubGVmdCA9IHNlbGYuY2FsY0d1aWRlUG9zaXRpb24oZSwgY29sdW1uLCBoYW5kbGUpICsgXCJweFwiO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRzZWxmLnJlc2l6ZShlLCBjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBtb3VzZVVwKGUpe1xuXHRcdFx0aWYoc2VsZi50YWJsZS5vcHRpb25zLnJlc2l6YWJsZUNvbHVtbkd1aWRlKXtcblx0XHRcdFx0c2VsZi5yZXNpemUoZSwgY29sdW1uKTtcblx0XHRcdFx0Z3VpZGVFbC5yZW1vdmUoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9ibG9jayBlZGl0b3IgZnJvbSB0YWtpbmcgYWN0aW9uIHdoaWxlIHJlc2l6aW5nIGlzIHRha2luZyBwbGFjZVxuXHRcdFx0aWYoc2VsZi5zdGFydENvbHVtbi5tb2R1bGVzLmVkaXQpe1xuXHRcdFx0XHRzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdC5ibG9ja2VkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHNlbGYudGFibGUuYnJvd3NlclNsb3cgJiYgY29sdW1uLm1vZHVsZXMucmVzaXplICYmIGNvbHVtbi5tb2R1bGVzLnJlc2l6ZS52YXJpYWJsZUhlaWdodCl7XG5cdFx0XHRcdGNvbHVtbi5jaGVja0NlbGxIZWlnaHRzKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2VVcCk7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblx0XHRcdFxuXHRcdFx0aGFuZGxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbW91c2VNb3ZlKTtcblx0XHRcdGhhbmRsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgbW91c2VVcCk7XG5cdFx0XHRcblx0XHRcdHNlbGYudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblx0XHRcdFxuXHRcdFx0aWYoc2VsZi5zdGFydFdpZHRoICE9PSBjb2x1bW4uZ2V0V2lkdGgoKSl7XG5cdFx0XHRcdHNlbGYudGFibGUuY29sdW1uTWFuYWdlci52ZXJ0aWNhbEFsaWduSGVhZGVycygpO1xuXG5cdFx0XHRcdHNlbGYuZGlzcGF0Y2goXCJjb2x1bW4tcmVzaXplZFwiLCBjb2x1bW4pO1xuXHRcdFx0XHRzZWxmLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5SZXNpemVkXCIsIGNvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vcHJldmVudCByZXNpemUgZnJvbSBpbnRlcmZlcmluZyB3aXRoIG1vdmFibGUgY29sdW1uc1xuXHRcdFxuXHRcdC8vYmxvY2sgZWRpdG9yIGZyb20gdGFraW5nIGFjdGlvbiB3aGlsZSByZXNpemluZyBpcyB0YWtpbmcgcGxhY2Vcblx0XHRpZihzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHRzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdC5ibG9ja2VkID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0c2VsZi5zdGFydFggPSB0eXBlb2YgZS5jbGllbnRYID09PSBcInVuZGVmaW5lZFwiID8gZS50b3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG5cdFx0c2VsZi5sYXRlc3RYID0gc2VsZi5zdGFydFg7XG5cdFx0c2VsZi5zdGFydFdpZHRoID0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlTW92ZSk7XG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwKTtcblx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBtb3VzZU1vdmUsIHtwYXNzaXZlOiB0cnVlfSk7XG5cdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBtb3VzZVVwKTtcblx0fVxufVxuXG5jbGFzcyBSZXNpemVSb3dzIGV4dGVuZHMgTW9kdWxle1xuXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJyZXNpemVSb3dzXCI7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuc3RhcnRDb2x1bW4gPSBmYWxzZTtcblx0XHR0aGlzLnN0YXJ0WSA9IGZhbHNlO1xuXHRcdHRoaXMuc3RhcnRIZWlnaHQgPSBmYWxzZTtcblx0XHR0aGlzLmhhbmRsZSA9IG51bGw7XG5cdFx0dGhpcy5wcmV2SGFuZGxlID0gbnVsbDtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc2l6YWJsZVJvd3NcIiwgZmFsc2UpOyAvL3Jlc2l6YWJsZSByb3dzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicmVzaXphYmxlUm93R3VpZGVcIiwgZmFsc2UpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNpemFibGVSb3dzKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWxheW91dC1hZnRlclwiLCB0aGlzLmluaXRpYWxpemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRyb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHR2YXIgaGFuZGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0aGFuZGxlLmNsYXNzTmFtZSA9IFwidGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlXCI7XG5cblx0XHR2YXIgcHJldkhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdHByZXZIYW5kbGUuY2xhc3NOYW1lID0gXCJ0YWJ1bGF0b3Itcm93LXJlc2l6ZS1oYW5kbGUgcHJldlwiO1xuXG5cdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fSk7XG5cblx0XHR2YXIgaGFuZGxlRG93biA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0c2VsZi5zdGFydFJvdyA9IHJvdztcblx0XHRcdHNlbGYuX21vdXNlRG93bihlLCByb3csIGhhbmRsZSk7XG5cdFx0fTtcblxuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZURvd24pO1xuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBoYW5kbGVEb3duLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXG5cdFx0cHJldkhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH0pO1xuXG5cdFx0dmFyIHByZXZIYW5kbGVEb3duID0gIGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIHByZXZSb3cgPSBzZWxmLnRhYmxlLnJvd01hbmFnZXIucHJldkRpc3BsYXlSb3cocm93KTtcblxuXHRcdFx0aWYocHJldlJvdyl7XG5cdFx0XHRcdHNlbGYuc3RhcnRSb3cgPSBwcmV2Um93O1xuXHRcdFx0XHRzZWxmLl9tb3VzZURvd24oZSwgcHJldlJvdywgcHJldkhhbmRsZSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHByZXZIYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHByZXZIYW5kbGVEb3duKTtcblx0XHRwcmV2SGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIscHJldkhhbmRsZURvd24sIHtwYXNzaXZlOiB0cnVlfSk7XG5cblx0XHRyb3dFbC5hcHBlbmRDaGlsZChoYW5kbGUpO1xuXHRcdHJvd0VsLmFwcGVuZENoaWxkKHByZXZIYW5kbGUpO1xuXHR9XG5cblx0cmVzaXplKGUsIHJvdykge1xuXHRcdHJvdy5zZXRIZWlnaHQodGhpcy5zdGFydEhlaWdodCArICgodHlwZW9mIGUuc2NyZWVuWSA9PT0gXCJ1bmRlZmluZWRcIiA/IGUudG91Y2hlc1swXS5zY3JlZW5ZIDogZS5zY3JlZW5ZKSAtIHRoaXMuc3RhcnRZKSk7XG5cdH1cblxuXHRjYWxjR3VpZGVQb3NpdGlvbihlLCByb3csIGhhbmRsZSkge1xuXHRcdHZhciBtb3VzZVkgPSB0eXBlb2YgZS5zY3JlZW5ZID09PSBcInVuZGVmaW5lZFwiID8gZS50b3VjaGVzWzBdLnNjcmVlblkgOiBlLnNjcmVlblksXG5cdFx0aGFuZGxlWSA9IGhhbmRsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gdGhpcy50YWJsZS5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnksXG5cdFx0dGFibGVZID0gdGhpcy50YWJsZS5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnksXG5cdFx0cm93WSA9IHJvdy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHRhYmxlWSxcblx0XHRtb3VzZURpZmYgPSBtb3VzZVkgLSB0aGlzLnN0YXJ0WTtcblxuXHRcdHJldHVybiBNYXRoLm1heChoYW5kbGVZICsgbW91c2VEaWZmLCByb3dZKTtcblx0fVxuXG5cdF9tb3VzZURvd24oZSwgcm93LCBoYW5kbGUpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRndWlkZUVsO1xuXG5cdFx0c2VsZi5kaXNwYXRjaEV4dGVybmFsKFwicm93UmVzaXppbmdcIiwgcm93LmdldENvbXBvbmVudCgpKTtcblxuXHRcdGlmKHNlbGYudGFibGUub3B0aW9ucy5yZXNpemFibGVSb3dHdWlkZSl7XG5cdFx0XHRndWlkZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0XHRndWlkZUVsLmNsYXNzTGlzdC5hZGQoJ3RhYnVsYXRvci1yb3ctcmVzaXplLWd1aWRlJyk7XG5cdFx0XHRzZWxmLnRhYmxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZ3VpZGVFbCk7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0Z3VpZGVFbC5zdHlsZS50b3AgPSBzZWxmLmNhbGNHdWlkZVBvc2l0aW9uKGUsIHJvdywgaGFuZGxlKSArIFwicHhcIjtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHNlbGYudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblxuXHRcdGZ1bmN0aW9uIG1vdXNlTW92ZShlKXtcblx0XHRcdGlmKHNlbGYudGFibGUub3B0aW9ucy5yZXNpemFibGVSb3dHdWlkZSl7XG5cdFx0XHRcdGd1aWRlRWwuc3R5bGUudG9wID0gc2VsZi5jYWxjR3VpZGVQb3NpdGlvbihlLCByb3csIGhhbmRsZSkgKyBcInB4XCI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHNlbGYucmVzaXplKGUsIHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gbW91c2VVcChlKXtcblx0XHRcdGlmKHNlbGYudGFibGUub3B0aW9ucy5yZXNpemFibGVSb3dHdWlkZSl7XG5cdFx0XHRcdHNlbGYucmVzaXplKGUsIHJvdyk7XG5cdFx0XHRcdGd1aWRlRWwucmVtb3ZlKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIC8vYmxvY2sgZWRpdG9yIGZyb20gdGFraW5nIGFjdGlvbiB3aGlsZSByZXNpemluZyBpcyB0YWtpbmcgcGxhY2Vcblx0XHRcdC8vIGlmKHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0KXtcblx0XHRcdC8vIFx0c2VsZi5zdGFydENvbHVtbi5tb2R1bGVzLmVkaXQuYmxvY2tlZCA9IGZhbHNlO1xuXHRcdFx0Ly8gfVxuXG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG1vdXNlTW92ZSk7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblxuXHRcdFx0aGFuZGxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbW91c2VNb3ZlKTtcblx0XHRcdGhhbmRsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgbW91c2VVcCk7XG5cblx0XHRcdHNlbGYudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblxuXHRcdFx0c2VsZi5kaXNwYXRjaEV4dGVybmFsKFwicm93UmVzaXplZFwiLCByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1cblxuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vcHJldmVudCByZXNpemUgZnJvbSBpbnRlcmZlcmluZyB3aXRoIG1vdmFibGUgY29sdW1uc1xuXG5cdFx0Ly9ibG9jayBlZGl0b3IgZnJvbSB0YWtpbmcgYWN0aW9uIHdoaWxlIHJlc2l6aW5nIGlzIHRha2luZyBwbGFjZVxuXHRcdC8vIGlmKHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0KXtcblx0XHQvLyBcdHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0LmJsb2NrZWQgPSB0cnVlO1xuXHRcdC8vIH1cblxuXHRcdHNlbGYuc3RhcnRZID0gdHlwZW9mIGUuc2NyZWVuWSA9PT0gXCJ1bmRlZmluZWRcIiA/IGUudG91Y2hlc1swXS5zY3JlZW5ZIDogZS5zY3JlZW5ZO1xuXHRcdHNlbGYuc3RhcnRIZWlnaHQgPSByb3cuZ2V0SGVpZ2h0KCk7XG5cblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG1vdXNlVXApO1xuXG5cdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbW91c2VNb3ZlLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgbW91c2VVcCk7XG5cdH1cbn1cblxuY2xhc3MgUmVzaXplVGFibGUgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcInJlc2l6ZVRhYmxlXCI7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuYmluZGluZyA9IGZhbHNlO1xuXHRcdHRoaXMudmlzaWJpbGl0eU9ic2VydmVyID0gZmFsc2U7XG5cdFx0dGhpcy5yZXNpemVPYnNlcnZlciA9IGZhbHNlO1xuXHRcdHRoaXMuY29udGFpbmVyT2JzZXJ2ZXIgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnRhYmxlSGVpZ2h0ID0gMDtcblx0XHR0aGlzLnRhYmxlV2lkdGggPSAwO1xuXHRcdHRoaXMuY29udGFpbmVySGVpZ2h0ID0gMDtcblx0XHR0aGlzLmNvbnRhaW5lcldpZHRoID0gMDtcblx0XHRcblx0XHR0aGlzLmF1dG9SZXNpemUgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnZpc2libGUgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5pbml0aWFsUmVkcmF3ID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYXV0b1Jlc2l6ZVwiLCB0cnVlKTsgLy9hdXRvIHJlc2l6ZSB0YWJsZVxuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmF1dG9SZXNpemUpe1xuXHRcdFx0dmFyIHRhYmxlID0gdGhpcy50YWJsZSxcblx0XHRcdHRhYmxlU3R5bGU7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGVIZWlnaHQgPSB0YWJsZS5lbGVtZW50LmNsaWVudEhlaWdodDtcblx0XHRcdHRoaXMudGFibGVXaWR0aCA9IHRhYmxlLmVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0XHRcblx0XHRcdGlmKHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVySGVpZ2h0ID0gdGFibGUuZWxlbWVudC5wYXJlbnROb2RlLmNsaWVudEhlaWdodDtcblx0XHRcdFx0dGhpcy5jb250YWluZXJXaWR0aCA9IHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0YWJsZS5yb3dNYW5hZ2VyLmdldFJlbmRlck1vZGUoKSA9PT0gXCJ2aXJ0dWFsXCIpe1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplVmlzaWJpbGl0eU9ic2VydmVyKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmF1dG9SZXNpemUgPSB0cnVlO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5yZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cnkpID0+IHtcblx0XHRcdFx0XHRpZighdGFibGUuYnJvd3Nlck1vYmlsZSB8fCAodGFibGUuYnJvd3Nlck1vYmlsZSAmJiAoIXRhYmxlLm1vZHVsZXMuZWRpdCB8fCAodGFibGUubW9kdWxlcy5lZGl0ICYmICF0YWJsZS5tb2R1bGVzLmVkaXQuY3VycmVudENlbGwpKSkpe1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgbm9kZUhlaWdodCA9IE1hdGguZmxvb3IoZW50cnlbMF0uY29udGVudFJlY3QuaGVpZ2h0KTtcblx0XHRcdFx0XHRcdHZhciBub2RlV2lkdGggPSBNYXRoLmZsb29yKGVudHJ5WzBdLmNvbnRlbnRSZWN0LndpZHRoKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy50YWJsZUhlaWdodCAhPSBub2RlSGVpZ2h0IHx8IHRoaXMudGFibGVXaWR0aCAhPSBub2RlV2lkdGgpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlSGVpZ2h0ID0gbm9kZUhlaWdodDtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZVdpZHRoID0gbm9kZVdpZHRoO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYodGFibGUuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lckhlaWdodCA9IHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRIZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJXaWR0aCA9IHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWRyYXdUYWJsZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGFibGUuZWxlbWVudCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0YWJsZVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFibGUuZWxlbWVudCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSAmJiAhdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpeGVkSGVpZ2h0ICYmICh0YWJsZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJtYXgtaGVpZ2h0XCIpIHx8IHRhYmxlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIm1pbi1oZWlnaHRcIikpKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lck9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyeSkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoIXRhYmxlLmJyb3dzZXJNb2JpbGUgfHwgKHRhYmxlLmJyb3dzZXJNb2JpbGUgJiYgKCF0YWJsZS5tb2R1bGVzLmVkaXQgfHwgKHRhYmxlLm1vZHVsZXMuZWRpdCAmJiAhdGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsKSkpKXtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHZhciBub2RlSGVpZ2h0ID0gTWF0aC5mbG9vcihlbnRyeVswXS5jb250ZW50UmVjdC5oZWlnaHQpO1xuXHRcdFx0XHRcdFx0XHR2YXIgbm9kZVdpZHRoID0gTWF0aC5mbG9vcihlbnRyeVswXS5jb250ZW50UmVjdC53aWR0aCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZih0aGlzLmNvbnRhaW5lckhlaWdodCAhPSBub2RlSGVpZ2h0IHx8IHRoaXMuY29udGFpbmVyV2lkdGggIT0gbm9kZVdpZHRoKXtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lckhlaWdodCA9IG5vZGVIZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJXaWR0aCA9IG5vZGVXaWR0aDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlSGVpZ2h0ID0gdGFibGUuZWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZVdpZHRoID0gdGFibGUuZWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWRyYXdUYWJsZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtcmVzaXplXCIsIHRoaXMudGFibGVSZXNpemVkLmJpbmQodGhpcykpO1xuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5iaW5kaW5nID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRpZighdGFibGUuYnJvd3Nlck1vYmlsZSB8fCAodGFibGUuYnJvd3Nlck1vYmlsZSAmJiAoIXRhYmxlLm1vZHVsZXMuZWRpdCB8fCAodGFibGUubW9kdWxlcy5lZGl0ICYmICF0YWJsZS5tb2R1bGVzLmVkaXQuY3VycmVudENlbGwpKSkpe1xuXHRcdFx0XHRcdFx0dGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cdFx0XHRcdFx0XHR0YWJsZS5yZWRyYXcoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdFxuXHRcdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmJpbmRpbmcpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5jbGVhckJpbmRpbmdzLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZVZpc2liaWxpdHlPYnNlcnZlcigpe1xuXHRcdHRoaXMudmlzaWJpbGl0eU9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG5cdFx0XHR0aGlzLnZpc2libGUgPSBlbnRyaWVzWzBdLmlzSW50ZXJzZWN0aW5nO1xuXHRcdFx0XG5cdFx0XHRpZighdGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmluaXRpYWxSZWRyYXcgPSAhdGhpcy52aXNpYmxlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZih0aGlzLnZpc2libGUpe1xuXHRcdFx0XHRcdHRoaXMucmVkcmF3VGFibGUodGhpcy5pbml0aWFsUmVkcmF3KTtcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxSZWRyYXcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMudmlzaWJpbGl0eU9ic2VydmVyLm9ic2VydmUodGhpcy50YWJsZS5lbGVtZW50KTtcblx0fVxuXHRcblx0cmVkcmF3VGFibGUoZm9yY2Upe1xuXHRcdGlmKHRoaXMuaW5pdGlhbGl6ZWQgJiYgdGhpcy52aXNpYmxlKXtcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cdFx0XHR0aGlzLnRhYmxlLnJlZHJhdyhmb3JjZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHR0YWJsZVJlc2l6ZWQoKXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVkcmF3KCk7XG5cdH1cblx0XG5cdGNsZWFyQmluZGluZ3MoKXtcblx0XHRpZih0aGlzLmJpbmRpbmcpe1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5iaW5kaW5nKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5yZXNpemVPYnNlcnZlcil7XG5cdFx0XHR0aGlzLnJlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnRhYmxlLmVsZW1lbnQpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnZpc2liaWxpdHlPYnNlcnZlcil7XG5cdFx0XHR0aGlzLnZpc2liaWxpdHlPYnNlcnZlci51bm9ic2VydmUodGhpcy50YWJsZS5lbGVtZW50KTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5jb250YWluZXJPYnNlcnZlcil7XG5cdFx0XHR0aGlzLmNvbnRhaW5lck9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHJlc3BvbnNpdmVDb2xsYXBzZShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRjb25maWcgPSBjZWxsLmdldFJvdygpLl9yb3cubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0O1xuXG5cdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGVcIik7XG5cdFxuXHRlbC5pbm5lckhUTUwgPSBgPHN2ZyBjbGFzcz0ndGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLW9wZW4nIHZpZXdib3g9XCIwIDAgMjQgMjRcIj5cbiAgPGxpbmUgeDE9XCI3XCIgeTE9XCIxMlwiIHgyPVwiMTdcIiB5Mj1cIjEyXCIgZmlsbD1cIm5vbmVcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIC8+XG4gIDxsaW5lIHkxPVwiN1wiIHgxPVwiMTJcIiB5Mj1cIjE3XCIgeDI9XCIxMlwiIGZpbGw9XCJub25lXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiAvPlxuPC9zdmc+XG5cbjxzdmcgY2xhc3M9J3RhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1jbG9zZScgdmlld2JveD1cIjAgMCAyNCAyNFwiPlxuICA8bGluZSB4MT1cIjdcIiB5MT1cIjEyXCIgeDI9XCIxN1wiIHkyPVwiMTJcIiAgZmlsbD1cIm5vbmVcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIC8+XG48L3N2Zz5gO1xuXG5cdGNlbGwuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LWhhbmRsZVwiKTtcblxuXHRmdW5jdGlvbiB0b2dnbGVMaXN0KGlzT3Blbil7XG5cdFx0dmFyIGNvbGxhcHNlRWwgPSBjb25maWcuZWxlbWVudDtcblxuXHRcdGNvbmZpZy5vcGVuID0gaXNPcGVuO1xuXG5cdFx0aWYoY29sbGFwc2VFbCl7XG5cblx0XHRcdGlmKGNvbmZpZy5vcGVuKXtcblx0XHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XG5cdFx0XHRcdGNvbGxhcHNlRWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKFwib3BlblwiKTtcblx0XHRcdFx0Y29sbGFwc2VFbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdHRvZ2dsZUxpc3QoIWNvbmZpZy5vcGVuKTtcblx0XHRjZWxsLmdldFRhYmxlKCkucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblx0fSk7XG5cblx0dG9nZ2xlTGlzdChjb25maWcub3Blbik7XG5cblx0cmV0dXJuIGVsO1xufVxuXG52YXIgZXh0ZW5zaW9ucyQyID0ge1xyXG5cdGZvcm1hdDp7XHJcblx0XHRmb3JtYXR0ZXJzOntcclxuXHRcdFx0cmVzcG9uc2l2ZUNvbGxhcHNlOnJlc3BvbnNpdmVDb2xsYXBzZSxcclxuXHRcdH1cclxuXHR9XHJcbn07XG5cbmNsYXNzIFJlc3BvbnNpdmVMYXlvdXQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcInJlc3BvbnNpdmVMYXlvdXRcIjtcblx0c3RhdGljIG1vZHVsZUV4dGVuc2lvbnMgPSBleHRlbnNpb25zJDI7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuY29sdW1ucyA9IFtdO1xuXHRcdHRoaXMuaGlkZGVuQ29sdW1ucyA9IFtdO1xuXHRcdHRoaXMubW9kZSA9IFwiXCI7XG5cdFx0dGhpcy5pbmRleCA9IDA7XG5cdFx0dGhpcy5jb2xsYXBzZUZvcm1hdHRlciA9IFtdO1xuXHRcdHRoaXMuY29sbGFwc2VTdGFydE9wZW4gPSB0cnVlO1xuXHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4gPSBmYWxzZTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc3BvbnNpdmVMYXlvdXRcIiwgZmFsc2UpOyAvL3Jlc3BvbnNpdmUgbGF5b3V0IGZsYWdzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicmVzcG9uc2l2ZUxheW91dENvbGxhcHNlU3RhcnRPcGVuXCIsIHRydWUpOyAvL3N0YXJ0IHNob3dpbmcgY29sbGFwc2VkIGRhdGFcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VVc2VGb3JtYXR0ZXJzXCIsIHRydWUpOyAvL3Jlc3BvbnNpdmUgbGF5b3V0IGNvbGxhcHNlIGZvcm1hdHRlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc3BvbnNpdmVMYXlvdXRDb2xsYXBzZUZvcm1hdHRlclwiLCBmYWxzZSk7IC8vcmVzcG9uc2l2ZSBsYXlvdXQgY29sbGFwc2UgZm9ybWF0dGVyXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwicmVzcG9uc2l2ZVwiKTtcblx0fVxuXG5cdC8vZ2VuZXJhdGUgcmVzcG9uc2l2ZSBjb2x1bW5zIGxpc3Rcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1zaG93XCIsIHRoaXMudXBkYXRlQ29sdW1uVmlzaWJpbGl0eS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhpZGVcIiwgdGhpcy51cGRhdGVDb2x1bW5WaXNpYmlsaXR5LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW5zLWxvYWRlZFwiLCB0aGlzLmluaXRpYWxpemVSZXNwb25zaXZpdHkuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3ZlZFwiLCB0aGlzLmluaXRpYWxpemVSZXNwb25zaXZpdHkuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1hZGRcIiwgdGhpcy5pbml0aWFsaXplUmVzcG9uc2l2aXR5LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tZGVsZXRlXCIsIHRoaXMuaW5pdGlhbGl6ZVJlc3BvbnNpdml0eS5iaW5kKHRoaXMpKTtcblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdpbmdcIiwgdGhpcy50YWJsZVJlZHJhdy5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgPT09IFwiY29sbGFwc2VcIil7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtY2hhbmdlZFwiLCB0aGlzLmdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudC5iaW5kKHRoaXMpKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctaW5pdFwiLCB0aGlzLmluaXRpYWxpemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWxheW91dFwiLCB0aGlzLmxheW91dFJvdy5iaW5kKHRoaXMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR0YWJsZVJlZHJhdyhmb3JjZSl7XG5cdFx0aWYoW1wiZml0Q29sdW1uc1wiLCBcImZpdERhdGFTdHJldGNoXCJdLmluZGV4T2YodGhpcy5sYXlvdXRNb2RlKCkpID09PSAtMSl7XG5cdFx0XHRpZighZm9yY2Upe1xuXHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVSZXNwb25zaXZpdHkoKXtcblx0XHR2YXIgY29sdW1ucyA9IFtdO1xuXG5cdFx0dGhpcy5tb2RlID0gdGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQ7XG5cdFx0dGhpcy5jb2xsYXBzZUZvcm1hdHRlciA9IHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VGb3JtYXR0ZXIgfHwgdGhpcy5mb3JtYXRDb2xsYXBzZWREYXRhO1xuXHRcdHRoaXMuY29sbGFwc2VTdGFydE9wZW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dENvbGxhcHNlU3RhcnRPcGVuO1xuXHRcdHRoaXMuaGlkZGVuQ29sdW1ucyA9IFtdO1xuXG5cdFx0aWYodGhpcy5jb2xsYXBzZUZvcm1hdHRlcil7XG5cdFx0XHR0aGlzLmNvbGxhcHNlRm9ybWF0dGVyID0gdGhpcy5jb2xsYXBzZUZvcm1hdHRlci5iaW5kKHRoaXMudGFibGUpO1xuXHRcdH1cblxuXHRcdC8vZGV0ZXJtaW5lIGxldmVsIG9mIHJlc3BvbnNpdml0eSBmb3IgZWFjaCBjb2x1bW5cblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uLCBpKSA9PiB7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlKXtcblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMucmVzcG9uc2l2ZS5vcmRlciAmJiBjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlLnZpc2libGUpe1xuXHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUuaW5kZXggPSBpO1xuXHRcdFx0XHRcdGNvbHVtbnMucHVzaChjb2x1bW4pO1xuXG5cdFx0XHRcdFx0aWYoIWNvbHVtbi52aXNpYmxlICYmIHRoaXMubW9kZSA9PT0gXCJjb2xsYXBzZVwiKXtcblx0XHRcdFx0XHRcdHRoaXMuaGlkZGVuQ29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvL3NvcnQgbGlzdCBieSByZXNwb25zaXZpdHlcblx0XHRjb2x1bW5zID0gY29sdW1ucy5yZXZlcnNlKCk7XG5cdFx0Y29sdW1ucyA9IGNvbHVtbnMuc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0dmFyIGRpZmYgPSBiLm1vZHVsZXMucmVzcG9uc2l2ZS5vcmRlciAtIGEubW9kdWxlcy5yZXNwb25zaXZlLm9yZGVyO1xuXHRcdFx0cmV0dXJuIGRpZmYgfHwgKGIubW9kdWxlcy5yZXNwb25zaXZlLmluZGV4IC0gYS5tb2R1bGVzLnJlc3BvbnNpdmUuaW5kZXgpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5jb2x1bW5zID0gY29sdW1ucztcblxuXHRcdGlmKHRoaXMubW9kZSA9PT0gXCJjb2xsYXBzZVwiKXtcblx0XHRcdHRoaXMuZ2VuZXJhdGVDb2xsYXBzZWRDb250ZW50KCk7XG5cdFx0fVxuXG5cdFx0Ly9hc3NpZ24gY29sbGFwc2UgY29sdW1uXG5cdFx0Zm9yIChsZXQgY29sIG9mIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleCl7XG5cdFx0XHRpZihjb2wuZGVmaW5pdGlvbi5mb3JtYXR0ZXIgPT0gXCJyZXNwb25zaXZlQ29sbGFwc2VcIil7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4gPSBjb2w7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4pe1xuXHRcdFx0aWYodGhpcy5oaWRkZW5Db2x1bW5zLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4uc2hvdygpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlSGFuZGxlQ29sdW1uLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL2RlZmluZSBsYXlvdXQgaW5mb3JtYXRpb25cblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBkZWYgPSBjb2x1bW4uZ2V0RGVmaW5pdGlvbigpO1xuXG5cdFx0Y29sdW1uLm1vZHVsZXMucmVzcG9uc2l2ZSA9IHtvcmRlcjogdHlwZW9mIGRlZi5yZXNwb25zaXZlID09PSBcInVuZGVmaW5lZFwiID8gMSA6IGRlZi5yZXNwb25zaXZlLCB2aXNpYmxlOmRlZi52aXNpYmxlID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZX07XG5cdH1cblxuXHRpbml0aWFsaXplUm93KHJvdyl7XG5cdFx0dmFyIGVsO1xuXG5cdFx0aWYocm93LnR5cGUgIT09IFwiY2FsY1wiKXtcblx0XHRcdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZVwiKTtcblxuXHRcdFx0cm93Lm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dCA9IHtcblx0XHRcdFx0ZWxlbWVudDplbCxcblx0XHRcdFx0b3Blbjp0aGlzLmNvbGxhcHNlU3RhcnRPcGVuLFxuXHRcdFx0fTtcblxuXHRcdFx0aWYoIXRoaXMuY29sbGFwc2VTdGFydE9wZW4pe1xuXHRcdFx0XHRlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGxheW91dFJvdyhyb3cpe1xuXHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRpZihyb3cubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0KXtcblx0XHRcdHJvd0VsLmFwcGVuZENoaWxkKHJvdy5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQuZWxlbWVudCk7XG5cdFx0XHR0aGlzLmdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudChyb3cpO1xuXHRcdH1cblx0fVxuXG5cdC8vdXBkYXRlIGNvbHVtbiB2aXNpYmlsaXR5XG5cdHVwZGF0ZUNvbHVtblZpc2liaWxpdHkoY29sdW1uLCByZXNwb25zaXZlVG9nZ2xlKXtcblx0XHRpZighcmVzcG9uc2l2ZVRvZ2dsZSAmJiBjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUudmlzaWJsZSA9IGNvbHVtbi52aXNpYmxlO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplUmVzcG9uc2l2aXR5KCk7XG5cdFx0fVxuXHR9XG5cblx0aGlkZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBjb2xDb3VudCA9IHRoaXMuaGlkZGVuQ29sdW1ucy5sZW5ndGg7XG5cblx0XHRjb2x1bW4uaGlkZShmYWxzZSwgdHJ1ZSk7XG5cblx0XHRpZih0aGlzLm1vZGUgPT09IFwiY29sbGFwc2VcIil7XG5cdFx0XHR0aGlzLmhpZGRlbkNvbHVtbnMudW5zaGlmdChjb2x1bW4pO1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNvbGxhcHNlZENvbnRlbnQoKTtcblxuXHRcdFx0aWYodGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbiAmJiAhY29sQ291bnQpe1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlSGFuZGxlQ29sdW1uLnNob3coKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRzaG93Q29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGluZGV4O1xuXG5cdFx0Y29sdW1uLnNob3coZmFsc2UsIHRydWUpO1xuXHRcdC8vc2V0IGNvbHVtbiB3aWR0aCB0byBwcmV2ZW50IGNhbGN1bGF0aW9uIGxvb3BzIG9uIHVuaW5pdGlhbGl6ZWQgY29sdW1uc1xuXHRcdGNvbHVtbi5zZXRXaWR0aChjb2x1bW4uZ2V0V2lkdGgoKSk7XG5cblx0XHRpZih0aGlzLm1vZGUgPT09IFwiY29sbGFwc2VcIil7XG5cdFx0XHRpbmRleCA9IHRoaXMuaGlkZGVuQ29sdW1ucy5pbmRleE9mKGNvbHVtbik7XG5cblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHR0aGlzLmhpZGRlbkNvbHVtbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nZW5lcmF0ZUNvbGxhcHNlZENvbnRlbnQoKTtcblxuXHRcdFx0aWYodGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbiAmJiAhdGhpcy5oaWRkZW5Db2x1bW5zLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4uaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vcmVkcmF3IGNvbHVtbnMgdG8gZml0IHNwYWNlXG5cdHVwZGF0ZSgpe1xuXHRcdHZhciB3b3JraW5nID0gdHJ1ZTtcblxuXHRcdHdoaWxlKHdvcmtpbmcpe1xuXG5cdFx0XHRsZXQgd2lkdGggPSB0aGlzLnRhYmxlLm1vZHVsZXMubGF5b3V0LmdldE1vZGUoKSA9PSBcImZpdENvbHVtbnNcIiA/IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRGbGV4QmFzZVdpZHRoKCkgOiB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKTtcblxuXHRcdFx0bGV0IGRpZmYgPSAodGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclZpc2libGUgPyB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aCA6IHRoaXMudGFibGUuZWxlbWVudC5jbGllbnRXaWR0aCkgLSB3aWR0aDtcblxuXHRcdFx0aWYoZGlmZiA8IDApe1xuXHRcdFx0XHQvL3RhYmxlIGlzIHRvbyB3aWRlXG5cdFx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbdGhpcy5pbmRleF07XG5cblx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHR0aGlzLmhpZGVDb2x1bW4oY29sdW1uKTtcblx0XHRcdFx0XHR0aGlzLmluZGV4ICsrO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1lbHNlIHtcblxuXHRcdFx0XHQvL3RhYmxlIGhhcyBzcGFyZSBzcGFjZVxuXHRcdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMuaW5kZXggLTFdO1xuXG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0aWYoZGlmZiA+IDApe1xuXHRcdFx0XHRcdFx0aWYoZGlmZiA+PSBjb2x1bW4uZ2V0V2lkdGgoKSl7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd0NvbHVtbihjb2x1bW4pO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmluZGV4IC0tO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZighdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3NDb3VudCl7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZW5kZXJFbXB0eVNjcm9sbCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdlbmVyYXRlQ29sbGFwc2VkQ29udGVudCgpe1xuXHRcdHZhciByb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCk7XG5cblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNvbGxhcHNlZFJvd0NvbnRlbnQocm93KTtcblx0XHR9KTtcblx0fVxuXG5cdGdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudChyb3cpe1xuXHRcdHZhciBlbCwgY29udGVudHM7XG5cblx0XHRpZihyb3cubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0KXtcblx0XHRcdGVsID0gcm93Lm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC5lbGVtZW50O1xuXG5cdFx0XHR3aGlsZShlbC5maXJzdENoaWxkKSBlbC5yZW1vdmVDaGlsZChlbC5maXJzdENoaWxkKTtcblxuXHRcdFx0Y29udGVudHMgPSB0aGlzLmNvbGxhcHNlRm9ybWF0dGVyKHRoaXMuZ2VuZXJhdGVDb2xsYXBzZWRSb3dEYXRhKHJvdykpO1xuXHRcdFx0aWYoY29udGVudHMpe1xuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChjb250ZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyb3cuY2FsY0hlaWdodCh0cnVlKTtcblx0XHR9XG5cdH1cblxuXHRnZW5lcmF0ZUNvbGxhcHNlZFJvd0RhdGEocm93KXtcblx0XHR2YXIgZGF0YSA9IHJvdy5nZXREYXRhKCksXG5cdFx0b3V0cHV0ID0gW10sXG5cdFx0bW9ja0NlbGxDb21wb25lbnQ7XG5cblx0XHR0aGlzLmhpZGRlbkNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHR2YXIgdmFsdWUgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShkYXRhKTtcblxuXHRcdFx0aWYoY29sdW1uLmRlZmluaXRpb24udGl0bGUgJiYgY29sdW1uLmZpZWxkKXtcblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZm9ybWF0ICYmIHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VVc2VGb3JtYXR0ZXJzKXtcblxuXHRcdFx0XHRcdG1vY2tDZWxsQ29tcG9uZW50ID0ge1xuXHRcdFx0XHRcdFx0dmFsdWU6ZmFsc2UsXG5cdFx0XHRcdFx0XHRkYXRhOnt9LFxuXHRcdFx0XHRcdFx0Z2V0VmFsdWU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGdldERhdGE6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Z2V0VHlwZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJjZWxsXCI7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Z2V0RWxlbWVudDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXRSb3c6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJvdy5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXRDb2x1bW46ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXRUYWJsZTooKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnRhYmxlO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0ZnVuY3Rpb24gb25SZW5kZXJlZChjYWxsYmFjayl7XG5cdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHtcblx0XHRcdFx0XHRcdGZpZWxkOiBjb2x1bW4uZmllbGQsXG5cdFx0XHRcdFx0XHR0aXRsZTogY29sdW1uLmRlZmluaXRpb24udGl0bGUsXG5cdFx0XHRcdFx0XHR2YWx1ZTogY29sdW1uLm1vZHVsZXMuZm9ybWF0LmZvcm1hdHRlci5jYWxsKHRoaXMudGFibGUubW9kdWxlcy5mb3JtYXQsIG1vY2tDZWxsQ29tcG9uZW50LCBjb2x1bW4ubW9kdWxlcy5mb3JtYXQucGFyYW1zLCBvblJlbmRlcmVkKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goe1xuXHRcdFx0XHRcdFx0ZmllbGQ6IGNvbHVtbi5maWVsZCxcblx0XHRcdFx0XHRcdHRpdGxlOiBjb2x1bW4uZGVmaW5pdGlvbi50aXRsZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Zm9ybWF0Q29sbGFwc2VkRGF0YShkYXRhKXtcblx0XHR2YXIgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcblxuXHRcdGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0dmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcblx0XHRcdHZhciB0aXRsZURhdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG5cdFx0XHR2YXIgdmFsdWVEYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuXHRcdFx0dmFyIG5vZGVfY29udGVudDtcblxuXHRcdFx0dmFyIHRpdGxlSGlnaGxpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0cm9uZ1wiKTtcblx0XHRcdHRpdGxlRGF0YS5hcHBlbmRDaGlsZCh0aXRsZUhpZ2hsaWdodCk7XG5cdFx0XHRcblx0XHRcdHRoaXMubW9kdWxlcy5sb2NhbGl6ZS5iaW5kKFwiY29sdW1uc3xcIiArIGl0ZW0uZmllbGQsIGZ1bmN0aW9uKHRleHQpe1xuXHRcdFx0XHR0aXRsZUhpZ2hsaWdodC5pbm5lckhUTUwgPSB0ZXh0IHx8IGl0ZW0udGl0bGU7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYoaXRlbS52YWx1ZSBpbnN0YW5jZW9mIE5vZGUpe1xuXHRcdFx0XHRub2RlX2NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHRub2RlX2NvbnRlbnQuYXBwZW5kQ2hpbGQoaXRlbS52YWx1ZSk7XG5cdFx0XHRcdHZhbHVlRGF0YS5hcHBlbmRDaGlsZChub2RlX2NvbnRlbnQpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR2YWx1ZURhdGEuaW5uZXJIVE1MID0gaXRlbS52YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0cm93LmFwcGVuZENoaWxkKHRpdGxlRGF0YSk7XG5cdFx0XHRyb3cuYXBwZW5kQ2hpbGQodmFsdWVEYXRhKTtcblx0XHRcdGxpc3QuYXBwZW5kQ2hpbGQocm93KTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPyBsaXN0IDogXCJcIjtcblx0fVxufVxuXG5mdW5jdGlvbiByb3dTZWxlY3Rpb24oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHR2YXIgYmxvY2tlZCA9IGZhbHNlO1xuXG5cdGNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuXG5cdGNoZWNrYm94LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJTZWxlY3QgUm93XCIpO1xuXHRcblx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJzZWxlY3RSb3dcIiwgdHJ1ZSkpe1xuXG5cdFx0Y2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH0pO1xuXG5cdFx0aWYodHlwZW9mIGNlbGwuZ2V0Um93ID09ICdmdW5jdGlvbicpe1xuXHRcdFx0dmFyIHJvdyA9IGNlbGwuZ2V0Um93KCk7XG5cblx0XHRcdGlmKHJvdyBpbnN0YW5jZW9mIFJvd0NvbXBvbmVudCl7XG5cblx0XHRcdFx0Y2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuXHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm93c1JhbmdlTW9kZSA9PT0gXCJjbGlja1wiKXtcblx0XHRcdFx0XHRcdGlmKCFibG9ja2VkKXtcblx0XHRcdFx0XHRcdFx0cm93LnRvZ2dsZVNlbGVjdCgpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRibG9ja2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cm93LnRvZ2dsZVNlbGVjdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzUmFuZ2VNb2RlID09PSBcImNsaWNrXCIpe1xuXHRcdFx0XHRcdGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHRcdFx0YmxvY2tlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LmhhbmRsZUNvbXBsZXhSb3dDbGljayhyb3cuX3JvdywgZSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjaGVja2JveC5jaGVja2VkID0gcm93LmlzU2VsZWN0ZWQgJiYgcm93LmlzU2VsZWN0ZWQoKTtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLnNlbGVjdFJvdy5yZWdpc3RlclJvd1NlbGVjdENoZWNrYm94KHJvdywgY2hlY2tib3gpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjaGVja2JveCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LnNlbGVjdGVkUm93cy5sZW5ndGgpe1xuXHRcdFx0XHRcdHRoaXMudGFibGUuZGVzZWxlY3RSb3coKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMudGFibGUuc2VsZWN0Um93KGZvcm1hdHRlclBhcmFtcy5yb3dSYW5nZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LnJlZ2lzdGVySGVhZGVyU2VsZWN0Q2hlY2tib3goY2hlY2tib3gpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGVja2JveDtcbn1cblxudmFyIGV4dGVuc2lvbnMkMSA9IHtcclxuXHRmb3JtYXQ6e1xyXG5cdFx0Zm9ybWF0dGVyczp7XHJcblx0XHRcdHJvd1NlbGVjdGlvbjpyb3dTZWxlY3Rpb24sXHJcblx0XHR9XHJcblx0fVxyXG59O1xuXG5jbGFzcyBTZWxlY3RSb3cgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcInNlbGVjdFJvd1wiO1xuXHRzdGF0aWMgbW9kdWxlRXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMkMTtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5zZWxlY3RpbmcgPSBmYWxzZTsgLy9mbGFnIHNlbGVjdGluZyBpbiBwcm9ncmVzc1xuXHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSBmYWxzZTsgLy9sYXN0IGNsaWNrZWQgcm93XG5cdFx0dGhpcy5zZWxlY3RQcmV2ID0gW107IC8vaG9sZCBwcmV2aW91c2x5IHNlbGVjdGVkIGVsZW1lbnQgZm9yIGRyYWcgZHJvcCBzZWxlY3Rpb25cblx0XHR0aGlzLnNlbGVjdGVkUm93cyA9IFtdOyAvL2hvbGQgc2VsZWN0ZWQgcm93c1xuXHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50ID0gbnVsbDsgLy8gaG9sZCBoZWFkZXIgc2VsZWN0IGVsZW1lbnRcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzZWxlY3RhYmxlUm93c1wiLCBcImhpZ2hsaWdodFwiKTsgLy9oaWdobGlnaHQgcm93cyBvbiBob3ZlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSb3dzUmFuZ2VNb2RlXCIsIFwiZHJhZ1wiKTsgIC8vaGlnaGxpZ2h0IHJvd3Mgb24gaG92ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzZWxlY3RhYmxlUm93c1JvbGxpbmdTZWxlY3Rpb25cIiwgdHJ1ZSk7IC8vcm9sbCBzZWxlY3Rpb24gb25jZSBtYXhpbXVtIG51bWJlciBvZiBzZWxlY3RhYmxlIHJvd3MgaXMgcmVhY2hlZFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSb3dzUGVyc2lzdGVuY2VcIiwgdHJ1ZSk7IC8vIG1haW50YWluIHNlbGVjdGlvbiB3aGVuIHRhYmxlIHZpZXcgaXMgdXBkYXRlZFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSb3dzQ2hlY2tcIiwgZnVuY3Rpb24oZGF0YSwgcm93KXtyZXR1cm4gdHJ1ZTt9KTsgLy9jaGVjayB3aGV0aGVyIHJvdyBpcyBzZWxlY3RhYmxlXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZWxlY3RSb3dcIiwgdGhpcy5zZWxlY3RSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZGVzZWxlY3RSb3dcIiwgdGhpcy5kZXNlbGVjdFJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJ0b2dnbGVTZWxlY3RSb3dcIiwgdGhpcy50b2dnbGVSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRTZWxlY3RlZFJvd3NcIiwgdGhpcy5nZXRTZWxlY3RlZFJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRTZWxlY3RlZERhdGFcIiwgdGhpcy5nZXRTZWxlY3RlZERhdGEuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0Ly9yZWdpc3RlciBjb21wb25lbnQgZnVuY3Rpb25zXG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwic2VsZWN0XCIsIHRoaXMuc2VsZWN0Um93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJkZXNlbGVjdFwiLCB0aGlzLmRlc2VsZWN0Um93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ0b2dnbGVTZWxlY3RcIiwgdGhpcy50b2dnbGVSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiaXNTZWxlY3RlZFwiLCB0aGlzLmlzUm93U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblxuXHRcdHRoaXMuZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzID09PSBcImhpZ2hsaWdodFwiICYmIHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUmFuZ2Upe1xuXHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzICE9PSBmYWxzZSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0aW5nXCIsIHRoaXMucm93RGVsZXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy13aXBlXCIsIHRoaXMuY2xlYXJTZWxlY3Rpb25EYXRhLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXJldHJpZXZlXCIsIHRoaXMucm93UmV0cmlldmUuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm93cyAmJiAhdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzUGVyc2lzdGVuY2Upe1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcmVmcmVzaGluZ1wiLCB0aGlzLmRlc2VsZWN0Um93cy5iaW5kKHRoaXMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRkZXByZWNhdGVkT3B0aW9uc0NoZWNrKCl7XG5cdFx0Ly8gdGhpcy5kZXByZWNhdGlvbkNoZWNrKFwic2VsZWN0YWJsZVwiLCBcInNlbGVjdGFibGVSb3dzXCIsIHRydWUpO1xuXHRcdC8vIHRoaXMuZGVwcmVjYXRpb25DaGVjayhcInNlbGVjdGFibGVSb2xsaW5nU2VsZWN0aW9uXCIsIFwic2VsZWN0YWJsZVJvd3NSb2xsaW5nU2VsZWN0aW9uXCIsIHRydWUpO1xuXHRcdC8vIHRoaXMuZGVwcmVjYXRpb25DaGVjayhcInNlbGVjdGFibGVSYW5nZU1vZGVcIiwgXCJzZWxlY3RhYmxlUm93c1JhbmdlTW9kZVwiLCB0cnVlKTtcblx0XHQvLyB0aGlzLmRlcHJlY2F0aW9uQ2hlY2soXCJzZWxlY3RhYmxlUGVyc2lzdGVuY2VcIiwgXCJzZWxlY3RhYmxlUm93c1BlcnNpc3RlbmNlXCIsIHRydWUpO1xuXHRcdC8vIHRoaXMuZGVwcmVjYXRpb25DaGVjayhcInNlbGVjdGFibGVDaGVja1wiLCBcInNlbGVjdGFibGVSb3dzQ2hlY2tcIiwgdHJ1ZSk7XG5cdH1cblx0XG5cdHJvd1JldHJpZXZlKHR5cGUsIHByZXZWYWx1ZSl7XG5cdFx0cmV0dXJuIHR5cGUgPT09IFwic2VsZWN0ZWRcIiA/IHRoaXMuc2VsZWN0ZWRSb3dzIDogcHJldlZhbHVlO1xuXHR9XG5cdFxuXHRyb3dEZWxldGVkKHJvdyl7XG5cdFx0dGhpcy5fZGVzZWxlY3RSb3cocm93LCB0cnVlKTtcblx0fVxuXHRcblx0Y2xlYXJTZWxlY3Rpb25EYXRhKHNpbGVudCl7XG5cdFx0dmFyIHByZXZTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aDtcblxuXHRcdHRoaXMuc2VsZWN0aW5nID0gZmFsc2U7XG5cdFx0dGhpcy5sYXN0Q2xpY2tlZFJvdyA9IGZhbHNlO1xuXHRcdHRoaXMuc2VsZWN0UHJldiA9IFtdO1xuXHRcdHRoaXMuc2VsZWN0ZWRSb3dzID0gW107XG5cdFx0XG5cdFx0aWYocHJldlNlbGVjdGVkICYmIHNpbGVudCAhPT0gdHJ1ZSl7XG5cdFx0XHR0aGlzLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplUm93KHJvdyl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHNlbGVjdGFibGUgPSBzZWxmLmNoZWNrUm93U2VsZWN0YWJpbGl0eShyb3cpLFxuXHRcdGVsZW1lbnQgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdC8vIHRyaWdnZXIgZW5kIG9mIHJvdyBzZWxlY3Rpb25cblx0XHR2YXIgZW5kU2VsZWN0ID0gZnVuY3Rpb24oKXtcblx0XHRcdFxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRzZWxmLnNlbGVjdGluZyA9IGZhbHNlO1xuXHRcdFx0fSwgNTApO1xuXHRcdFx0XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGVuZFNlbGVjdCk7XG5cdFx0fTtcblx0XHRcblx0XHRyb3cubW9kdWxlcy5zZWxlY3QgPSB7c2VsZWN0ZWQ6ZmFsc2V9O1xuXG5cdFx0ZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwidGFidWxhdG9yLXNlbGVjdGFibGVcIiwgc2VsZWN0YWJsZSk7XG5cdFx0ZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwidGFidWxhdG9yLXVuc2VsZWN0YWJsZVwiLCAhc2VsZWN0YWJsZSk7XG5cdFx0XG5cdFx0Ly9zZXQgcm93IHNlbGVjdGlvbiBjbGFzc1xuXHRcdGlmKHNlbGYuY2hlY2tSb3dTZWxlY3RhYmlsaXR5KHJvdykpe1x0XHRcdFxuXHRcdFx0aWYoc2VsZi50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzICYmIHNlbGYudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm93cyAhPSBcImhpZ2hsaWdodFwiKXtcblx0XHRcdFx0aWYoc2VsZi50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzUmFuZ2VNb2RlID09PSBcImNsaWNrXCIpe1xuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQ29tcGxleFJvd0NsaWNrLmJpbmQodGhpcywgcm93KSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdGlmKCFzZWxmLnRhYmxlLm1vZEV4aXN0cyhcImVkaXRcIikgfHwgIXNlbGYudGFibGUubW9kdWxlcy5lZGl0LmdldEN1cnJlbnRDZWxsKCkpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLl9jbGVhclNlbGVjdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZighc2VsZi5zZWxlY3Rpbmcpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRvZ2dsZVJvdyhyb3cpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdGlmKGUuc2hpZnRLZXkpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLl9jbGVhclNlbGVjdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0c2VsZi5zZWxlY3RpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0c2VsZi5zZWxlY3RQcmV2ID0gW107XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGVuZFNlbGVjdCk7XG5cdFx0XHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGVuZFNlbGVjdCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRzZWxmLnRvZ2dsZVJvdyhyb3cpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0XHRpZihzZWxmLnNlbGVjdGluZyl7XG5cdFx0XHRcdFx0XHRcdHNlbGYudGFibGUuX2NsZWFyU2VsZWN0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHNlbGYudG9nZ2xlUm93KHJvdyk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZihzZWxmLnNlbGVjdFByZXZbMV0gPT0gcm93KXtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnRvZ2dsZVJvdyhzZWxmLnNlbGVjdFByZXZbMF0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0XHRpZihzZWxmLnNlbGVjdGluZyl7XG5cdFx0XHRcdFx0XHRcdHNlbGYudGFibGUuX2NsZWFyU2VsZWN0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHNlbGYuc2VsZWN0UHJldi51bnNoaWZ0KHJvdyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGhhbmRsZUNvbXBsZXhSb3dDbGljayhyb3csIGUpe1xuXHRcdGlmKGUuc2hpZnRLZXkpe1xuXHRcdFx0dGhpcy50YWJsZS5fY2xlYXJTZWxlY3Rpb24oKTtcblx0XHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSB0aGlzLmxhc3RDbGlja2VkUm93IHx8IHJvdztcblx0XHRcdFxuXHRcdFx0dmFyIGxhc3RDbGlja2VkUm93SWR4ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dJbmRleCh0aGlzLmxhc3RDbGlja2VkUm93KTtcblx0XHRcdHZhciByb3dJZHggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd0luZGV4KHJvdyk7XG5cdFx0XHRcblx0XHRcdHZhciBmcm9tUm93SWR4ID0gbGFzdENsaWNrZWRSb3dJZHggPD0gcm93SWR4ID8gbGFzdENsaWNrZWRSb3dJZHggOiByb3dJZHg7XG5cdFx0XHR2YXIgdG9Sb3dJZHggPSBsYXN0Q2xpY2tlZFJvd0lkeCA+PSByb3dJZHggPyBsYXN0Q2xpY2tlZFJvd0lkeCA6IHJvd0lkeDtcblx0XHRcdFxuXHRcdFx0dmFyIHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5zbGljZSgwKTtcblx0XHRcdHZhciB0b2dnbGVkUm93cyA9IHJvd3Muc3BsaWNlKGZyb21Sb3dJZHgsIHRvUm93SWR4IC0gZnJvbVJvd0lkeCArIDEpO1xuXHRcdFx0XG5cdFx0XHRpZihlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KXtcblx0XHRcdFx0dG9nZ2xlZFJvd3MuZm9yRWFjaCgodG9nZ2xlZFJvdyk9Pntcblx0XHRcdFx0XHRpZih0b2dnbGVkUm93ICE9PSB0aGlzLmxhc3RDbGlja2VkUm93KXtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzICE9PSB0cnVlICYmICF0aGlzLmlzUm93U2VsZWN0ZWQocm93KSl7XG5cdFx0XHRcdFx0XHRcdGlmKHRoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aCA8IHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm93cyl7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy50b2dnbGVSb3codG9nZ2xlZFJvdyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50b2dnbGVSb3codG9nZ2xlZFJvdyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0dGhpcy5sYXN0Q2xpY2tlZFJvdyA9IHJvdztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5kZXNlbGVjdFJvd3ModW5kZWZpbmVkLCB0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm93cyAhPT0gdHJ1ZSl7XG5cdFx0XHRcdFx0aWYodG9nZ2xlZFJvd3MubGVuZ3RoID4gdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzKXtcblx0XHRcdFx0XHRcdHRvZ2dsZWRSb3dzID0gdG9nZ2xlZFJvd3Muc2xpY2UoMCwgdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuc2VsZWN0Um93cyh0b2dnbGVkUm93cyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnRhYmxlLl9jbGVhclNlbGVjdGlvbigpO1xuXHRcdH1cblx0XHRlbHNlIGlmKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpe1xuXHRcdFx0dGhpcy50b2dnbGVSb3cocm93KTtcblx0XHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSByb3c7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5kZXNlbGVjdFJvd3ModW5kZWZpbmVkLCB0cnVlKTtcblx0XHRcdHRoaXMuc2VsZWN0Um93cyhyb3cpO1xuXHRcdFx0dGhpcy5sYXN0Q2xpY2tlZFJvdyA9IHJvdztcblx0XHR9XG5cdH1cblxuXHRjaGVja1Jvd1NlbGVjdGFiaWxpdHkocm93KXtcblx0XHRpZihyb3cgJiYgcm93LnR5cGUgPT09IFwicm93XCIpe1xuXHRcdFx0cmV0dXJuIHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm93c0NoZWNrLmNhbGwodGhpcy50YWJsZSwgcm93LmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdC8vdG9nZ2xlIHJvdyBzZWxlY3Rpb25cblx0dG9nZ2xlUm93KHJvdyl7XG5cdFx0aWYodGhpcy5jaGVja1Jvd1NlbGVjdGFiaWxpdHkocm93KSl7XG5cdFx0XHRpZihyb3cubW9kdWxlcy5zZWxlY3QgJiYgcm93Lm1vZHVsZXMuc2VsZWN0LnNlbGVjdGVkKXtcblx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3cocm93KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5fc2VsZWN0Um93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3NlbGVjdCBhIG51bWJlciBvZiByb3dzXG5cdHNlbGVjdFJvd3Mocm93cyl7XG5cdFx0dmFyIGNoYW5nZXMgPSBbXSwgXG5cdFx0cm93TWF0Y2gsIGNoYW5nZTtcblx0XHRcblx0XHRzd2l0Y2godHlwZW9mIHJvd3Mpe1xuXHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5yb3dzO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5maW5kUm93KHJvd3MpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdHJvd01hdGNoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3cocm93cyk7XG5cdFx0XHRcblx0XHRcdFx0aWYoIXJvd01hdGNoKXtcblx0XHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKHJvd3MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyb3dNYXRjaCA9IHJvd3M7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGlmKEFycmF5LmlzQXJyYXkocm93TWF0Y2gpKXtcblx0XHRcdGlmKHJvd01hdGNoLmxlbmd0aCl7XG5cdFx0XHRcdHJvd01hdGNoLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdGNoYW5nZSA9IHRoaXMuX3NlbGVjdFJvdyhyb3csIHRydWUsIHRydWUpO1xuXG5cdFx0XHRcdFx0aWYoY2hhbmdlKXtcblx0XHRcdFx0XHRcdGNoYW5nZXMucHVzaChjaGFuZ2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy5fcm93U2VsZWN0aW9uQ2hhbmdlZChmYWxzZSwgY2hhbmdlcyk7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYocm93TWF0Y2gpe1xuXHRcdFx0XHR0aGlzLl9zZWxlY3RSb3cocm93TWF0Y2gsIGZhbHNlLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9XHRcblx0fVxuXHRcblx0Ly9zZWxlY3QgYW4gaW5kaXZpZHVhbCByb3dcblx0X3NlbGVjdFJvdyhyb3dJbmZvLCBzaWxlbnQsIGZvcmNlKXtcblx0XHQvL2hhbmRsZSBtYXggcm93IGNvdW50XG5cdFx0aWYoIWlzTmFOKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm93cykgJiYgdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzICE9PSB0cnVlICYmICFmb3JjZSl7XG5cdFx0XHRpZih0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGggPj0gdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzKXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSb3dzUm9sbGluZ1NlbGVjdGlvbil7XG5cdFx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3codGhpcy5zZWxlY3RlZFJvd3NbMF0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHZhciByb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZmluZFJvdyhyb3dJbmZvKTtcblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0aWYodGhpcy5zZWxlY3RlZFJvd3MuaW5kZXhPZihyb3cpID09IC0xKXtcblx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXNlbGVjdGVkXCIpO1xuXHRcdFx0XHRpZighcm93Lm1vZHVsZXMuc2VsZWN0KXtcblx0XHRcdFx0XHRyb3cubW9kdWxlcy5zZWxlY3QgPSB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cm93Lm1vZHVsZXMuc2VsZWN0LnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0aWYocm93Lm1vZHVsZXMuc2VsZWN0LmNoZWNrYm94RWwpe1xuXHRcdFx0XHRcdHJvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsLmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnNlbGVjdGVkUm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWVTZWxlY3RQcm9wYWdhdGUpe1xuXHRcdFx0XHRcdHRoaXMuY2hpbGRSb3dTZWxlY3Rpb24ocm93LCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93U2VsZWN0ZWRcIiwgcm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuX3Jvd1NlbGVjdGlvbkNoYW5nZWQoc2lsZW50LCByb3cpO1xuXG5cdFx0XHRcdHJldHVybiByb3c7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlNlbGVjdGlvbiBFcnJvciAtIE5vIHN1Y2ggcm93IGZvdW5kLCBpZ25vcmluZyBzZWxlY3Rpb246XCIgKyByb3dJbmZvKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGlzUm93U2VsZWN0ZWQocm93KXtcblx0XHRyZXR1cm4gdGhpcy5zZWxlY3RlZFJvd3MuaW5kZXhPZihyb3cpICE9PSAtMTtcblx0fVxuXHRcblx0Ly9kZXNlbGVjdCBhIG51bWJlciBvZiByb3dzXG5cdGRlc2VsZWN0Um93cyhyb3dzLCBzaWxlbnQpe1xuXHRcdHZhciBjaGFuZ2VzID0gW10sIFxuXHRcdHJvd01hdGNoLCBjaGFuZ2U7XG5cdFx0XG5cdFx0c3dpdGNoKHR5cGVvZiByb3dzKXtcblx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0cm93TWF0Y2ggPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLnNlbGVjdGVkUm93cyk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwibnVtYmVyXCI6XG5cdFx0XHRcdHJvd01hdGNoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3cocm93cyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdHJvd01hdGNoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3cocm93cyk7XG5cdFx0XHRcblx0XHRcdFx0aWYoIXJvd01hdGNoKXtcblx0XHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKHJvd3MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyb3dNYXRjaCA9IHJvd3M7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGlmKEFycmF5LmlzQXJyYXkocm93TWF0Y2gpKXtcblx0XHRcdGlmKHJvd01hdGNoLmxlbmd0aCl7XG5cdFx0XHRcdHJvd01hdGNoLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdGNoYW5nZSA9IHRoaXMuX2Rlc2VsZWN0Um93KHJvdywgdHJ1ZSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHRpZihjaGFuZ2Upe1xuXHRcdFx0XHRcdFx0Y2hhbmdlcy5wdXNoKGNoYW5nZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKHNpbGVudCwgW10sIGNoYW5nZXMpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHJvd01hdGNoKXtcblx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3cocm93TWF0Y2gsIHNpbGVudCwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVx0XG5cdH1cblx0XG5cdC8vZGVzZWxlY3QgYW4gaW5kaXZpZHVhbCByb3dcblx0X2Rlc2VsZWN0Um93KHJvd0luZm8sIHNpbGVudCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHJvdyA9IHNlbGYudGFibGUucm93TWFuYWdlci5maW5kUm93KHJvd0luZm8pLFxuXHRcdGluZGV4LCBlbGVtZW50O1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRpbmRleCA9IHNlbGYuc2VsZWN0ZWRSb3dzLmZpbmRJbmRleChmdW5jdGlvbihzZWxlY3RlZFJvdyl7XG5cdFx0XHRcdHJldHVybiBzZWxlY3RlZFJvdyA9PSByb3c7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cblx0XHRcdFx0ZWxlbWVudCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihlbGVtZW50KXtcblx0XHRcdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3Itc2VsZWN0ZWRcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFyb3cubW9kdWxlcy5zZWxlY3Qpe1xuXHRcdFx0XHRcdHJvdy5tb2R1bGVzLnNlbGVjdCA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3cubW9kdWxlcy5zZWxlY3Quc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocm93Lm1vZHVsZXMuc2VsZWN0LmNoZWNrYm94RWwpe1xuXHRcdFx0XHRcdHJvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsLmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnNlbGVjdGVkUm93cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlU2VsZWN0UHJvcGFnYXRlKXtcblx0XHRcdFx0XHR0aGlzLmNoaWxkUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dEZXNlbGVjdGVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRzZWxmLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKHNpbGVudCwgdW5kZWZpbmVkLCByb3cpO1xuXG5cdFx0XHRcdHJldHVybiByb3c7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRlc2VsZWN0aW9uIEVycm9yIC0gTm8gc3VjaCByb3cgZm91bmQsIGlnbm9yaW5nIHNlbGVjdGlvbjpcIiArIHJvd0luZm8pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Z2V0U2VsZWN0ZWREYXRhKCl7XG5cdFx0dmFyIGRhdGEgPSBbXTtcblx0XHRcblx0XHR0aGlzLnNlbGVjdGVkUm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRkYXRhLnB1c2gocm93LmdldERhdGEoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblx0XG5cdGdldFNlbGVjdGVkUm93cygpe1xuXHRcdHZhciByb3dzID0gW107XG5cdFx0XG5cdFx0dGhpcy5zZWxlY3RlZFJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93cy5wdXNoKHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblx0XG5cdF9yb3dTZWxlY3Rpb25DaGFuZ2VkKHNpbGVudCwgc2VsZWN0ZWQgPSBbXSwgZGVzZWxlY3RlZCA9IFtdKXtcblx0XHRpZih0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudCl7XG5cdFx0XHRpZih0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGggPT09IDApe1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cy5sZW5ndGggPT09IHRoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50LmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5oZWFkZXJDaGVja2JveEVsZW1lbnQuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZighc2lsZW50KXtcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KHNlbGVjdGVkKSl7XG5cdFx0XHRcdHNlbGVjdGVkID0gW3NlbGVjdGVkXTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0ZWQgPSBzZWxlY3RlZC5tYXAocm93ID0+IHJvdy5nZXRDb21wb25lbnQoKSk7XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGRlc2VsZWN0ZWQpKXtcblx0XHRcdFx0ZGVzZWxlY3RlZCA9IFtkZXNlbGVjdGVkXTtcblx0XHRcdH1cblxuXHRcdFx0ZGVzZWxlY3RlZCA9IGRlc2VsZWN0ZWQubWFwKHJvdyA9PiByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dTZWxlY3Rpb25DaGFuZ2VkXCIsIHRoaXMuZ2V0U2VsZWN0ZWREYXRhKCksIHRoaXMuZ2V0U2VsZWN0ZWRSb3dzKCksIHNlbGVjdGVkLCBkZXNlbGVjdGVkKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlZ2lzdGVyUm93U2VsZWN0Q2hlY2tib3ggKHJvdywgZWxlbWVudCkge1xuXHRcdGlmKCFyb3cuX3Jvdy5tb2R1bGVzLnNlbGVjdCl7XG5cdFx0XHRyb3cuX3Jvdy5tb2R1bGVzLnNlbGVjdCA9IHt9O1xuXHRcdH1cblx0XHRcblx0XHRyb3cuX3Jvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsID0gZWxlbWVudDtcblx0fVxuXHRcblx0cmVnaXN0ZXJIZWFkZXJTZWxlY3RDaGVja2JveCAoZWxlbWVudCkge1xuXHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50ID0gZWxlbWVudDtcblx0fVxuXHRcblx0Y2hpbGRSb3dTZWxlY3Rpb24ocm93LCBzZWxlY3Qpe1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMudGFibGUubW9kdWxlcy5kYXRhVHJlZS5nZXRDaGlsZHJlbihyb3csIHRydWUsIHRydWUpO1xuXHRcdFxuXHRcdGlmKHNlbGVjdCl7XG5cdFx0XHRmb3IobGV0IGNoaWxkIG9mIGNoaWxkcmVuKXtcblx0XHRcdFx0dGhpcy5fc2VsZWN0Um93KGNoaWxkLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRmb3IobGV0IGNoaWxkIG9mIGNoaWxkcmVuKXtcblx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3coY2hpbGQsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBSYW5nZUNvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yKHJhbmdlKSB7XG5cdFx0dGhpcy5fcmFuZ2UgPSByYW5nZTtcblxuXHRcdHJldHVybiBuZXcgUHJveHkodGhpcywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5fcmFuZ2UudGFibGUuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIuaGFuZGxlKFwicmFuZ2VcIiwgdGFyZ2V0Ll9yYW5nZSwgbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0fSk7XG5cdH1cblxuXHRnZXRFbGVtZW50KCkge1xuXHRcdHJldHVybiB0aGlzLl9yYW5nZS5lbGVtZW50O1xuXHR9XG5cblx0Z2V0RGF0YSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fcmFuZ2UuZ2V0RGF0YSgpO1xuXHR9XG5cblx0Z2V0Q2VsbHMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3JhbmdlLmdldENlbGxzKHRydWUsIHRydWUpO1xuXHR9XG5cblx0Z2V0U3RydWN0dXJlZENlbGxzKCkge1xuXHRcdHJldHVybiB0aGlzLl9yYW5nZS5nZXRTdHJ1Y3R1cmVkQ2VsbHMoKTtcblx0fVxuXG5cdGdldFJvd3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3JhbmdlLmdldFJvd3MoKS5tYXAoKHJvdykgPT4gcm93LmdldENvbXBvbmVudCgpKTtcblx0fVxuXG5cdGdldENvbHVtbnMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3JhbmdlLmdldENvbHVtbnMoKS5tYXAoKGNvbHVtbikgPT4gY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0fVxuXHRcblx0Z2V0Qm91bmRzKCkge1xuXHRcdHJldHVybiB0aGlzLl9yYW5nZS5nZXRCb3VuZHMoKTtcblx0fVxuXG5cdGdldFRvcEVkZ2UoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3JhbmdlLnRvcDtcblx0fVxuXG5cdGdldEJvdHRvbUVkZ2UoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3JhbmdlLmJvdHRvbTtcblx0fVxuXG5cdGdldExlZnRFZGdlKCkge1xuXHRcdHJldHVybiB0aGlzLl9yYW5nZS5sZWZ0O1xuXHR9XG5cblx0Z2V0UmlnaHRFZGdlKCkge1xuXHRcdHJldHVybiB0aGlzLl9yYW5nZS5yaWdodDtcblx0fVxuXG5cdHNldEJvdW5kcyhzdGFydCwgZW5kKXtcblx0XHRpZih0aGlzLl9yYW5nZS5kZXN0cm95ZWRHdWFyZChcInNldEJvdW5kc1wiKSl7XG5cdFx0XHR0aGlzLl9yYW5nZS5zZXRCb3VuZHMoc3RhcnQgPyBzdGFydC5fY2VsbCA6IHN0YXJ0LCBlbmQgPyBlbmQuX2NlbGwgOiBlbmQpO1xuXHRcdH1cblx0fVxuXG5cdHNldFN0YXJ0Qm91bmQoc3RhcnQpe1xuXHRcdGlmKHRoaXMuX3JhbmdlLmRlc3Ryb3llZEd1YXJkKFwic2V0U3RhcnRCb3VuZFwiKSl7XG5cdFx0XHR0aGlzLl9yYW5nZS5zZXRFbmRCb3VuZChzdGFydCA/IHN0YXJ0Ll9jZWxsIDogc3RhcnQpO1xuXHRcdFx0dGhpcy5fcmFuZ2UucmFuZ2VNYW5hZ2VyLmxheW91dEVsZW1lbnQoKTtcblx0XHR9XG5cdH1cblxuXHRzZXRFbmRCb3VuZChlbmQpe1xuXHRcdGlmKHRoaXMuX3JhbmdlLmRlc3Ryb3llZEd1YXJkKFwic2V0RW5kQm91bmRcIikpe1xuXHRcdFx0dGhpcy5fcmFuZ2Uuc2V0RW5kQm91bmQoZW5kID8gZW5kLl9jZWxsIDogZW5kKTtcblx0XHRcdHRoaXMuX3JhbmdlLnJhbmdlTWFuYWdlci5sYXlvdXRFbGVtZW50KCk7XG5cdFx0fVxuXHR9XG5cblx0Y2xlYXJWYWx1ZXMoKXtcblx0XHRpZih0aGlzLl9yYW5nZS5kZXN0cm95ZWRHdWFyZChcImNsZWFyVmFsdWVzXCIpKXtcblx0XHRcdHRoaXMuX3JhbmdlLmNsZWFyVmFsdWVzKCk7XG5cdFx0fVxuXHR9XG5cblx0cmVtb3ZlKCl7XG5cdFx0aWYodGhpcy5fcmFuZ2UuZGVzdHJveWVkR3VhcmQoXCJyZW1vdmVcIikpe1xuXHRcdFx0dGhpcy5fcmFuZ2UuZGVzdHJveSh0cnVlKTtcblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgUmFuZ2UgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IodGFibGUsIHJhbmdlTWFuYWdlciwgc3RhcnQsIGVuZCkge1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnJhbmdlTWFuYWdlciA9IHJhbmdlTWFuYWdlcjtcblx0XHR0aGlzLmVsZW1lbnQgPSBudWxsO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmluaXRpYWxpemluZyA9IHtcblx0XHRcdHN0YXJ0OmZhbHNlLFxuXHRcdFx0ZW5kOmZhbHNlLFxuXHRcdH07XG5cdFx0dGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnRvcCA9IDA7XG5cdFx0dGhpcy5ib3R0b20gPSAwO1xuXHRcdHRoaXMubGVmdCA9IDA7XG5cdFx0dGhpcy5yaWdodCA9IDA7XG5cdFx0XG5cdFx0dGhpcy50YWJsZSA9IHRhYmxlO1xuXHRcdHRoaXMuc3RhcnQgPSB7cm93OjAsIGNvbDowfTtcblx0XHR0aGlzLmVuZCA9IHtyb3c6MCwgY29sOjB9O1xuXG5cdFx0aWYodGhpcy5yYW5nZU1hbmFnZXIucm93SGVhZGVyKXtcblx0XHRcdHRoaXMubGVmdCA9IDE7XG5cdFx0XHR0aGlzLnJpZ2h0ID0gMTtcblx0XHRcdHRoaXMuc3RhcnQuY29sID0gMTtcblx0XHRcdHRoaXMuZW5kLmNvbCA9IDE7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuaW5pdEVsZW1lbnQoKTtcblx0XHRcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMuaW5pdEJvdW5kcyhzdGFydCwgZW5kKTtcblx0XHR9KTtcblx0fVxuXHRcblx0aW5pdEVsZW1lbnQoKXtcblx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJhbmdlXCIpO1xuXHR9XG5cdFxuXHRpbml0Qm91bmRzKHN0YXJ0LCBlbmQpe1xuXHRcdHRoaXMuX3VwZGF0ZU1pbk1heCgpO1xuXHRcdFxuXHRcdGlmKHN0YXJ0KXtcblx0XHRcdHRoaXMuc2V0Qm91bmRzKHN0YXJ0LCBlbmQgfHwgc3RhcnQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyAgIEJvdW5kYXJ5IFNldHVwICAgIC8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHNldFN0YXJ0KHJvdywgY29sKSB7XG5cdFx0aWYodGhpcy5zdGFydC5yb3cgIT09IHJvdyB8fCB0aGlzLnN0YXJ0LmNvbCAhPT0gY29sKXtcblx0XHRcdHRoaXMuc3RhcnQucm93ID0gcm93O1xuXHRcdFx0dGhpcy5zdGFydC5jb2wgPSBjb2w7XG5cdFx0XHRcblx0XHRcdHRoaXMuaW5pdGlhbGl6aW5nLnN0YXJ0ID0gdHJ1ZTtcblx0XHRcdHRoaXMuX3VwZGF0ZU1pbk1heCgpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0RW5kKHJvdywgY29sKSB7XG5cdFx0aWYodGhpcy5lbmQucm93ICE9PSByb3cgfHwgdGhpcy5lbmQuY29sICE9PSBjb2wpe1xuXHRcdFx0dGhpcy5lbmQucm93ID0gcm93O1xuXHRcdFx0dGhpcy5lbmQuY29sID0gY29sO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemluZy5lbmQgPSB0cnVlO1xuXHRcdFx0dGhpcy5fdXBkYXRlTWluTWF4KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRzZXRCb3VuZHMoc3RhcnQsIGVuZCwgdmlzaWJsZVJvd3Mpe1xuXHRcdGlmKHN0YXJ0KXtcblx0XHRcdHRoaXMuc2V0U3RhcnRCb3VuZChzdGFydCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuc2V0RW5kQm91bmQoZW5kIHx8IHN0YXJ0KTtcblx0XHR0aGlzLnJhbmdlTWFuYWdlci5sYXlvdXRFbGVtZW50KHZpc2libGVSb3dzKTtcblx0fVxuXHRcblx0c2V0U3RhcnRCb3VuZChlbGVtZW50KXtcblx0XHR2YXIgcm93LCBjb2w7XG5cdFx0XG5cdFx0aWYgKGVsZW1lbnQudHlwZSA9PT0gXCJjb2x1bW5cIikge1xuXHRcdFx0aWYodGhpcy5yYW5nZU1hbmFnZXIuY29sdW1uU2VsZWN0aW9uKXtcblx0XHRcdFx0dGhpcy5zZXRTdGFydCgwLCBlbGVtZW50LmdldFBvc2l0aW9uKCkgLSAxKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRyb3cgPSBlbGVtZW50LnJvdy5wb3NpdGlvbiAtIDE7XG5cdFx0XHRjb2wgPSBlbGVtZW50LmNvbHVtbi5nZXRQb3NpdGlvbigpIC0gMTtcblx0XHRcdFxuXHRcdFx0aWYgKGVsZW1lbnQuY29sdW1uID09PSB0aGlzLnJhbmdlTWFuYWdlci5yb3dIZWFkZXIpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGFydChyb3csIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zZXRTdGFydChyb3csIGNvbCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRzZXRFbmRCb3VuZChlbGVtZW50KXtcblx0XHR2YXIgcm93c0NvdW50ID0gdGhpcy5fZ2V0VGFibGVSb3dzKCkubGVuZ3RoLFxuXHRcdHJvdywgY29sLCBpc1Jvd0hlYWRlcjtcblx0XHRcblx0XHRpZiAoZWxlbWVudC50eXBlID09PSBcImNvbHVtblwiKSB7XG5cdFx0XHRpZih0aGlzLnJhbmdlTWFuYWdlci5jb2x1bW5TZWxlY3Rpb24pe1xuXHRcdFx0XHRpZiAodGhpcy5yYW5nZU1hbmFnZXIuc2VsZWN0aW5nID09PSBcImNvbHVtblwiKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRFbmQocm93c0NvdW50IC0gMSwgZWxlbWVudC5nZXRQb3NpdGlvbigpIC0gMSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5yYW5nZU1hbmFnZXIuc2VsZWN0aW5nID09PSBcImNlbGxcIikge1xuXHRcdFx0XHRcdHRoaXMuc2V0RW5kKDAsIGVsZW1lbnQuZ2V0UG9zaXRpb24oKSAtIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0cm93ID0gZWxlbWVudC5yb3cucG9zaXRpb24gLSAxO1xuXHRcdFx0Y29sID0gZWxlbWVudC5jb2x1bW4uZ2V0UG9zaXRpb24oKSAtIDE7XG5cdFx0XHRpc1Jvd0hlYWRlciA9IGVsZW1lbnQuY29sdW1uID09PSB0aGlzLnJhbmdlTWFuYWdlci5yb3dIZWFkZXI7XG5cdFx0XHRcblx0XHRcdGlmICh0aGlzLnJhbmdlTWFuYWdlci5zZWxlY3RpbmcgPT09IFwicm93XCIpIHtcblx0XHRcdFx0dGhpcy5zZXRFbmQocm93LCB0aGlzLl9nZXRUYWJsZUNvbHVtbnMoKS5sZW5ndGggLSAxKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5yYW5nZU1hbmFnZXIuc2VsZWN0aW5nICE9PSBcInJvd1wiICYmIGlzUm93SGVhZGVyKSB7XG5cdFx0XHRcdHRoaXMuc2V0RW5kKHJvdywgMCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMucmFuZ2VNYW5hZ2VyLnNlbGVjdGluZyA9PT0gXCJjb2x1bW5cIikge1xuXHRcdFx0XHR0aGlzLnNldEVuZChyb3dzQ291bnQgLSAxLCBjb2wpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zZXRFbmQocm93LCBjb2wpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X3VwZGF0ZU1pbk1heCgpIHtcblx0XHR0aGlzLnRvcCA9IE1hdGgubWluKHRoaXMuc3RhcnQucm93LCB0aGlzLmVuZC5yb3cpO1xuXHRcdHRoaXMuYm90dG9tID0gTWF0aC5tYXgodGhpcy5zdGFydC5yb3csIHRoaXMuZW5kLnJvdyk7XG5cdFx0dGhpcy5sZWZ0ID0gTWF0aC5taW4odGhpcy5zdGFydC5jb2wsIHRoaXMuZW5kLmNvbCk7XG5cdFx0dGhpcy5yaWdodCA9IE1hdGgubWF4KHRoaXMuc3RhcnQuY29sLCB0aGlzLmVuZC5jb2wpO1xuXHRcdFxuXHRcdGlmKHRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicmFuZ2VDaGFuZ2VkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMuaW5pdGlhbGl6aW5nLnN0YXJ0ICYmIHRoaXMuaW5pdGlhbGl6aW5nLmVuZCl7XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyYW5nZUFkZGVkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2dldFRhYmxlQ29sdW1ucygpIHtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFZpc2libGVDb2x1bW5zQnlJbmRleCgpO1xuXHR9XG5cdFxuXHRfZ2V0VGFibGVSb3dzKCkge1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5maWx0ZXIocm93PT4gcm93LnR5cGUgPT09IFwicm93XCIpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vICAgICAgUmVuZGVyaW5nICAgICAgLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0bGF5b3V0KCkge1xuXHRcdHZhciBfdkRvbVRvcCA9IHRoaXMudGFibGUucm93TWFuYWdlci5yZW5kZXJlci52RG9tVG9wLFxuXHRcdF92RG9tQm90dG9tID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlbmRlcmVyLnZEb21Cb3R0b20sXG5cdFx0X3ZEb21MZWZ0ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlbmRlcmVyLmxlZnRDb2wsXG5cdFx0X3ZEb21SaWdodCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZW5kZXJlci5yaWdodENvbCxcdFx0XG5cdFx0dG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0LCB0b3BMZWZ0Q2VsbCwgYm90dG9tUmlnaHRDZWxsLCB0b3BMZWZ0Q2VsbEVsLCBib3R0b21SaWdodENlbGxFbCwgdG9wTGVmdFJvd0VsLCBib3R0b21SaWdodFJvd0VsO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWwgPT09IFwidmlydHVhbFwiICYmIHRoaXMucmFuZ2VNYW5hZ2VyLnJvd0hlYWRlcikge1xuXHRcdFx0X3ZEb21SaWdodCArPSAxO1xuXHRcdH1cblx0XHRcblx0XHRpZiAoX3ZEb21Ub3AgPT0gbnVsbCkge1xuXHRcdFx0X3ZEb21Ub3AgPSAwO1xuXHRcdH1cblx0XHRcblx0XHRpZiAoX3ZEb21Cb3R0b20gPT0gbnVsbCkge1xuXHRcdFx0X3ZEb21Cb3R0b20gPSBJbmZpbml0eTtcblx0XHR9XG5cdFx0XG5cdFx0aWYgKF92RG9tTGVmdCA9PSBudWxsKSB7XG5cdFx0XHRfdkRvbUxlZnQgPSAwO1xuXHRcdH1cblx0XHRcblx0XHRpZiAoX3ZEb21SaWdodCA9PSBudWxsKSB7XG5cdFx0XHRfdkRvbVJpZ2h0ID0gSW5maW5pdHk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmICh0aGlzLm92ZXJsYXBzKF92RG9tTGVmdCwgX3ZEb21Ub3AsIF92RG9tUmlnaHQsIF92RG9tQm90dG9tKSkge1xuXHRcdFx0dG9wID0gTWF0aC5tYXgodGhpcy50b3AsIF92RG9tVG9wKTtcblx0XHRcdGJvdHRvbSA9IE1hdGgubWluKHRoaXMuYm90dG9tLCBfdkRvbUJvdHRvbSk7XG5cdFx0XHRsZWZ0ID0gTWF0aC5tYXgodGhpcy5sZWZ0LCBfdkRvbUxlZnQpO1xuXHRcdFx0cmlnaHQgPSBNYXRoLm1pbih0aGlzLnJpZ2h0LCBfdkRvbVJpZ2h0KTtcblx0XHRcdFxuXHRcdFx0dG9wTGVmdENlbGwgPSB0aGlzLnJhbmdlTWFuYWdlci5nZXRDZWxsKHRvcCwgbGVmdCk7XG5cdFx0XHRib3R0b21SaWdodENlbGwgPSB0aGlzLnJhbmdlTWFuYWdlci5nZXRDZWxsKGJvdHRvbSwgcmlnaHQpO1xuXHRcdFx0dG9wTGVmdENlbGxFbCA9IHRvcExlZnRDZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcdGJvdHRvbVJpZ2h0Q2VsbEVsID0gYm90dG9tUmlnaHRDZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcdHRvcExlZnRSb3dFbCA9IHRvcExlZnRDZWxsLnJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRib3R0b21SaWdodFJvd0VsID0gYm90dG9tUmlnaHRDZWxsLnJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJhbmdlLWFjdGl2ZVwiKTtcblx0XHRcdC8vIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwidGFidWxhdG9yLXJhbmdlLWFjdGl2ZVwiLCB0aGlzID09PSB0aGlzLnJhbmdlTWFuYWdlci5hY3RpdmVSYW5nZSk7XG5cblx0XHRcdGlmKHRoaXMudGFibGUucnRsKXtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLnJpZ2h0ID0gdG9wTGVmdFJvd0VsLm9mZnNldFdpZHRoIC0gdG9wTGVmdENlbGxFbC5vZmZzZXRMZWZ0IC0gdG9wTGVmdENlbGxFbC5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gdG9wTGVmdENlbGxFbC5vZmZzZXRMZWZ0ICsgdG9wTGVmdENlbGxFbC5vZmZzZXRXaWR0aCAtIGJvdHRvbVJpZ2h0Q2VsbEVsLm9mZnNldExlZnQgKyBcInB4XCI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0ID0gdG9wTGVmdFJvd0VsLm9mZnNldExlZnQgKyB0b3BMZWZ0Q2VsbEVsLm9mZnNldExlZnQgKyBcInB4XCI7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IGJvdHRvbVJpZ2h0Q2VsbEVsLm9mZnNldExlZnQgKyBib3R0b21SaWdodENlbGxFbC5vZmZzZXRXaWR0aCAtIHRvcExlZnRDZWxsRWwub2Zmc2V0TGVmdCArIFwicHhcIjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IHRvcExlZnRSb3dFbC5vZmZzZXRUb3AgKyBcInB4XCI7XG5cdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYm90dG9tUmlnaHRSb3dFbC5vZmZzZXRUb3AgKyBib3R0b21SaWdodFJvd0VsLm9mZnNldEhlaWdodCAtIHRvcExlZnRSb3dFbC5vZmZzZXRUb3AgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRhdFRvcExlZnQoY2VsbCkge1xuXHRcdHJldHVybiBjZWxsLnJvdy5wb3NpdGlvbiAtIDEgPT09IHRoaXMudG9wICYmIGNlbGwuY29sdW1uLmdldFBvc2l0aW9uKCkgLSAxID09PSB0aGlzLmxlZnQ7XG5cdH1cblx0XG5cdGF0Qm90dG9tUmlnaHQoY2VsbCkge1xuXHRcdHJldHVybiBjZWxsLnJvdy5wb3NpdGlvbiAtIDEgPT09IHRoaXMuYm90dG9tICYmIGNlbGwuY29sdW1uLmdldFBvc2l0aW9uKCkgLSAxID09PSB0aGlzLnJpZ2h0O1xuXHR9XG5cdFxuXHRvY2N1cGllcyhjZWxsKSB7XG5cdFx0cmV0dXJuIHRoaXMub2NjdXBpZXNSb3coY2VsbC5yb3cpICYmIHRoaXMub2NjdXBpZXNDb2x1bW4oY2VsbC5jb2x1bW4pO1xuXHR9XG5cdFxuXHRvY2N1cGllc1Jvdyhyb3cpIHtcblx0XHRyZXR1cm4gdGhpcy50b3AgPD0gcm93LnBvc2l0aW9uIC0gMSAmJiByb3cucG9zaXRpb24gLSAxIDw9IHRoaXMuYm90dG9tO1xuXHR9XG5cdFxuXHRvY2N1cGllc0NvbHVtbihjb2wpIHtcblx0XHRyZXR1cm4gdGhpcy5sZWZ0IDw9IGNvbC5nZXRQb3NpdGlvbigpIC0gMSAmJiBjb2wuZ2V0UG9zaXRpb24oKSAtIDEgPD0gdGhpcy5yaWdodDtcblx0fVxuXHRcblx0b3ZlcmxhcHMobGVmdCwgdG9wLCByaWdodCwgYm90dG9tKSB7XG5cdFx0aWYgKCh0aGlzLmxlZnQgPiByaWdodCB8fCBsZWZ0ID4gdGhpcy5yaWdodCkgfHwgKHRoaXMudG9wID4gYm90dG9tIHx8IHRvcCA+IHRoaXMuYm90dG9tKSl7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdFxuXHRnZXREYXRhKCkge1xuXHRcdHZhciBkYXRhID0gW10sXG5cdFx0cm93cyA9IHRoaXMuZ2V0Um93cygpLFxuXHRcdGNvbHVtbnMgPSB0aGlzLmdldENvbHVtbnMoKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0dmFyIHJvd0RhdGEgPSByb3cuZ2V0RGF0YSgpLFxuXHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcblx0XHRcdGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdHJlc3VsdFtjb2x1bW4uZmllbGRdID0gcm93RGF0YVtjb2x1bW4uZmllbGRdO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGRhdGEucHVzaChyZXN1bHQpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cdFxuXHRnZXRDZWxscyhzdHJ1Y3R1cmVkLCBjb21wb25lbnQpIHtcblx0XHR2YXIgY2VsbHMgPSBbXSxcblx0XHRyb3dzID0gdGhpcy5nZXRSb3dzKCksXG5cdFx0Y29sdW1ucyA9IHRoaXMuZ2V0Q29sdW1ucygpO1xuXHRcdFxuXHRcdGlmIChzdHJ1Y3R1cmVkKSB7XG5cdFx0XHRjZWxscyA9IHJvd3MubWFwKChyb3cpID0+IHtcblx0XHRcdFx0dmFyIGFyciA9IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0cm93LmdldENlbGxzKCkuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0XHRcdGlmIChjb2x1bW5zLmluY2x1ZGVzKGNlbGwuY29sdW1uKSkge1xuXHRcdFx0XHRcdFx0YXJyLnB1c2goY29tcG9uZW50ID8gY2VsbC5nZXRDb21wb25lbnQoKSA6IGNlbGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gYXJyO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHJvdy5nZXRDZWxscygpLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0XHRpZiAoY29sdW1ucy5pbmNsdWRlcyhjZWxsLmNvbHVtbikpIHtcblx0XHRcdFx0XHRcdGNlbGxzLnB1c2goY29tcG9uZW50ID8gY2VsbC5nZXRDb21wb25lbnQoKSA6IGNlbGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGNlbGxzO1xuXHR9XG5cdFxuXHRnZXRTdHJ1Y3R1cmVkQ2VsbHMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2VsbHModHJ1ZSwgdHJ1ZSk7XG5cdH1cblx0XG5cdGdldFJvd3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFRhYmxlUm93cygpLnNsaWNlKHRoaXMudG9wLCB0aGlzLmJvdHRvbSArIDEpO1xuXHR9XG5cdFxuXHRnZXRDb2x1bW5zKCkge1xuXHRcdHJldHVybiB0aGlzLl9nZXRUYWJsZUNvbHVtbnMoKS5zbGljZSh0aGlzLmxlZnQsIHRoaXMucmlnaHQgKyAxKTtcblx0fVxuXHRcblx0Y2xlYXJWYWx1ZXMoKXtcblx0XHR2YXIgY2VsbHMgPSB0aGlzLmdldENlbGxzKCk7XG5cdFx0dmFyIGNsZWFyVmFsdWUgPSB0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZVJhbmdlQ2xlYXJDZWxsc1ZhbHVlO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuYmxvY2tSZWRyYXcoKTtcblx0XHRcblx0XHRjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRjZWxsLnNldFZhbHVlKGNsZWFyVmFsdWUpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMudGFibGUucmVzdG9yZVJlZHJhdygpO1xuXHRcdFxuXHR9XG5cdFxuXHRnZXRCb3VuZHMoY29tcG9uZW50KXtcblx0XHR2YXIgY2VsbHMgPSB0aGlzLmdldENlbGxzKGZhbHNlLCBjb21wb25lbnQpLFxuXHRcdG91dHB1dCA9IHtcblx0XHRcdHN0YXJ0Om51bGwsXG5cdFx0XHRlbmQ6bnVsbCxcblx0XHR9O1xuXHRcdFxuXHRcdGlmKGNlbGxzLmxlbmd0aCl7XG5cdFx0XHRvdXRwdXQuc3RhcnQgPSBjZWxsc1swXTtcblx0XHRcdG91dHB1dC5lbmQgPSBjZWxsc1tjZWxscy5sZW5ndGggLSAxXTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJObyBib3VuZHMgZGVmaW5lZCBvbiByYW5nZVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0Q29tcG9uZW50KCkge1xuXHRcdGlmICghdGhpcy5jb21wb25lbnQpIHtcblx0XHRcdHRoaXMuY29tcG9uZW50ID0gbmV3IFJhbmdlQ29tcG9uZW50KHRoaXMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5jb21wb25lbnQ7XG5cdH1cblx0XG5cdGRlc3Ryb3kobm90aWZ5KSB7XG5cdFx0dGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcblx0XHRcblx0XHRpZihub3RpZnkpe1xuXHRcdFx0dGhpcy5yYW5nZU1hbmFnZXIucmFuZ2VSZW1vdmVkKHRoaXMpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLmluaXRpYWxpemVkKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJhbmdlUmVtb3ZlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cdH1cblx0XG5cdGRlc3Ryb3llZEd1YXJkKGZ1bmMpe1xuXHRcdGlmKHRoaXMuZGVzdHJveWVkKXtcblx0XHRcdGNvbnNvbGUud2FybihcIllvdSBjYW5ub3QgY2FsbCB0aGUgXCIgICsgZnVuYyArIFwiIGZ1bmN0aW9uIG9uIGEgZGVzdHJveWVkIHJhbmdlXCIpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gIXRoaXMuZGVzdHJveWVkO1xuXHR9XG59XG5cbnZhciBiaW5kaW5ncyA9IHtcclxuXHRyYW5nZUp1bXBVcDpbXCJjdHJsICsgMzhcIiwgXCJtZXRhICsgMzhcIl0sXHJcblx0cmFuZ2VKdW1wRG93bjpbXCJjdHJsICsgNDBcIiwgXCJtZXRhICsgNDBcIl0sXHJcblx0cmFuZ2VKdW1wTGVmdDpbXCJjdHJsICsgMzdcIiwgXCJtZXRhICsgMzdcIl0sXHJcblx0cmFuZ2VKdW1wUmlnaHQ6W1wiY3RybCArIDM5XCIsIFwibWV0YSArIDM5XCJdLFxyXG5cdHJhbmdlRXhwYW5kVXA6XCJzaGlmdCArIDM4XCIsXHJcblx0cmFuZ2VFeHBhbmREb3duOlwic2hpZnQgKyA0MFwiLFxyXG5cdHJhbmdlRXhwYW5kTGVmdDpcInNoaWZ0ICsgMzdcIixcclxuXHRyYW5nZUV4cGFuZFJpZ2h0Olwic2hpZnQgKyAzOVwiLFxyXG5cdHJhbmdlRXhwYW5kSnVtcFVwOltcImN0cmwgKyBzaGlmdCArIDM4XCIsIFwibWV0YSArIHNoaWZ0ICsgMzhcIl0sXHJcblx0cmFuZ2VFeHBhbmRKdW1wRG93bjpbXCJjdHJsICsgc2hpZnQgKyA0MFwiLCBcIm1ldGEgKyBzaGlmdCArIDQwXCJdLFxyXG5cdHJhbmdlRXhwYW5kSnVtcExlZnQ6W1wiY3RybCArIHNoaWZ0ICsgMzdcIiwgXCJtZXRhICsgc2hpZnQgKyAzN1wiXSxcclxuXHRyYW5nZUV4cGFuZEp1bXBSaWdodDpbXCJjdHJsICsgc2hpZnQgKyAzOVwiLCBcIm1ldGEgKyBzaGlmdCArIDM5XCJdLFxyXG59O1xuXG52YXIgYWN0aW9ucyA9IHtcclxuXHRyYW5nZUp1bXBMZWZ0OiBmdW5jdGlvbihlKXtcclxuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1yYW5nZVwiLCBlLCBcImxlZnRcIiwgdHJ1ZSwgZmFsc2UpO1xyXG5cdH0sXHJcblx0cmFuZ2VKdW1wUmlnaHQ6IGZ1bmN0aW9uKGUpe1xyXG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LXJhbmdlXCIsIGUsIFwicmlnaHRcIiwgdHJ1ZSwgZmFsc2UpO1xyXG5cdH0sXHJcblx0cmFuZ2VKdW1wVXA6IGZ1bmN0aW9uKGUpe1xyXG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LXJhbmdlXCIsIGUsIFwidXBcIiwgdHJ1ZSwgZmFsc2UpO1xyXG5cdH0sXHJcblx0cmFuZ2VKdW1wRG93bjogZnVuY3Rpb24oZSl7XHJcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcmFuZ2VcIiwgZSwgXCJkb3duXCIsIHRydWUsIGZhbHNlKTtcclxuXHR9LFxyXG5cdHJhbmdlRXhwYW5kTGVmdDogZnVuY3Rpb24oZSl7XHJcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcmFuZ2VcIiwgZSwgXCJsZWZ0XCIsIGZhbHNlLCB0cnVlKTtcclxuXHR9LFxyXG5cdHJhbmdlRXhwYW5kUmlnaHQ6IGZ1bmN0aW9uKGUpe1xyXG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LXJhbmdlXCIsIGUsIFwicmlnaHRcIiwgZmFsc2UsIHRydWUpO1xyXG5cdH0sXHJcblx0cmFuZ2VFeHBhbmRVcDogZnVuY3Rpb24oZSl7XHJcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcmFuZ2VcIiwgZSwgXCJ1cFwiLCBmYWxzZSwgdHJ1ZSk7XHJcblx0fSxcclxuXHRyYW5nZUV4cGFuZERvd246IGZ1bmN0aW9uKGUpe1xyXG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LXJhbmdlXCIsIGUsIFwiZG93blwiLCBmYWxzZSwgdHJ1ZSk7XHJcblx0fSxcclxuXHRyYW5nZUV4cGFuZEp1bXBMZWZ0OiBmdW5jdGlvbihlKXtcclxuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1yYW5nZVwiLCBlLCBcImxlZnRcIiwgdHJ1ZSwgdHJ1ZSk7XHJcblx0fSxcclxuXHRyYW5nZUV4cGFuZEp1bXBSaWdodDogZnVuY3Rpb24oZSl7XHJcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcmFuZ2VcIiwgZSwgXCJyaWdodFwiLCB0cnVlLCB0cnVlKTtcclxuXHR9LFxyXG5cdHJhbmdlRXhwYW5kSnVtcFVwOiBmdW5jdGlvbihlKXtcclxuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1yYW5nZVwiLCBlLCBcInVwXCIsIHRydWUsIHRydWUpO1xyXG5cdH0sXHJcblx0cmFuZ2VFeHBhbmRKdW1wRG93bjogZnVuY3Rpb24oZSl7XHJcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcmFuZ2VcIiwgZSwgXCJkb3duXCIsIHRydWUsIHRydWUpO1xyXG5cdH0sXHJcbn07XG5cbnZhciBwYXN0ZUFjdGlvbnMgPSB7XHJcblx0cmFuZ2U6ZnVuY3Rpb24oZGF0YSl7XHJcblx0XHR2YXIgcm93cyA9IFtdLFxyXG5cdFx0cmFuZ2UgPSB0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0UmFuZ2UuYWN0aXZlUmFuZ2UsXHJcblx0XHRzaW5nbGVDZWxsID0gZmFsc2UsXHJcblx0XHRib3VuZHMsIHN0YXJ0Q2VsbCwgc3RhcnRSb3csIHJvd1dpZHRoLCBkYXRhTGVuZ3RoO1xyXG5cclxuXHRcdGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuXHRcdFxyXG5cdFx0aWYocmFuZ2Upe1xyXG5cdFx0XHRib3VuZHMgPSByYW5nZS5nZXRCb3VuZHMoKTtcclxuXHRcdFx0c3RhcnRDZWxsID0gYm91bmRzLnN0YXJ0O1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoYm91bmRzLnN0YXJ0ID09PSBib3VuZHMuZW5kKXtcclxuXHRcdFx0XHRzaW5nbGVDZWxsID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0aWYoc3RhcnRDZWxsKXtcclxuXHRcdFx0XHRyb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3Muc2xpY2UoKTtcclxuXHRcdFx0XHRzdGFydFJvdyA9IHJvd3MuaW5kZXhPZihzdGFydENlbGwucm93KTtcclxuXHJcblx0XHRcdFx0aWYoc2luZ2xlQ2VsbCl7XHJcblx0XHRcdFx0XHRyb3dXaWR0aCA9IGRhdGEubGVuZ3RoO1xyXG5cdFx0XHRcdH1lbHNlIHtcclxuXHRcdFx0XHRcdHJvd1dpZHRoID0gKHJvd3MuaW5kZXhPZihib3VuZHMuZW5kLnJvdykgLSBzdGFydFJvdykgKyAxO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZihzdGFydFJvdyA+LTEpe1xyXG5cdFx0XHRcdFx0dGhpcy50YWJsZS5ibG9ja1JlZHJhdygpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRyb3dzID0gcm93cy5zbGljZShzdGFydFJvdywgc3RhcnRSb3cgKyByb3dXaWR0aCk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHJvd3MuZm9yRWFjaCgocm93LCBpKSA9PiB7XHJcblx0XHRcdFx0XHRcdHJvdy51cGRhdGVEYXRhKGRhdGFbaSAlIGRhdGFMZW5ndGhdKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJlc3RvcmVSZWRyYXcoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cmV0dXJuIHJvd3M7XHJcblx0fVxyXG59O1xuXG52YXIgcGFzdGVQYXJzZXJzID0ge1xyXG5cdHJhbmdlOmZ1bmN0aW9uKGNsaXBib2FyZCl7XHJcblx0XHR2YXIgZGF0YSA9IFtdLFxyXG5cdFx0cm93cyA9IFtdLFxyXG5cdFx0cmFuZ2UgPSB0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0UmFuZ2UuYWN0aXZlUmFuZ2UsXHJcblx0XHRzaW5nbGVDZWxsID0gZmFsc2UsXHJcblx0XHRib3VuZHMsIHN0YXJ0Q2VsbCwgY29sV2lkdGgsIGNvbHVtbk1hcCwgc3RhcnRDb2w7XHJcblx0XHRcclxuXHRcdGlmKHJhbmdlKXtcclxuXHRcdFx0Ym91bmRzID0gcmFuZ2UuZ2V0Qm91bmRzKCk7XHJcblx0XHRcdHN0YXJ0Q2VsbCA9IGJvdW5kcy5zdGFydDtcclxuXHJcblx0XHRcdGlmKGJvdW5kcy5zdGFydCA9PT0gYm91bmRzLmVuZCl7XHJcblx0XHRcdFx0c2luZ2xlQ2VsbCA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGlmKHN0YXJ0Q2VsbCl7XHJcblx0XHRcdFx0Ly9nZXQgZGF0YSBmcm9tIGNsaXBib2FyZCBpbnRvIGFycmF5IG9mIGNvbHVtbnMgYW5kIHJvd3MuXHJcblx0XHRcdFx0Y2xpcGJvYXJkID0gY2xpcGJvYXJkLnNwbGl0KFwiXFxuXCIpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGNsaXBib2FyZC5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XHJcblx0XHRcdFx0XHRkYXRhLnB1c2gocm93LnNwbGl0KFwiXFx0XCIpKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZihkYXRhLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRjb2x1bW5NYXAgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0VmlzaWJsZUNvbHVtbnNCeUluZGV4KCk7XHJcblx0XHRcdFx0XHRzdGFydENvbCA9IGNvbHVtbk1hcC5pbmRleE9mKHN0YXJ0Q2VsbC5jb2x1bW4pO1xyXG5cclxuXHRcdFx0XHRcdGlmKHN0YXJ0Q29sID4gLTEpe1xyXG5cdFx0XHRcdFx0XHRpZihzaW5nbGVDZWxsKXtcclxuXHRcdFx0XHRcdFx0XHRjb2xXaWR0aCA9IGRhdGFbMF0ubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Y29sV2lkdGggPSAoY29sdW1uTWFwLmluZGV4T2YoYm91bmRzLmVuZC5jb2x1bW4pIC0gc3RhcnRDb2wpICsgMTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Y29sdW1uTWFwID0gY29sdW1uTWFwLnNsaWNlKHN0YXJ0Q29sLCBzdGFydENvbCArIGNvbFdpZHRoKTtcclxuXHJcblx0XHRcdFx0XHRcdGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHZhciByb3cgPSB7fTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgaXRlbUxlbmd0aCA9IGl0ZW0ubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjb2x1bW5NYXAuZm9yRWFjaChmdW5jdGlvbihjb2wsIGkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0cm93W2NvbC5maWVsZF0gPSBpdGVtW2kgJSBpdGVtTGVuZ3RoXTtcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRyb3dzLnB1c2gocm93KTtcdFxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiByb3dzO1xyXG5cdFx0XHRcdFx0fVx0XHRcdFx0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn07XG5cbnZhciBjb2x1bW5Mb29rdXBzID0ge1xyXG5cdHJhbmdlOmZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgY29sdW1ucyA9IHRoaXMubW9kdWxlcy5zZWxlY3RSYW5nZS5zZWxlY3RlZENvbHVtbnMoKTtcclxuXHJcblx0XHRpZih0aGlzLmNvbHVtbk1hbmFnZXIucm93SGVhZGVyKXtcclxuXHRcdFx0Y29sdW1ucy51bnNoaWZ0KHRoaXMuY29sdW1uTWFuYWdlci5yb3dIZWFkZXIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjb2x1bW5zO1xyXG5cdH0sXHJcbn07XG5cbnZhciByb3dMb29rdXBzID0ge1xyXG5cdHJhbmdlOmZ1bmN0aW9uKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5tb2R1bGVzLnNlbGVjdFJhbmdlLnNlbGVjdGVkUm93cygpO1xyXG5cdH0sXHJcbn07XG5cbnZhciBleHRlbnNpb25zID0ge1xyXG5cdGtleWJpbmRpbmdzOntcclxuXHRcdGJpbmRpbmdzOmJpbmRpbmdzLFxyXG5cdFx0YWN0aW9uczphY3Rpb25zXHJcblx0fSxcclxuXHRjbGlwYm9hcmQ6e1xyXG5cdFx0cGFzdGVBY3Rpb25zOnBhc3RlQWN0aW9ucyxcclxuXHRcdHBhc3RlUGFyc2VyczpwYXN0ZVBhcnNlcnNcclxuXHR9LFxyXG5cdGV4cG9ydDp7XHJcblx0XHRjb2x1bW5Mb29rdXBzOmNvbHVtbkxvb2t1cHMsXHJcblx0XHRyb3dMb29rdXBzOnJvd0xvb2t1cHMsXHJcblx0fVxyXG59O1xuXG5jbGFzcyBTZWxlY3RSYW5nZSBleHRlbmRzIE1vZHVsZSB7XG5cdFxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwic2VsZWN0UmFuZ2VcIjtcblx0c3RhdGljIG1vZHVsZUluaXRPcmRlciA9IDE7XG5cdHN0YXRpYyBtb2R1bGVFeHRlbnNpb25zID0gZXh0ZW5zaW9ucztcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKSB7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuc2VsZWN0aW5nID0gXCJjZWxsXCI7XG5cdFx0dGhpcy5tb3VzZWRvd24gPSBmYWxzZTtcblx0XHR0aGlzLnJhbmdlcyA9IFtdO1xuXHRcdHRoaXMub3ZlcmxheSA9IG51bGw7XG5cdFx0dGhpcy5yb3dIZWFkZXIgPSBudWxsO1xuXHRcdHRoaXMubGF5b3V0Q2hhbmdlVGltZW91dCA9IG51bGw7XG5cdFx0dGhpcy5jb2x1bW5TZWxlY3Rpb24gPSBmYWxzZTtcblx0XHR0aGlzLnJvd1NlbGVjdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMubWF4UmFuZ2VzID0gMDtcblx0XHR0aGlzLmFjdGl2ZVJhbmdlID0gZmFsc2U7XG5cdFx0dGhpcy5ibG9ja0tleWRvd24gPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmtleURvd25FdmVudCA9IHRoaXMuX2hhbmRsZUtleURvd24uYmluZCh0aGlzKTtcblx0XHR0aGlzLm1vdXNlVXBFdmVudCA9IHRoaXMuX2hhbmRsZU1vdXNlVXAuYmluZCh0aGlzKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzZWxlY3RhYmxlUmFuZ2VcIiwgZmFsc2UpOyAvL2VuYWJsZSBzZWxlY3RhYmxlIHJhbmdlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic2VsZWN0YWJsZVJhbmdlQ29sdW1uc1wiLCBmYWxzZSk7IC8vZW5hYmxlIHNlbGVjdGFibGUgcmFuZ2Vcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzZWxlY3RhYmxlUmFuZ2VSb3dzXCIsIGZhbHNlKTsgLy9lbmFibGUgc2VsZWN0YWJsZSByYW5nZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSYW5nZUNsZWFyQ2VsbHNcIiwgZmFsc2UpOyAvL2FsbG93IGNsZWFyaW5nIG9mIGFjdGl2ZSByYW5nZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSYW5nZUNsZWFyQ2VsbHNWYWx1ZVwiLCB1bmRlZmluZWQpOyAvL3ZhbHVlIGZvciBjbGVhcmVkIGFjdGl2ZSByYW5nZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSYW5nZUF1dG9Gb2N1c1wiLCB0cnVlKTsgLy9mb2N1cyBvbiBhIGNlbGwgYWZ0ZXIgcmVzZXRSYW5nZXNcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldFJhbmdlc0RhdGFcIiwgdGhpcy5nZXRSYW5nZXNEYXRhLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0UmFuZ2VzXCIsIHRoaXMuZ2V0UmFuZ2VzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiYWRkUmFuZ2VcIiwgdGhpcy5hZGRSYW5nZUZyb21Db21wb25lbnQuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcImdldFJhbmdlc1wiLCB0aGlzLmNlbGxHZXRSYW5nZXMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiZ2V0UmFuZ2VzXCIsIHRoaXMucm93R2V0UmFuZ2VzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcImdldFJhbmdlc1wiLCB0aGlzLmNvbEdldFJhbmdlcy5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyAgICBJbml0aWFsaXphdGlvbiAgIC8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGluaXRpYWxpemUoKSB7XG5cdFx0aWYgKHRoaXMub3B0aW9ucyhcInNlbGVjdGFibGVSYW5nZVwiKSkge1x0XG5cdFx0XHRpZighdGhpcy5vcHRpb25zKFwic2VsZWN0YWJsZVJvd3NcIikpe1xuXHRcdFx0XHR0aGlzLm1heFJhbmdlcyA9IHRoaXMub3B0aW9ucyhcInNlbGVjdGFibGVSYW5nZVwiKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZVRhYmxlKCk7XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZVdhdGNoZXJzKCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlNlbGVjdFJhbmdlIGZ1bmN0aW9uYWxpdHkgY2Fubm90IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCByb3cgc2VsZWN0aW9uXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLm9wdGlvbnMoJ2NvbHVtbnMnKS5maW5kSW5kZXgoKGNvbHVtbikgPT4gY29sdW1uLmZyb3plbikgPiAwKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkhhdmluZyBmcm96ZW4gY29sdW1uIGluIGFyYml0cmFyeSBwb3NpdGlvbiB3aXRoIHNlbGVjdFJhbmdlIG9wdGlvbiBtYXkgcmVzdWx0IGluIHVucHJlZGljdGFibGUgYmVoYXZpb3IuXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLm9wdGlvbnMoJ2NvbHVtbnMnKS5maWx0ZXIoKGNvbHVtbikgPT4gY29sdW1uLmZyb3plbikgPiAxKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkhhdmluZyBtdWx0aXBsZSBmcm96ZW4gY29sdW1ucyB3aXRoIHNlbGVjdFJhbmdlIG9wdGlvbiBtYXkgcmVzdWx0IGluIHVucHJlZGljdGFibGUgYmVoYXZpb3IuXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdGluaXRpYWxpemVUYWJsZSgpIHtcdFx0XG5cdFx0dGhpcy5vdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yYW5nZS1vdmVybGF5XCIpO1xuXHRcdFxuXHRcdHRoaXMucmFuZ2VDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHRoaXMucmFuZ2VDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yYW5nZS1jb250YWluZXJcIik7XG5cdFx0XG5cdFx0dGhpcy5hY3RpdmVSYW5nZUNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aGlzLmFjdGl2ZVJhbmdlQ2VsbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yYW5nZS1jZWxsLWFjdGl2ZVwiKTtcblx0XHRcblx0XHR0aGlzLm92ZXJsYXkuYXBwZW5kQ2hpbGQodGhpcy5yYW5nZUNvbnRhaW5lcik7XG5cdFx0dGhpcy5vdmVybGF5LmFwcGVuZENoaWxkKHRoaXMuYWN0aXZlUmFuZ2VDZWxsRWxlbWVudCk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5rZXlEb3duRXZlbnQpO1xuXHRcdFxuXHRcdHRoaXMucmVzZXRSYW5nZXMoKTtcblx0XHRcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLm92ZXJsYXkpO1xuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIDApO1xuXHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJhbmdlc1wiKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZVdhdGNoZXJzKCkge1xuXHRcdHRoaXMuY29sdW1uU2VsZWN0aW9uID0gdGhpcy5vcHRpb25zKFwic2VsZWN0YWJsZVJhbmdlQ29sdW1uc1wiKTtcblx0XHR0aGlzLnJvd1NlbGVjdGlvbiA9IHRoaXMub3B0aW9ucyhcInNlbGVjdGFibGVSYW5nZVJvd3NcIik7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW91c2Vkb3duXCIsIHRoaXMuaGFuZGxlQ29sdW1uTW91c2VEb3duLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLW1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZUNvbHVtbk1vdXNlTW92ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1yZXNpemVkXCIsIHRoaXMuaGFuZGxlQ29sdW1uUmVzaXplZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3ZpbmdcIiwgdGhpcy5oYW5kbGVDb2x1bW5Nb3ZpbmcuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW92ZWRcIiwgdGhpcy5oYW5kbGVDb2x1bW5Nb3ZlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi13aWR0aFwiLCB0aGlzLmxheW91dENoYW5nZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1oZWlnaHRcIiwgdGhpcy5sYXlvdXRDaGFuZ2UuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tcmVzaXplZFwiLCB0aGlzLmxheW91dENoYW5nZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbnMtbG9hZGVkXCIsIHRoaXMudXBkYXRlSGVhZGVyQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1oZWlnaHRcIiwgdGhpcy5sYXlvdXRDaGFuZ2UuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXJlbmRlcmVkXCIsIHRoaXMucmVuZGVyQ2VsbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtbW91c2Vkb3duXCIsIHRoaXMuaGFuZGxlQ2VsbE1vdXNlRG93bi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtbW91c2Vtb3ZlXCIsIHRoaXMuaGFuZGxlQ2VsbE1vdXNlTW92ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtY2xpY2tcIiwgdGhpcy5oYW5kbGVDZWxsQ2xpY2suYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWVkaXRpbmdcIiwgdGhpcy5oYW5kbGVFZGl0aW5nQ2VsbC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInBhZ2UtY2hhbmdlZFwiLCB0aGlzLnJlZHJhdy5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC12ZXJ0aWNhbFwiLCB0aGlzLmxheW91dENoYW5nZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC1ob3Jpem9udGFsXCIsIHRoaXMubGF5b3V0Q2hhbmdlLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1kZXN0cm95XCIsIHRoaXMudGFibGVEZXN0cm95ZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXByb2Nlc3NlZFwiLCB0aGlzLnJlc2V0UmFuZ2VzLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtbGF5b3V0XCIsIHRoaXMubGF5b3V0RWxlbWVudC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLXJlZHJhd1wiLCB0aGlzLnJlZHJhdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy50YWJsZURlc3Ryb3llZC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImVkaXQtZWRpdG9yLWNsZWFyXCIsIHRoaXMuZmluaXNoRWRpdGluZ0NlbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJlZGl0LWJsdXJcIiwgdGhpcy5yZXN0b3JlRm9jdXMuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi1wcmV2XCIsIHRoaXMua2V5TmF2aWdhdGUuYmluZCh0aGlzLCBcImxlZnRcIikpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtbmV4dFwiLCB0aGlzLmtleU5hdmlnYXRlLmJpbmQodGhpcywgXCJyaWdodFwiKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi1sZWZ0XCIsIHRoaXMua2V5TmF2aWdhdGUuYmluZCh0aGlzLCBcImxlZnRcIikpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtcmlnaHRcIiwgdGhpcy5rZXlOYXZpZ2F0ZS5iaW5kKHRoaXMsIFwicmlnaHRcIikpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtdXBcIiwgdGhpcy5rZXlOYXZpZ2F0ZS5iaW5kKHRoaXMsIFwidXBcIikpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtZG93blwiLCB0aGlzLmtleU5hdmlnYXRlLmJpbmQodGhpcywgXCJkb3duXCIpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImtleWJpbmRpbmctbmF2LXJhbmdlXCIsIHRoaXMua2V5TmF2aWdhdGVSYW5nZS5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0XG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKSB7XG5cdFx0aWYodGhpcy5jb2x1bW5TZWxlY3Rpb24gJiYgY29sdW1uLmRlZmluaXRpb24uaGVhZGVyU29ydCAmJiB0aGlzLm9wdGlvbnMoXCJoZWFkZXJTb3J0Q2xpY2tFbGVtZW50XCIpICE9PSBcImljb25cIil7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJVc2luZyBjb2x1bW4gaGVhZGVyU29ydCB3aXRoIHNlbGVjdGFibGVSYW5nZUNvbHVtbnMgb3B0aW9uIG1heSByZXN1bHQgaW4gdW5wcmVkaWN0YWJsZSBiZWhhdmlvci4gQ29uc2lkZXIgdXNpbmcgaGVhZGVyU29ydENsaWNrRWxlbWVudDogJ2ljb24nLlwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYgKGNvbHVtbi5tb2R1bGVzLmVkaXQpIDtcblx0fVxuXHRcblx0dXBkYXRlSGVhZGVyQ29sdW1uKCl7XG5cdFx0dmFyIGZyb3plbkNvbHM7XG5cblx0XHRpZih0aGlzLnJvd1NlbGVjdGlvbil7XG5cdFx0XHR0aGlzLnJvd0hlYWRlciA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRWaXNpYmxlQ29sdW1uc0J5SW5kZXgoKVswXTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5yb3dIZWFkZXIpe1xuXHRcdFx0XHR0aGlzLnJvd0hlYWRlci5kZWZpbml0aW9uLmNzc0NsYXNzID0gdGhpcy5yb3dIZWFkZXIuZGVmaW5pdGlvbi5jc3NDbGFzcyArIFwiIHRhYnVsYXRvci1yYW5nZS1yb3ctaGVhZGVyXCI7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnJvd0hlYWRlci5kZWZpbml0aW9uLmhlYWRlclNvcnQpe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlVzaW5nIGNvbHVtbiBoZWFkZXJTb3J0IHdpdGggc2VsZWN0YWJsZVJhbmdlUm93cyBvcHRpb24gbWF5IHJlc3VsdCBpbiB1bnByZWRpY3RhYmxlIGJlaGF2aW9yXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnJvd0hlYWRlci5kZWZpbml0aW9uLmVkaXRvcil7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiVXNpbmcgY29sdW1uIGVkaXRvciB3aXRoIHNlbGVjdGFibGVSYW5nZVJvd3Mgb3B0aW9uIG1heSByZXN1bHQgaW4gdW5wcmVkaWN0YWJsZSBiZWhhdmlvclwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vd2FybiBpZiBpbnZhbGlkIGZyb3plbiBjb2x1bW4gY29uZmlndXJhdGlvbiBkZXRlY3RlZFxuXHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zICYmIHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLmFjdGl2ZSl7XG5cdFx0XHRmcm96ZW5Db2xzID0gdGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMuZ2V0RnJvemVuQ29sdW1ucygpO1xuXG5cdFx0XHRpZihmcm96ZW5Db2xzLmxlbmd0aCA+IDEgfHwgKGZyb3plbkNvbHMubGVuZ3RoID09PSAxICYmIGZyb3plbkNvbHNbMF0gIT09IHRoaXMucm93SGVhZGVyKSl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlVzaW5nIGZyb3plbiBjb2x1bW5zIHRoYXQgYXJlIG5vdCB0aGUgcmFuZ2UgaGVhZGVyIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIHNlbGVjdFJhbmdlIG9wdGlvbiBtYXkgcmVzdWx0IGluIHVucHJlZGljdGFibGUgYmVoYXZpb3JcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vICAgVGFibGUgRnVuY3Rpb25zICAgLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0Z2V0UmFuZ2VzKCl7XG5cdFx0cmV0dXJuIHRoaXMucmFuZ2VzLm1hcCgocmFuZ2UpID0+IHJhbmdlLmdldENvbXBvbmVudCgpKTtcblx0fVxuXHRcblx0Z2V0UmFuZ2VzRGF0YSgpIHtcblx0XHRyZXR1cm4gdGhpcy5yYW5nZXMubWFwKChyYW5nZSkgPT4gcmFuZ2UuZ2V0RGF0YSgpKTtcblx0fVxuXHRcblx0YWRkUmFuZ2VGcm9tQ29tcG9uZW50KHN0YXJ0LCBlbmQpe1xuXHRcdHN0YXJ0ID0gc3RhcnQgPyBzdGFydC5fY2VsbCA6IG51bGw7XG5cdFx0ZW5kID0gZW5kID8gZW5kLl9jZWxsIDogbnVsbDtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5hZGRSYW5nZShzdGFydCwgZW5kKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyBDb21wb25lbnQgRnVuY3Rpb25zIC8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGNlbGxHZXRSYW5nZXMoY2VsbCl7XG5cdFx0dmFyIHJhbmdlcyA9IFtdO1xuXHRcdFxuXHRcdGlmIChjZWxsLmNvbHVtbiA9PT0gdGhpcy5yb3dIZWFkZXIpIHtcblx0XHRcdHJhbmdlcyA9IHRoaXMucmFuZ2VzLmZpbHRlcigocmFuZ2UpID0+IHJhbmdlLm9jY3VwaWVzUm93KGNlbGwucm93KSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJhbmdlcyA9IHRoaXMucmFuZ2VzLmZpbHRlcigocmFuZ2UpID0+IHJhbmdlLm9jY3VwaWVzKGNlbGwpKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJhbmdlcy5tYXAoKHJhbmdlKSA9PiByYW5nZS5nZXRDb21wb25lbnQoKSk7XG5cdH1cblx0XG5cdHJvd0dldFJhbmdlcyhyb3cpe1xuXHRcdHZhciByYW5nZXMgPSB0aGlzLnJhbmdlcy5maWx0ZXIoKHJhbmdlKSA9PiByYW5nZS5vY2N1cGllc1Jvdyhyb3cpKTtcblx0XHRcblx0XHRyZXR1cm4gcmFuZ2VzLm1hcCgocmFuZ2UpID0+IHJhbmdlLmdldENvbXBvbmVudCgpKTtcblx0fVxuXHRcblx0Y29sR2V0UmFuZ2VzKGNvbCl7XG5cdFx0dmFyIHJhbmdlcyA9IHRoaXMucmFuZ2VzLmZpbHRlcigocmFuZ2UpID0+IHJhbmdlLm9jY3VwaWVzQ29sdW1uKGNvbCkpO1xuXHRcdFxuXHRcdHJldHVybiByYW5nZXMubWFwKChyYW5nZSkgPT4gcmFuZ2UuZ2V0Q29tcG9uZW50KCkpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vIEV2ZW50IEhhbmRsZXJzIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2hhbmRsZU1vdXNlVXAoZSl7XG5cdFx0dGhpcy5tb3VzZWRvd24gPSBmYWxzZTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm1vdXNlVXBFdmVudCk7XG5cdH1cblx0XG5cdF9oYW5kbGVLZXlEb3duKGUpIHtcblx0XHRpZiAoIXRoaXMuYmxvY2tLZXlkb3duICYmICghdGhpcy50YWJsZS5tb2R1bGVzLmVkaXQgfHwgKHRoaXMudGFibGUubW9kdWxlcy5lZGl0ICYmICF0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbCkpKSB7XG5cdFx0XHRpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuXHRcdFx0XHQvLyBpcyBlZGl0aW5nIGEgY2VsbD9cblx0XHRcdFx0aWYgKHRoaXMudGFibGUubW9kdWxlcy5lZGl0ICYmIHRoaXMudGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5lZGl0Q2VsbCh0aGlzLmdldEFjdGl2ZUNlbGwoKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmICgoZS5rZXkgPT09IFwiQmFja3NwYWNlXCIgfHwgZS5rZXkgPT09IFwiRGVsZXRlXCIpICYmIHRoaXMub3B0aW9ucyhcInNlbGVjdGFibGVSYW5nZUNsZWFyQ2VsbHNcIikpIHtcblx0XHRcdFx0aWYodGhpcy5hY3RpdmVSYW5nZSl7XG5cdFx0XHRcdFx0dGhpcy5hY3RpdmVSYW5nZS5jbGVhclZhbHVlcygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplRm9jdXMoY2VsbCl7XG5cdFx0dmFyIHJhbmdlO1xuXG5cdFx0dGhpcy5yZXN0b3JlRm9jdXMoKTtcblx0XHRcblx0XHR0cnl7XG5cdFx0XHRpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7IC8vIElFXG5cdFx0XHRcdHJhbmdlID0gZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtcblx0XHRcdFx0cmFuZ2UubW92ZVRvRWxlbWVudFRleHQoY2VsbC5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRyYW5nZS5zZWxlY3QoKTtcblx0XHRcdH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuXHRcdFx0XHRyYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdFx0XHRcdHJhbmdlLnNlbGVjdE5vZGUoY2VsbC5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0XHRcdHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hZGRSYW5nZShyYW5nZSk7XG5cdFx0XHR9XG5cdFx0fWNhdGNoKGUpe31cblx0fVxuXHRcblx0cmVzdG9yZUZvY3VzKGVsZW1lbnQpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmZvY3VzKCk7XG5cdFx0XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLyBDb2x1bW4gRnVuY3Rpb25hbGl0eSAvLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRoYW5kbGVDb2x1bW5SZXNpemVkKGNvbHVtbikge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRcblx0XHRpZiAodGhpcy5zZWxlY3RpbmcgIT09IFwiY29sdW1uXCIgJiYgdGhpcy5zZWxlY3RpbmcgIT09IFwiYWxsXCIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0c2VsZWN0ZWQgPSB0aGlzLnJhbmdlcy5zb21lKChyYW5nZSkgPT4gcmFuZ2Uub2NjdXBpZXNDb2x1bW4oY29sdW1uKSk7XG5cdFx0XG5cdFx0aWYgKCFzZWxlY3RlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJhbmdlcy5mb3JFYWNoKChyYW5nZSkgPT4ge1xuXHRcdFx0dmFyIHNlbGVjdGVkQ29sdW1ucyA9IHJhbmdlLmdldENvbHVtbnModHJ1ZSk7XG5cdFx0XHRcblx0XHRcdHNlbGVjdGVkQ29sdW1ucy5mb3JFYWNoKChzZWxlY3RlZENvbHVtbikgPT4ge1xuXHRcdFx0XHRpZiAoc2VsZWN0ZWRDb2x1bW4gIT09IGNvbHVtbikge1xuXHRcdFx0XHRcdHNlbGVjdGVkQ29sdW1uLnNldFdpZHRoKGNvbHVtbi53aWR0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRoYW5kbGVDb2x1bW5Nb3ZpbmcoX2V2ZW50LCBjb2x1bW4pIHtcblx0XHR0aGlzLnJlc2V0UmFuZ2VzKCkuc2V0Qm91bmRzKGNvbHVtbik7XG5cdFx0dGhpcy5vdmVybGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHR9XG5cblx0aGFuZGxlQ29sdW1uTW92ZWQoZnJvbSwgX3RvLCBfYWZ0ZXIpIHtcblx0XHR0aGlzLmFjdGl2ZVJhbmdlLnNldEJvdW5kcyhmcm9tKTtcblx0XHR0aGlzLmxheW91dEVsZW1lbnQoKTtcblx0fVxuXG5cdGhhbmRsZUNvbHVtbk1vdXNlRG93bihldmVudCwgY29sdW1uKSB7XG5cdFx0aWYgKGV2ZW50LmJ1dHRvbiA9PT0gMiAmJiAodGhpcy5zZWxlY3RpbmcgPT09IFwiY29sdW1uXCIgfHwgdGhpcy5zZWxlY3RpbmcgPT09IFwiYWxsXCIpICYmIHRoaXMuYWN0aXZlUmFuZ2Uub2NjdXBpZXNDb2x1bW4oY29sdW1uKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vSWYgY29sdW1ucyBhcmUgbW92YWJsZSwgYWxsb3cgZHJhZ2dpbmcgY29sdW1ucyBvbmx5IGlmIHRoZXkgYXJlIG5vdFxuXHRcdC8vc2VsZWN0ZWQuIERyYWdnaW5nIHNlbGVjdGVkIGNvbHVtbnMgc2hvdWxkIG1vdmUgdGhlIGNvbHVtbnMgaW5zdGVhZC5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZUNvbHVtbnMgJiYgdGhpcy5zZWxlY3RpbmcgPT09IFwiY29sdW1uXCIgJiYgdGhpcy5hY3RpdmVSYW5nZS5vY2N1cGllc0NvbHVtbihjb2x1bW4pKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5tb3VzZWRvd24gPSB0cnVlO1xuXHRcdFxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2VVcEV2ZW50KTtcblx0XHRcblx0XHR0aGlzLm5ld1NlbGVjdGlvbihldmVudCwgY29sdW1uKTtcblx0fVxuXHRcblx0aGFuZGxlQ29sdW1uTW91c2VNb3ZlKGUsIGNvbHVtbikge1xuXHRcdGlmIChjb2x1bW4gPT09IHRoaXMucm93SGVhZGVyIHx8ICF0aGlzLm1vdXNlZG93biB8fCB0aGlzLnNlbGVjdGluZyA9PT0gJ2FsbCcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5hY3RpdmVSYW5nZS5zZXRCb3VuZHMoZmFsc2UsIGNvbHVtbiwgdHJ1ZSk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIENlbGwgRnVuY3Rpb25hbGl0eSAvLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyZW5kZXJDZWxsKGNlbGwpIHtcblx0XHR2YXIgZWwgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0XHRyYW5nZUlkeCA9IHRoaXMucmFuZ2VzLmZpbmRJbmRleCgocmFuZ2UpID0+IHJhbmdlLm9jY3VwaWVzKGNlbGwpKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QudG9nZ2xlKFwidGFidWxhdG9yLXJhbmdlLXNlbGVjdGVkXCIsIHJhbmdlSWR4ICE9PSAtMSk7XG5cdFx0ZWwuY2xhc3NMaXN0LnRvZ2dsZShcInRhYnVsYXRvci1yYW5nZS1vbmx5LWNlbGwtc2VsZWN0ZWRcIiwgdGhpcy5yYW5nZXMubGVuZ3RoID09PSAxICYmIHRoaXMucmFuZ2VzWzBdLmF0VG9wTGVmdChjZWxsKSAmJlx0dGhpcy5yYW5nZXNbMF0uYXRCb3R0b21SaWdodChjZWxsKSk7XG5cdFx0XG5cdFx0ZWwuZGF0YXNldC5yYW5nZSA9IHJhbmdlSWR4O1xuXHR9XG5cdFxuXHRoYW5kbGVDZWxsTW91c2VEb3duKGV2ZW50LCBjZWxsKSB7XG5cdFx0aWYgKGV2ZW50LmJ1dHRvbiA9PT0gMiAmJiAodGhpcy5hY3RpdmVSYW5nZS5vY2N1cGllcyhjZWxsKSB8fCAoKHRoaXMuc2VsZWN0aW5nID09PSBcInJvd1wiIHx8IHRoaXMuc2VsZWN0aW5nID09PSBcImFsbFwiKSAmJiB0aGlzLmFjdGl2ZVJhbmdlLm9jY3VwaWVzUm93KGNlbGwucm93KSkpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMubW91c2Vkb3duID0gdHJ1ZTtcblx0XHRcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm1vdXNlVXBFdmVudCk7XG5cdFx0XG5cdFx0dGhpcy5uZXdTZWxlY3Rpb24oZXZlbnQsIGNlbGwpO1xuXHR9XG5cdFxuXHRoYW5kbGVDZWxsTW91c2VNb3ZlKGUsIGNlbGwpIHtcblx0XHRpZiAoIXRoaXMubW91c2Vkb3duIHx8IHRoaXMuc2VsZWN0aW5nID09PSBcImFsbFwiKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuYWN0aXZlUmFuZ2Uuc2V0Qm91bmRzKGZhbHNlLCBjZWxsLCB0cnVlKTtcblx0fVxuXHRcblx0aGFuZGxlQ2VsbENsaWNrKGUsIGNlbGwpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZUZvY3VzKGNlbGwpO1xuXHR9XG5cdFxuXHRoYW5kbGVFZGl0aW5nQ2VsbChjZWxsKSB7XG5cdFx0aWYodGhpcy5hY3RpdmVSYW5nZSl7XG5cdFx0XHR0aGlzLmFjdGl2ZVJhbmdlLnNldEJvdW5kcyhjZWxsKTtcblx0XHR9XG5cdH1cblx0XG5cdGZpbmlzaEVkaXRpbmdDZWxsKCkge1xuXHRcdHRoaXMuYmxvY2tLZXlkb3duID0gdHJ1ZTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5mb2N1cygpO1xuXHRcdFxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5ibG9ja0tleWRvd24gPSBmYWxzZTtcblx0XHR9LCAxMCk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8gICAgIE5hdmlnYXRpb24gICAgICAvLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRrZXlOYXZpZ2F0ZShkaXIsIGUpe1xuXHRcdGlmKHRoaXMubmF2aWdhdGUoZmFsc2UsIGZhbHNlLCBkaXIpKTtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdH1cblx0XG5cdGtleU5hdmlnYXRlUmFuZ2UoZSwgZGlyLCBqdW1wLCBleHBhbmQpe1xuXHRcdGlmKHRoaXMubmF2aWdhdGUoanVtcCwgZXhwYW5kLCBkaXIpKTtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdH1cblx0XG5cdG5hdmlnYXRlKGp1bXAsIGV4cGFuZCwgZGlyKSB7XG5cdFx0dmFyIG1vdmVkID0gZmFsc2UsXG5cdFx0cmFuZ2UsIHJhbmdlRWRnZSwgcHJldlJlY3QsIG5leHRSb3csIG5leHRDb2wsIHJvdywgY29sdW1uLFxuXHRcdHJvd1JlY3QsIHJvd01hbmFnZXJSZWN0LCBjb2x1bW5SZWN0LCBjb2x1bW5NYW5hZ2VyUmVjdDtcblx0XHRcblx0XHQvLyBEb24ndCBuYXZpZ2F0ZSB3aGlsZSBlZGl0aW5nXG5cdFx0aWYgKHRoaXMudGFibGUubW9kdWxlcy5lZGl0ICYmIHRoaXMudGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIElmIHRoZXJlIGFyZSBtb3JlIHRoYW4gMSByYW5nZSwgdXNlIHRoZSBhY3RpdmUgcmFuZ2UgYW5kIGRlc3Ryb3kgdGhlIG90aGVyc1xuXHRcdGlmICh0aGlzLnJhbmdlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHR0aGlzLnJhbmdlcyA9IHRoaXMucmFuZ2VzLmZpbHRlcigocmFuZ2UpID0+IHtcblx0XHRcdFx0aWYgKHJhbmdlID09PSB0aGlzLmFjdGl2ZVJhbmdlKSB7XG5cdFx0XHRcdFx0cmFuZ2Uuc2V0RW5kKHJhbmdlLnN0YXJ0LnJvdywgcmFuZ2Uuc3RhcnQuY29sKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyYW5nZS5kZXN0cm95KCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRyYW5nZSA9IHRoaXMuYWN0aXZlUmFuZ2U7XG5cdFx0cHJldlJlY3QgPSB7XG5cdFx0XHR0b3A6IHJhbmdlLnRvcCxcblx0XHRcdGJvdHRvbTogcmFuZ2UuYm90dG9tLFxuXHRcdFx0bGVmdDogcmFuZ2UubGVmdCxcblx0XHRcdHJpZ2h0OiByYW5nZS5yaWdodFxuXHRcdH07XG5cdFx0XG5cdFx0cmFuZ2VFZGdlID0gZXhwYW5kID8gcmFuZ2UuZW5kIDogcmFuZ2Uuc3RhcnQ7XG5cdFx0bmV4dFJvdyA9IHJhbmdlRWRnZS5yb3c7XG5cdFx0bmV4dENvbCA9IHJhbmdlRWRnZS5jb2w7XG5cdFx0XG5cdFx0aWYoanVtcCl7XG5cdFx0XHRzd2l0Y2goZGlyKXtcblx0XHRcdFx0Y2FzZSBcImxlZnRcIjpcblx0XHRcdFx0XHRuZXh0Q29sID0gdGhpcy5maW5kSnVtcENlbGxMZWZ0KHJhbmdlLnN0YXJ0LnJvdywgcmFuZ2VFZGdlLmNvbCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyaWdodFwiOlxuXHRcdFx0XHRcdG5leHRDb2wgPSB0aGlzLmZpbmRKdW1wQ2VsbFJpZ2h0KHJhbmdlLnN0YXJ0LnJvdywgcmFuZ2VFZGdlLmNvbCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1cFwiOlxuXHRcdFx0XHRcdG5leHRSb3cgPSB0aGlzLmZpbmRKdW1wQ2VsbFVwKHJhbmdlRWRnZS5yb3csIHJhbmdlLnN0YXJ0LmNvbCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkb3duXCI6XG5cdFx0XHRcdFx0bmV4dFJvdyA9IHRoaXMuZmluZEp1bXBDZWxsRG93bihyYW5nZUVkZ2Uucm93LCByYW5nZS5zdGFydC5jb2wpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGV4cGFuZCl7XG5cdFx0XHRcdGlmICgodGhpcy5zZWxlY3RpbmcgPT09ICdyb3cnICYmIChkaXIgPT09ICdsZWZ0JyB8fCBkaXIgPT09ICdyaWdodCcpKSB8fCAodGhpcy5zZWxlY3RpbmcgPT09ICdjb2x1bW4nICYmIChkaXIgPT09ICd1cCcgfHwgZGlyID09PSAnZG93bicpKSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRzd2l0Y2goZGlyKXtcblx0XHRcdFx0Y2FzZSBcImxlZnRcIjpcblx0XHRcdFx0XHRuZXh0Q29sID0gTWF0aC5tYXgobmV4dENvbCAtIDEsIDApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdFx0XHRuZXh0Q29sID0gTWF0aC5taW4obmV4dENvbCArIDEsIHRoaXMuZ2V0VGFibGVDb2x1bW5zKCkubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1cFwiOlxuXHRcdFx0XHRcdG5leHRSb3cgPSBNYXRoLm1heChuZXh0Um93IC0gMSwgMCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkb3duXCI6XG5cdFx0XHRcdFx0bmV4dFJvdyA9IE1hdGgubWluKG5leHRSb3cgKyAxLCB0aGlzLmdldFRhYmxlUm93cygpLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHRoaXMucm93SGVhZGVyICYmIG5leHRDb2wgPT09IDApIHtcblx0XHRcdG5leHRDb2wgPSAxO1xuXHRcdH1cblx0XHRcblx0XHRpZighZXhwYW5kKXtcblx0XHRcdHJhbmdlLnNldFN0YXJ0KG5leHRSb3csIG5leHRDb2wpO1xuXHRcdH1cblx0XHRcblx0XHRyYW5nZS5zZXRFbmQobmV4dFJvdywgbmV4dENvbCk7XG5cdFx0XG5cdFx0aWYoIWV4cGFuZCl7XG5cdFx0XHR0aGlzLnNlbGVjdGluZyA9IFwiY2VsbFwiO1xuXHRcdH1cblxuXHRcdG1vdmVkID0gcHJldlJlY3QudG9wICE9PSByYW5nZS50b3AgfHwgcHJldlJlY3QuYm90dG9tICE9PSByYW5nZS5ib3R0b20gfHwgcHJldlJlY3QubGVmdCAhPT0gcmFuZ2UubGVmdCB8fCBwcmV2UmVjdC5yaWdodCAhPT0gcmFuZ2UucmlnaHQ7XG5cblx0XHRpZiAobW92ZWQpIHtcblx0XHRcdHJvdyA9IHRoaXMuZ2V0Um93QnlSYW5nZVBvcyhyYW5nZS5lbmQucm93KTtcblx0XHRcdGNvbHVtbiA9IHRoaXMuZ2V0Q29sdW1uQnlSYW5nZVBvcyhyYW5nZS5lbmQuY29sKTtcblx0XHRcdHJvd1JlY3QgPSByb3cuZ2V0RWxlbWVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0Y29sdW1uUmVjdCA9IGNvbHVtbi5nZXRFbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRyb3dNYW5hZ2VyUmVjdCA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRFbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRjb2x1bW5NYW5hZ2VyUmVjdCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRFbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRcblx0XHRcdGlmKCEocm93UmVjdC50b3AgPj0gcm93TWFuYWdlclJlY3QudG9wICYmIHJvd1JlY3QuYm90dG9tIDw9IHJvd01hbmFnZXJSZWN0LmJvdHRvbSkpe1xuXHRcdFx0XHRpZihyb3cuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUgJiYgY29sdW1uLmdldEVsZW1lbnQoKS5wYXJlbnROb2RlKXtcblx0XHRcdFx0XHQvLyBVc2UgZmFzdGVyIGF1dG9TY3JvbGwgd2hlbiB0aGUgZWxlbWVudHMgYXJlIG9uIHRoZSBET01cblx0XHRcdFx0XHR0aGlzLmF1dG9TY3JvbGwocmFuZ2UsIHJvdy5nZXRFbGVtZW50KCksIGNvbHVtbi5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cm93LmdldENvbXBvbmVudCgpLnNjcm9sbFRvKHVuZGVmaW5lZCwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCEoY29sdW1uUmVjdC5sZWZ0ID49IGNvbHVtbk1hbmFnZXJSZWN0LmxlZnQgKyB0aGlzLmdldFJvd0hlYWRlcldpZHRoKCkgJiYgY29sdW1uUmVjdC5yaWdodCA8PSBjb2x1bW5NYW5hZ2VyUmVjdC5yaWdodCkpe1xuXHRcdFx0XHRpZihyb3cuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUgJiYgY29sdW1uLmdldEVsZW1lbnQoKS5wYXJlbnROb2RlKXtcblx0XHRcdFx0XHQvLyBVc2UgZmFzdGVyIGF1dG9TY3JvbGwgd2hlbiB0aGUgZWxlbWVudHMgYXJlIG9uIHRoZSBET01cblx0XHRcdFx0XHR0aGlzLmF1dG9TY3JvbGwocmFuZ2UsIHJvdy5nZXRFbGVtZW50KCksIGNvbHVtbi5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29sdW1uLmdldENvbXBvbmVudCgpLnNjcm9sbFRvKHVuZGVmaW5lZCwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubGF5b3V0RWxlbWVudCgpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdHJhbmdlUmVtb3ZlZChyZW1vdmVkKXtcblx0XHR0aGlzLnJhbmdlcyA9IHRoaXMucmFuZ2VzLmZpbHRlcigocmFuZ2UpID0+IHJhbmdlICE9PSByZW1vdmVkKTtcblx0XHRcblx0XHRpZih0aGlzLmFjdGl2ZVJhbmdlID09PSByZW1vdmVkKXtcblx0XHRcdGlmKHRoaXMucmFuZ2VzLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuYWN0aXZlUmFuZ2UgPSB0aGlzLnJhbmdlc1t0aGlzLnJhbmdlcy5sZW5ndGggLSAxXTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5hZGRSYW5nZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmxheW91dEVsZW1lbnQoKTtcblx0fVxuXHRcblx0ZmluZEp1bXBSb3coY29sdW1uLCByb3dzLCByZXZlcnNlLCBlbXB0eVN0YXJ0LCBlbXB0eVNpZGUpe1xuXHRcdGlmKHJldmVyc2Upe1xuXHRcdFx0cm93cyA9IHJvd3MucmV2ZXJzZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmZpbmRKdW1wSXRlbShlbXB0eVN0YXJ0LCBlbXB0eVNpZGUsIHJvd3MsIGZ1bmN0aW9uKHJvdyl7cmV0dXJuIHJvdy5nZXREYXRhKClbY29sdW1uLmdldEZpZWxkKCldO30pO1xuXHR9XG5cdFxuXHRmaW5kSnVtcENvbChyb3csIGNvbHVtbnMsIHJldmVyc2UsIGVtcHR5U3RhcnQsIGVtcHR5U2lkZSl7XG5cdFx0aWYocmV2ZXJzZSl7XG5cdFx0XHRjb2x1bW5zID0gY29sdW1ucy5yZXZlcnNlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZEp1bXBJdGVtKGVtcHR5U3RhcnQsIGVtcHR5U2lkZSwgY29sdW1ucywgZnVuY3Rpb24oY29sdW1uKXtyZXR1cm4gcm93LmdldERhdGEoKVtjb2x1bW4uZ2V0RmllbGQoKV07fSk7XG5cdH1cblxuXHRmaW5kSnVtcEl0ZW0oZW1wdHlTdGFydCwgZW1wdHlTaWRlLCBpdGVtcywgdmFsdWVSZXNvbHZlcil7XG5cdFx0dmFyIG5leHRJdGVtO1xuXG5cdFx0Zm9yKGxldCBjdXJyZW50SXRlbSBvZiBpdGVtcyl7XG5cdFx0XHRsZXQgY3VycmVudFZhbHVlID0gdmFsdWVSZXNvbHZlcihjdXJyZW50SXRlbSk7XG5cdFx0XHRcblx0XHRcdGlmKGVtcHR5U3RhcnQpe1xuXHRcdFx0XHRuZXh0SXRlbSA9IGN1cnJlbnRJdGVtO1xuXHRcdFx0XHRpZihjdXJyZW50VmFsdWUpe1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKGVtcHR5U2lkZSl7XG5cdFx0XHRcdFx0bmV4dEl0ZW0gPSBjdXJyZW50SXRlbTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihjdXJyZW50VmFsdWUpe1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYoY3VycmVudFZhbHVlKXtcblx0XHRcdFx0XHRcdG5leHRJdGVtID0gY3VycmVudEl0ZW07XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5leHRJdGVtO1xuXHR9XG5cblx0ZmluZEp1bXBDZWxsTGVmdChyb3dQb3MsIGNvbFBvcyl7XG5cdFx0dmFyIHJvdyA9IHRoaXMuZ2V0Um93QnlSYW5nZVBvcyhyb3dQb3MpLFxuXHRcdGNvbHVtbnMgPSB0aGlzLmdldFRhYmxlQ29sdW1ucygpLFxuXHRcdGlzU3RhcnRpbmdDZWxsRW1wdHkgPSB0aGlzLmlzRW1wdHkocm93LmdldERhdGEoKVtjb2x1bW5zW2NvbFBvc10uZ2V0RmllbGQoKV0pLFxuXHRcdGlzTGVmdE9mU3RhcnRpbmdDZWxsRW1wdHkgPSBjb2x1bW5zW2NvbFBvcyAtIDFdID8gdGhpcy5pc0VtcHR5KHJvdy5nZXREYXRhKClbY29sdW1uc1tjb2xQb3MgLSAxXS5nZXRGaWVsZCgpXSkgOiBmYWxzZSxcblx0XHR0YXJnZXRDb2xzID0gdGhpcy5yb3dIZWFkZXIgPyBjb2x1bW5zLnNsaWNlKDEsIGNvbFBvcykgOiBjb2x1bW5zLnNsaWNlKDAsIGNvbFBvcyksXG5cdFx0anVtcENvbCA9IHRoaXMuZmluZEp1bXBDb2wocm93LCB0YXJnZXRDb2xzLCB0cnVlLCBpc1N0YXJ0aW5nQ2VsbEVtcHR5LCBpc0xlZnRPZlN0YXJ0aW5nQ2VsbEVtcHR5KTtcblx0XHRcblx0XHRpZihqdW1wQ29sKXtcblx0XHRcdHJldHVybiBqdW1wQ29sLmdldFBvc2l0aW9uKCkgLSAxO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gY29sUG9zO1xuXHR9XG5cdFxuXHRmaW5kSnVtcENlbGxSaWdodChyb3dQb3MsIGNvbFBvcyl7XG5cdFx0dmFyIHJvdyA9IHRoaXMuZ2V0Um93QnlSYW5nZVBvcyhyb3dQb3MpLFxuXHRcdGNvbHVtbnMgPSB0aGlzLmdldFRhYmxlQ29sdW1ucygpLFxuXHRcdGlzU3RhcnRpbmdDZWxsRW1wdHkgPSB0aGlzLmlzRW1wdHkocm93LmdldERhdGEoKVtjb2x1bW5zW2NvbFBvc10uZ2V0RmllbGQoKV0pLFxuXHRcdGlzUmlnaHRPZlN0YXJ0aW5nQ2VsbEVtcHR5ID0gY29sdW1uc1tjb2xQb3MgKyAxXSA/IHRoaXMuaXNFbXB0eShyb3cuZ2V0RGF0YSgpW2NvbHVtbnNbY29sUG9zICsgMV0uZ2V0RmllbGQoKV0pIDogZmFsc2UsXG5cdFx0anVtcENvbCA9IHRoaXMuZmluZEp1bXBDb2wocm93LCBjb2x1bW5zLnNsaWNlKGNvbFBvcyArIDEsIGNvbHVtbnMubGVuZ3RoKSwgZmFsc2UsIGlzU3RhcnRpbmdDZWxsRW1wdHksIGlzUmlnaHRPZlN0YXJ0aW5nQ2VsbEVtcHR5KTtcblx0XHRcblx0XHRpZihqdW1wQ29sKXtcblx0XHRcdHJldHVybiBqdW1wQ29sLmdldFBvc2l0aW9uKCkgLSAxO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gY29sUG9zO1xuXHR9XG5cdFxuXHRmaW5kSnVtcENlbGxVcChyb3dQb3MsIGNvbFBvcykge1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmdldENvbHVtbkJ5UmFuZ2VQb3MoY29sUG9zKSxcblx0XHRyb3dzID0gdGhpcy5nZXRUYWJsZVJvd3MoKSxcblx0XHRpc1N0YXJ0aW5nQ2VsbEVtcHR5ID0gdGhpcy5pc0VtcHR5KHJvd3Nbcm93UG9zXS5nZXREYXRhKClbY29sdW1uLmdldEZpZWxkKCldKSxcblx0XHRpc1RvcE9mU3RhcnRpbmdDZWxsRW1wdHkgPSByb3dzW3Jvd1BvcyAtIDFdID8gdGhpcy5pc0VtcHR5KHJvd3Nbcm93UG9zIC0gMV0uZ2V0RGF0YSgpW2NvbHVtbi5nZXRGaWVsZCgpXSkgOiBmYWxzZSxcblx0XHRqdW1wUm93ID0gdGhpcy5maW5kSnVtcFJvdyhjb2x1bW4sIHJvd3Muc2xpY2UoMCwgcm93UG9zKSwgdHJ1ZSwgaXNTdGFydGluZ0NlbGxFbXB0eSwgaXNUb3BPZlN0YXJ0aW5nQ2VsbEVtcHR5KTtcblx0XHRcblx0XHRpZihqdW1wUm93KXtcblx0XHRcdHJldHVybiBqdW1wUm93LnBvc2l0aW9uIC0gMTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvd1Bvcztcblx0fVxuXHRcblx0ZmluZEp1bXBDZWxsRG93bihyb3dQb3MsIGNvbFBvcykge1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmdldENvbHVtbkJ5UmFuZ2VQb3MoY29sUG9zKSxcblx0XHRyb3dzID0gdGhpcy5nZXRUYWJsZVJvd3MoKSxcblx0XHRpc1N0YXJ0aW5nQ2VsbEVtcHR5ID0gdGhpcy5pc0VtcHR5KHJvd3Nbcm93UG9zXS5nZXREYXRhKClbY29sdW1uLmdldEZpZWxkKCldKSxcblx0XHRpc0JvdHRvbU9mU3RhcnRpbmdDZWxsRW1wdHkgPSByb3dzW3Jvd1BvcyArIDFdID8gdGhpcy5pc0VtcHR5KHJvd3Nbcm93UG9zICsgMV0uZ2V0RGF0YSgpW2NvbHVtbi5nZXRGaWVsZCgpXSkgOiBmYWxzZSxcblx0XHRqdW1wUm93ID0gdGhpcy5maW5kSnVtcFJvdyhjb2x1bW4sIHJvd3Muc2xpY2Uocm93UG9zICsgMSwgcm93cy5sZW5ndGgpLCBmYWxzZSwgaXNTdGFydGluZ0NlbGxFbXB0eSwgaXNCb3R0b21PZlN0YXJ0aW5nQ2VsbEVtcHR5KTtcblx0XHRcblx0XHRpZihqdW1wUm93KXtcblx0XHRcdHJldHVybiBqdW1wUm93LnBvc2l0aW9uIC0gMTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvd1Bvcztcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyAgICAgIFNlbGVjdGlvbiAgICAgIC8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0bmV3U2VsZWN0aW9uKGV2ZW50LCBlbGVtZW50KSB7XG5cdFx0dmFyIHJhbmdlO1xuXHRcdFxuXHRcdGlmIChlbGVtZW50LnR5cGUgPT09IFwiY29sdW1uXCIpIHtcblx0XHRcdGlmKCF0aGlzLmNvbHVtblNlbGVjdGlvbil7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYgKGVsZW1lbnQgPT09IHRoaXMucm93SGVhZGVyKSB7XG5cdFx0XHRcdHJhbmdlID0gdGhpcy5yZXNldFJhbmdlcygpO1xuXHRcdFx0XHR0aGlzLnNlbGVjdGluZyA9IFwiYWxsXCI7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgdG9wTGVmdENlbGwsIGJvdHRvbVJpZ2h0Q2VsbCA9IHRoaXMuZ2V0Q2VsbCgtMSwgLTEpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5yb3dIZWFkZXIpe1xuXHRcdFx0XHRcdHRvcExlZnRDZWxsID0gdGhpcy5nZXRDZWxsKDAsIDEpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dG9wTGVmdENlbGwgPSB0aGlzLmdldENlbGwoMCwgMCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJhbmdlLnNldEJvdW5kcyh0b3BMZWZ0Q2VsbCwgYm90dG9tUmlnaHRDZWxsKTtcdFx0XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0aW5nID0gXCJjb2x1bW5cIjtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuY29sdW1uID09PSB0aGlzLnJvd0hlYWRlcikge1xuXHRcdFx0dGhpcy5zZWxlY3RpbmcgPSBcInJvd1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNlbGVjdGluZyA9IFwiY2VsbFwiO1xuXHRcdH1cblx0XHRcblx0XHRpZiAoZXZlbnQuc2hpZnRLZXkpIHtcblx0XHRcdHRoaXMuYWN0aXZlUmFuZ2Uuc2V0Qm91bmRzKGZhbHNlLCBlbGVtZW50KTtcblx0XHR9IGVsc2UgaWYgKGV2ZW50LmN0cmxLZXkpIHtcblx0XHRcdHRoaXMuYWRkUmFuZ2UoKS5zZXRCb3VuZHMoZWxlbWVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucmVzZXRSYW5nZXMoKS5zZXRCb3VuZHMoZWxlbWVudCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhdXRvU2Nyb2xsKHJhbmdlLCByb3csIGNvbHVtbikge1xuXHRcdHZhciB0YWJsZUhvbGRlciA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LFxuXHRcdHJlY3QsIHZpZXcsIHdpdGhpbkhvcml6b250YWxWaWV3LCB3aXRoaW5WZXJ0aWNhbFZpZXc7XG5cdFx0XG5cdFx0aWYgKHR5cGVvZiByb3cgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyb3cgPSB0aGlzLmdldFJvd0J5UmFuZ2VQb3MocmFuZ2UuZW5kLnJvdykuZ2V0RWxlbWVudCgpO1xuXHRcdH1cblx0XHRcblx0XHRpZiAodHlwZW9mIGNvbHVtbiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdGNvbHVtbiA9IHRoaXMuZ2V0Q29sdW1uQnlSYW5nZVBvcyhyYW5nZS5lbmQuY29sKS5nZXRFbGVtZW50KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJlY3QgPSB7XG5cdFx0XHRsZWZ0OiBjb2x1bW4ub2Zmc2V0TGVmdCxcblx0XHRcdHJpZ2h0OiBjb2x1bW4ub2Zmc2V0TGVmdCArIGNvbHVtbi5vZmZzZXRXaWR0aCxcblx0XHRcdHRvcDogcm93Lm9mZnNldFRvcCxcblx0XHRcdGJvdHRvbTogcm93Lm9mZnNldFRvcCArIHJvdy5vZmZzZXRIZWlnaHQsXG5cdFx0fTtcblx0XHRcblx0XHR2aWV3ID0ge1xuXHRcdFx0bGVmdDogdGFibGVIb2xkZXIuc2Nyb2xsTGVmdCArIHRoaXMuZ2V0Um93SGVhZGVyV2lkdGgoKSxcblx0XHRcdHJpZ2h0OiBNYXRoLmNlaWwodGFibGVIb2xkZXIuc2Nyb2xsTGVmdCArIHRhYmxlSG9sZGVyLmNsaWVudFdpZHRoKSxcblx0XHRcdHRvcDogdGFibGVIb2xkZXIuc2Nyb2xsVG9wLFxuXHRcdFx0Ym90dG9tOlx0dGFibGVIb2xkZXIuc2Nyb2xsVG9wICtcdHRhYmxlSG9sZGVyLm9mZnNldEhlaWdodCAtIHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxiYXJXaWR0aCxcblx0XHR9O1xuXHRcdFxuXHRcdHdpdGhpbkhvcml6b250YWxWaWV3ID0gdmlldy5sZWZ0IDwgcmVjdC5sZWZ0ICYmXHRyZWN0LmxlZnQgPCB2aWV3LnJpZ2h0ICYmIHZpZXcubGVmdCA8IHJlY3QucmlnaHQgJiZcdHJlY3QucmlnaHQgPCB2aWV3LnJpZ2h0O1xuXHRcdFxuXHRcdHdpdGhpblZlcnRpY2FsVmlldyA9IHZpZXcudG9wIDwgcmVjdC50b3AgJiZcdHJlY3QudG9wIDwgdmlldy5ib3R0b20gJiYgdmlldy50b3AgPCByZWN0LmJvdHRvbSAmJlx0cmVjdC5ib3R0b20gPCB2aWV3LmJvdHRvbTtcblx0XHRcblx0XHRpZiAoIXdpdGhpbkhvcml6b250YWxWaWV3KSB7XG5cdFx0XHRpZiAocmVjdC5sZWZ0IDwgdmlldy5sZWZ0KSB7XG5cdFx0XHRcdHRhYmxlSG9sZGVyLnNjcm9sbExlZnQgPSByZWN0LmxlZnQgLSB0aGlzLmdldFJvd0hlYWRlcldpZHRoKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHJlY3QucmlnaHQgPiB2aWV3LnJpZ2h0KSB7XG5cdFx0XHRcdHRhYmxlSG9sZGVyLnNjcm9sbExlZnQgPSBNYXRoLm1pbihyZWN0LnJpZ2h0IC0gdGFibGVIb2xkZXIuY2xpZW50V2lkdGgsIHJlY3QubGVmdCAtIHRoaXMuZ2V0Um93SGVhZGVyV2lkdGgoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmICghd2l0aGluVmVydGljYWxWaWV3KSB7XG5cdFx0XHRpZiAocmVjdC50b3AgPCB2aWV3LnRvcCkge1xuXHRcdFx0XHR0YWJsZUhvbGRlci5zY3JvbGxUb3AgPSByZWN0LnRvcDtcblx0XHRcdH0gZWxzZSBpZiAocmVjdC5ib3R0b20gPiB2aWV3LmJvdHRvbSkge1xuXHRcdFx0XHR0YWJsZUhvbGRlci5zY3JvbGxUb3AgPSByZWN0LmJvdHRvbSAtIHRhYmxlSG9sZGVyLmNsaWVudEhlaWdodDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vICAgICAgIExheW91dCAgICAgICAgLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0bGF5b3V0Q2hhbmdlKCl7XG5cdFx0dGhpcy5vdmVybGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLmxheW91dENoYW5nZVRpbWVvdXQpO1xuXHRcdHRoaXMubGF5b3V0Q2hhbmdlVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5sYXlvdXRSYW5nZXMuYmluZCh0aGlzKSwgMjAwKTtcblx0fVxuXHRcblx0cmVkcmF3KGZvcmNlKSB7XG5cdFx0aWYgKGZvcmNlKSB7XG5cdFx0XHR0aGlzLnNlbGVjdGluZyA9ICdjZWxsJztcblx0XHRcdHRoaXMucmVzZXRSYW5nZXMoKTtcblx0XHRcdHRoaXMubGF5b3V0RWxlbWVudCgpO1xuXHRcdH1cblx0fVxuXHRcblx0bGF5b3V0RWxlbWVudCh2aXNpYmxlUm93cykge1xuXHRcdHZhciByb3dzO1xuXHRcdFxuXHRcdGlmICh2aXNpYmxlUm93cykge1xuXHRcdFx0cm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRWaXNpYmxlUm93cyh0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRpZiAocm93LnR5cGUgPT09IFwicm93XCIpIHtcblx0XHRcdFx0dGhpcy5sYXlvdXRSb3cocm93KTtcblx0XHRcdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHRoaXMucmVuZGVyQ2VsbChjZWxsKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5nZXRUYWJsZUNvbHVtbnMoKS5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHRoaXMubGF5b3V0Q29sdW1uKGNvbHVtbik7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5sYXlvdXRSYW5nZXMoKTtcblx0fVxuXHRcblx0bGF5b3V0Um93KHJvdykge1xuXHRcdHZhciBlbCA9IHJvdy5nZXRFbGVtZW50KCksXG5cdFx0c2VsZWN0ZWQgPSBmYWxzZSxcblx0XHRvY2N1cGllZCA9IHRoaXMucmFuZ2VzLnNvbWUoKHJhbmdlKSA9PiByYW5nZS5vY2N1cGllc1Jvdyhyb3cpKTtcblx0XHRcblx0XHRpZiAodGhpcy5zZWxlY3RpbmcgPT09IFwicm93XCIpIHtcblx0XHRcdHNlbGVjdGVkID0gb2NjdXBpZWQ7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnNlbGVjdGluZyA9PT0gXCJhbGxcIikge1xuXHRcdFx0c2VsZWN0ZWQgPSB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRlbC5jbGFzc0xpc3QudG9nZ2xlKFwidGFidWxhdG9yLXJhbmdlLXNlbGVjdGVkXCIsIHNlbGVjdGVkKTtcblx0XHRlbC5jbGFzc0xpc3QudG9nZ2xlKFwidGFidWxhdG9yLXJhbmdlLWhpZ2hsaWdodFwiLCBvY2N1cGllZCk7XG5cdH1cblx0XG5cdGxheW91dENvbHVtbihjb2x1bW4pIHtcblx0XHR2YXIgZWwgPSBjb2x1bW4uZ2V0RWxlbWVudCgpLFx0XHRcblx0XHRzZWxlY3RlZCA9IGZhbHNlLFxuXHRcdG9jY3VwaWVkID0gdGhpcy5yYW5nZXMuc29tZSgocmFuZ2UpID0+IHJhbmdlLm9jY3VwaWVzQ29sdW1uKGNvbHVtbikpO1xuXHRcdFxuXHRcdGlmICh0aGlzLnNlbGVjdGluZyA9PT0gXCJjb2x1bW5cIikge1xuXHRcdFx0c2VsZWN0ZWQgPSBvY2N1cGllZDtcblx0XHR9IGVsc2UgaWYgKHRoaXMuc2VsZWN0aW5nID09PSBcImFsbFwiKSB7XG5cdFx0XHRzZWxlY3RlZCA9IHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC50b2dnbGUoXCJ0YWJ1bGF0b3ItcmFuZ2Utc2VsZWN0ZWRcIiwgc2VsZWN0ZWQpO1xuXHRcdGVsLmNsYXNzTGlzdC50b2dnbGUoXCJ0YWJ1bGF0b3ItcmFuZ2UtaGlnaGxpZ2h0XCIsIG9jY3VwaWVkKTtcblx0fVxuXHRcblx0bGF5b3V0UmFuZ2VzKCkge1xuXHRcdHZhciBhY3RpdmVDZWxsLCBhY3RpdmVDZWxsRWwsIGFjdGl2ZVJvd0VsO1xuXHRcdFxuXHRcdGlmICghdGhpcy50YWJsZS5pbml0aWFsaXplZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHRhY3RpdmVDZWxsID0gdGhpcy5nZXRBY3RpdmVDZWxsKCk7XG5cdFx0XG5cdFx0aWYgKCFhY3RpdmVDZWxsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0YWN0aXZlQ2VsbEVsID0gYWN0aXZlQ2VsbC5nZXRFbGVtZW50KCk7XG5cdFx0YWN0aXZlUm93RWwgPSBhY3RpdmVDZWxsLnJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLnJ0bCl7XG5cdFx0XHR0aGlzLmFjdGl2ZVJhbmdlQ2VsbEVsZW1lbnQuc3R5bGUucmlnaHQgPSBhY3RpdmVSb3dFbC5vZmZzZXRXaWR0aCAtIGFjdGl2ZUNlbGxFbC5vZmZzZXRMZWZ0IC0gYWN0aXZlQ2VsbEVsLm9mZnNldFdpZHRoICsgXCJweFwiO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuYWN0aXZlUmFuZ2VDZWxsRWxlbWVudC5zdHlsZS5sZWZ0ID0gYWN0aXZlUm93RWwub2Zmc2V0TGVmdCArIGFjdGl2ZUNlbGxFbC5vZmZzZXRMZWZ0ICsgXCJweFwiO1xuXHRcdH1cblxuXHRcdHRoaXMuYWN0aXZlUmFuZ2VDZWxsRWxlbWVudC5zdHlsZS50b3AgPVx0YWN0aXZlUm93RWwub2Zmc2V0VG9wICsgXCJweFwiO1xuXHRcdHRoaXMuYWN0aXZlUmFuZ2VDZWxsRWxlbWVudC5zdHlsZS53aWR0aCA9IGFjdGl2ZUNlbGxFbC5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0XHR0aGlzLmFjdGl2ZVJhbmdlQ2VsbEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gIGFjdGl2ZVJvd0VsLm9mZnNldEhlaWdodCAgKyBcInB4XCI7XG5cdFx0XG5cdFx0dGhpcy5yYW5nZXMuZm9yRWFjaCgocmFuZ2UpID0+IHJhbmdlLmxheW91dCgpKTtcblx0XHRcblx0XHR0aGlzLm92ZXJsYXkuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuXHR9XG5cdFxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyAgSGVscGVyIEZ1bmN0aW9ucyAgIC8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cdFxuXHRcblx0Z2V0Q2VsbChyb3dJZHgsIGNvbElkeCkge1xuXHRcdHZhciByb3c7XG5cdFx0XG5cdFx0aWYgKGNvbElkeCA8IDApIHtcblx0XHRcdGNvbElkeCA9IHRoaXMuZ2V0VGFibGVDb2x1bW5zKCkubGVuZ3RoICsgY29sSWR4O1xuXHRcdFx0aWYgKGNvbElkeCA8IDApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmIChyb3dJZHggPCAwKSB7XG5cdFx0XHRyb3dJZHggPSB0aGlzLmdldFRhYmxlUm93cygpLmxlbmd0aCArIHJvd0lkeDtcblx0XHR9XG5cdFx0XG5cdFx0cm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21Qb3NpdGlvbihyb3dJZHggKyAxKTtcblx0XHRcblx0XHRyZXR1cm4gcm93ID8gcm93LmdldENlbGxzKGZhbHNlLCB0cnVlKS5maWx0ZXIoKGNlbGwpID0+IGNlbGwuY29sdW1uLnZpc2libGUpW2NvbElkeF0gOiBudWxsO1xuXHR9XG5cdFxuXHRcblx0Z2V0QWN0aXZlQ2VsbCgpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRDZWxsKHRoaXMuYWN0aXZlUmFuZ2Uuc3RhcnQucm93LCB0aGlzLmFjdGl2ZVJhbmdlLnN0YXJ0LmNvbCk7XG5cdH1cblx0XG5cdGdldFJvd0J5UmFuZ2VQb3MocG9zKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFibGVSb3dzKClbcG9zXTtcblx0fVxuXHRcblx0Z2V0Q29sdW1uQnlSYW5nZVBvcyhwb3MpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRUYWJsZUNvbHVtbnMoKVtwb3NdO1xuXHR9XG5cdFxuXHRnZXRUYWJsZVJvd3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmZpbHRlcihyb3c9PiByb3cudHlwZSA9PT0gXCJyb3dcIik7XG5cdH1cblx0XG5cdGdldFRhYmxlQ29sdW1ucygpIHtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFZpc2libGVDb2x1bW5zQnlJbmRleCgpO1xuXHR9XG5cdFxuXHRhZGRSYW5nZShzdGFydCwgZW5kKSB7XG5cdFx0dmFyICByYW5nZTtcblx0XHRcblx0XHRpZih0aGlzLm1heFJhbmdlcyAhPT0gdHJ1ZSAmJiB0aGlzLnJhbmdlcy5sZW5ndGggPj0gdGhpcy5tYXhSYW5nZXMpe1xuXHRcdFx0dGhpcy5yYW5nZXMuc2hpZnQoKS5kZXN0cm95KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJhbmdlID0gbmV3IFJhbmdlKHRoaXMudGFibGUsIHRoaXMsIHN0YXJ0LCBlbmQpO1xuXHRcdFxuXHRcdHRoaXMuYWN0aXZlUmFuZ2UgPSByYW5nZTtcblx0XHR0aGlzLnJhbmdlcy5wdXNoKHJhbmdlKTtcblx0XHR0aGlzLnJhbmdlQ29udGFpbmVyLmFwcGVuZENoaWxkKHJhbmdlLmVsZW1lbnQpO1xuXHRcdFxuXHRcdHJldHVybiByYW5nZTtcblx0fVxuXHRcblx0cmVzZXRSYW5nZXMoKSB7XG5cdFx0dmFyIHJhbmdlLCBjZWxsLCB2aXNpYmxlQ2VsbHM7XG5cdFx0XG5cdFx0dGhpcy5yYW5nZXMuZm9yRWFjaCgocmFuZ2UpID0+IHJhbmdlLmRlc3Ryb3koKSk7XG5cdFx0dGhpcy5yYW5nZXMgPSBbXTtcblx0XHRcblx0XHRyYW5nZSA9IHRoaXMuYWRkUmFuZ2UoKTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWN0aXZlUm93cy5sZW5ndGgpe1xuXHRcdFx0dmlzaWJsZUNlbGxzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3NbMF0uY2VsbHMuZmlsdGVyKChjZWxsKSA9PiBjZWxsLmNvbHVtbi52aXNpYmxlKTtcblx0XHRcdGNlbGwgPSB2aXNpYmxlQ2VsbHNbdGhpcy5yb3dIZWFkZXIgPyAxIDogMF07XG5cblx0XHRcdGlmKGNlbGwpe1xuXHRcdFx0XHRyYW5nZS5zZXRCb3VuZHMoY2VsbCk7XG5cdFx0XHRcdGlmKHRoaXMub3B0aW9ucyhcInNlbGVjdGFibGVSYW5nZUF1dG9Gb2N1c1wiKSl7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplRm9jdXMoY2VsbCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJhbmdlO1xuXHR9XG5cdFxuXHR0YWJsZURlc3Ryb3llZCgpe1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2VVcEV2ZW50KTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmtleURvd25FdmVudCk7XG5cdH1cblx0XG5cdHNlbGVjdGVkUm93cyhjb21wb25lbnQpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50ID8gdGhpcy5hY3RpdmVSYW5nZS5nZXRSb3dzKCkubWFwKChyb3cpID0+IHJvdy5nZXRDb21wb25lbnQoKSkgOiB0aGlzLmFjdGl2ZVJhbmdlLmdldFJvd3MoKTtcblx0fVxuXHRcblx0c2VsZWN0ZWRDb2x1bW5zKGNvbXBvbmVudCkge1xuXHRcdHJldHVybiBjb21wb25lbnQgPyB0aGlzLmFjdGl2ZVJhbmdlLmdldENvbHVtbnMoKS5tYXAoKGNvbCkgPT4gY29sLmdldENvbXBvbmVudCgpKSA6IHRoaXMuYWN0aXZlUmFuZ2UuZ2V0Q29sdW1ucygpO1xuXHR9XG5cblx0Z2V0Um93SGVhZGVyV2lkdGgoKXtcblx0XHRpZighdGhpcy5yb3dIZWFkZXIpe1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnJvd0hlYWRlci5nZXRFbGVtZW50KCkub2Zmc2V0V2lkdGg7XG5cdH1cblxuXHRpc0VtcHR5KHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IFwiXCI7XG5cdH1cbn1cblxuLy9zb3J0IG51bWJlcnNcbmZ1bmN0aW9uIG51bWJlcihhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIGFsaWduRW1wdHlWYWx1ZXMgPSBwYXJhbXMuYWxpZ25FbXB0eVZhbHVlcztcblx0dmFyIGRlY2ltYWwgPSBwYXJhbXMuZGVjaW1hbFNlcGFyYXRvcjtcblx0dmFyIHRob3VzYW5kID0gcGFyYW1zLnRob3VzYW5kU2VwYXJhdG9yO1xuXHR2YXIgZW1wdHlBbGlnbiA9IDA7XG5cblx0YSA9IFN0cmluZyhhKTtcblx0YiA9IFN0cmluZyhiKTtcblxuXHRpZih0aG91c2FuZCl7XG5cdFx0YSA9IGEuc3BsaXQodGhvdXNhbmQpLmpvaW4oXCJcIik7XG5cdFx0YiA9IGIuc3BsaXQodGhvdXNhbmQpLmpvaW4oXCJcIik7XG5cdH1cblxuXHRpZihkZWNpbWFsKXtcblx0XHRhID0gYS5zcGxpdChkZWNpbWFsKS5qb2luKFwiLlwiKTtcblx0XHRiID0gYi5zcGxpdChkZWNpbWFsKS5qb2luKFwiLlwiKTtcblx0fVxuXG5cdGEgPSBwYXJzZUZsb2F0KGEpO1xuXHRiID0gcGFyc2VGbG9hdChiKTtcblxuXHQvL2hhbmRsZSBub24gbnVtZXJpYyB2YWx1ZXNcblx0aWYoaXNOYU4oYSkpe1xuXHRcdGVtcHR5QWxpZ24gPSAgaXNOYU4oYikgPyAwIDogLTE7XG5cdH1lbHNlIGlmKGlzTmFOKGIpKXtcblx0XHRlbXB0eUFsaWduID0gIDE7XG5cdH1lbHNlIHtcblx0XHQvL2NvbXBhcmUgdmFsaWQgdmFsdWVzXG5cdFx0cmV0dXJuIGEgLSBiO1xuXHR9XG5cblx0Ly9maXggZW1wdHkgdmFsdWVzIGluIHBvc2l0aW9uXG5cdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdGVtcHR5QWxpZ24gKj0gLTE7XG5cdH1cblxuXHRyZXR1cm4gZW1wdHlBbGlnbjtcbn1cblxuLy9zb3J0IHN0cmluZ3NcbmZ1bmN0aW9uIHN0cmluZyhhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIGFsaWduRW1wdHlWYWx1ZXMgPSBwYXJhbXMuYWxpZ25FbXB0eVZhbHVlcztcblx0dmFyIGVtcHR5QWxpZ24gPSAwO1xuXHR2YXIgbG9jYWxlO1xuXG5cdC8vaGFuZGxlIGVtcHR5IHZhbHVlc1xuXHRpZighYSl7XG5cdFx0ZW1wdHlBbGlnbiA9ICAhYiA/IDAgOiAtMTtcblx0fWVsc2UgaWYoIWIpe1xuXHRcdGVtcHR5QWxpZ24gPSAgMTtcblx0fWVsc2Uge1xuXHRcdC8vY29tcGFyZSB2YWxpZCB2YWx1ZXNcblx0XHRzd2l0Y2godHlwZW9mIHBhcmFtcy5sb2NhbGUpe1xuXHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0aWYocGFyYW1zLmxvY2FsZSl7XG5cdFx0XHRcdFx0bG9jYWxlID0gdGhpcy5sYW5nTG9jYWxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdGxvY2FsZSA9IHBhcmFtcy5sb2NhbGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBTdHJpbmcoYSkudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKFN0cmluZyhiKS50b0xvd2VyQ2FzZSgpLCBsb2NhbGUpO1xuXHR9XG5cblx0Ly9maXggZW1wdHkgdmFsdWVzIGluIHBvc2l0aW9uXG5cdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdGVtcHR5QWxpZ24gKj0gLTE7XG5cdH1cblxuXHRyZXR1cm4gZW1wdHlBbGlnbjtcbn1cblxuLy9zb3J0IGRhdGV0aW1lXG5mdW5jdGlvbiBkYXRldGltZShhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIERUID0gdGhpcy50YWJsZS5kZXBlbmRlbmN5UmVnaXN0cnkubG9va3VwKFtcImx1eG9uXCIsIFwiRGF0ZVRpbWVcIl0sIFwiRGF0ZVRpbWVcIik7XG5cdHZhciBmb3JtYXQgPSBwYXJhbXMuZm9ybWF0IHx8IFwiZGQvTU0veXl5eSBISDptbTpzc1wiLFxuXHRhbGlnbkVtcHR5VmFsdWVzID0gcGFyYW1zLmFsaWduRW1wdHlWYWx1ZXMsXG5cdGVtcHR5QWxpZ24gPSAwO1xuXG5cdGlmKHR5cGVvZiBEVCAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRpZighRFQuaXNEYXRlVGltZShhKSl7XG5cdFx0XHRpZihmb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0XHRhID0gRFQuZnJvbUlTTyhTdHJpbmcoYSkpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRhID0gRFQuZnJvbUZvcm1hdChTdHJpbmcoYSksIGZvcm1hdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoIURULmlzRGF0ZVRpbWUoYikpe1xuXHRcdFx0aWYoZm9ybWF0ID09PSBcImlzb1wiKXtcblx0XHRcdFx0YiA9IERULmZyb21JU08oU3RyaW5nKGIpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0YiA9IERULmZyb21Gb3JtYXQoU3RyaW5nKGIpLCBmb3JtYXQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKCFhLmlzVmFsaWQpe1xuXHRcdFx0ZW1wdHlBbGlnbiA9ICFiLmlzVmFsaWQgPyAwIDogLTE7XG5cdFx0fWVsc2UgaWYoIWIuaXNWYWxpZCl7XG5cdFx0XHRlbXB0eUFsaWduID0gIDE7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly9jb21wYXJlIHZhbGlkIHZhbHVlc1xuXHRcdFx0cmV0dXJuIGEgLSBiO1xuXHRcdH1cblxuXHRcdC8vZml4IGVtcHR5IHZhbHVlcyBpbiBwb3NpdGlvblxuXHRcdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdFx0ZW1wdHlBbGlnbiAqPSAtMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW1wdHlBbGlnbjtcblxuXHR9ZWxzZSB7XG5cdFx0Y29uc29sZS5lcnJvcihcIlNvcnQgRXJyb3IgLSAnZGF0ZXRpbWUnIHNvcnRlciBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdH1cbn1cblxuLy9zb3J0IGRhdGVcbmZ1bmN0aW9uIGRhdGUoYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdGlmKCFwYXJhbXMuZm9ybWF0KXtcblx0XHRwYXJhbXMuZm9ybWF0ID0gXCJkZC9NTS95eXl5XCI7XG5cdH1cblxuXHRyZXR1cm4gZGF0ZXRpbWUuY2FsbCh0aGlzLCBhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKTtcbn1cblxuLy9zb3J0IHRpbWVzXG5mdW5jdGlvbiB0aW1lKGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpe1xuXHRpZighcGFyYW1zLmZvcm1hdCl7XG5cdFx0cGFyYW1zLmZvcm1hdCA9IFwiSEg6bW1cIjtcblx0fVxuXG5cdHJldHVybiBkYXRldGltZS5jYWxsKHRoaXMsIGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpO1xufVxuXG4vL3NvcnQgYm9vbGVhbnNcbmZ1bmN0aW9uIGJvb2xlYW4oYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdHZhciBlbDEgPSBhID09PSB0cnVlIHx8IGEgPT09IFwidHJ1ZVwiIHx8IGEgPT09IFwiVHJ1ZVwiIHx8IGEgPT09IDEgPyAxIDogMDtcblx0dmFyIGVsMiA9IGIgPT09IHRydWUgfHwgYiA9PT0gXCJ0cnVlXCIgfHwgYiA9PT0gXCJUcnVlXCIgfHwgYiA9PT0gMSA/IDEgOiAwO1xuXG5cdHJldHVybiBlbDEgLSBlbDI7XG59XG5cbi8vc29ydCBpZiBlbGVtZW50IGNvbnRhaW5zIGFueSBkYXRhXG5mdW5jdGlvbiBhcnJheShhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIHR5cGUgPSBwYXJhbXMudHlwZSB8fCBcImxlbmd0aFwiLFxuXHRhbGlnbkVtcHR5VmFsdWVzID0gcGFyYW1zLmFsaWduRW1wdHlWYWx1ZXMsXG5cdGVtcHR5QWxpZ24gPSAwLFxuXHR0YWJsZSA9IHRoaXMudGFibGUsXG5cdHZhbHVlTWFwO1xuXG5cdGlmKHBhcmFtcy52YWx1ZU1hcCl7XG5cdFx0aWYodHlwZW9mIHBhcmFtcy52YWx1ZU1hcCA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHR2YWx1ZU1hcCA9IGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0cmV0dXJuIHZhbHVlLm1hcCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBIZWxwZXJzLnJldHJpZXZlTmVzdGVkRGF0YSh0YWJsZS5vcHRpb25zLm5lc3RlZEZpZWxkU2VwYXJhdG9yLCBwYXJhbXMudmFsdWVNYXAsIGl0ZW0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH07XG5cdFx0fWVsc2Uge1xuXHRcdFx0dmFsdWVNYXAgPSBwYXJhbXMudmFsdWVNYXA7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY2FsYyh2YWx1ZSl7XG5cdFx0dmFyIHJlc3VsdDtcblx0XHRcblx0XHRpZih2YWx1ZU1hcCl7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlTWFwKHZhbHVlKTtcblx0XHR9XG5cblx0XHRzd2l0Y2godHlwZSl7XG5cdFx0XHRjYXNlIFwibGVuZ3RoXCI6XG5cdFx0XHRcdHJlc3VsdCA9IHZhbHVlLmxlbmd0aDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJzdW1cIjpcblx0XHRcdFx0cmVzdWx0ID0gdmFsdWUucmVkdWNlKGZ1bmN0aW9uKGMsIGQpe1xuXHRcdFx0XHRcdHJldHVybiBjICsgZDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwibWF4XCI6XG5cdFx0XHRcdHJlc3VsdCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHZhbHVlKSA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwibWluXCI6XG5cdFx0XHRcdHJlc3VsdCA9IE1hdGgubWluLmFwcGx5KG51bGwsIHZhbHVlKSA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiYXZnXCI6XG5cdFx0XHRcdHJlc3VsdCA9IHZhbHVlLnJlZHVjZShmdW5jdGlvbihjLCBkKXtcblx0XHRcdFx0XHRyZXR1cm4gYyArIGQ7XG5cdFx0XHRcdH0pIC8gdmFsdWUubGVuZ3RoO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRyZXN1bHQgPSB2YWx1ZS5qb2luKFwiXCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0Ly9oYW5kbGUgbm9uIGFycmF5IHZhbHVlc1xuXHRpZighQXJyYXkuaXNBcnJheShhKSl7XG5cdFx0ZW1wdHlBbGlnbiA9ICFBcnJheS5pc0FycmF5KGIpID8gMCA6IC0xO1xuXHR9ZWxzZSBpZighQXJyYXkuaXNBcnJheShiKSl7XG5cdFx0ZW1wdHlBbGlnbiA9IDE7XG5cdH1lbHNlIHtcblx0XHRpZih0eXBlID09PSBcInN0cmluZ1wiKXtcblx0XHRcdHJldHVybiBTdHJpbmcoY2FsYyhhKSkudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKFN0cmluZyhjYWxjKGIpKS50b0xvd2VyQ2FzZSgpKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gY2FsYyhiKSAtIGNhbGMoYSk7XG5cdFx0fVxuXHR9XG5cblx0Ly9maXggZW1wdHkgdmFsdWVzIGluIHBvc2l0aW9uXG5cdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdGVtcHR5QWxpZ24gKj0gLTE7XG5cdH1cblxuXHRyZXR1cm4gZW1wdHlBbGlnbjtcbn1cblxuLy9zb3J0IGlmIGVsZW1lbnQgY29udGFpbnMgYW55IGRhdGFcbmZ1bmN0aW9uIGV4aXN0cyhhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIGVsMSA9IHR5cGVvZiBhID09IFwidW5kZWZpbmVkXCIgPyAwIDogMTtcblx0dmFyIGVsMiA9IHR5cGVvZiBiID09IFwidW5kZWZpbmVkXCIgPyAwIDogMTtcblxuXHRyZXR1cm4gZWwxIC0gZWwyO1xufVxuXG4vL3NvcnQgYWxwaGEgbnVtZXJpYyBzdHJpbmdzXG5mdW5jdGlvbiBhbHBoYW51bShhcywgYnMsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpe1xuXHR2YXIgYSwgYiwgYTEsIGIxLCBpPSAwLCBMLCByeCA9IC8oXFxkKyl8KFxcRCspL2csIHJkID0gL1xcZC87XG5cdHZhciBhbGlnbkVtcHR5VmFsdWVzID0gcGFyYW1zLmFsaWduRW1wdHlWYWx1ZXM7XG5cdHZhciBlbXB0eUFsaWduID0gMDtcblxuXHQvL2hhbmRsZSBlbXB0eSB2YWx1ZXNcblx0aWYoIWFzICYmIGFzIT09IDApe1xuXHRcdGVtcHR5QWxpZ24gPSAgIWJzICYmIGJzIT09IDAgPyAwIDogLTE7XG5cdH1lbHNlIGlmKCFicyAmJiBicyE9PSAwKXtcblx0XHRlbXB0eUFsaWduID0gIDE7XG5cdH1lbHNlIHtcblxuXHRcdGlmKGlzRmluaXRlKGFzKSAmJiBpc0Zpbml0ZShicykpIHJldHVybiBhcyAtIGJzO1xuXHRcdGEgPSBTdHJpbmcoYXMpLnRvTG93ZXJDYXNlKCk7XG5cdFx0YiA9IFN0cmluZyhicykudG9Mb3dlckNhc2UoKTtcblx0XHRpZihhID09PSBiKSByZXR1cm4gMDtcblx0XHRpZighKHJkLnRlc3QoYSkgJiYgcmQudGVzdChiKSkpIHJldHVybiBhID4gYiA/IDEgOiAtMTtcblx0XHRhID0gYS5tYXRjaChyeCk7XG5cdFx0YiA9IGIubWF0Y2gocngpO1xuXHRcdEwgPSBhLmxlbmd0aCA+IGIubGVuZ3RoID8gYi5sZW5ndGggOiBhLmxlbmd0aDtcblx0XHR3aGlsZShpIDwgTCl7XG5cdFx0XHRhMT0gYVtpXTtcblx0XHRcdGIxPSBiW2krK107XG5cdFx0XHRpZihhMSAhPT0gYjEpe1xuXHRcdFx0XHRpZihpc0Zpbml0ZShhMSkgJiYgaXNGaW5pdGUoYjEpKXtcblx0XHRcdFx0XHRpZihhMS5jaGFyQXQoMCkgPT09IFwiMFwiKSBhMSA9IFwiLlwiICsgYTE7XG5cdFx0XHRcdFx0aWYoYjEuY2hhckF0KDApID09PSBcIjBcIikgYjEgPSBcIi5cIiArIGIxO1xuXHRcdFx0XHRcdHJldHVybiBhMSAtIGIxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgcmV0dXJuIGExID4gYjEgPyAxIDogLTE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGEubGVuZ3RoID4gYi5sZW5ndGg7XG5cdH1cblxuXHQvL2ZpeCBlbXB0eSB2YWx1ZXMgaW4gcG9zaXRpb25cblx0aWYoKGFsaWduRW1wdHlWYWx1ZXMgPT09IFwidG9wXCIgJiYgZGlyID09PSBcImRlc2NcIikgfHwgKGFsaWduRW1wdHlWYWx1ZXMgPT09IFwiYm90dG9tXCIgJiYgZGlyID09PSBcImFzY1wiKSl7XG5cdFx0ZW1wdHlBbGlnbiAqPSAtMTtcblx0fVxuXG5cdHJldHVybiBlbXB0eUFsaWduO1xufVxuXG52YXIgZGVmYXVsdFNvcnRlcnMgPSB7XG5cdG51bWJlcjpudW1iZXIsXG5cdHN0cmluZzpzdHJpbmcsXG5cdGRhdGU6ZGF0ZSxcblx0dGltZTp0aW1lLFxuXHRkYXRldGltZTpkYXRldGltZSxcblx0Ym9vbGVhbjpib29sZWFuLFxuXHRhcnJheTphcnJheSxcblx0ZXhpc3RzOmV4aXN0cyxcblx0YWxwaGFudW06YWxwaGFudW1cbn07XG5cbmNsYXNzIFNvcnQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcInNvcnRcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIHNvcnRlcnMgPSBkZWZhdWx0U29ydGVycztcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5zb3J0TGlzdCA9IFtdOyAvL2hvbGRlciBjdXJyZW50IHNvcnRcblx0XHR0aGlzLmNoYW5nZWQgPSBmYWxzZTsgLy9oYXMgdGhlIHNvcnQgY2hhbmdlZCBzaW5jZSBsYXN0IHJlbmRlclxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNvcnRNb2RlXCIsIFwibG9jYWxcIik7IC8vbG9jYWwgb3IgcmVtb3RlIHNvcnRpbmdcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbml0aWFsU29ydFwiLCBmYWxzZSk7IC8vaW5pdGlhbCBzb3J0aW5nIGNyaXRlcmlhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY29sdW1uSGVhZGVyU29ydE11bHRpXCIsIHRydWUpOyAvL211bHRpcGxlIG9yIHNpbmdsZSBjb2x1bW4gc29ydGluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNvcnRPcmRlclJldmVyc2VcIiwgZmFsc2UpOyAvL3JldmVyc2UgaW50ZXJuYWwgc29ydCBvcmRlcmluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImhlYWRlclNvcnRFbGVtZW50XCIsIFwiPGRpdiBjbGFzcz0ndGFidWxhdG9yLWFycm93Jz48L2Rpdj5cIik7IC8vaGVhZGVyIHNvcnQgZWxlbWVudFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImhlYWRlclNvcnRDbGlja0VsZW1lbnRcIiwgXCJoZWFkZXJcIik7IC8vZWxlbWVudCB3aGljaCB0cmlnZ2VycyBzb3J0IHdoZW4gY2xpY2tlZFxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJzb3J0ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInNvcnRlclBhcmFtc1wiKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyU29ydFwiLCB0cnVlKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyU29ydFN0YXJ0aW5nRGlyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJTb3J0VHJpc3RhdGVcIik7XG5cdFx0XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1sYXlvdXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy50YWJsZUJ1aWx0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJEYXRhSGFuZGxlcih0aGlzLnNvcnQuYmluZCh0aGlzKSwgMjApO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0U29ydFwiLCB0aGlzLnVzZXJTZXRTb3J0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0U29ydGVyc1wiLCB0aGlzLmdldFNvcnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhclNvcnRcIiwgdGhpcy5jbGVhclNvcnQuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNvcnRNb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wYXJhbXNcIiwgdGhpcy5yZW1vdGVTb3J0UGFyYW1zLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXHRcblx0dGFibGVCdWlsdCgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5pbml0aWFsU29ydCl7XG5cdFx0XHR0aGlzLnNldFNvcnQodGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxTb3J0KTtcblx0XHR9XG5cdH1cblx0XG5cdHJlbW90ZVNvcnRQYXJhbXMoZGF0YSwgY29uZmlnLCBzaWxlbnQsIHBhcmFtcyl7XG5cdFx0dmFyIHNvcnRlcnMgPSB0aGlzLmdldFNvcnQoKTtcblx0XHRcblx0XHRzb3J0ZXJzLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdGRlbGV0ZSBpdGVtLmNvbHVtbjtcblx0XHR9KTtcblx0XHRcblx0XHRwYXJhbXMuc29ydCA9IHNvcnRlcnM7XG5cdFx0XG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHR1c2VyU2V0U29ydChzb3J0TGlzdCwgZGlyKXtcblx0XHR0aGlzLnNldFNvcnQoc29ydExpc3QsIGRpcik7XG5cdFx0Ly8gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNvcnRlclJlZnJlc2goKTtcblx0XHR0aGlzLnJlZnJlc2hTb3J0KCk7XG5cdH1cblx0XG5cdGNsZWFyU29ydCgpe1xuXHRcdHRoaXMuY2xlYXIoKTtcblx0XHQvLyB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc29ydGVyUmVmcmVzaCgpO1xuXHRcdHRoaXMucmVmcmVzaFNvcnQoKTtcblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHQvL2luaXRpYWxpemUgY29sdW1uIGhlYWRlciBmb3Igc29ydGluZ1xuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIHNvcnRlciA9IGZhbHNlLFxuXHRcdGNvbEVsLFxuXHRcdGFycm93RWw7XG5cdFx0XG5cdFx0c3dpdGNoKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5zb3J0ZXIpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZihTb3J0LnNvcnRlcnNbY29sdW1uLmRlZmluaXRpb24uc29ydGVyXSl7XG5cdFx0XHRcdFx0c29ydGVyID0gU29ydC5zb3J0ZXJzW2NvbHVtbi5kZWZpbml0aW9uLnNvcnRlcl07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJTb3J0IEVycm9yIC0gTm8gc3VjaCBzb3J0ZXIgZm91bmQ6IFwiLCBjb2x1bW4uZGVmaW5pdGlvbi5zb3J0ZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0c29ydGVyID0gY29sdW1uLmRlZmluaXRpb24uc29ydGVyO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0XG5cdFx0Y29sdW1uLm1vZHVsZXMuc29ydCA9IHtcblx0XHRcdHNvcnRlcjpzb3J0ZXIsIGRpcjpcIm5vbmVcIixcblx0XHRcdHBhcmFtczpjb2x1bW4uZGVmaW5pdGlvbi5zb3J0ZXJQYXJhbXMgfHwge30sXG5cdFx0XHRzdGFydGluZ0Rpcjpjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJTb3J0U3RhcnRpbmdEaXIgfHwgXCJhc2NcIixcblx0XHRcdHRyaXN0YXRlOiBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJTb3J0VHJpc3RhdGUsXG5cdFx0fTtcblx0XHRcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJTb3J0ICE9PSBmYWxzZSl7XG5cdFx0XHRcblx0XHRcdGNvbEVsID0gY29sdW1uLmdldEVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0Y29sRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1zb3J0YWJsZVwiKTtcblx0XHRcdFxuXHRcdFx0YXJyb3dFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRhcnJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXNvcnRlclwiKTtcblx0XHRcdFxuXHRcdFx0c3dpdGNoKHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0Q2xpY2tFbGVtZW50KXtcblx0XHRcdFx0Y2FzZSBcImljb25cIjpcblx0XHRcdFx0XHRhcnJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiaGVhZGVyXCI6XG5cdFx0XHRcdFx0Y29sRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnRcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Y29sRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnRcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHN3aXRjaCh0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydEVsZW1lbnQpe1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0Ly9kbyBub3RoaW5nXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0YXJyb3dFbC5hcHBlbmRDaGlsZCh0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydEVsZW1lbnQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRhcnJvd0VsLmlubmVySFRNTCA9IHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0RWxlbWVudDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9jcmVhdGUgc29ydGVyIGFycm93XG5cdFx0XHRjb2x1bW4udGl0bGVIb2xkZXJFbGVtZW50LmFwcGVuZENoaWxkKGFycm93RWwpO1xuXHRcdFx0XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5zb3J0LmVsZW1lbnQgPSBhcnJvd0VsO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnNldENvbHVtbkhlYWRlclNvcnRJY29uKGNvbHVtbiwgXCJub25lXCIpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydENsaWNrRWxlbWVudCA9PT0gXCJpY29uXCIpe1xuXHRcdFx0XHRhcnJvd0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9zb3J0IG9uIGNsaWNrXG5cdFx0XHQodGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclNvcnRDbGlja0VsZW1lbnQgPT09IFwiaWNvblwiID8gYXJyb3dFbCA6IGNvbEVsKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0dmFyIGRpciA9IFwiXCIsXG5cdFx0XHRcdHNvcnRlcnM9W10sXG5cdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5zb3J0KXtcblx0XHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5zb3J0LnRyaXN0YXRlKXtcblx0XHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnNvcnQuZGlyID09IFwibm9uZVwiKXtcblx0XHRcdFx0XHRcdFx0ZGlyID0gY29sdW1uLm1vZHVsZXMuc29ydC5zdGFydGluZ0Rpcjtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuc29ydC5kaXIgPT0gY29sdW1uLm1vZHVsZXMuc29ydC5zdGFydGluZ0Rpcil7XG5cdFx0XHRcdFx0XHRcdFx0ZGlyID0gY29sdW1uLm1vZHVsZXMuc29ydC5kaXIgPT0gXCJhc2NcIiA/IFwiZGVzY1wiIDogXCJhc2NcIjtcblx0XHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGRpciA9IFwibm9uZVwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0c3dpdGNoKGNvbHVtbi5tb2R1bGVzLnNvcnQuZGlyKXtcblx0XHRcdFx0XHRcdFx0Y2FzZSBcImFzY1wiOlxuXHRcdFx0XHRcdFx0XHRcdGRpciA9IFwiZGVzY1wiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0Y2FzZSBcImRlc2NcIjpcblx0XHRcdFx0XHRcdFx0XHRkaXIgPSBcImFzY1wiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRkaXIgPSBjb2x1bW4ubW9kdWxlcy5zb3J0LnN0YXJ0aW5nRGlyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAodGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkhlYWRlclNvcnRNdWx0aSAmJiAoZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkpKSB7XG5cdFx0XHRcdFx0XHRzb3J0ZXJzID0gdGhpcy5nZXRTb3J0KCk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdG1hdGNoID0gc29ydGVycy5maW5kSW5kZXgoKHNvcnRlcikgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc29ydGVyLmZpZWxkID09PSBjb2x1bW4uZ2V0RmllbGQoKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihtYXRjaCA+IC0xKXtcblx0XHRcdFx0XHRcdFx0c29ydGVyc1ttYXRjaF0uZGlyID0gZGlyO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0bWF0Y2ggPSBzb3J0ZXJzLnNwbGljZShtYXRjaCwgMSlbMF07XG5cdFx0XHRcdFx0XHRcdGlmKGRpciAhPSBcIm5vbmVcIil7XG5cdFx0XHRcdFx0XHRcdFx0c29ydGVycy5wdXNoKG1hdGNoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZihkaXIgIT0gXCJub25lXCIpe1xuXHRcdFx0XHRcdFx0XHRcdHNvcnRlcnMucHVzaCh7Y29sdW1uOmNvbHVtbiwgZGlyOmRpcn0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vYWRkIHRvIGV4aXN0aW5nIHNvcnRcblx0XHRcdFx0XHRcdHRoaXMuc2V0U29ydChzb3J0ZXJzKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihkaXIgPT0gXCJub25lXCIpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vc29ydCBieSBjb2x1bW4gb25seVxuXHRcdFx0XHRcdFx0XHR0aGlzLnNldFNvcnQoY29sdW1uLCBkaXIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIHRoaXMudGFibGUucm93TWFuYWdlci5zb3J0ZXJSZWZyZXNoKCF0aGlzLnNvcnRMaXN0Lmxlbmd0aCk7XG5cdFx0XHRcdFx0dGhpcy5yZWZyZXNoU29ydCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdHJlZnJlc2hTb3J0KCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNvcnRNb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdHRoaXMucmVsb2FkRGF0YShudWxsLCBmYWxzZSwgZmFsc2UpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vVE9ETyAtIFBlcnNpc3QgbGVmdCBwb3NpdGlvbiBvZiByb3cgbWFuYWdlclxuXHRcdC8vIGxlZnQgPSB0aGlzLnNjcm9sbExlZnQ7XG5cdFx0Ly8gdGhpcy5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHR9XG5cdFxuXHQvL2NoZWNrIGlmIHRoZSBzb3J0ZXJzIGhhdmUgY2hhbmdlZCBzaW5jZSBsYXN0IHVzZVxuXHRoYXNDaGFuZ2VkKCl7XG5cdFx0dmFyIGNoYW5nZWQgPSB0aGlzLmNoYW5nZWQ7XG5cdFx0dGhpcy5jaGFuZ2VkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdH1cblx0XG5cdC8vcmV0dXJuIGN1cnJlbnQgc29ydGVyc1xuXHRnZXRTb3J0KCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHNvcnRlcnMgPSBbXTtcblx0XHRcblx0XHRzZWxmLnNvcnRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRpZihpdGVtLmNvbHVtbil7XG5cdFx0XHRcdHNvcnRlcnMucHVzaCh7Y29sdW1uOml0ZW0uY29sdW1uLmdldENvbXBvbmVudCgpLCBmaWVsZDppdGVtLmNvbHVtbi5nZXRGaWVsZCgpLCBkaXI6aXRlbS5kaXJ9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gc29ydGVycztcblx0fVxuXHRcblx0Ly9jaGFuZ2Ugc29ydCBsaXN0IGFuZCB0cmlnZ2VyIHNvcnRcblx0c2V0U29ydChzb3J0TGlzdCwgZGlyKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0bmV3U29ydExpc3QgPSBbXTtcblx0XHRcblx0XHRpZighQXJyYXkuaXNBcnJheShzb3J0TGlzdCkpe1xuXHRcdFx0c29ydExpc3QgPSBbe2NvbHVtbjogc29ydExpc3QsIGRpcjpkaXJ9XTtcblx0XHR9XG5cdFx0XG5cdFx0c29ydExpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdHZhciBjb2x1bW47XG5cdFx0XHRcblx0XHRcdGNvbHVtbiA9IHNlbGYudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGl0ZW0uY29sdW1uKTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0aXRlbS5jb2x1bW4gPSBjb2x1bW47XG5cdFx0XHRcdG5ld1NvcnRMaXN0LnB1c2goaXRlbSk7XG5cdFx0XHRcdHNlbGYuY2hhbmdlZCA9IHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlNvcnQgV2FybmluZyAtIFNvcnQgZmllbGQgZG9lcyBub3QgZXhpc3QgYW5kIGlzIGJlaW5nIGlnbm9yZWQ6IFwiLCBpdGVtLmNvbHVtbik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9KTtcblx0XHRcblx0XHRzZWxmLnNvcnRMaXN0ID0gbmV3U29ydExpc3Q7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInNvcnQtY2hhbmdlZFwiKTtcblx0fVxuXHRcblx0Ly9jbGVhciBzb3J0ZXJzXG5cdGNsZWFyKCl7XG5cdFx0dGhpcy5zZXRTb3J0KFtdKTtcblx0fVxuXHRcblx0Ly9maW5kIGFwcHJvcHJpYXRlIHNvcnRlciBmb3IgY29sdW1uXG5cdGZpbmRTb3J0ZXIoY29sdW1uKXtcblx0XHR2YXIgcm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3NbMF0sXG5cdFx0c29ydGVyID0gXCJzdHJpbmdcIixcblx0XHRmaWVsZCwgdmFsdWU7XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJvdyA9IHJvdy5nZXREYXRhKCk7XG5cdFx0XHRmaWVsZCA9IGNvbHVtbi5nZXRGaWVsZCgpO1xuXHRcdFx0XG5cdFx0XHRpZihmaWVsZCl7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YWx1ZSA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKHJvdyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRzd2l0Y2godHlwZW9mIHZhbHVlKXtcblx0XHRcdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdFx0XHRzb3J0ZXIgPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0XHRcdHNvcnRlciA9IFwiYm9vbGVhblwiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGlmKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IFwiXCIpe1xuXHRcdFx0XHRcdFx0XHRzb3J0ZXIgPSBcIm51bWJlclwiO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZih2YWx1ZS5tYXRjaCgvKCheWzAtOV0rW2Etel0rKXwoXlthLXpdK1swLTldKykpKyQvaSkpe1xuXHRcdFx0XHRcdFx0XHRcdHNvcnRlciA9IFwiYWxwaGFudW1cIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIFNvcnQuc29ydGVyc1tzb3J0ZXJdO1xuXHR9XG5cdFxuXHQvL3dvcmsgdGhyb3VnaCBzb3J0IGxpc3Qgc29ydGluZyBkYXRhXG5cdHNvcnQoZGF0YSwgc29ydE9ubHkpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRzb3J0TGlzdCA9IHRoaXMudGFibGUub3B0aW9ucy5zb3J0T3JkZXJSZXZlcnNlID8gc2VsZi5zb3J0TGlzdC5zbGljZSgpLnJldmVyc2UoKSA6IHNlbGYuc29ydExpc3QsXG5cdFx0c29ydExpc3RBY3R1YWwgPSBbXSxcblx0XHRyb3dDb21wb25lbnRzID0gW107XG5cdFx0XG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhU29ydGluZ1wiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhU29ydGluZ1wiLCBzZWxmLmdldFNvcnQoKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFzb3J0T25seSkge1xuXHRcdFx0c2VsZi5jbGVhckNvbHVtbkhlYWRlcnMoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNvcnRNb2RlICE9PSBcInJlbW90ZVwiKXtcblx0XHRcdFxuXHRcdFx0Ly9idWlsZCBsaXN0IG9mIHZhbGlkIHNvcnRlcnMgYW5kIHRyaWdnZXIgY29sdW1uIHNwZWNpZmljIGNhbGxiYWNrcyBiZWZvcmUgc29ydCBiZWdpbnNcblx0XHRcdHNvcnRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaSl7XG5cdFx0XHRcdHZhciBzb3J0T2JqO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoaXRlbS5jb2x1bW4pe1xuXHRcdFx0XHRcdHNvcnRPYmogPSBpdGVtLmNvbHVtbi5tb2R1bGVzLnNvcnQ7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoc29ydE9iail7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vaWYgbm8gc29ydGVyIGhhcyBiZWVuIGRlZmluZWQsIHRha2UgYSBndWVzc1xuXHRcdFx0XHRcdFx0aWYoIXNvcnRPYmouc29ydGVyKXtcblx0XHRcdFx0XHRcdFx0c29ydE9iai5zb3J0ZXIgPSBzZWxmLmZpbmRTb3J0ZXIoaXRlbS5jb2x1bW4pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpdGVtLnBhcmFtcyA9IHR5cGVvZiBzb3J0T2JqLnBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gc29ydE9iai5wYXJhbXMoaXRlbS5jb2x1bW4uZ2V0Q29tcG9uZW50KCksIGl0ZW0uZGlyKSA6IHNvcnRPYmoucGFyYW1zO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzb3J0TGlzdEFjdHVhbC5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZighc29ydE9ubHkpIHtcblx0XHRcdFx0XHRcdHNlbGYuc2V0Q29sdW1uSGVhZGVyKGl0ZW0uY29sdW1uLCBpdGVtLmRpcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Ly9zb3J0IGRhdGFcblx0XHRcdGlmIChzb3J0TGlzdEFjdHVhbC5sZW5ndGgpIHtcblx0XHRcdFx0c2VsZi5fc29ydEl0ZW1zKGRhdGEsIHNvcnRMaXN0QWN0dWFsKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH1lbHNlIGlmKCFzb3J0T25seSkge1xuXHRcdFx0c29ydExpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpKXtcblx0XHRcdFx0c2VsZi5zZXRDb2x1bW5IZWFkZXIoaXRlbS5jb2x1bW4sIGl0ZW0uZGlyKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdFxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YVNvcnRlZFwiKSl7XG5cdFx0XHRkYXRhLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRyb3dDb21wb25lbnRzLnB1c2gocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhU29ydGVkXCIsIHNlbGYuZ2V0U29ydCgpLCByb3dDb21wb25lbnRzKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblx0XG5cdC8vY2xlYXIgc29ydCBhcnJvd3Mgb24gY29sdW1uc1xuXHRjbGVhckNvbHVtbkhlYWRlcnMoKXtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0UmVhbENvbHVtbnMoKS5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnNvcnQpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5zb3J0LmRpciA9IFwibm9uZVwiO1xuXHRcdFx0XHRjb2x1bW4uZ2V0RWxlbWVudCgpLnNldEF0dHJpYnV0ZShcImFyaWEtc29ydFwiLCBcIm5vbmVcIik7XG5cdFx0XHRcdHRoaXMuc2V0Q29sdW1uSGVhZGVyU29ydEljb24oY29sdW1uLCBcIm5vbmVcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vc2V0IHRoZSBjb2x1bW4gaGVhZGVyIHNvcnQgZGlyZWN0aW9uXG5cdHNldENvbHVtbkhlYWRlcihjb2x1bW4sIGRpcil7XG5cdFx0Y29sdW1uLm1vZHVsZXMuc29ydC5kaXIgPSBkaXI7XG5cdFx0Y29sdW1uLmdldEVsZW1lbnQoKS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNvcnRcIiwgZGlyID09PSBcImFzY1wiID8gXCJhc2NlbmRpbmdcIiA6IFwiZGVzY2VuZGluZ1wiKTtcblx0XHR0aGlzLnNldENvbHVtbkhlYWRlclNvcnRJY29uKGNvbHVtbiwgZGlyKTtcblx0fVxuXHRcblx0c2V0Q29sdW1uSGVhZGVyU29ydEljb24oY29sdW1uLCBkaXIpe1xuXHRcdHZhciBzb3J0RWwgPSBjb2x1bW4ubW9kdWxlcy5zb3J0LmVsZW1lbnQsXG5cdFx0YXJyb3dFbDtcblx0XHRcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJTb3J0ICYmIHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHR3aGlsZShzb3J0RWwuZmlyc3RDaGlsZCkgc29ydEVsLnJlbW92ZUNoaWxkKHNvcnRFbC5maXJzdENoaWxkKTtcblx0XHRcdFxuXHRcdFx0YXJyb3dFbCA9IHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0RWxlbWVudC5jYWxsKHRoaXMudGFibGUsIGNvbHVtbi5nZXRDb21wb25lbnQoKSwgZGlyKTtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIGFycm93RWwgPT09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRzb3J0RWwuYXBwZW5kQ2hpbGQoYXJyb3dFbCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHNvcnRFbC5pbm5lckhUTUwgPSBhcnJvd0VsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9zb3J0IGVhY2ggaXRlbSBpbiBzb3J0IGxpc3Rcblx0X3NvcnRJdGVtcyhkYXRhLCBzb3J0TGlzdCl7XG5cdFx0dmFyIHNvcnRlckNvdW50ID0gc29ydExpc3QubGVuZ3RoIC0gMTtcblx0XHRcblx0XHRkYXRhLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRcblx0XHRcdGZvcih2YXIgaSA9IHNvcnRlckNvdW50OyBpPj0gMDsgaS0tKXtcblx0XHRcdFx0bGV0IHNvcnRJdGVtID0gc29ydExpc3RbaV07XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXN1bHQgPSB0aGlzLl9zb3J0Um93KGEsIGIsIHNvcnRJdGVtLmNvbHVtbiwgc29ydEl0ZW0uZGlyLCBzb3J0SXRlbS5wYXJhbXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYocmVzdWx0ICE9PSAwKXtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL3Byb2Nlc3MgaW5kaXZpZHVhbCByb3dzIGZvciBhIHNvcnQgZnVuY3Rpb24gb24gYWN0aXZlIGRhdGFcblx0X3NvcnRSb3coYSwgYiwgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdFx0dmFyIGVsMUNvbXAsIGVsMkNvbXA7XG5cdFx0XG5cdFx0Ly9zd2l0Y2ggZWxlbWVudHMgZGVwZW5kaW5nIG9uIHNlYXJjaCBkaXJlY3Rpb25cblx0XHR2YXIgZWwxID0gZGlyID09IFwiYXNjXCIgPyBhIDogYjtcblx0XHR2YXIgZWwyID0gZGlyID09IFwiYXNjXCIgPyBiIDogYTtcblx0XHRcblx0XHRhID0gY29sdW1uLmdldEZpZWxkVmFsdWUoZWwxLmdldERhdGEoKSk7XG5cdFx0YiA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGVsMi5nZXREYXRhKCkpO1xuXHRcdFxuXHRcdGEgPSB0eXBlb2YgYSAhPT0gXCJ1bmRlZmluZWRcIiA/IGEgOiBcIlwiO1xuXHRcdGIgPSB0eXBlb2YgYiAhPT0gXCJ1bmRlZmluZWRcIiA/IGIgOiBcIlwiO1xuXHRcdFxuXHRcdGVsMUNvbXAgPSBlbDEuZ2V0Q29tcG9uZW50KCk7XG5cdFx0ZWwyQ29tcCA9IGVsMi5nZXRDb21wb25lbnQoKTtcblx0XHRcblx0XHRyZXR1cm4gY29sdW1uLm1vZHVsZXMuc29ydC5zb3J0ZXIuY2FsbCh0aGlzLCBhLCBiLCBlbDFDb21wLCBlbDJDb21wLCBjb2x1bW4uZ2V0Q29tcG9uZW50KCksIGRpciwgcGFyYW1zKTtcblx0fVxufVxuXG5jbGFzcyBHcmlkQ2FsY3VsYXRvcntcclxuXHRjb25zdHJ1Y3Rvcihjb2x1bW5zLCByb3dzKXtcclxuXHRcdHRoaXMuY29sdW1uQ291bnQgPSBjb2x1bW5zO1xyXG5cdFx0dGhpcy5yb3dDb3VudCA9IHJvd3M7XHJcblxyXG5cdFx0dGhpcy5jb2x1bW5TdHJpbmcgPSBbXTtcclxuXHRcdHRoaXMuY29sdW1ucyA9IFtdO1xyXG5cdFx0dGhpcy5yb3dzID0gW107XHJcblx0fVxyXG5cclxuXHRnZW5Db2x1bW5zKGRhdGEpe1xyXG5cdFx0dmFyIGNvbENvdW50ID0gTWF0aC5tYXgodGhpcy5jb2x1bW5Db3VudCwgTWF0aC5tYXgoLi4uZGF0YS5tYXAoaXRlbSA9PiBpdGVtLmxlbmd0aCkpKTtcclxuXHJcblx0XHR0aGlzLmNvbHVtblN0cmluZyA9IFtdO1xyXG5cdFx0dGhpcy5jb2x1bW5zID0gW107XHJcblxyXG5cdFx0Zm9yKGxldCBpID0gMTsgaSA8PSBjb2xDb3VudDsgaSsrKXtcclxuXHRcdFx0dGhpcy5pbmNyZW1lbnRDaGFyKHRoaXMuY29sdW1uU3RyaW5nLmxlbmd0aCAtIDEpO1xyXG5cdFx0XHR0aGlzLmNvbHVtbnMucHVzaCh0aGlzLmNvbHVtblN0cmluZy5qb2luKFwiXCIpKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zO1xyXG5cdH1cclxuXHJcblx0Z2VuUm93cyhkYXRhKXtcclxuXHRcdHZhciByb3dDb3VudCA9IE1hdGgubWF4KHRoaXMucm93Q291bnQsIGRhdGEubGVuZ3RoKTtcclxuXHJcblx0XHR0aGlzLnJvd3MgPSBbXTtcclxuXHJcblx0XHRmb3IobGV0IGkgPSAxOyBpIDw9IHJvd0NvdW50OyBpKyspe1xyXG5cdFx0XHR0aGlzLnJvd3MucHVzaChpKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cmV0dXJuIHRoaXMucm93cztcclxuXHR9XHJcblxyXG5cdGluY3JlbWVudENoYXIoaSl7XHJcblx0XHRsZXQgY2hhciA9IHRoaXMuY29sdW1uU3RyaW5nW2ldO1xyXG5cclxuXHRcdGlmKGNoYXIpe1xyXG5cdFx0XHRpZihjaGFyICE9PSBcIlpcIil7XHJcblx0XHRcdFx0dGhpcy5jb2x1bW5TdHJpbmdbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuY29sdW1uU3RyaW5nW2ldLmNoYXJDb2RlQXQoMCkgKyAxKTtcclxuXHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuY29sdW1uU3RyaW5nW2ldID0gXCJBXCI7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYoaSl7XHJcblx0XHRcdFx0XHR0aGlzLmluY3JlbWVudENoYXIoaS0xKTtcclxuXHRcdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLmNvbHVtblN0cmluZy5wdXNoKFwiQVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0dGhpcy5jb2x1bW5TdHJpbmcucHVzaChcIkFcIik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzZXRSb3dDb3VudChjb3VudCl7XHJcblx0XHR0aGlzLnJvd0NvdW50ID0gY291bnQ7XHJcblx0fVxyXG5cclxuXHRzZXRDb2x1bW5Db3VudChjb3VudCl7XHJcblx0XHR0aGlzLmNvbHVtbkNvdW50ID0gY291bnQ7XHJcblx0fVxyXG59XG5cbmNsYXNzIFNoZWV0Q29tcG9uZW50IHtcclxuXHRjb25zdHJ1Y3RvcihzaGVldCkge1xyXG5cdFx0dGhpcy5fc2hlZXQgPSBzaGVldDtcclxuXHJcblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0W25hbWVdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Ll9zaGVldC50YWJsZS5jb21wb25lbnRGdW5jdGlvbkJpbmRlci5oYW5kbGUoXCJzaGVldFwiLCB0YXJnZXQuX3NoZWV0LCBuYW1lKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGdldFRpdGxlKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5fc2hlZXQudGl0bGU7XHJcblx0fVxyXG5cclxuXHRnZXRLZXkoKXtcclxuXHRcdHJldHVybiB0aGlzLl9zaGVldC5rZXk7XHJcblx0fVxyXG5cclxuXHRnZXREZWZpbml0aW9uKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5fc2hlZXQuZ2V0RGVmaW5pdGlvbigpO1xyXG5cdH1cclxuXHJcblx0Z2V0RGF0YSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9zaGVldC5nZXREYXRhKCk7XHJcblx0fVxyXG5cclxuXHRzZXREYXRhKGRhdGEpIHtcclxuXHRcdHJldHVybiB0aGlzLl9zaGVldC5zZXREYXRhKGRhdGEpO1xyXG5cdH1cclxuXHJcblx0Y2xlYXIoKXtcclxuXHRcdHJldHVybiB0aGlzLl9zaGVldC5jbGVhcigpO1xyXG5cdH1cclxuXHJcblx0cmVtb3ZlKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5fc2hlZXQucmVtb3ZlKCk7XHJcblx0fVxyXG5cdFxyXG5cdGFjdGl2ZSgpe1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NoZWV0LmFjdGl2ZSgpO1xyXG5cdH1cclxuXHJcblx0c2V0VGl0bGUodGl0bGUpe1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NoZWV0LnNldFRpdGxlKHRpdGxlKTtcclxuXHR9XHJcblxyXG5cdHNldFJvd3Mocm93cyl7XHJcblx0XHRyZXR1cm4gdGhpcy5fc2hlZXQuc2V0Um93cyhyb3dzKTtcclxuXHR9XHJcblxyXG5cdHNldENvbHVtbnMoY29sdW1ucyl7XHJcblx0XHRyZXR1cm4gdGhpcy5fc2hlZXQuc2V0Q29sdW1ucyhjb2x1bW5zKTtcclxuXHR9XHJcbn1cblxuY2xhc3MgU2hlZXQgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcclxuXHRjb25zdHJ1Y3RvcihzcHJlYWRzaGVldE1hbmFnZXIsIGRlZmluaXRpb24pIHtcclxuXHRcdHN1cGVyKHNwcmVhZHNoZWV0TWFuYWdlci50YWJsZSk7XHJcblx0XHRcclxuXHRcdHRoaXMuc3ByZWFkc2hlZXRNYW5hZ2VyID0gc3ByZWFkc2hlZXRNYW5hZ2VyO1xyXG5cdFx0dGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcclxuXHRcdFxyXG5cdFx0dGhpcy50aXRsZSA9IHRoaXMuZGVmaW5pdGlvbi50aXRsZSB8fCBcIlwiO1xyXG5cdFx0dGhpcy5rZXkgPSB0aGlzLmRlZmluaXRpb24ua2V5IHx8IHRoaXMuZGVmaW5pdGlvbi50aXRsZTtcclxuXHRcdHRoaXMucm93Q291bnQgPSB0aGlzLmRlZmluaXRpb24ucm93cztcclxuXHRcdHRoaXMuY29sdW1uQ291bnQgPSB0aGlzLmRlZmluaXRpb24uY29sdW1ucztcclxuXHRcdHRoaXMuZGF0YSA9IHRoaXMuZGVmaW5pdGlvbi5kYXRhIHx8IFtdO1xyXG5cdFx0dGhpcy5lbGVtZW50ID0gbnVsbDtcclxuXHRcdHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuXHRcdFxyXG5cdFx0dGhpcy5ncmlkID0gbmV3IEdyaWRDYWxjdWxhdG9yKHRoaXMuY29sdW1uQ291bnQsIHRoaXMucm93Q291bnQpO1xyXG5cdFx0XHJcblx0XHR0aGlzLmRlZmF1bHRDb2x1bW5EZWZpbml0aW9uID0ge3dpZHRoOjEwMCwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgaGVhZGVyU29ydDpmYWxzZX07XHJcblx0XHR0aGlzLmNvbHVtbkRlZmluaXRpb24gPSBPYmplY3QuYXNzaWduKHRoaXMuZGVmYXVsdENvbHVtbkRlZmluaXRpb24sIHRoaXMub3B0aW9ucyhcInNwcmVhZHNoZWV0Q29sdW1uRGVmaW5pdGlvblwiKSk7XHJcblx0XHRcclxuXHRcdHRoaXMuY29sdW1uRGVmcyA9IFtdO1xyXG5cdFx0dGhpcy5yb3dEZWZzID0gW107XHJcblx0XHR0aGlzLmNvbHVtbkZpZWxkcyA9IFtdO1xyXG5cdFx0dGhpcy5jb2x1bW5zID0gW107XHJcblx0XHR0aGlzLnJvd3MgPSBbXTtcclxuXHRcdFxyXG5cdFx0dGhpcy5zY3JvbGxUb3AgPSBudWxsO1xyXG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gbnVsbDtcclxuXHRcdFxyXG5cdFx0dGhpcy5pbml0aWFsaXplKCk7XHJcblx0XHRcclxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNoZWV0QWRkZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSk7XHJcblx0fVxyXG5cdFxyXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblx0Ly8vLy8vLy8vIEluaXRpYWxpemF0aW9uIC8vLy8vLy8vLy9cclxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cdFxyXG5cdGluaXRpYWxpemUoKXtcclxuXHRcdHRoaXMuaW5pdGlhbGl6ZUVsZW1lbnQoKTtcclxuXHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbnMoKTtcclxuXHRcdHRoaXMuaW5pdGlhbGl6ZVJvd3MoKTtcclxuXHR9XHJcblx0XHJcblx0cmVpbml0aWFsaXplKCl7XHJcblx0XHR0aGlzLmluaXRpYWxpemVDb2x1bW5zKCk7XHJcblx0XHR0aGlzLmluaXRpYWxpemVSb3dzKCk7XHJcblx0fVxyXG5cdFxyXG5cdGluaXRpYWxpemVFbGVtZW50KCl7XHJcblx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itc3ByZWFkc2hlZXQtdGFiXCIpO1xyXG5cdFx0dGhpcy5lbGVtZW50LmlubmVyVGV4dCA9IHRoaXMudGl0bGU7XHJcblx0XHRcclxuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNwcmVhZHNoZWV0TWFuYWdlci5sb2FkU2hlZXQodGhpcyk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0aW5pdGlhbGl6ZUNvbHVtbnMoKXtcclxuXHRcdHRoaXMuZ3JpZC5zZXRDb2x1bW5Db3VudCh0aGlzLmNvbHVtbkNvdW50KTtcclxuXHRcdHRoaXMuY29sdW1uRmllbGRzID0gdGhpcy5ncmlkLmdlbkNvbHVtbnModGhpcy5kYXRhKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5jb2x1bW5EZWZzID0gW107XHJcblx0XHRcclxuXHRcdHRoaXMuY29sdW1uRmllbGRzLmZvckVhY2goKHJlZikgPT4ge1xyXG5cdFx0XHR2YXIgZGVmID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb2x1bW5EZWZpbml0aW9uKTtcclxuXHRcdFx0ZGVmLmZpZWxkID0gcmVmO1xyXG5cdFx0XHRkZWYudGl0bGUgPSByZWY7XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLmNvbHVtbkRlZnMucHVzaChkZWYpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdGluaXRpYWxpemVSb3dzKCl7XHJcblx0XHR2YXIgcmVmcztcclxuXHRcdFxyXG5cdFx0dGhpcy5ncmlkLnNldFJvd0NvdW50KHRoaXMucm93Q291bnQpO1xyXG5cdFx0XHJcblx0XHRyZWZzID0gdGhpcy5ncmlkLmdlblJvd3ModGhpcy5kYXRhKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5yb3dEZWZzID0gW107XHJcblx0XHRcclxuXHRcdHJlZnMuZm9yRWFjaCgocmVmLCBpKSA9PiB7XHJcblx0XHRcdHZhciBkZWYgPSB7XCJfaWRcIjpyZWZ9O1xyXG5cdFx0XHR2YXIgZGF0YSA9IHRoaXMuZGF0YVtpXTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKGRhdGEpe1xyXG5cdFx0XHRcdGRhdGEuZm9yRWFjaCgodmFsLCBqKSA9PiB7XHJcblx0XHRcdFx0XHR2YXIgZmllbGQgPSB0aGlzLmNvbHVtbkZpZWxkc1tqXTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYoZmllbGQpe1xyXG5cdFx0XHRcdFx0XHRkZWZbZmllbGRdID0gdmFsO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLnJvd0RlZnMucHVzaChkZWYpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdHVubG9hZCgpe1xyXG5cdFx0dGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5zY3JvbGxUb3AgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsVG9wO1xyXG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbExlZnQ7XHJcblx0XHR0aGlzLmRhdGEgPSB0aGlzLmdldERhdGEodHJ1ZSk7XHJcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1zcHJlYWRzaGVldC10YWItYWN0aXZlXCIpO1xyXG5cdH1cclxuXHRcclxuXHRsb2FkKCl7XHJcblx0XHRcclxuXHRcdHZhciB3YXNJbmFjdGl2ZSA9ICF0aGlzLmlzQWN0aXZlO1xyXG5cdFx0XHJcblx0XHR0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcclxuXHRcdHRoaXMudGFibGUuYmxvY2tSZWRyYXcoKTtcclxuXHRcdHRoaXMudGFibGUuc2V0RGF0YShbXSk7XHJcblx0XHR0aGlzLnRhYmxlLnNldENvbHVtbnModGhpcy5jb2x1bW5EZWZzKTtcclxuXHRcdHRoaXMudGFibGUuc2V0RGF0YSh0aGlzLnJvd0RlZnMpO1xyXG5cdFx0dGhpcy50YWJsZS5yZXN0b3JlUmVkcmF3KCk7XHJcblx0XHRcclxuXHRcdGlmKHdhc0luYWN0aXZlICYmIHRoaXMuc2Nyb2xsVG9wICE9PSBudWxsKXtcclxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IHRoaXMuc2Nyb2xsTGVmdDtcclxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxUb3A7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXNwcmVhZHNoZWV0LXRhYi1hY3RpdmVcIik7XHJcblx0XHRcclxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNoZWV0TG9hZGVkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xyXG5cdH1cclxuXHRcclxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cdC8vLy8vLy8vIEhlbHBlciBGdW5jdGlvbnMgLy8vLy8vLy8vXHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHRcclxuXHRnZXRDb21wb25lbnQoKXtcclxuXHRcdHJldHVybiBuZXcgU2hlZXRDb21wb25lbnQodGhpcyk7XHJcblx0fVxyXG5cdFxyXG5cdGdldERlZmluaXRpb24oKXtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRpdGxlOnRoaXMudGl0bGUsXHJcblx0XHRcdGtleTp0aGlzLmtleSxcclxuXHRcdFx0cm93czp0aGlzLnJvd0NvdW50LFxyXG5cdFx0XHRjb2x1bW5zOnRoaXMuY29sdW1uQ291bnQsXHJcblx0XHRcdGRhdGE6dGhpcy5nZXREYXRhKCksXHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRnZXREYXRhKGZ1bGwpe1xyXG5cdFx0dmFyIG91dHB1dCA9IFtdLCBcclxuXHRcdHJvd1dpZHRocyxcclxuXHRcdG91dHB1dFdpZHRoLCBvdXRwdXRIZWlnaHQ7XHJcblx0XHRcclxuXHRcdC8vbWFwIGRhdGEgdG8gYXJyYXkgZm9ybWF0XHJcblx0XHR0aGlzLnJvd0RlZnMuZm9yRWFjaCgocm93RGF0YSkgPT4ge1xyXG5cdFx0XHR2YXIgcm93ID0gW107XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLmNvbHVtbkZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xyXG5cdFx0XHRcdHJvdy5wdXNoKHJvd0RhdGFbZmllbGRdKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdFxyXG5cdFx0XHRvdXRwdXQucHVzaChyb3cpO1xyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdC8vdHJpbSBvdXRwdXRcclxuXHRcdGlmKCFmdWxsICYmICF0aGlzLm9wdGlvbnMoXCJzcHJlYWRzaGVldE91dHB1dEZ1bGxcIikpe1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9jYWxjdWxhdGUgdXNlZCBhcmVhIG9mIGRhdGFcclxuXHRcdFx0cm93V2lkdGhzID0gb3V0cHV0Lm1hcChyb3cgPT4gcm93LmZpbmRMYXN0SW5kZXgodmFsID0+IHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnKSArIDEpO1xyXG5cdFx0XHRvdXRwdXRXaWR0aCA9IE1hdGgubWF4KC4uLnJvd1dpZHRocyk7XHJcblx0XHRcdG91dHB1dEhlaWdodCA9IHJvd1dpZHRocy5maW5kTGFzdEluZGV4KHdpZHRoID0+IHdpZHRoID4gMCkgKyAxO1xyXG5cdFx0XHRcclxuXHRcdFx0b3V0cHV0ID0gb3V0cHV0LnNsaWNlKDAsIG91dHB1dEhlaWdodCk7XHJcblx0XHRcdG91dHB1dCA9IG91dHB1dC5tYXAocm93ID0+IHJvdy5zbGljZSgwLCBvdXRwdXRXaWR0aCkpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cdH1cclxuXHRcclxuXHRzZXREYXRhKGRhdGEpe1xyXG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcclxuXHRcdHRoaXMucmVpbml0aWFsaXplKCk7XHJcblx0XHRcclxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNoZWV0VXBkYXRlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5pc0FjdGl2ZSl7XHJcblx0XHRcdHRoaXMubG9hZCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRjbGVhcigpe1xyXG5cdFx0dGhpcy5zZXREYXRhKFtdKTtcclxuXHR9XHJcblx0XHJcblx0c2V0VGl0bGUodGl0bGUpe1xyXG5cdFx0dGhpcy50aXRsZSA9IHRpdGxlO1xyXG5cdFx0dGhpcy5lbGVtZW50LmlubmVyVGV4dCA9IHRpdGxlO1xyXG5cdFx0XHJcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJzaGVldFVwZGF0ZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSk7XHJcblx0fVxyXG5cdFxyXG5cdHNldFJvd3Mocm93cyl7XHJcblx0XHR0aGlzLnJvd0NvdW50ID0gcm93cztcclxuXHRcdHRoaXMuaW5pdGlhbGl6ZVJvd3MoKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwic2hlZXRVcGRhdGVkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLmlzQWN0aXZlKXtcclxuXHRcdFx0dGhpcy5sb2FkKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdHNldENvbHVtbnMoY29sdW1ucyl7XHJcblx0XHR0aGlzLmNvbHVtbkNvdW50ID0gY29sdW1ucztcclxuXHRcdHRoaXMucmVpbml0aWFsaXplKCk7XHJcblx0XHRcclxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNoZWV0VXBkYXRlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5pc0FjdGl2ZSl7XHJcblx0XHRcdHRoaXMubG9hZCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRyZW1vdmUoKXtcclxuXHRcdHRoaXMuc3ByZWFkc2hlZXRNYW5hZ2VyLnJlbW92ZVNoZWV0KHRoaXMpO1xyXG5cdH1cclxuXHRcclxuXHRkZXN0cm95KCl7XHJcblx0XHRpZih0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XHJcblx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNoZWV0UmVtb3ZlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcclxuXHR9XHJcblx0XHJcblx0YWN0aXZlKCl7XHJcblx0XHR0aGlzLnNwcmVhZHNoZWV0TWFuYWdlci5sb2FkU2hlZXQodGhpcyk7XHJcblx0fVxyXG59XG5cbmNsYXNzIFNwcmVhZHNoZWV0IGV4dGVuZHMgTW9kdWxle1xyXG5cdFxyXG5cdHN0YXRpYyBtb2R1bGVOYW1lID0gXCJzcHJlYWRzaGVldFwiO1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcclxuXHRcdHN1cGVyKHRhYmxlKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5zaGVldHMgPSBbXTtcclxuXHRcdHRoaXMuZWxlbWVudCA9IG51bGw7XHJcblx0XHRcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNwcmVhZHNoZWV0XCIsIGZhbHNlKTsgXHJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzcHJlYWRzaGVldFJvd3NcIiwgNTApOyBcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNwcmVhZHNoZWV0Q29sdW1uc1wiLCA1MCk7IFxyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic3ByZWFkc2hlZXRDb2x1bW5EZWZpbml0aW9uXCIsIHt9KTsgXHJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzcHJlYWRzaGVldE91dHB1dEZ1bGxcIiwgZmFsc2UpOyBcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNwcmVhZHNoZWV0RGF0YVwiLCBmYWxzZSk7IFxyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic3ByZWFkc2hlZXRTaGVldHNcIiwgZmFsc2UpOyBcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNwcmVhZHNoZWV0U2hlZXRUYWJzXCIsIGZhbHNlKTsgXHJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzcHJlYWRzaGVldFNoZWV0VGFic0VsZW1lbnRcIiwgZmFsc2UpOyBcclxuXHRcdFxyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRTaGVldHNcIiwgdGhpcy5zZXRTaGVldHMuYmluZCh0aGlzKSk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImFkZFNoZWV0XCIsIHRoaXMuYWRkU2hlZXQuYmluZCh0aGlzKSk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldFNoZWV0c1wiLCB0aGlzLmdldFNoZWV0cy5iaW5kKHRoaXMpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0U2hlZXREZWZpbml0aW9uc1wiLCB0aGlzLmdldFNoZWV0RGVmaW5pdGlvbnMuYmluZCh0aGlzKSk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldFNoZWV0RGF0YVwiLCB0aGlzLnNldFNoZWV0RGF0YS5iaW5kKHRoaXMpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0U2hlZXRcIiwgdGhpcy5nZXRTaGVldC5iaW5kKHRoaXMpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0U2hlZXREYXRhXCIsIHRoaXMuZ2V0U2hlZXREYXRhLmJpbmQodGhpcykpO1xyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhclNoZWV0XCIsIHRoaXMuY2xlYXJTaGVldC5iaW5kKHRoaXMpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwicmVtb3ZlU2hlZXRcIiwgdGhpcy5yZW1vdmVTaGVldEZ1bmMuYmluZCh0aGlzKSk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImFjdGl2ZVNoZWV0XCIsIHRoaXMuYWN0aXZlU2hlZXRGdW5jLmJpbmQodGhpcykpO1xyXG5cdH1cclxuXHRcclxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cdC8vLy8vLyBNb2R1bGUgSW5pdGlhbGl6YXRpb24gLy8vLy8vXHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHRcclxuXHRcclxuXHRpbml0aWFsaXplKCl7XHJcblx0XHRpZih0aGlzLm9wdGlvbnMoXCJzcHJlYWRzaGVldFwiKSl7XHRcclxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1pbml0aWFsaXplZFwiLCB0aGlzLnRhYmxlSW5pdGlhbGl6ZWQuYmluZCh0aGlzKSk7XHJcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1sb2FkZWRcIiwgdGhpcy5sb2FkUmVtb3RlRGF0YS5iaW5kKHRoaXMpKTtcclxuXHRcdFx0XHJcblx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5pbmRleCA9IFwiX2lkXCI7XHJcblx0XHRcdFxyXG5cdFx0XHRpZih0aGlzLm9wdGlvbnMoXCJzcHJlYWRzaGVldERhdGFcIikgJiYgdGhpcy5vcHRpb25zKFwic3ByZWFkc2hlZXRTaGVldHNcIikpe1xyXG5cdFx0XHRcdGNvbnNvbGUud2FybihcIllvdSBjYW5ub3QgdXNlIHNwcmVhZHNoZWV0RGF0YSBhbmQgc3ByZWFkc2hlZXRTaGVldHMgYXQgdGhlIHNhbWUgdGltZSwgaWdub3Jpbmcgc3ByZWFkc2hlZXREYXRhXCIpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5zcHJlYWRzaGVldERhdGEgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy5jb21wYXRpYmlsaXR5Q2hlY2soKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHRoaXMub3B0aW9ucyhcInNwcmVhZHNoZWV0U2hlZXRUYWJzXCIpKXtcclxuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVUYWJzZXQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRjb21wYXRpYmlsaXR5Q2hlY2soKXtcclxuXHRcdGlmKHRoaXMub3B0aW9ucyhcImRhdGFcIikpe1xyXG5cdFx0XHRjb25zb2xlLndhcm4oXCJEbyBub3QgdXNlIHRoZSBkYXRhIG9wdGlvbiB3aGVuIHdvcmtpbmcgd2l0aCBzcHJlYWRzaGVldHMsIHVzZSBlaXRoZXIgc3ByZWFkc2hlZXREYXRhIG9yIHNwcmVhZHNoZWV0U2hlZXRzIHRvIHBhc3MgZGF0YSBpbnRvIHRoZSB0YWJsZVwiKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYodGhpcy5vcHRpb25zKFwicGFnaW5hdGlvblwiKSl7XHJcblx0XHRcdGNvbnNvbGUud2FybihcIlRoZSBzcHJlYWRzaGVldCBtb2R1bGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgcGFnaW5hdGlvbiBtb2R1bGVcIik7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlmKHRoaXMub3B0aW9ucyhcImdyb3VwQnlcIikpe1xyXG5cdFx0XHRjb25zb2xlLndhcm4oXCJUaGUgc3ByZWFkc2hlZXQgbW9kdWxlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIHJvdyBncm91cGluZyBtb2R1bGVcIik7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlmKHRoaXMub3B0aW9ucyhcInJlc3BvbnNpdmVDb2xsYXBzZVwiKSl7XHJcblx0XHRcdGNvbnNvbGUud2FybihcIlRoZSBzcHJlYWRzaGVldCBtb2R1bGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgcmVzcG9uc2l2ZSBjb2xsYXBzZSBtb2R1bGVcIik7XHJcblx0XHR9XHJcblx0fVxyXG5cdGluaXRpYWxpemVUYWJzZXQoKXtcclxuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1zcHJlYWRzaGVldC10YWJzXCIpO1xyXG5cdFx0dmFyIGFsdENvbnRhaW5lciA9IHRoaXMub3B0aW9ucyhcInNwcmVhZHNoZWV0U2hlZXRUYWJzRWxlbWVudFwiKTtcclxuXHRcdFxyXG5cdFx0aWYoYWx0Q29udGFpbmVyICYmICEoYWx0Q29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKXtcclxuXHRcdFx0YWx0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhbHRDb250YWluZXIpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoIWFsdENvbnRhaW5lcil7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGZpbmQgZWxlbWVudCBtYXRjaGluZyBzcHJlYWRzaGVldFNoZWV0VGFic0VsZW1lbnQgc2VsZWN0b3I6XCIsIHRoaXMub3B0aW9ucyhcInNwcmVhZHNoZWV0U2hlZXRUYWJzRWxlbWVudFwiKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYoYWx0Q29udGFpbmVyKXtcclxuXHRcdFx0YWx0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XHJcblx0XHR9ZWxzZSB7XHJcblx0XHRcdHRoaXMuZm9vdGVyQXBwZW5kKHRoaXMuZWxlbWVudCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdHRhYmxlSW5pdGlhbGl6ZWQoKXtcclxuXHRcdGlmKHRoaXMuc2hlZXRzLmxlbmd0aCl7XHJcblx0XHRcdHRoaXMubG9hZFNoZWV0KHRoaXMuc2hlZXRzWzBdKTtcclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHRoaXMub3B0aW9ucyhcInNwcmVhZHNoZWV0U2hlZXRzXCIpKXtcclxuXHRcdFx0XHR0aGlzLmxvYWRTaGVldHModGhpcy5vcHRpb25zKFwic3ByZWFkc2hlZXRTaGVldHNcIikpO1xyXG5cdFx0XHR9ZWxzZSBpZih0aGlzLm9wdGlvbnMoXCJzcHJlYWRzaGVldERhdGFcIikpe1xyXG5cdFx0XHRcdHRoaXMubG9hZERhdGEodGhpcy5vcHRpb25zKFwic3ByZWFkc2hlZXREYXRhXCIpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHQvLy8vLy8vLy8vLyBBamF4IFBhcnNpbmcgLy8vLy8vLy8vL1xyXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5cdGxvYWRSZW1vdGVEYXRhKGRhdGEsIGRhdGExLCBkYXRhMil7XHJcblx0XHRjb25zb2xlLmxvZyhcImRhdGFcIiwgZGF0YSwgZGF0YTEsIGRhdGEyKTtcclxuXHJcblx0XHRpZihBcnJheS5pc0FycmF5KGRhdGEpKXtcclxuXHJcblx0XHRcdHRoaXMudGFibGUuZGF0YUxvYWRlci5jbGVhckFsZXJ0KCk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFMb2FkZWRcIiwgZGF0YSk7XHJcblxyXG5cdFx0XHRpZighZGF0YS5sZW5ndGggfHwgQXJyYXkuaXNBcnJheShkYXRhWzBdKSl7XHJcblx0XHRcdFx0dGhpcy5sb2FkRGF0YShkYXRhKTtcclxuXHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdHRoaXMubG9hZFNoZWV0cyhkYXRhKTtcclxuXHRcdFx0fVxyXG5cdFx0fWVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiU3ByZWFkc2hlZXQgTG9hZGluZyBFcnJvciAtIFVuYWJsZSB0byBwcm9jZXNzIHJlbW90ZSBkYXRhIGR1ZSB0byBpbnZhbGlkIGRhdGEgdHlwZSBcXG5FeHBlY3Rpbmc6IGFycmF5IFxcblJlY2VpdmVkOiBcIiwgdHlwZW9mIGRhdGEsIFwiXFxuRGF0YTogICAgIFwiLCBkYXRhKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cdC8vLy8vLy8vLyBTaGVldCBNYW5hZ2VtZW50IC8vLy8vLy8vXHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHRcclxuXHRcclxuXHRsb2FkRGF0YShkYXRhKXtcclxuXHRcdHZhciBkZWYgPSB7XHJcblx0XHRcdGRhdGE6ZGF0YSxcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdHRoaXMubG9hZFNoZWV0KHRoaXMubmV3U2hlZXQoZGVmKSk7XHJcblx0fVxyXG5cdFxyXG5cdGRlc3Ryb3lTaGVldHMoKXtcclxuXHRcdHRoaXMuc2hlZXRzLmZvckVhY2goKHNoZWV0KSA9PiB7XHJcblx0XHRcdHNoZWV0LmRlc3Ryb3koKTtcclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHR0aGlzLnNoZWV0cyA9IFtdO1xyXG5cdFx0dGhpcy5hY3RpdmVTaGVldCA9IG51bGw7XHJcblx0fVxyXG5cdFxyXG5cdGxvYWRTaGVldHMoc2hlZXRzKXtcdFxyXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoc2hlZXRzKSl7XHJcblx0XHRcdHNoZWV0cyA9IFtdO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHR0aGlzLmRlc3Ryb3lTaGVldHMoKTtcclxuXHRcdFxyXG5cdFx0c2hlZXRzLmZvckVhY2goKGRlZikgPT4ge1xyXG5cdFx0XHR0aGlzLm5ld1NoZWV0KGRlZik7XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0dGhpcy5sb2FkU2hlZXQodGhpcy5zaGVldHNbMF0pO1xyXG5cdH1cclxuXHRcclxuXHRsb2FkU2hlZXQoc2hlZXQpe1xyXG5cdFx0aWYodGhpcy5hY3RpdmVTaGVldCAhPT0gc2hlZXQpe1xyXG5cdFx0XHRpZih0aGlzLmFjdGl2ZVNoZWV0KXtcclxuXHRcdFx0XHR0aGlzLmFjdGl2ZVNoZWV0LnVubG9hZCgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLmFjdGl2ZVNoZWV0ID0gc2hlZXQ7XHJcblx0XHRcdFxyXG5cdFx0XHRzaGVldC5sb2FkKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdG5ld1NoZWV0KGRlZmluaXRpb24gPSB7fSl7XHJcblx0XHR2YXIgc2hlZXQ7XHJcblx0XHRcclxuXHRcdGlmKCFkZWZpbml0aW9uLnJvd3Mpe1xyXG5cdFx0XHRkZWZpbml0aW9uLnJvd3MgPSB0aGlzLm9wdGlvbnMoXCJzcHJlYWRzaGVldFJvd3NcIik7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlmKCFkZWZpbml0aW9uLmNvbHVtbnMpe1xyXG5cdFx0XHRkZWZpbml0aW9uLmNvbHVtbnMgPSB0aGlzLm9wdGlvbnMoXCJzcHJlYWRzaGVldENvbHVtbnNcIik7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHNoZWV0ID0gbmV3IFNoZWV0KHRoaXMsIGRlZmluaXRpb24pO1xyXG5cdFx0XHJcblx0XHR0aGlzLnNoZWV0cy5wdXNoKHNoZWV0KTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5lbGVtZW50KXtcclxuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHNoZWV0LmVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gc2hlZXQ7XHJcblx0fVxyXG5cdFxyXG5cdHJlbW92ZVNoZWV0KHNoZWV0KXtcclxuXHRcdHZhciBpbmRleCA9IHRoaXMuc2hlZXRzLmluZGV4T2Yoc2hlZXQpLFxyXG5cdFx0cHJldlNoZWV0O1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLnNoZWV0cy5sZW5ndGggPiAxKXtcclxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XHJcblx0XHRcdFx0dGhpcy5zaGVldHMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdFx0XHRzaGVldC5kZXN0cm95KCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYodGhpcy5hY3RpdmVTaGVldCA9PT0gc2hlZXQpe1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRwcmV2U2hlZXQgPSB0aGlzLnNoZWV0c1tpbmRleCAtIDFdIHx8IHRoaXMuc2hlZXRzWzBdO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRpZihwcmV2U2hlZXQpe1xyXG5cdFx0XHRcdFx0XHR0aGlzLmxvYWRTaGVldChwcmV2U2hlZXQpO1xyXG5cdFx0XHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmFjdGl2ZVNoZWV0ID0gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHJlbW92ZSBzaGVldCwgYXQgbGVhc3Qgb25lIHNoZWV0IG11c3QgYmUgYWN0aXZlXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRsb29rdXBTaGVldChrZXkpe1xyXG5cdFx0aWYoIWtleSl7XHJcblx0XHRcdHJldHVybiB0aGlzLmFjdGl2ZVNoZWV0O1xyXG5cdFx0fWVsc2UgaWYoa2V5IGluc3RhbmNlb2YgU2hlZXQpe1xyXG5cdFx0XHRyZXR1cm4ga2V5O1xyXG5cdFx0fWVsc2UgaWYoa2V5IGluc3RhbmNlb2YgU2hlZXRDb21wb25lbnQpe1xyXG5cdFx0XHRyZXR1cm4ga2V5Ll9zaGVldDtcclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2hlZXRzLmZpbmQoc2hlZXQgPT4gc2hlZXQua2V5ID09PSBrZXkpIHx8IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRcclxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cdC8vLy8vLy8vIFB1YmxpYyBGdW5jdGlvbnMgLy8vLy8vLy8vXHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHRcclxuXHRzZXRTaGVldHMoc2hlZXRzKXtcclxuXHRcdHRoaXMubG9hZFNoZWV0cyhzaGVldHMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldFNoZWV0cygpO1xyXG5cdH1cclxuXHJcblx0YWRkU2hlZXQoc2hlZXQpe1xyXG5cdFx0cmV0dXJuIHRoaXMubmV3U2hlZXQoc2hlZXQpLmdldENvbXBvbmVudCgpO1xyXG5cdH1cclxuXHRcclxuXHRnZXRTaGVldERlZmluaXRpb25zKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5zaGVldHMubWFwKHNoZWV0ID0+IHNoZWV0LmdldERlZmluaXRpb24oKSk7XHJcblx0fVxyXG5cdFxyXG5cdGdldFNoZWV0cygpe1xyXG5cdFx0cmV0dXJuIHRoaXMuc2hlZXRzLm1hcChzaGVldCA9PiBzaGVldC5nZXRDb21wb25lbnQoKSk7XHJcblx0fVxyXG5cdFxyXG5cdGdldFNoZWV0KGtleSl7XHJcblx0XHR2YXIgc2hlZXQgPSB0aGlzLmxvb2t1cFNoZWV0KGtleSk7XHJcblx0XHRcclxuXHRcdHJldHVybiBzaGVldCA/IHNoZWV0LmdldENvbXBvbmVudCgpIDogZmFsc2U7XHJcblx0fVxyXG5cdFxyXG5cdHNldFNoZWV0RGF0YShrZXksIGRhdGEpe1xyXG5cdFx0aWYgKGtleSAmJiAhZGF0YSl7XHJcblx0XHRcdGRhdGEgPSBrZXk7XHJcblx0XHRcdGtleSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHR2YXIgc2hlZXQgPSB0aGlzLmxvb2t1cFNoZWV0KGtleSk7XHJcblx0XHRcclxuXHRcdHJldHVybiBzaGVldCA/IHNoZWV0LnNldERhdGEoZGF0YSkgOiBmYWxzZTtcdFxyXG5cdH1cclxuXHRcclxuXHRnZXRTaGVldERhdGEoa2V5KXtcclxuXHRcdHZhciBzaGVldCA9IHRoaXMubG9va3VwU2hlZXQoa2V5KTtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIHNoZWV0ID8gc2hlZXQuZ2V0RGF0YSgpIDogZmFsc2U7XHRcclxuXHR9XHJcblx0XHJcblx0Y2xlYXJTaGVldChrZXkpe1xyXG5cdFx0dmFyIHNoZWV0ID0gdGhpcy5sb29rdXBTaGVldChrZXkpO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gc2hlZXQgPyBzaGVldC5jbGVhcigpIDogZmFsc2U7XHJcblx0fVxyXG5cdFxyXG5cdHJlbW92ZVNoZWV0RnVuYyhrZXkpe1xyXG5cdFx0dmFyIHNoZWV0ID0gdGhpcy5sb29rdXBTaGVldChrZXkpO1xyXG5cdFx0XHJcblx0XHRpZihzaGVldCl7XHJcblx0XHRcdHRoaXMucmVtb3ZlU2hlZXQoc2hlZXQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRhY3RpdmVTaGVldEZ1bmMoa2V5KXtcclxuXHRcdHZhciBzaGVldCA9IHRoaXMubG9va3VwU2hlZXQoa2V5KTtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIHNoZWV0ID8gdGhpcy5sb2FkU2hlZXQoc2hlZXQpIDogZmFsc2U7XHJcblx0fVxyXG59XG5cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcInRvb2x0aXBcIjtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy50b29sdGlwU3Vic2NyaWJlciA9IG51bGwsXG5cdFx0dGhpcy5oZWFkZXJTdWJzY3JpYmVyID0gbnVsbCxcblx0XHRcblx0XHR0aGlzLnRpbWVvdXQgPSBudWxsO1xuXHRcdHRoaXMucG9wdXBJbnN0YW5jZSA9IG51bGw7XG5cdFx0XG5cdFx0Ly8gdGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwidG9vbHRpcEdlbmVyYXRpb25Nb2RlXCIsIHVuZGVmaW5lZCk7ICAvL2RlcHJlY2F0ZWRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJ0b29sdGlwRGVsYXlcIiwgMzAwKTsgXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRvb2x0aXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlclRvb2x0aXBcIik7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmRlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0ZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpe1xuXHRcdC8vIHRoaXMuZGVwcmVjYXRpb25DaGVja01zZyhcInRvb2x0aXBHZW5lcmF0aW9uTW9kZVwiLCBcIlRoaXMgb3B0aW9uIGlzIG5vIGxvbmdlciBuZWVkZWQgYXMgdG9vbHRpcHMgYXJlIGFsd2F5cyBnZW5lcmF0ZWQgb24gaG92ZXIgbm93XCIpO1xuXHR9XHRcblx0XG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJUb29sdGlwICYmICF0aGlzLmhlYWRlclN1YnNjcmliZXIpe1xuXHRcdFx0dGhpcy5oZWFkZXJTdWJzY3JpYmVyID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW91c2Vtb3ZlXCIsIHRoaXMubW91c2Vtb3ZlQ2hlY2suYmluZCh0aGlzLCBcImhlYWRlclRvb2x0aXBcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW91c2VvdXRcIiwgdGhpcy5tb3VzZW91dENoZWNrLmJpbmQodGhpcywgXCJoZWFkZXJUb29sdGlwXCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24udG9vbHRpcCAmJiAhdGhpcy50b29sdGlwU3Vic2NyaWJlcil7XG5cdFx0XHR0aGlzLnRvb2x0aXBTdWJzY3JpYmVyID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLW1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlbW92ZUNoZWNrLmJpbmQodGhpcywgXCJ0b29sdGlwXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1tb3VzZW91dFwiLCB0aGlzLm1vdXNlb3V0Q2hlY2suYmluZCh0aGlzLCBcInRvb2x0aXBcIikpO1xuXHRcdH1cblx0fVxuXHRcblx0bW91c2Vtb3ZlQ2hlY2soYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdHZhciB0b29sdGlwID0gYWN0aW9uID09PSBcInRvb2x0aXBcIiA/IGNvbXBvbmVudC5jb2x1bW4uZGVmaW5pdGlvbi50b29sdGlwIDogY29tcG9uZW50LmRlZmluaXRpb24uaGVhZGVyVG9vbHRpcDtcblx0XHRcblx0XHRpZih0b29sdGlwKXtcblx0XHRcdHRoaXMuY2xlYXJQb3B1cCgpO1xuXHRcdFx0dGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmxvYWRUb29sdGlwLmJpbmQodGhpcywgZSwgY29tcG9uZW50LCB0b29sdGlwKSwgdGhpcy50YWJsZS5vcHRpb25zLnRvb2x0aXBEZWxheSk7XG5cdFx0fVxuXHR9XG5cblx0bW91c2VvdXRDaGVjayhhY3Rpb24sIGUsIGNvbXBvbmVudCl7XG5cdFx0aWYoIXRoaXMucG9wdXBJbnN0YW5jZSl7XG5cdFx0XHR0aGlzLmNsZWFyUG9wdXAoKTtcblx0XHR9XG5cdH1cblx0XG5cdGNsZWFyUG9wdXAoYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuXHRcdHRoaXMudGltZW91dCA9IG51bGw7XG5cdFx0XG5cdFx0aWYodGhpcy5wb3B1cEluc3RhbmNlKXtcblx0XHRcdHRoaXMucG9wdXBJbnN0YW5jZS5oaWRlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRsb2FkVG9vbHRpcChlLCBjb21wb25lbnQsIHRvb2x0aXApe1xuXHRcdHZhciBjb250ZW50c0VsLCByZW5kZXJlZENhbGxiYWNrLCBjb29yZHM7XG5cblx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdHJlbmRlcmVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHR9XG5cdFx0XG5cdFx0aWYodHlwZW9mIHRvb2x0aXAgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHR0b29sdGlwID0gdG9vbHRpcChlLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCksIG9uUmVuZGVyZWQpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0b29sdGlwIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0Y29udGVudHNFbCA9IHRvb2x0aXA7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29udGVudHNFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcblx0XHRcdGlmKHRvb2x0aXAgPT09IHRydWUpe1xuXHRcdFx0XHRpZihjb21wb25lbnQgaW5zdGFuY2VvZiBDZWxsKXtcblx0XHRcdFx0XHR0b29sdGlwID0gY29tcG9uZW50LnZhbHVlO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYoY29tcG9uZW50LmRlZmluaXRpb24uZmllbGQpe1xuXHRcdFx0XHRcdFx0dGhpcy5sYW5nQmluZChcImNvbHVtbnN8XCIgKyBjb21wb25lbnQuZGVmaW5pdGlvbi5maWVsZCwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGNvbnRlbnRzRWwuaW5uZXJIVE1MID0gdG9vbHRpcCA9IHZhbHVlIHx8IGNvbXBvbmVudC5kZWZpbml0aW9uLnRpdGxlO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dG9vbHRpcCA9IGNvbXBvbmVudC5kZWZpbml0aW9uLnRpdGxlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb250ZW50c0VsLmlubmVySFRNTCA9IHRvb2x0aXA7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRvb2x0aXAgfHwgdG9vbHRpcCA9PT0gMCB8fCB0b29sdGlwID09PSBmYWxzZSl7XG5cdFx0XHRjb250ZW50c0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdG9vbHRpcFwiKTtcblxuXHRcdFx0Y29udGVudHNFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wb3B1cEluc3RhbmNlID0gdGhpcy5wb3B1cChjb250ZW50c0VsKTtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIHJlbmRlcmVkQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdHRoaXMucG9wdXBJbnN0YW5jZS5yZW5kZXJDYWxsYmFjayhyZW5kZXJlZENhbGxiYWNrKTtcblx0XHRcdH1cblxuXHRcdFx0Y29vcmRzID0gdGhpcy5wb3B1cEluc3RhbmNlLmNvbnRhaW5lckV2ZW50Q29vcmRzKGUpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnBvcHVwSW5zdGFuY2Uuc2hvdyhjb29yZHMueCArIDE1LCBjb29yZHMueSArIDE1KS5oaWRlT25CbHVyKCgpID0+IHtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiVG9vbHRpcENsb3NlZFwiLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHR0aGlzLnBvcHVwSW5zdGFuY2UgPSBudWxsO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIlRvb2x0aXBPcGVuZWRcIiwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cdH1cbn1cblxudmFyIGRlZmF1bHRWYWxpZGF0b3JzID0ge1xuXHQvL2lzIGludGVnZXJcblx0aW50ZWdlcjogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cblx0XHRyZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xuXHR9LFxuXG5cdC8vaXMgZmxvYXRcblx0ZmxvYXQ6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblxuXHRcdHJldHVybiAhaXNOYU4odmFsdWUpICYmIGlzRmluaXRlKHZhbHVlKSAmJiB2YWx1ZSAlIDEgIT09IDA7XG5cdH0sXG5cblx0Ly9tdXN0IGJlIGEgbnVtYmVyXG5cdG51bWVyaWM6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAhaXNOYU4odmFsdWUpO1xuXHR9LFxuXG5cdC8vbXVzdCBiZSBhIHN0cmluZ1xuXHRzdHJpbmc6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBpc05hTih2YWx1ZSk7XG5cdH0sXG5cblx0Ly9tdXN0IGJlIGFscGhhbnVtZXJpY1xuXHRhbHBoYW51bWVyaWM6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAoL15bYS16MC05XSskL2kpO1xuXG5cdFx0cmV0dXJuIHJlZy50ZXN0KHZhbHVlKTtcblx0fSxcblxuXHQvL21heGltdW0gdmFsdWVcblx0bWF4OiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgPD0gcGFyYW1ldGVycztcblx0fSxcblxuXHQvL21pbmltdW0gdmFsdWVcblx0bWluOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgPj0gcGFyYW1ldGVycztcblx0fSxcblxuXHQvL3N0YXJ0cyB3aXRoICB2YWx1ZVxuXHRzdGFydHM6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChTdHJpbmcocGFyYW1ldGVycykudG9Mb3dlckNhc2UoKSk7XG5cdH0sXG5cblx0Ly9lbmRzIHdpdGggIHZhbHVlXG5cdGVuZHM6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoU3RyaW5nKHBhcmFtZXRlcnMpLnRvTG93ZXJDYXNlKCkpO1xuXHR9LFxuXG5cblx0Ly9taW5pbXVtIHN0cmluZyBsZW5ndGhcblx0bWluTGVuZ3RoOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gU3RyaW5nKHZhbHVlKS5sZW5ndGggPj0gcGFyYW1ldGVycztcblx0fSxcblxuXHQvL21heGltdW0gc3RyaW5nIGxlbmd0aFxuXHRtYXhMZW5ndGg6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpLmxlbmd0aCA8PSBwYXJhbWV0ZXJzO1xuXHR9LFxuXG5cdC8vaW4gcHJvdmlkZWQgdmFsdWUgbGlzdFxuXHRpbjogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZih0eXBlb2YgcGFyYW1ldGVycyA9PSBcInN0cmluZ1wiKXtcblx0XHRcdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzLnNwbGl0KFwifFwiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcGFyYW1ldGVycy5pbmRleE9mKHZhbHVlKSA+IC0xO1xuXHR9LFxuXG5cdC8vbXVzdCBtYXRjaCBwcm92aWRlZCByZWdleFxuXHRyZWdleDogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAocGFyYW1ldGVycyk7XG5cblx0XHRyZXR1cm4gcmVnLnRlc3QodmFsdWUpO1xuXHR9LFxuXG5cdC8vdmFsdWUgbXVzdCBiZSB1bmlxdWUgaW4gdGhpcyBjb2x1bW5cblx0dW5pcXVlOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHR2YXIgdW5pcXVlID0gdHJ1ZTtcblxuXHRcdHZhciBjZWxsRGF0YSA9IGNlbGwuZ2V0RGF0YSgpO1xuXHRcdHZhciBjb2x1bW4gPSBjZWxsLmdldENvbHVtbigpLl9nZXRTZWxmKCk7XG5cblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHR2YXIgZGF0YSA9IHJvdy5nZXREYXRhKCk7XG5cblx0XHRcdGlmKGRhdGEgIT09IGNlbGxEYXRhKXtcblx0XHRcdFx0aWYodmFsdWUgPT0gY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSkpe1xuXHRcdFx0XHRcdHVuaXF1ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdW5pcXVlO1xuXHR9LFxuXG5cdC8vbXVzdCBoYXZlIGEgdmFsdWVcblx0cmVxdWlyZWQ6ZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdHJldHVybiB2YWx1ZSAhPT0gXCJcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCI7XG5cdH0sXG59O1xuXG5jbGFzcyBWYWxpZGF0ZSBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwidmFsaWRhdGVcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIHZhbGlkYXRvcnMgPSBkZWZhdWx0VmFsaWRhdG9ycztcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5pbnZhbGlkQ2VsbHMgPSBbXTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJ2YWxpZGF0aW9uTW9kZVwiLCBcImJsb2NraW5nXCIpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ2YWxpZGF0b3JcIik7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRJbnZhbGlkQ2VsbHNcIiwgdGhpcy5nZXRJbnZhbGlkQ2VsbHMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhckNlbGxWYWxpZGF0aW9uXCIsIHRoaXMudXNlckNsZWFyQ2VsbFZhbGlkYXRpb24uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJ2YWxpZGF0ZVwiLCB0aGlzLnVzZXJWYWxpZGF0ZS5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwiaXNWYWxpZFwiLCB0aGlzLmNlbGxJc1ZhbGlkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJjbGVhclZhbGlkYXRpb25cIiwgdGhpcy5jbGVhclZhbGlkYXRpb24uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcInZhbGlkYXRlXCIsIHRoaXMuY2VsbFZhbGlkYXRlLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcInZhbGlkYXRlXCIsIHRoaXMuY29sdW1uVmFsaWRhdGUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwidmFsaWRhdGVcIiwgdGhpcy5yb3dWYWxpZGF0ZS5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZGVsZXRlXCIsIHRoaXMuY2xlYXJWYWxpZGF0aW9uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW5DaGVjay5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImVkaXQtc3VjY2Vzc1wiLCB0aGlzLmVkaXRWYWxpZGF0ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImVkaXQtZWRpdG9yLWNsZWFyXCIsIHRoaXMuZWRpdG9yQ2xlYXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJlZGl0LWVkaXRlZC1jbGVhclwiLCB0aGlzLmVkaXRlZENsZWFyLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gRXZlbnQgSGFuZGxpbmcgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0ZWRpdFZhbGlkYXRlKGNlbGwsIHZhbHVlLCBwcmV2aW91c1ZhbHVlKXtcblx0XHR2YXIgdmFsaWQgPSB0aGlzLnRhYmxlLm9wdGlvbnMudmFsaWRhdGlvbk1vZGUgIT09IFwibWFudWFsXCIgPyB0aGlzLnZhbGlkYXRlKGNlbGwuY29sdW1uLm1vZHVsZXMudmFsaWRhdGUsIGNlbGwsIHZhbHVlKSA6IHRydWU7XG5cdFx0XG5cdFx0Ly8gYWxsb3cgdGltZSBmb3IgZWRpdG9yIHRvIG1ha2UgcmVuZGVyIGNoYW5nZXMgdGhlbiBzdHlsZSBjZWxsXG5cdFx0aWYodmFsaWQgIT09IHRydWUpe1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdmFsaWRhdGlvbi1mYWlsXCIpO1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJ2YWxpZGF0aW9uRmFpbGVkXCIsIGNlbGwuZ2V0Q29tcG9uZW50KCksIHZhbHVlLCB2YWxpZCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHZhbGlkO1xuXHR9XG5cdFxuXHRlZGl0b3JDbGVhcihjZWxsLCBjYW5jZWxsZWQpe1xuXHRcdGlmKGNhbmNlbGxlZCl7XG5cdFx0XHRpZihjZWxsLmNvbHVtbi5tb2R1bGVzLnZhbGlkYXRlKXtcblx0XHRcdFx0dGhpcy5jZWxsVmFsaWRhdGUoY2VsbCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdH1cblx0XG5cdGVkaXRlZENsZWFyKGNlbGwpe1xuXHRcdGlmKGNlbGwubW9kdWxlcy52YWxpZGF0ZSl7XG5cdFx0XHRjZWxsLm1vZHVsZXMudmFsaWRhdGUuaW52YWxpZCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLyBDZWxsIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGNlbGxJc1ZhbGlkKGNlbGwpe1xuXHRcdHJldHVybiBjZWxsLm1vZHVsZXMudmFsaWRhdGUgPyAoY2VsbC5tb2R1bGVzLnZhbGlkYXRlLmludmFsaWQgfHwgdHJ1ZSkgOiB0cnVlO1xuXHR9XG5cdFxuXHRjZWxsVmFsaWRhdGUoY2VsbCl7XG5cdFx0cmV0dXJuIHRoaXMudmFsaWRhdGUoY2VsbC5jb2x1bW4ubW9kdWxlcy52YWxpZGF0ZSwgY2VsbCwgY2VsbC5nZXRWYWx1ZSgpKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIENvbHVtbiBGdW5jdGlvbnMgLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGNvbHVtblZhbGlkYXRlKGNvbHVtbil7XG5cdFx0dmFyIGludmFsaWQgPSBbXTtcblx0XHRcblx0XHRjb2x1bW4uY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0aWYodGhpcy5jZWxsVmFsaWRhdGUoY2VsbCkgIT09IHRydWUpe1xuXHRcdFx0XHRpbnZhbGlkLnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGludmFsaWQubGVuZ3RoID8gaW52YWxpZCA6IHRydWU7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8gUm93IEZ1bmN0aW9ucyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyb3dWYWxpZGF0ZShyb3cpe1xuXHRcdHZhciBpbnZhbGlkID0gW107XG5cdFx0XG5cdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdGlmKHRoaXMuY2VsbFZhbGlkYXRlKGNlbGwpICE9PSB0cnVlKXtcblx0XHRcdFx0aW52YWxpZC5wdXNoKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBpbnZhbGlkLmxlbmd0aCA/IGludmFsaWQgOiB0cnVlO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVGFibGUgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0XG5cdHVzZXJDbGVhckNlbGxWYWxpZGF0aW9uKGNlbGxzKXtcblx0XHRpZighY2VsbHMpe1xuXHRcdFx0Y2VsbHMgPSB0aGlzLmdldEludmFsaWRDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRpZighQXJyYXkuaXNBcnJheShjZWxscykpe1xuXHRcdFx0Y2VsbHMgPSBbY2VsbHNdO1xuXHRcdH1cblx0XHRcblx0XHRjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHR0aGlzLmNsZWFyVmFsaWRhdGlvbihjZWxsLl9nZXRTZWxmKCkpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHR1c2VyVmFsaWRhdGUoY2VsbHMpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHQvL2NsZWFyIHJvdyBkYXRhXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRyb3cgPSByb3cuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcblx0XHRcdHZhciB2YWxpZCA9IHJvdy52YWxpZGF0ZSgpO1xuXHRcdFx0XG5cdFx0XHRpZih2YWxpZCAhPT0gdHJ1ZSl7XG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQodmFsaWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQubGVuZ3RoID8gb3V0cHV0IDogdHJ1ZTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGluaXRpYWxpemVDb2x1bW5DaGVjayhjb2x1bW4pe1xuXHRcdGlmKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi52YWxpZGF0b3IgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3ZhbGlkYXRlXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y29uZmlnID0gW10sXG5cdFx0dmFsaWRhdG9yO1xuXHRcdFxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnZhbGlkYXRvcil7XG5cdFx0XHRcblx0XHRcdGlmKEFycmF5LmlzQXJyYXkoY29sdW1uLmRlZmluaXRpb24udmFsaWRhdG9yKSl7XG5cdFx0XHRcdGNvbHVtbi5kZWZpbml0aW9uLnZhbGlkYXRvci5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yID0gc2VsZi5fZXh0cmFjdFZhbGlkYXRvcihpdGVtKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZih2YWxpZGF0b3Ipe1xuXHRcdFx0XHRcdFx0Y29uZmlnLnB1c2godmFsaWRhdG9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dmFsaWRhdG9yID0gdGhpcy5fZXh0cmFjdFZhbGlkYXRvcihjb2x1bW4uZGVmaW5pdGlvbi52YWxpZGF0b3IpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodmFsaWRhdG9yKXtcblx0XHRcdFx0XHRjb25maWcucHVzaCh2YWxpZGF0b3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbHVtbi5tb2R1bGVzLnZhbGlkYXRlID0gY29uZmlnLmxlbmd0aCA/IGNvbmZpZyA6IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0X2V4dHJhY3RWYWxpZGF0b3IodmFsdWUpe1xuXHRcdHZhciB0eXBlLCBwYXJhbXMsIHBvcztcblx0XHRcblx0XHRzd2l0Y2godHlwZW9mIHZhbHVlKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0cG9zID0gdmFsdWUuaW5kZXhPZignOicpO1xuXHRcdFx0XG5cdFx0XHRcdGlmKHBvcyA+IC0xKXtcblx0XHRcdFx0XHR0eXBlID0gdmFsdWUuc3Vic3RyaW5nKDAscG9zKTtcblx0XHRcdFx0XHRwYXJhbXMgPSB2YWx1ZS5zdWJzdHJpbmcocG9zKzEpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dHlwZSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2J1aWxkVmFsaWRhdG9yKHR5cGUsIHBhcmFtcyk7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fYnVpbGRWYWxpZGF0b3IodmFsdWUpO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl9idWlsZFZhbGlkYXRvcih2YWx1ZS50eXBlLCB2YWx1ZS5wYXJhbWV0ZXJzKTtcblx0XHR9XG5cdH1cblx0XG5cdF9idWlsZFZhbGlkYXRvcih0eXBlLCBwYXJhbXMpe1xuXHRcdFxuXHRcdHZhciBmdW5jID0gdHlwZW9mIHR5cGUgPT0gXCJmdW5jdGlvblwiID8gdHlwZSA6IFZhbGlkYXRlLnZhbGlkYXRvcnNbdHlwZV07XG5cdFx0XG5cdFx0aWYoIWZ1bmMpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVmFsaWRhdG9yIFNldHVwIEVycm9yIC0gTm8gbWF0Y2hpbmcgdmFsaWRhdG9yIGZvdW5kOlwiLCB0eXBlKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOnR5cGVvZiB0eXBlID09IFwiZnVuY3Rpb25cIiA/IFwiZnVuY3Rpb25cIiA6IHR5cGUsXG5cdFx0XHRcdGZ1bmM6ZnVuYyxcblx0XHRcdFx0cGFyYW1zOnBhcmFtcyxcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cdFxuXHR2YWxpZGF0ZSh2YWxpZGF0b3JzLCBjZWxsLCB2YWx1ZSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGZhaWxlZFZhbGlkYXRvcnMgPSBbXSxcblx0XHRpbnZhbGlkSW5kZXggPSB0aGlzLmludmFsaWRDZWxscy5pbmRleE9mKGNlbGwpO1xuXHRcdFxuXHRcdGlmKHZhbGlkYXRvcnMpe1xuXHRcdFx0dmFsaWRhdG9ycy5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdGlmKCFpdGVtLmZ1bmMuY2FsbChzZWxmLCBjZWxsLmdldENvbXBvbmVudCgpLCB2YWx1ZSwgaXRlbS5wYXJhbXMpKXtcblx0XHRcdFx0XHRmYWlsZWRWYWxpZGF0b3JzLnB1c2goe1xuXHRcdFx0XHRcdFx0dHlwZTppdGVtLnR5cGUsXG5cdFx0XHRcdFx0XHRwYXJhbWV0ZXJzOml0ZW0ucGFyYW1zXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRpZighY2VsbC5tb2R1bGVzLnZhbGlkYXRlKXtcblx0XHRcdGNlbGwubW9kdWxlcy52YWxpZGF0ZSA9IHt9O1xuXHRcdH1cblx0XHRcblx0XHRpZighZmFpbGVkVmFsaWRhdG9ycy5sZW5ndGgpe1xuXHRcdFx0Y2VsbC5tb2R1bGVzLnZhbGlkYXRlLmludmFsaWQgPSBmYWxzZTtcblx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItdmFsaWRhdGlvbi1mYWlsXCIpO1xuXHRcdFx0XG5cdFx0XHRpZihpbnZhbGlkSW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuaW52YWxpZENlbGxzLnNwbGljZShpbnZhbGlkSW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNlbGwubW9kdWxlcy52YWxpZGF0ZS5pbnZhbGlkID0gZmFpbGVkVmFsaWRhdG9ycztcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnZhbGlkYXRpb25Nb2RlICE9PSBcIm1hbnVhbFwiKXtcblx0XHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGludmFsaWRJbmRleCA9PSAtMSl7XG5cdFx0XHRcdHRoaXMuaW52YWxpZENlbGxzLnB1c2goY2VsbCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWlsZWRWYWxpZGF0b3JzLmxlbmd0aCA/IGZhaWxlZFZhbGlkYXRvcnMgOiB0cnVlO1xuXHR9XG5cdFxuXHRnZXRJbnZhbGlkQ2VsbHMoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dGhpcy5pbnZhbGlkQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0b3V0cHV0LnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Y2xlYXJWYWxpZGF0aW9uKGNlbGwpe1xuXHRcdHZhciBpbnZhbGlkSW5kZXg7XG5cdFx0XG5cdFx0aWYoY2VsbC5tb2R1bGVzLnZhbGlkYXRlICYmIGNlbGwubW9kdWxlcy52YWxpZGF0ZS5pbnZhbGlkKXtcblx0XHRcdFxuXHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdFx0XHRjZWxsLm1vZHVsZXMudmFsaWRhdGUuaW52YWxpZCA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRpbnZhbGlkSW5kZXggPSB0aGlzLmludmFsaWRDZWxscy5pbmRleE9mKGNlbGwpO1xuXHRcdFx0XG5cdFx0XHRpZihpbnZhbGlkSW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuaW52YWxpZENlbGxzLnNwbGljZShpbnZhbGlkSW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG52YXIgYWxsTW9kdWxlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRBY2Nlc3Nvck1vZHVsZTogQWNjZXNzb3IsXG5cdEFqYXhNb2R1bGU6IEFqYXgsXG5cdENsaXBib2FyZE1vZHVsZTogQ2xpcGJvYXJkLFxuXHRDb2x1bW5DYWxjc01vZHVsZTogQ29sdW1uQ2FsY3MsXG5cdERhdGFUcmVlTW9kdWxlOiBEYXRhVHJlZSxcblx0RG93bmxvYWRNb2R1bGU6IERvd25sb2FkLFxuXHRFZGl0TW9kdWxlOiBFZGl0LFxuXHRFeHBvcnRNb2R1bGU6IEV4cG9ydCxcblx0RmlsdGVyTW9kdWxlOiBGaWx0ZXIsXG5cdEZvcm1hdE1vZHVsZTogRm9ybWF0LFxuXHRGcm96ZW5Db2x1bW5zTW9kdWxlOiBGcm96ZW5Db2x1bW5zLFxuXHRGcm96ZW5Sb3dzTW9kdWxlOiBGcm96ZW5Sb3dzLFxuXHRHcm91cFJvd3NNb2R1bGU6IEdyb3VwUm93cyxcblx0SGlzdG9yeU1vZHVsZTogSGlzdG9yeSxcblx0SHRtbFRhYmxlSW1wb3J0TW9kdWxlOiBIdG1sVGFibGVJbXBvcnQsXG5cdEltcG9ydE1vZHVsZTogSW1wb3J0LFxuXHRJbnRlcmFjdGlvbk1vZHVsZTogSW50ZXJhY3Rpb24sXG5cdEtleWJpbmRpbmdzTW9kdWxlOiBLZXliaW5kaW5ncyxcblx0TWVudU1vZHVsZTogTWVudSxcblx0TW92ZUNvbHVtbnNNb2R1bGU6IE1vdmVDb2x1bW5zLFxuXHRNb3ZlUm93c01vZHVsZTogTW92ZVJvd3MsXG5cdE11dGF0b3JNb2R1bGU6IE11dGF0b3IsXG5cdFBhZ2VNb2R1bGU6IFBhZ2UsXG5cdFBlcnNpc3RlbmNlTW9kdWxlOiBQZXJzaXN0ZW5jZSxcblx0UG9wdXBNb2R1bGU6IFBvcHVwLFxuXHRQcmludE1vZHVsZTogUHJpbnQsXG5cdFJlYWN0aXZlRGF0YU1vZHVsZTogUmVhY3RpdmVEYXRhLFxuXHRSZXNpemVDb2x1bW5zTW9kdWxlOiBSZXNpemVDb2x1bW5zLFxuXHRSZXNpemVSb3dzTW9kdWxlOiBSZXNpemVSb3dzLFxuXHRSZXNpemVUYWJsZU1vZHVsZTogUmVzaXplVGFibGUsXG5cdFJlc3BvbnNpdmVMYXlvdXRNb2R1bGU6IFJlc3BvbnNpdmVMYXlvdXQsXG5cdFNlbGVjdFJhbmdlTW9kdWxlOiBTZWxlY3RSYW5nZSxcblx0U2VsZWN0Um93TW9kdWxlOiBTZWxlY3RSb3csXG5cdFNvcnRNb2R1bGU6IFNvcnQsXG5cdFNwcmVhZHNoZWV0TW9kdWxlOiBTcHJlYWRzaGVldCxcblx0VG9vbHRpcE1vZHVsZTogVG9vbHRpcCxcblx0VmFsaWRhdGVNb2R1bGU6IFZhbGlkYXRlXG59KTtcblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuXG5cdGRlYnVnRXZlbnRzRXh0ZXJuYWw6ZmFsc2UsIC8vZmxhZyB0byBjb25zb2xlIGxvZyBldmVudHNcblx0ZGVidWdFdmVudHNJbnRlcm5hbDpmYWxzZSwgLy9mbGFnIHRvIGNvbnNvbGUgbG9nIGV2ZW50c1xuXHRkZWJ1Z0ludmFsaWRPcHRpb25zOnRydWUsIC8vYWxsb3cgdG9nZ2xpbmcgb2YgaW52YWxpZCBvcHRpb24gd2FybmluZ3Ncblx0ZGVidWdJbnZhbGlkQ29tcG9uZW50RnVuY3M6dHJ1ZSwgLy9hbGxvdyB0b2dnbGluZyBvZiBpbnZhbGlkIGNvbXBvbmVudCB3YXJuaW5nc1xuXHRkZWJ1Z0luaXRpYWxpemF0aW9uOnRydWUsIC8vYWxsb3cgdG9nZ2xpbmcgb2YgcHJlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIGNhbGwgd2FybmluZ3Ncblx0ZGVidWdEZXByZWNhdGlvbjp0cnVlLCAvL2FsbG93IHRvZ2dsaW5nIG9mIGRlcHJlY2F0aW9uIHdhcm5pbmdzXG5cblx0aGVpZ2h0OmZhbHNlLCAvL2hlaWdodCBvZiB0YWJ1bGF0b3Jcblx0bWluSGVpZ2h0OmZhbHNlLCAvL21pbmltdW0gaGVpZ2h0IG9mIHRhYnVsYXRvclxuXHRtYXhIZWlnaHQ6ZmFsc2UsIC8vbWF4aW11bSBoZWlnaHQgb2YgdGFidWxhdG9yXG5cblx0Y29sdW1uSGVhZGVyVmVydEFsaWduOlwidG9wXCIsIC8vdmVydGljYWwgYWxpZ25tZW50IG9mIGNvbHVtbiBoZWFkZXJzXG5cblx0cG9wdXBDb250YWluZXI6ZmFsc2UsXG5cblx0Y29sdW1uczpbXSwvL3N0b3JlIGZvciBjb2x1bSBoZWFkZXIgaW5mb1xuXHRjb2x1bW5EZWZhdWx0czp7fSwgLy9zdG9yZSBjb2x1bW4gZGVmYXVsdCBwcm9wc1xuXHRyb3dIZWFkZXI6ZmFsc2UsXG5cblx0ZGF0YTpmYWxzZSwgLy9kZWZhdWx0IHN0YXJ0aW5nIGRhdGFcblxuXHRhdXRvQ29sdW1uczpmYWxzZSwgLy9idWlsZCBjb2x1bW5zIGZyb20gZGF0YSByb3cgc3RydWN0dXJlXG5cdGF1dG9Db2x1bW5zRGVmaW5pdGlvbnM6ZmFsc2UsXG5cblx0bmVzdGVkRmllbGRTZXBhcmF0b3I6XCIuXCIsIC8vc2VwYXJhdG9yIGZvciBuZXN0ZWQgZGF0YVxuXG5cdGZvb3RlckVsZW1lbnQ6ZmFsc2UsIC8vaG9sZCBmb290ZXIgZWxlbWVudFxuXG5cdGluZGV4OlwiaWRcIiwgLy9maWxlZCBmb3Igcm93IGluZGV4XG5cblx0dGV4dERpcmVjdGlvbjpcImF1dG9cIixcblxuXHRhZGRSb3dQb3M6XCJib3R0b21cIiwgLy9wb3NpdGlvbiB0byBpbnNlcnQgYmxhbmsgcm93cywgdG9wfGJvdHRvbVxuXG5cdGhlYWRlclZpc2libGU6dHJ1ZSwgLy9oaWRlIGhlYWRlclxuXG5cdHJlbmRlclZlcnRpY2FsOlwidmlydHVhbFwiLFxuXHRyZW5kZXJIb3Jpem9udGFsOlwiYmFzaWNcIixcblx0cmVuZGVyVmVydGljYWxCdWZmZXI6MCwgLy8gc2V0IHZpcnR1YWwgRE9NIGJ1ZmZlciBzaXplXG5cblx0c2Nyb2xsVG9Sb3dQb3NpdGlvbjpcInRvcFwiLFxuXHRzY3JvbGxUb1Jvd0lmVmlzaWJsZTp0cnVlLFxuXG5cdHNjcm9sbFRvQ29sdW1uUG9zaXRpb246XCJsZWZ0XCIsXG5cdHNjcm9sbFRvQ29sdW1uSWZWaXNpYmxlOnRydWUsXG5cblx0cm93Rm9ybWF0dGVyOmZhbHNlLFxuXHRyb3dGb3JtYXR0ZXJQcmludDpudWxsLFxuXHRyb3dGb3JtYXR0ZXJDbGlwYm9hcmQ6bnVsbCxcblx0cm93Rm9ybWF0dGVySHRtbE91dHB1dDpudWxsLFxuXG5cdHJvd0hlaWdodDpudWxsLFxuXG5cdHBsYWNlaG9sZGVyOmZhbHNlLFxuXG5cdGRhdGFMb2FkZXI6dHJ1ZSxcblx0ZGF0YUxvYWRlckxvYWRpbmc6ZmFsc2UsXG5cdGRhdGFMb2FkZXJFcnJvcjpmYWxzZSxcblx0ZGF0YUxvYWRlckVycm9yVGltZW91dDozMDAwLFxuXHRkYXRhU2VuZFBhcmFtczp7fSxcblx0ZGF0YVJlY2VpdmVQYXJhbXM6e30sXG5cblx0ZGVwZW5kZW5jaWVzOnt9LFxufTtcblxuY2xhc3MgT3B0aW9uc0xpc3Qge1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSwgbXNnVHlwZSwgZGVmYXVsdHMgPSB7fSl7XG5cdFx0dGhpcy50YWJsZSA9IHRhYmxlO1xuXHRcdHRoaXMubXNnVHlwZSA9IG1zZ1R5cGU7XG5cdFx0dGhpcy5yZWdpc3RlcmVkRGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cyk7XG5cdH1cblx0XG5cdHJlZ2lzdGVyKG9wdGlvbiwgdmFsdWUpe1xuXHRcdHRoaXMucmVnaXN0ZXJlZERlZmF1bHRzW29wdGlvbl0gPSB2YWx1ZTtcblx0fVxuXHRcblx0Z2VuZXJhdGUoZGVmYXVsdE9wdGlvbnMsIHVzZXJPcHRpb25zID0ge30pe1xuXHRcdHZhciBvdXRwdXQgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnJlZ2lzdGVyZWREZWZhdWx0cyksXG5cdFx0d2FybiA9IHRoaXMudGFibGUub3B0aW9ucy5kZWJ1Z0ludmFsaWRPcHRpb25zIHx8IHVzZXJPcHRpb25zLmRlYnVnSW52YWxpZE9wdGlvbnMgPT09IHRydWU7XG5cdFx0XG5cdFx0T2JqZWN0LmFzc2lnbihvdXRwdXQsIGRlZmF1bHRPcHRpb25zKTtcblx0XHRcblx0XHRmb3IgKGxldCBrZXkgaW4gdXNlck9wdGlvbnMpe1xuXHRcdFx0aWYoIW91dHB1dC5oYXNPd25Qcm9wZXJ0eShrZXkpKXtcblx0XHRcdFx0aWYod2Fybil7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiSW52YWxpZCBcIiArIHRoaXMubXNnVHlwZSArIFwiIG9wdGlvbjpcIiwga2V5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG91dHB1dFtrZXldID0gdXNlck9wdGlvbnMua2V5O1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0XG5cdFx0Zm9yIChsZXQga2V5IGluIG91dHB1dCl7XG5cdFx0XHRpZihrZXkgaW4gdXNlck9wdGlvbnMpe1xuXHRcdFx0XHRvdXRwdXRba2V5XSA9IHVzZXJPcHRpb25zW2tleV07XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkob3V0cHV0W2tleV0pKXtcblx0XHRcdFx0XHRvdXRwdXRba2V5XSA9IE9iamVjdC5hc3NpZ24oW10sIG91dHB1dFtrZXldKTtcblx0XHRcdFx0fWVsc2UgaWYodHlwZW9mIG91dHB1dFtrZXldID09PSBcIm9iamVjdFwiICYmIG91dHB1dFtrZXldICE9PSBudWxsKXtcblx0XHRcdFx0XHRvdXRwdXRba2V5XSA9IE9iamVjdC5hc3NpZ24oe30sIG91dHB1dFtrZXldKTtcblx0XHRcdFx0fWVsc2UgaWYgKHR5cGVvZiBvdXRwdXRba2V5XSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0ZGVsZXRlIG91dHB1dFtrZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cbn1cblxuY2xhc3MgUmVuZGVyZXIgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsID0gdGFibGUucm93TWFuYWdlci5lbGVtZW50O1xuXHRcdHRoaXMuZWxlbWVudEhvcml6b250YWwgPSB0YWJsZS5jb2x1bW5NYW5hZ2VyLmVsZW1lbnQ7XG5cdFx0dGhpcy50YWJsZUVsZW1lbnQgPSAgdGFibGUucm93TWFuYWdlci50YWJsZUVsZW1lbnQ7XG5cblx0XHR0aGlzLnZlcnRpY2FsRmlsbE1vZGUgPSBcImZpdFwiOyAvLyB1c2VkIGJ5IHJvdyBtYW5hZ2VyIHRvIGRldGVybWluZSBob3cgdG8gc2l6ZSB0aGUgcmVuZGVyIGFyZWEgKFwiZml0XCIgLSBmaXRzIGNvbnRhaW5lciB0byB0aGUgY29udGVudHMsIFwiZmlsbFwiIC0gZmlsbHMgdGhlIGNvbnRhaW5lciB3aXRob3V0IHJlc2l6aW5nIGl0KVxuXHR9XG5cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vIEludGVybmFsIEJpbmRpbmdzIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGluaXRpYWxpemUoKXtcblx0XHQvL2luaXRpYWxpemUgY29yZSBmdW5jdGlvbmFsaXR5XG5cdH1cblxuXHRjbGVhclJvd3MoKXtcblx0XHQvL2NsZWFyIGRvd24gZXhpc3Rpbmcgcm93cyBsYXlvdXRcblx0fVxuXG5cdGNsZWFyQ29sdW1ucygpe1xuXHRcdC8vY2xlYXIgZG93biBleGlzdGluZyBjb2x1bW5zIGxheW91dFxuXHR9XG5cblxuXHRyZWluaXRpYWxpemVDb2x1bW5XaWR0aHMoY29sdW1ucyl7XG5cdFx0Ly9yZXNpemUgY29sdW1ucyB0byBmaXQgZGF0YVxuXHR9XG5cblxuXHRyZW5kZXJSb3dzKCl7XG5cdFx0Ly9yZW5kZXIgcm93cyBmcm9tIGEgY2xlYW4gc2xhdGVcblx0fVxuXG5cdHJlbmRlckNvbHVtbnMoKXtcblx0XHQvL3JlbmRlciBjb2x1bW5zIGZyb20gYSBjbGVhbiBzbGF0ZVxuXHR9XG5cblx0cmVyZW5kZXJSb3dzKGNhbGxiYWNrKXtcblx0XHQvLyByZXJlbmRlciByb3dzIGFuZCBrZWVwIHBvc2l0aW9uXG5cdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0Y2FsbGJhY2soKTtcblx0XHR9XG5cdH1cblxuXHRyZXJlbmRlckNvbHVtbnModXBkYXRlLCBibG9ja1JlZHJhdyl7XG5cdFx0Ly9yZXJlbmRlciBjb2x1bW5zXG5cdH1cblxuXHRyZW5kZXJSb3dDZWxscyhyb3cpe1xuXHRcdC8vcmVuZGVyIHRoZSBjZWxscyBpbiBhIHJvd1xuXHR9XG5cblx0cmVyZW5kZXJSb3dDZWxscyhyb3csIGZvcmNlKXtcblx0XHQvL3JlcmVuZGVyIHRoZSBjZWxscyBpbiBhIHJvd1xuXHR9XG5cblx0c2Nyb2xsQ29sdW1ucyhsZWZ0LCBkaXIpe1xuXHRcdC8vaGFuZGxlIGhvcml6b250YWwgc2Nyb2xsaW5nXG5cdH1cblxuXHRzY3JvbGxSb3dzKHRvcCwgZGlyKXtcblx0XHQvL2hhbmRsZSB2ZXJ0aWNhbCBzY3JvbGxpbmdcblx0fVxuXG5cdHJlc2l6ZSgpe1xuXHRcdC8vY29udGFpbmVyIGhhcyByZXNpemVkLCBjYXJyeSBvdXQgYW55IG5lZWRlZCByZWNhbGN1bGF0aW9ucyAoRE8gTk9UIFJFUkVOREVSIElOIFRISVMgRlVOQ1RJT04pXG5cdH1cblxuXHRzY3JvbGxUb1Jvdyhyb3cpe1xuXHRcdC8vc2Nyb2xsIHRvIGEgc3BlY2lmaWMgcm93XG5cdH1cblxuXHRzY3JvbGxUb1Jvd05lYXJlc3RUb3Aocm93KXtcblx0XHQvL2RldGVybWluZSB3ZWF0aGVyIHRoZSByb3cgaXMgbmVhcmVzdCB0aGUgdG9wIG9yIGJvdHRvbSBvZiB0aGUgdGFibGUsIHJldHVybiB0cnVlIGZvciB0b3Agb3IgZmFsc2UgZm9yIGJvdHRvbVxuXHR9XG5cblx0dmlzaWJsZVJvd3MoaW5jbHVkaW5nQnVmZmVyKXtcblx0XHQvL3JldHVybiB0aGUgdmlzaWJsZSByb3dzXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8gSGVscGVyIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRyb3dzKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpO1xuXHR9XG5cblx0c3R5bGVSb3cocm93LCBpbmRleCl7XG5cdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdGlmKGluZGV4ICUgMil7XG5cdFx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1ldmVuXCIpO1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1yb3ctb2RkXCIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LW9kZFwiKTtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3Itcm93LWV2ZW5cIik7XG5cdFx0fVxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyBFeHRlcm5hbCBUcmlnZ2VycyAvLy8vLy8vLy9cblx0Ly8vLy8vLyAoRE8gTk9UIE9WRVJSSURFKSAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRjbGVhcigpe1xuXHRcdC8vY2xlYXIgZG93biBleGlzdGluZyBsYXlvdXRcblx0XHR0aGlzLmNsZWFyUm93cygpO1xuXHRcdHRoaXMuY2xlYXJDb2x1bW5zKCk7XG5cdH1cblxuXHRyZW5kZXIoKXtcblx0XHQvL3JlbmRlciBmcm9tIGEgY2xlYW4gc2xhdGVcblx0XHR0aGlzLnJlbmRlclJvd3MoKTtcblx0XHR0aGlzLnJlbmRlckNvbHVtbnMoKTtcblx0fVxuXG5cdHJlcmVuZGVyKGNhbGxiYWNrKXtcblx0XHQvLyByZXJlbmRlciBhbmQga2VlcCBwb3NpdGlvblxuXHRcdHRoaXMucmVyZW5kZXJSb3dzKCk7XG5cdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoKTtcblx0fVxuXG5cdHNjcm9sbFRvUm93UG9zaXRpb24ocm93LCBwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHR2YXIgcm93SW5kZXggPSB0aGlzLnJvd3MoKS5pbmRleE9mKHJvdyksXG5cdFx0cm93RWwgPSByb3cuZ2V0RWxlbWVudCgpLFxuXHRcdG9mZnNldCA9IDA7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0aWYocm93SW5kZXggPiAtMSl7XG5cblx0XHRcdFx0aWYodHlwZW9mIGlmVmlzaWJsZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0aWZWaXNpYmxlID0gdGhpcy50YWJsZS5vcHRpb25zLnNjcm9sbFRvUm93SWZWaXNpYmxlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9jaGVjayByb3cgdmlzaWJpbGl0eVxuXHRcdFx0XHRpZighaWZWaXNpYmxlKXtcblx0XHRcdFx0XHRpZihIZWxwZXJzLmVsVmlzaWJsZShyb3dFbCkpe1xuXHRcdFx0XHRcdFx0b2Zmc2V0ID0gSGVscGVycy5lbE9mZnNldChyb3dFbCkudG9wIC0gSGVscGVycy5lbE9mZnNldCh0aGlzLmVsZW1lbnRWZXJ0aWNhbCkudG9wO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihvZmZzZXQgPiAwICYmIG9mZnNldCA8IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCAtIHJvd0VsLm9mZnNldEhlaWdodCl7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHR5cGVvZiBwb3NpdGlvbiA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLnRhYmxlLm9wdGlvbnMuc2Nyb2xsVG9Sb3dQb3NpdGlvbjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHBvc2l0aW9uID09PSBcIm5lYXJlc3RcIil7XG5cdFx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLnNjcm9sbFRvUm93TmVhcmVzdFRvcChyb3cpID8gXCJ0b3BcIiA6IFwiYm90dG9tXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL3Njcm9sbCB0byByb3dcblx0XHRcdFx0dGhpcy5zY3JvbGxUb1Jvdyhyb3cpO1xuXG5cdFx0XHRcdC8vYWxpZ24gdG8gY29ycmVjdCBwb3NpdGlvblxuXHRcdFx0XHRzd2l0Y2gocG9zaXRpb24pe1xuXHRcdFx0XHRcdGNhc2UgXCJtaWRkbGVcIjpcblx0XHRcdFx0XHRjYXNlIFwiY2VudGVyXCI6XG5cblx0XHRcdFx0XHRcdGlmKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbEhlaWdodCAtIHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9PSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgKyAocm93RWwub2Zmc2V0VG9wIC0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wKSAtICgodGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsSGVpZ2h0IC0gcm93RWwub2Zmc2V0VG9wKSAvIDIpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgLSAodGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0IC8gMik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcImJvdHRvbVwiOlxuXG5cdFx0XHRcdFx0XHRpZih0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxIZWlnaHQgLSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPT0gdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0KXtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wIC0gKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbEhlaWdodCAtIHJvd0VsLm9mZnNldFRvcCkgKyByb3dFbC5vZmZzZXRIZWlnaHQ7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCAtIHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCArIHJvd0VsLm9mZnNldEhlaWdodDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwidG9wXCI6XG5cdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPSByb3dFbC5vZmZzZXRUb3A7XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXNvbHZlKCk7XG5cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiU2Nyb2xsIEVycm9yIC0gUm93IG5vdCB2aXNpYmxlXCIpO1xuXHRcdFx0XHRyZWplY3QoXCJTY3JvbGwgRXJyb3IgLSBSb3cgbm90IHZpc2libGVcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuY2xhc3MgQmFzaWNIb3Jpem9udGFsIGV4dGVuZHMgUmVuZGVyZXJ7XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdH1cblx0XG5cdHJlbmRlclJvd0NlbGxzKHJvdywgaW5GcmFnbWVudCkge1xuXHRcdGNvbnN0IHJvd0ZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdHJvd0ZyYWcuYXBwZW5kQ2hpbGQoY2VsbC5nZXRFbGVtZW50KCkpO1xuXHRcdH0pO1xuXHRcdHJvdy5lbGVtZW50LmFwcGVuZENoaWxkKHJvd0ZyYWcpO1xuXHRcdFxuXHRcdGlmKCFpbkZyYWdtZW50KXtcblx0XHRcdHJvdy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRcdGNlbGwuY2VsbFJlbmRlcmVkKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZUNvbHVtbldpZHRocyhjb2x1bW5zKXtcblx0XHRjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGNvbHVtbi5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdH0pO1xuXHR9XG59XG5cbmNsYXNzIFZpcnR1YWxEb21Ib3Jpem9udGFsIGV4dGVuZHMgUmVuZGVyZXJ7XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5sZWZ0Q29sID0gMDtcblx0XHR0aGlzLnJpZ2h0Q29sID0gMDtcblx0XHR0aGlzLnNjcm9sbExlZnQgPSAwO1xuXHRcdFxuXHRcdHRoaXMudkRvbVNjcm9sbFBvc0xlZnQgPSAwO1xuXHRcdHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0ID0gMDtcblx0XHRcblx0XHR0aGlzLnZEb21QYWRMZWZ0ID0gMDtcblx0XHR0aGlzLnZEb21QYWRSaWdodCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5maXREYXRhQ29sQXZnID0gMDtcblx0XHRcblx0XHR0aGlzLndpbmRvd0J1ZmZlciA9IDIwMDsgLy9waXhlbCBtYXJnaW4gdG8gbWFrZSBjb2x1bW4gdmlzaWJsZSBiZWZvcmUgaXQgaXMgc2hvd24gb24gc2NyZWVuXG5cdFx0XG5cdFx0dGhpcy52aXNpYmxlUm93cyA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMuaXNGaXREYXRhID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zID0gW107XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmNvbXBhdGliaWxpdHlDaGVjaygpO1xuXHRcdHRoaXMubGF5b3V0Q2hlY2soKTtcblx0XHR0aGlzLnZlcnRTY3JvbGxMaXN0ZW4oKTtcblx0fVxuXHRcblx0Y29tcGF0aWJpbGl0eUNoZWNrKCl7XHRcdFxuXHRcdGlmKHRoaXMub3B0aW9ucyhcImxheW91dFwiKSA9PSBcImZpdERhdGFUYWJsZVwiKXtcblx0XHRcdGNvbnNvbGUud2FybihcIkhvcml6b250YWwgVmlydHVhbCBET00gaXMgbm90IGNvbXBhdGlibGUgd2l0aCBmaXREYXRhVGFibGUgbGF5b3V0IG1vZGVcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMub3B0aW9ucyhcInJlc3BvbnNpdmVMYXlvdXRcIikpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiSG9yaXpvbnRhbCBWaXJ0dWFsIERPTSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHJlc3BvbnNpdmUgY29sdW1uc1wiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5vcHRpb25zKFwicnRsXCIpKXtcblx0XHRcdGNvbnNvbGUud2FybihcIkhvcml6b250YWwgVmlydHVhbCBET00gaXMgbm90IGN1cnJlbnRseSBjb21wYXRpYmxlIHdpdGggUlRMIHRleHQgZGlyZWN0aW9uXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0bGF5b3V0Q2hlY2soKXtcblx0XHR0aGlzLmlzRml0RGF0YSA9IHRoaXMub3B0aW9ucyhcImxheW91dFwiKS5zdGFydHNXaXRoKCdmaXREYXRhJyk7XG5cdH1cblx0XG5cdHZlcnRTY3JvbGxMaXN0ZW4oKXtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC12ZXJ0aWNhbFwiLCB0aGlzLmNsZWFyVmlzUm93Q2FjaGUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXJlZnJlc2hlZFwiLCB0aGlzLmNsZWFyVmlzUm93Q2FjaGUuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdGNsZWFyVmlzUm93Q2FjaGUoKXtcblx0XHR0aGlzLnZpc2libGVSb3dzID0gbnVsbDtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFB1YmxpYyBGdW5jdGlvbnMgLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHJlbmRlckNvbHVtbnMocm93LCBmb3JjZSl7XG5cdFx0dGhpcy5kYXRhQ2hhbmdlKCk7XG5cdH1cblx0XG5cdFxuXHRzY3JvbGxDb2x1bW5zKGxlZnQsIGRpcil7XG5cdFx0aWYodGhpcy5zY3JvbGxMZWZ0ICE9IGxlZnQpe1xuXHRcdFx0dGhpcy5zY3JvbGxMZWZ0ID0gbGVmdDtcblx0XHRcdFxuXHRcdFx0dGhpcy5zY3JvbGwobGVmdCAtICh0aGlzLnZEb21TY3JvbGxQb3NMZWZ0ICsgdGhpcy53aW5kb3dCdWZmZXIpKTtcblx0XHR9XG5cdH1cblx0XG5cdGNhbGNXaW5kb3dCdWZmZXIoKXtcblx0XHR2YXIgYnVmZmVyID0gdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50V2lkdGg7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHR2YXIgd2lkdGggPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHdpZHRoID4gYnVmZmVyKXtcblx0XHRcdFx0XHRidWZmZXIgPSB3aWR0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMud2luZG93QnVmZmVyID0gYnVmZmVyICogMjtcblx0fVxuXHRcblx0cmVyZW5kZXJDb2x1bW5zKHVwZGF0ZSwgYmxvY2tSZWRyYXcpe1x0XHRcblx0XHR2YXIgb2xkID0ge1xuXHRcdFx0Y29sczp0aGlzLmNvbHVtbnMsXG5cdFx0XHRsZWZ0Q29sOnRoaXMubGVmdENvbCxcblx0XHRcdHJpZ2h0Q29sOnRoaXMucmlnaHRDb2wsXG5cdFx0fSxcblx0XHRjb2xQb3MgPSAwO1xuXHRcdFxuXHRcdGlmKHVwZGF0ZSAmJiAhdGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuY2xlYXIoKTtcblx0XHRcblx0XHR0aGlzLmNhbGNXaW5kb3dCdWZmZXIoKTtcblx0XHRcblx0XHR0aGlzLnNjcm9sbExlZnQgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxMZWZ0O1xuXHRcdFxuXHRcdHRoaXMudkRvbVNjcm9sbFBvc0xlZnQgPSB0aGlzLnNjcm9sbExlZnQgLSB0aGlzLndpbmRvd0J1ZmZlcjtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NSaWdodCA9IHRoaXMuc2Nyb2xsTGVmdCArIHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudFdpZHRoICsgdGhpcy53aW5kb3dCdWZmZXI7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0dmFyIGNvbmZpZyA9IHt9LFxuXHRcdFx0d2lkdGg7XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0aWYoIWNvbHVtbi5tb2R1bGVzLmZyb3plbil7XHRcdFx0XG5cdFx0XHRcdFx0d2lkdGggPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb25maWcubGVmdFBvcyA9IGNvbFBvcztcblx0XHRcdFx0XHRjb25maWcucmlnaHRQb3MgPSBjb2xQb3MgKyB3aWR0aDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb25maWcud2lkdGggPSB3aWR0aDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAodGhpcy5pc0ZpdERhdGEpIHtcblx0XHRcdFx0XHRcdGNvbmZpZy5maXREYXRhQ2hlY2sgPSBjb2x1bW4ubW9kdWxlcy52ZG9tSG96ID8gY29sdW1uLm1vZHVsZXMudmRvbUhvei5maXREYXRhQ2hlY2sgOiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZigoY29sUG9zICsgd2lkdGggPiB0aGlzLnZEb21TY3JvbGxQb3NMZWZ0KSAmJiAoY29sUG9zIDwgdGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQpKXtcblx0XHRcdFx0XHRcdC8vY29sdW1uIGlzIHZpc2libGVcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy5sZWZ0Q29sID09IC0xKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5sZWZ0Q29sID0gdGhpcy5jb2x1bW5zLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0dGhpcy52RG9tUGFkTGVmdCA9IGNvbFBvcztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dGhpcy5yaWdodENvbCA9IHRoaXMuY29sdW1ucy5sZW5ndGg7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gY29sdW1uIGlzIGhpZGRlblxuXHRcdFx0XHRcdFx0aWYodGhpcy5sZWZ0Q29sICE9PSAtMSl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZFJpZ2h0ICs9IHdpZHRoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmNvbHVtbnMucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLnZkb21Ib3ogPSBjb25maWc7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y29sUG9zICs9IHdpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLnZEb21QYWRMZWZ0ICsgXCJweFwiO1xuXHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMudkRvbVBhZFJpZ2h0ICsgXCJweFwiO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFxuXHRcdGlmKCFibG9ja1JlZHJhdyl7XG5cdFx0XHRpZighdXBkYXRlIHx8IHRoaXMucmVpbml0Q2hhbmdlZChvbGQpKXtcblx0XHRcdFx0dGhpcy5yZWluaXRpYWxpemVSb3dzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbExlZnQgPSB0aGlzLnNjcm9sbExlZnQ7XG5cdH1cblx0XG5cdHJlbmRlclJvd0NlbGxzKHJvdyl7XG5cdFx0aWYodGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zdCByb3dGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0cm93RnJhZy5hcHBlbmRDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHR9KTtcblx0XHRcdHJvdy5lbGVtZW50LmFwcGVuZENoaWxkKHJvd0ZyYWcpO1xuXHRcdFx0XG5cdFx0XHRyb3cuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZXJlbmRlclJvd0NlbGxzKHJvdywgZm9yY2Upe1xuXHRcdHRoaXMucmVpbml0aWFsaXplUm93KHJvdywgZm9yY2UpO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVDb2x1bW5XaWR0aHMoY29sdW1ucyl7XG5cdFx0Zm9yKGxldCBpID0gdGhpcy5sZWZ0Q29sOyBpIDw9IHRoaXMucmlnaHRDb2w7IGkrKyl7XG5cdFx0XHRsZXQgY29sID0gdGhpcy5jb2x1bW5zW2ldO1xuXHRcdFx0XG5cdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRjb2wucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIEludGVybmFsIFJlbmRlcmluZyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRkZWluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdH1cblx0XG5cdGNsZWFyKCl7XG5cdFx0dGhpcy5jb2x1bW5zID0gW107XG5cdFx0XG5cdFx0dGhpcy5sZWZ0Q29sID0gLTE7XG5cdFx0dGhpcy5yaWdodENvbCA9IDA7XG5cdFx0XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zTGVmdCA9IDA7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQgPSAwO1xuXHRcdHRoaXMudkRvbVBhZExlZnQgPSAwO1xuXHRcdHRoaXMudkRvbVBhZFJpZ2h0ID0gMDtcblx0fVxuXHRcblx0ZGF0YUNoYW5nZSgpe1xuXHRcdHZhciBjaGFuZ2UgPSBmYWxzZSxcblx0XHRyb3csIHJvd0VsO1xuXHRcdFxuXHRcdGlmKHRoaXMuaXNGaXREYXRhKXtcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0aWYoIWNvbHVtbi5kZWZpbml0aW9uLndpZHRoICYmIGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0XHRjaGFuZ2UgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoY2hhbmdlICYmIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0ID0gdGhpcy5zY3JvbGxMZWZ0ICsgdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50V2lkdGggKyB0aGlzLndpbmRvd0J1ZmZlcjtcblx0XHRcdFx0XG5cdFx0XHRcdHJvdyA9IHRoaXMuY2hhaW4oXCJyb3dzLXNhbXBsZVwiLCBbMV0sIFtdLCAoKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpO1xuXHRcdFx0XHR9KVswXTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0cm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJvdy5nZW5lcmF0ZUNlbGxzKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuYXBwZW5kQ2hpbGQocm93RWwpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZvcihsZXQgY29sRW5kID0gMDsgY29sRW5kIDwgcm93LmNlbGxzLmxlbmd0aDsgY29sRW5kKyspe1xuXHRcdFx0XHRcdFx0bGV0IGNlbGwgPSByb3cuY2VsbHNbY29sRW5kXTtcblx0XHRcdFx0XHRcdHJvd0VsLmFwcGVuZENoaWxkKGNlbGwuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y2VsbC5jb2x1bW4ucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3dFbCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoZmFsc2UsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5vcHRpb25zKFwibGF5b3V0XCIpID09PSBcImZpdENvbHVtbnNcIil7XG5cdFx0XHRcdHRoaXMubGF5b3V0UmVmcmVzaCgpO1xuXHRcdFx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucyhmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWluaXRDaGFuZ2VkKG9sZCl7XG5cdFx0dmFyIG1hdGNoID0gdHJ1ZTtcblx0XHRcblx0XHRpZihvbGQuY29scy5sZW5ndGggIT09IHRoaXMuY29sdW1ucy5sZW5ndGggfHwgb2xkLmxlZnRDb2wgIT09IHRoaXMubGVmdENvbCB8fCBvbGQucmlnaHRDb2wgIT09IHRoaXMucmlnaHRDb2wpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdG9sZC5jb2xzLmZvckVhY2goKGNvbCwgaSkgPT4ge1xuXHRcdFx0aWYoY29sICE9PSB0aGlzLmNvbHVtbnNbaV0pe1xuXHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiAhbWF0Y2g7XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZVJvd3MoKXtcblx0XHR2YXIgdmlzaWJsZVJvd3MgPSB0aGlzLmdldFZpc2libGVSb3dzKCksXG5cdFx0b3RoZXJSb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd3MoKS5maWx0ZXIocm93ID0+ICF2aXNpYmxlUm93cy5pbmNsdWRlcyhyb3cpKTtcblx0XHRcblx0XHR2aXNpYmxlUm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHRoaXMucmVpbml0aWFsaXplUm93KHJvdywgdHJ1ZSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0b3RoZXJSb3dzLmZvckVhY2goKHJvdykgPT57XG5cdFx0XHRyb3cuZGVpbml0aWFsaXplKCk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdGdldFZpc2libGVSb3dzKCl7XG5cdFx0aWYgKCF0aGlzLnZpc2libGVSb3dzKXtcblx0XHRcdHRoaXMudmlzaWJsZVJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VmlzaWJsZVJvd3MoKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMudmlzaWJsZVJvd3M7XHRcblx0fVxuXHRcblx0c2Nyb2xsKGRpZmYpe1xuXHRcdHRoaXMudkRvbVNjcm9sbFBvc0xlZnQgKz0gZGlmZjtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NSaWdodCArPSBkaWZmO1xuXHRcdFxuXHRcdGlmKE1hdGguYWJzKGRpZmYpID4gKHRoaXMud2luZG93QnVmZmVyIC8gMikpe1xuXHRcdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihkaWZmID4gMCl7XG5cdFx0XHRcdC8vc2Nyb2xsIHJpZ2h0XG5cdFx0XHRcdHRoaXMuYWRkQ29sUmlnaHQoKTtcblx0XHRcdFx0dGhpcy5yZW1vdmVDb2xMZWZ0KCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdC8vc2Nyb2xsIGxlZnRcblx0XHRcdFx0dGhpcy5hZGRDb2xMZWZ0KCk7XG5cdFx0XHRcdHRoaXMucmVtb3ZlQ29sUmlnaHQoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNvbFBvc2l0aW9uQWRqdXN0IChzdGFydCwgZW5kLCBkaWZmKXtcblx0XHRmb3IobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKXtcblx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbaV07XG5cdFx0XHRcblx0XHRcdGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oubGVmdFBvcyArPSBkaWZmO1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMudmRvbUhvei5yaWdodFBvcyArPSBkaWZmO1xuXHRcdH1cblx0fVxuXHRcblx0YWRkQ29sUmlnaHQoKXtcblx0XHR2YXIgY2hhbmdlcyA9IGZhbHNlLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXHRcdFxuXHRcdHdoaWxlKHdvcmtpbmcpe1xuXHRcdFx0XG5cdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMucmlnaHRDb2wgKyAxXTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMudmRvbUhvei5sZWZ0UG9zIDw9IHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0KXtcblx0XHRcdFx0XHRjaGFuZ2VzID0gdHJ1ZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0dmFyIGNlbGwgPSByb3cuZ2V0Q2VsbChjb2x1bW4pO1xuXHRcdFx0XHRcdFx0XHRyb3cuZ2V0RWxlbWVudCgpLmluc2VydEJlZm9yZShjZWxsLmdldEVsZW1lbnQoKSwgcm93LmdldENlbGwodGhpcy5jb2x1bW5zW3RoaXMucmlnaHRDb2xdKS5nZXRFbGVtZW50KCkubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuZml0RGF0YUNvbEFjdHVhbFdpZHRoQ2hlY2soY29sdW1uKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLnJpZ2h0Q29sKys7IC8vIERvbid0IG1vdmUgdGhpcyBiZWxvdyB0aGUgPj0gY2hlY2sgYmVsb3dcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0cm93Lm1vZHVsZXMudmRvbUhvei5yaWdodENvbCA9IHRoaXMucmlnaHRDb2w7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYodGhpcy5yaWdodENvbCA+PSAodGhpcy5jb2x1bW5zLmxlbmd0aCAtIDEpKXtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZFJpZ2h0ID0gMDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRSaWdodCAtPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XHR9XHRcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoYW5nZXMpe1xuXHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy52RG9tUGFkUmlnaHQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRDb2xMZWZ0KCl7XG5cdFx0dmFyIGNoYW5nZXMgPSBmYWxzZSxcblx0XHR3b3JraW5nID0gdHJ1ZTtcblx0XHRcblx0XHR3aGlsZSh3b3JraW5nKXtcblx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbdGhpcy5sZWZ0Q29sIC0gMV07XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oucmlnaHRQb3MgPj0gdGhpcy52RG9tU2Nyb2xsUG9zTGVmdCl7XG5cdFx0XHRcdFx0Y2hhbmdlcyA9IHRydWU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5pbnNlcnRCZWZvcmUoY2VsbC5nZXRFbGVtZW50KCksIHJvdy5nZXRDZWxsKHRoaXMuY29sdW1uc1t0aGlzLmxlZnRDb2xdKS5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRcdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMubGVmdENvbC0tOyAvLyBkb24ndCBtb3ZlIHRoaXMgYmVsb3cgdGhlIDw9IGNoZWNrIGJlbG93XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHJvdy5tb2R1bGVzLnZkb21Ib3oubGVmdENvbCA9IHRoaXMubGVmdENvbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZih0aGlzLmxlZnRDb2wgPD0gMCl7IC8vIHJlcGxpY2F0aW5nIGxvZ2ljIGluIGFkZENvbFJpZ2h0XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRMZWZ0ID0gMDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRMZWZ0IC09IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRsZXQgZGlmZiA9IHRoaXMuZml0RGF0YUNvbEFjdHVhbFdpZHRoQ2hlY2soY29sdW1uKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihkaWZmKXtcblx0XHRcdFx0XHRcdHRoaXMuc2Nyb2xsTGVmdCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbExlZnQgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxMZWZ0ICsgZGlmZjtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZFJpZ2h0IC09IGRpZmY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoY2hhbmdlcyl7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHRoaXMudkRvbVBhZExlZnQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZW1vdmVDb2xSaWdodCgpe1xuXHRcdHZhciBjaGFuZ2VzID0gZmFsc2UsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cdFx0XG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMucmlnaHRDb2xdO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy52ZG9tSG96LmxlZnRQb3MgPiB0aGlzLnZEb21TY3JvbGxQb3NSaWdodCl7XG5cdFx0XHRcdFx0Y2hhbmdlcyA9IHRydWU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ291bGQgbm90IHJlbW92ZUNvbFJpZ2h0XCIsIGV4Lm1lc3NhZ2UpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy52RG9tUGFkUmlnaHQgKz0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdFx0dGhpcy5yaWdodENvbCAtLTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0cm93Lm1vZHVsZXMudmRvbUhvei5yaWdodENvbCA9IHRoaXMucmlnaHRDb2w7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihjaGFuZ2VzKXtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMudkRvbVBhZFJpZ2h0ICsgXCJweFwiO1xuXHRcdH1cblx0fVxuXHRcblx0cmVtb3ZlQ29sTGVmdCgpe1xuXHRcdHZhciBjaGFuZ2VzID0gZmFsc2UsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cdFx0XG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMubGVmdENvbF07XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oucmlnaHRQb3MgPCB0aGlzLnZEb21TY3JvbGxQb3NMZWZ0KXtcblx0XHRcdFx0XHRjaGFuZ2VzID0gdHJ1ZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ291bGQgbm90IHJlbW92ZUNvbExlZnRcIiwgZXgubWVzc2FnZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLnZEb21QYWRMZWZ0ICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcdHRoaXMubGVmdENvbCArKztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0cm93Lm1vZHVsZXMudmRvbUhvei5sZWZ0Q29sID0gdGhpcy5sZWZ0Q29sO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoY2hhbmdlcyl7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHRoaXMudkRvbVBhZExlZnQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRmaXREYXRhQ29sQWN0dWFsV2lkdGhDaGVjayhjb2x1bW4pe1xuXHRcdHZhciBuZXdXaWR0aCwgd2lkdGhEaWZmO1xuXHRcdFxuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3ouZml0RGF0YUNoZWNrKXtcblx0XHRcdGNvbHVtbi5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdFx0XG5cdFx0XHRuZXdXaWR0aCA9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0d2lkdGhEaWZmID0gbmV3V2lkdGggLSBjb2x1bW4ubW9kdWxlcy52ZG9tSG96LndpZHRoO1xuXHRcdFx0XG5cdFx0XHRpZih3aWR0aERpZmYpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96LnJpZ2h0UG9zICs9IHdpZHRoRGlmZjtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMudmRvbUhvei53aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0XHR0aGlzLmNvbFBvc2l0aW9uQWRqdXN0KHRoaXMuY29sdW1ucy5pbmRleE9mKGNvbHVtbikgKyAxLCB0aGlzLmNvbHVtbnMubGVuZ3RoLCB3aWR0aERpZmYpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96LmZpdERhdGFDaGVjayA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gd2lkdGhEaWZmO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplUm93KHJvdyl7XG5cdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRyb3cubW9kdWxlcy52ZG9tSG96ID0ge1xuXHRcdFx0XHRsZWZ0Q29sOnRoaXMubGVmdENvbCxcblx0XHRcdFx0cmlnaHRDb2w6dGhpcy5yaWdodENvbCxcblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zKXtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMubGVmdENvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5hcHBlbmRDZWxsKHJvdywgY29sdW1uKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGZvcihsZXQgaSA9IHRoaXMubGVmdENvbDsgaSA8PSB0aGlzLnJpZ2h0Q29sOyBpKyspe1xuXHRcdFx0XHR0aGlzLmFwcGVuZENlbGwocm93LCB0aGlzLmNvbHVtbnNbaV0pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucyl7XG5cdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLnJpZ2h0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHR0aGlzLmFwcGVuZENlbGwocm93LCBjb2x1bW4pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGFwcGVuZENlbGwocm93LCBjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbiAmJiBjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRsZXQgY2VsbCA9IHJvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0XHRcblx0XHRcdHJvdy5nZXRFbGVtZW50KCkuYXBwZW5kQ2hpbGQoY2VsbC5nZXRFbGVtZW50KCkpO1xuXHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZVJvdyhyb3csIGZvcmNlKXtcblx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdGlmKGZvcmNlIHx8ICFyb3cubW9kdWxlcy52ZG9tSG96IHx8IHJvdy5tb2R1bGVzLnZkb21Ib3oubGVmdENvbCAhPT0gdGhpcy5sZWZ0Q29sIHx8IHJvdy5tb2R1bGVzLnZkb21Ib3oucmlnaHRDb2wgIT09IHRoaXMucmlnaHRDb2wpe1xuXHRcdFx0XHRcblx0XHRcdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcdFx0d2hpbGUocm93RWwuZmlyc3RDaGlsZCkgcm93RWwucmVtb3ZlQ2hpbGQocm93RWwuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgQ29sdW1uTWFuYWdlciBleHRlbmRzIENvcmVGZWF0dXJlIHtcblx0XG5cdGNvbnN0cnVjdG9yICh0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuYmxvY2tIb3pTY3JvbGxFdmVudCA9IGZhbHNlO1xuXHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQgPSBudWxsO1xuXHRcdHRoaXMuY29udGVudHNFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLnJvd0hlYWRlciA9IG51bGw7XG5cdFx0dGhpcy5lbGVtZW50ID0gbnVsbCA7IC8vY29udGFpbmluZyBlbGVtZW50XG5cdFx0dGhpcy5jb2x1bW5zID0gW107IC8vIGNvbHVtbiBkZWZpbml0aW9uIG9iamVjdFxuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXggPSBbXTsgLy9jb2x1bW5zIGJ5IGluZGV4XG5cdFx0dGhpcy5jb2x1bW5zQnlGaWVsZCA9IHt9OyAvL2NvbHVtbnMgYnkgZmllbGRcblx0XHR0aGlzLnNjcm9sbExlZnQgPSAwO1xuXHRcdHRoaXMub3B0aW9uc0xpc3QgPSBuZXcgT3B0aW9uc0xpc3QodGhpcy50YWJsZSwgXCJjb2x1bW4gZGVmaW5pdGlvblwiLCBkZWZhdWx0Q29sdW1uT3B0aW9ucyk7XG5cdFx0XG5cdFx0dGhpcy5yZWRyYXdCbG9jayA9IGZhbHNlOyAvL3ByZXZlbnQgcmVkcmF3cyB0byBhbGxvdyBtdWx0aXBsZSBkYXRhIG1hbmlwdWxhdGlvbnMgYmVmb3JlIGNvbnRpbnVpbmdcblx0XHR0aGlzLnJlZHJhd0Jsb2NrVXBkYXRlID0gbnVsbDsgLy9zdG9yZSBsYXRlc3QgcmVkcmF3IHVwZGF0ZSBvbmx5IHN0YXR1c1xuXHRcdFxuXHRcdHRoaXMucmVuZGVyZXIgPSBudWxsO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLyBTZXR1cCBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVSZW5kZXJlcigpO1xuXHRcdFxuXHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQgPSB0aGlzLmNyZWF0ZUhlYWRlcnNFbGVtZW50KCk7XG5cdFx0dGhpcy5jb250ZW50c0VsZW1lbnQgPSB0aGlzLmNyZWF0ZUhlYWRlckNvbnRlbnRzRWxlbWVudCgpO1xuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlSGVhZGVyRWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMuY29udGVudHNFbGVtZW50Lmluc2VydEJlZm9yZSh0aGlzLmhlYWRlcnNFbGVtZW50LCB0aGlzLmNvbnRlbnRzRWxlbWVudC5maXJzdENoaWxkKTtcblx0XHR0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMuY29udGVudHNFbGVtZW50LCB0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsaXplU2Nyb2xsV2hlZWxXYXRjaGVyKCk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGwtaG9yaXpvbnRhbFwiLCB0aGlzLnNjcm9sbEhvcml6b250YWwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGxiYXItdmVydGljYWxcIiwgdGhpcy5wYWRWZXJ0aWNhbFNjcm9sbGJhci5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0cGFkVmVydGljYWxTY3JvbGxiYXIod2lkdGgpe1xuXHRcdGlmKHRoaXMudGFibGUucnRsKXtcblx0XHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IHdpZHRoICsgXCJweFwiO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQuc3R5bGUubWFyZ2luUmlnaHQgPSB3aWR0aCArIFwicHhcIjtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVSZW5kZXJlcigpe1xuXHRcdHZhciByZW5kZXJDbGFzcztcblx0XHRcblx0XHR2YXIgcmVuZGVyZXJzID0ge1xuXHRcdFx0XCJ2aXJ0dWFsXCI6IFZpcnR1YWxEb21Ib3Jpem9udGFsLFxuXHRcdFx0XCJiYXNpY1wiOiBCYXNpY0hvcml6b250YWwsXG5cdFx0fTtcblx0XHRcblx0XHRpZih0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWwgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0cmVuZGVyQ2xhc3MgPSByZW5kZXJlcnNbdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWxdO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJlbmRlckNsYXNzID0gdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWw7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHJlbmRlckNsYXNzKXtcblx0XHRcdHRoaXMucmVuZGVyZXIgPSBuZXcgcmVuZGVyQ2xhc3ModGhpcy50YWJsZSwgdGhpcy5lbGVtZW50LCB0aGlzLnRhYmxlRWxlbWVudCk7XG5cdFx0XHR0aGlzLnJlbmRlcmVyLmluaXRpYWxpemUoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGZpbmQgbWF0Y2hpbmcgcmVuZGVyZXI6XCIsIHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJIb3Jpem9udGFsKTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRjcmVhdGVIZWFkZXJzRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyc1wiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93XCIpO1xuXHRcdFxuXHRcdHJldHVybiBlbDtcblx0fVxuXHRcblx0Y3JlYXRlSGVhZGVyQ29udGVudHNFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXItY29udGVudHNcIik7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInJvd2dyb3VwXCIpO1xuXHRcdFxuXHRcdHJldHVybiBlbDtcblx0fVxuXHRcblx0Y3JlYXRlSGVhZGVyRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dncm91cFwiKTtcblx0XHRcblx0XHRpZighdGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclZpc2libGUpe1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXItaGlkZGVuXCIpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdC8vcmV0dXJuIGNvbnRhaW5pbmcgZWxlbWVudFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXHRcblx0Ly9yZXR1cm4gY29udGFpbmluZyBjb250ZW50cyBlbGVtZW50XG5cdGdldENvbnRlbnRzRWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLmNvbnRlbnRzRWxlbWVudDtcblx0fVxuXHRcblx0XG5cdC8vcmV0dXJuIGhlYWRlciBjb250YWluaW5nIGVsZW1lbnRcblx0Z2V0SGVhZGVyc0VsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5oZWFkZXJzRWxlbWVudDtcblx0fVxuXHRcblx0Ly9zY3JvbGwgaG9yaXpvbnRhbGx5IHRvIG1hdGNoIHRhYmxlIGJvZHlcblx0c2Nyb2xsSG9yaXpvbnRhbChsZWZ0KXtcblx0XHR0aGlzLmNvbnRlbnRzRWxlbWVudC5zY3JvbGxMZWZ0ID0gbGVmdDtcblx0XHRcblx0XHR0aGlzLnNjcm9sbExlZnQgPSBsZWZ0O1xuXHRcdFxuXHRcdHRoaXMucmVuZGVyZXIuc2Nyb2xsQ29sdW1ucyhsZWZ0KTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZVNjcm9sbFdoZWVsV2F0Y2hlcigpe1xuXHRcdHRoaXMuY29udGVudHNFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCAoZSkgPT4ge1xuXHRcdFx0dmFyIGxlZnQ7XG5cdFx0XHRcblx0XHRcdGlmKGUuZGVsdGFYKXtcblx0XHRcdFx0bGVmdCA9IHRoaXMuY29udGVudHNFbGVtZW50LnNjcm9sbExlZnQgKyBlLmRlbHRhWDtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLyBDb2x1bW4gU2V0dXAgRnVuY3Rpb25zIC8vLy8vLy8vLy8vLy9cblx0Z2VuZXJhdGVDb2x1bW5zRnJvbVJvd0RhdGEoZGF0YSl7XG5cdFx0dmFyIGNvbHMgPSBbXSxcblx0XHRjb2xsUHJvZ3Jlc3MgPSB7fSxcblx0XHRyb3dTYW1wbGUgPSB0aGlzLnRhYmxlLm9wdGlvbnMuYXV0b0NvbHVtbnMgPT09IFwiZnVsbFwiID8gZGF0YSA6IFtkYXRhWzBdXSxcblx0XHRkZWZpbml0aW9ucyA9IHRoaXMudGFibGUub3B0aW9ucy5hdXRvQ29sdW1uc0RlZmluaXRpb25zO1xuXHRcdFxuXHRcdGlmKGRhdGEgJiYgZGF0YS5sZW5ndGgpe1xuXHRcdFx0XG5cdFx0XHRyb3dTYW1wbGUuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFxuXHRcdFx0XHRPYmplY3Qua2V5cyhyb3cpLmZvckVhY2goKGtleSwgaW5kZXgpID0+IHtcblx0XHRcdFx0XHRsZXQgdmFsdWUgPSByb3dba2V5XSxcblx0XHRcdFx0XHRjb2w7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoIWNvbGxQcm9ncmVzc1trZXldKXtcblx0XHRcdFx0XHRcdGNvbCA9IHtcblx0XHRcdFx0XHRcdFx0ZmllbGQ6a2V5LFxuXHRcdFx0XHRcdFx0XHR0aXRsZTprZXksXG5cdFx0XHRcdFx0XHRcdHNvcnRlcjp0aGlzLmNhbGN1bGF0ZVNvcnRlckZyb21WYWx1ZSh2YWx1ZSksXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRjb2xzLnNwbGljZShpbmRleCwgMCwgY29sKTtcblx0XHRcdFx0XHRcdGNvbGxQcm9ncmVzc1trZXldID0gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiID8gY29sIDogdHJ1ZTtcblx0XHRcdFx0XHR9ZWxzZSBpZihjb2xsUHJvZ3Jlc3Nba2V5XSAhPT0gdHJ1ZSl7XG5cdFx0XHRcdFx0XHRpZih0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdFx0XHRjb2xsUHJvZ3Jlc3Nba2V5XS5zb3J0ZXIgPSB0aGlzLmNhbGN1bGF0ZVNvcnRlckZyb21WYWx1ZSh2YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdGNvbGxQcm9ncmVzc1trZXldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGlmKGRlZmluaXRpb25zKXtcblx0XHRcdFx0XG5cdFx0XHRcdHN3aXRjaCh0eXBlb2YgZGVmaW5pdGlvbnMpe1xuXHRcdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSBkZWZpbml0aW9ucy5jYWxsKHRoaXMudGFibGUsIGNvbHMpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShkZWZpbml0aW9ucykpe1xuXHRcdFx0XHRcdFx0XHRjb2xzLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBtYXRjaCA9IGRlZmluaXRpb25zLmZpbmQoKGRlZikgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGRlZi5maWVsZCA9PT0gY29sLmZpZWxkO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdGlmKG1hdGNoKXtcblx0XHRcdFx0XHRcdFx0XHRcdE9iamVjdC5hc3NpZ24oY29sLCBtYXRjaCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbHMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0aWYoZGVmaW5pdGlvbnNbY29sLmZpZWxkXSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRPYmplY3QuYXNzaWduKGNvbCwgZGVmaW5pdGlvbnNbY29sLmZpZWxkXSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSBjb2xzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSBjb2xzO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnNldENvbHVtbnModGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMpO1xuXHRcdH1cblx0fVxuXHRcblx0Y2FsY3VsYXRlU29ydGVyRnJvbVZhbHVlKHZhbHVlKXtcblx0XHR2YXIgc29ydGVyO1xuXHRcdFxuXHRcdHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRzb3J0ZXIgPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0c29ydGVyID0gXCJib29sZWFuXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwibnVtYmVyXCI6XG5cdFx0XHRcdHNvcnRlciA9IFwibnVtYmVyXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkodmFsdWUpKXtcblx0XHRcdFx0XHRzb3J0ZXIgPSBcImFycmF5XCI7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRzb3J0ZXIgPSBcInN0cmluZ1wiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZighaXNOYU4odmFsdWUpICYmIHZhbHVlICE9PSBcIlwiKXtcblx0XHRcdFx0XHRzb3J0ZXIgPSBcIm51bWJlclwiO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYodmFsdWUubWF0Y2goLygoXlswLTldK1thLXpdKyl8KF5bYS16XStbMC05XSspKSskL2kpKXtcblx0XHRcdFx0XHRcdHNvcnRlciA9IFwiYWxwaGFudW1cIjtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRzb3J0ZXIgPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHNvcnRlcjtcblx0fVxuXHRcblx0c2V0Q29sdW1ucyhjb2xzLCByb3cpe1xuXHRcdHdoaWxlKHRoaXMuaGVhZGVyc0VsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5oZWFkZXJzRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmhlYWRlcnNFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1ucyA9IFtdO1xuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXggPSBbXTtcblx0XHR0aGlzLmNvbHVtbnNCeUZpZWxkID0ge307XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbnMtbG9hZGluZ1wiKTtcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5zTG9hZGluZ1wiKTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93SGVhZGVyKXtcblx0XHRcdHRoaXMucm93SGVhZGVyID0gbmV3IENvbHVtbih0aGlzLnRhYmxlLm9wdGlvbnMucm93SGVhZGVyID09PSB0cnVlID8ge30gOiB0aGlzLnRhYmxlLm9wdGlvbnMucm93SGVhZGVyLCB0aGlzLCB0cnVlKTtcblx0XHRcdHRoaXMuY29sdW1ucy5wdXNoKHRoaXMucm93SGVhZGVyKTtcblx0XHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5yb3dIZWFkZXIuZ2V0RWxlbWVudCgpKTtcblx0XHRcdHRoaXMucm93SGVhZGVyLmNvbHVtblJlbmRlcmVkKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGNvbHMuZm9yRWFjaCgoZGVmLCBpKSA9PiB7XG5cdFx0XHR0aGlzLl9hZGRDb2x1bW4oZGVmKTtcblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLl9yZUluZGV4Q29sdW1ucygpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW5zLWxvYWRlZFwiKTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiY29sdW1uc0xvYWRlZFwiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5zTG9hZGVkXCIsIHRoaXMuZ2V0Q29tcG9uZW50cygpKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoZmFsc2UsIHRydWUpO1xuXHRcdFxuXHRcdHRoaXMucmVkcmF3KHRydWUpO1xuXHR9XG5cdFxuXHRfYWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgbmV4dFRvQ29sdW1uKXtcblx0XHR2YXIgY29sdW1uID0gbmV3IENvbHVtbihkZWZpbml0aW9uLCB0aGlzKSxcblx0XHRjb2xFbCA9IGNvbHVtbi5nZXRFbGVtZW50KCksXG5cdFx0aW5kZXggPSBuZXh0VG9Db2x1bW4gPyB0aGlzLmZpbmRDb2x1bW5JbmRleChuZXh0VG9Db2x1bW4pIDogbmV4dFRvQ29sdW1uO1xuXHRcdFxuXHRcdC8vcHJldmVudCBhZGRpbmcgb2Ygcm93cyBpbiBmcm9udCBvZiByb3cgaGVhZGVyXG5cdFx0aWYoYmVmb3JlICYmIHRoaXMucm93SGVhZGVyICYmICghbmV4dFRvQ29sdW1uIHx8IG5leHRUb0NvbHVtbiA9PT0gdGhpcy5yb3dIZWFkZXIpKXtcblx0XHRcdGJlZm9yZSA9IGZhbHNlO1xuXHRcdFx0bmV4dFRvQ29sdW1uID0gdGhpcy5yb3dIZWFkZXI7XG5cdFx0XHRpbmRleCA9IDA7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKG5leHRUb0NvbHVtbiAmJiBpbmRleCA+IC0xKXtcblx0XHRcdHZhciB0b3BDb2x1bW4gPSBuZXh0VG9Db2x1bW4uZ2V0VG9wQ29sdW1uKCk7XG5cdFx0XHR2YXIgcGFyZW50SW5kZXggPSB0aGlzLmNvbHVtbnMuaW5kZXhPZih0b3BDb2x1bW4pO1xuXHRcdFx0dmFyIG5leHRFbCA9IHRvcENvbHVtbi5nZXRFbGVtZW50KCk7XG5cdFx0XHRcblx0XHRcdGlmKGJlZm9yZSl7XG5cdFx0XHRcdHRoaXMuY29sdW1ucy5zcGxpY2UocGFyZW50SW5kZXgsIDAsIGNvbHVtbik7XG5cdFx0XHRcdG5leHRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb2xFbCwgbmV4dEVsKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5jb2x1bW5zLnNwbGljZShwYXJlbnRJbmRleCArIDEsIDAsIGNvbHVtbik7XG5cdFx0XHRcdG5leHRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb2xFbCwgbmV4dEVsLm5leHRTaWJsaW5nKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihiZWZvcmUpe1xuXHRcdFx0XHR0aGlzLmNvbHVtbnMudW5zaGlmdChjb2x1bW4pO1xuXHRcdFx0XHR0aGlzLmhlYWRlcnNFbGVtZW50Lmluc2VydEJlZm9yZShjb2x1bW4uZ2V0RWxlbWVudCgpLCB0aGlzLmhlYWRlcnNFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmNvbHVtbnMucHVzaChjb2x1bW4pO1xuXHRcdFx0XHR0aGlzLmhlYWRlcnNFbGVtZW50LmFwcGVuZENoaWxkKGNvbHVtbi5nZXRFbGVtZW50KCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRjb2x1bW4uY29sdW1uUmVuZGVyZWQoKTtcblx0XHRcblx0XHRyZXR1cm4gY29sdW1uO1xuXHR9XG5cdFxuXHRyZWdpc3RlckNvbHVtbkZpZWxkKGNvbCl7XG5cdFx0aWYoY29sLmRlZmluaXRpb24uZmllbGQpe1xuXHRcdFx0dGhpcy5jb2x1bW5zQnlGaWVsZFtjb2wuZGVmaW5pdGlvbi5maWVsZF0gPSBjb2w7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWdpc3RlckNvbHVtblBvc2l0aW9uKGNvbCl7XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5wdXNoKGNvbCk7XG5cdH1cblx0XG5cdF9yZUluZGV4Q29sdW1ucygpe1xuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXggPSBbXTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0Y29sdW1uLnJlUmVnaXN0ZXJQb3NpdGlvbigpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2Vuc3VyZSBjb2x1bW4gaGVhZGVycyB0YWtlIHVwIHRoZSBjb3JyZWN0IGFtb3VudCBvZiBzcGFjZSBpbiBjb2x1bW4gZ3JvdXBzXG5cdHZlcnRpY2FsQWxpZ25IZWFkZXJzKCl7XG5cdFx0dmFyIG1pbkhlaWdodCA9IDA7XG5cdFx0XG5cdFx0aWYoIXRoaXMucmVkcmF3QmxvY2spe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmhlYWRlcnNFbGVtZW50LnN0eWxlLmhlaWdodD1cIlwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGNvbHVtbi5jbGVhclZlcnRpY2FsQWxpZ24oKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdHZhciBoZWlnaHQgPSBjb2x1bW4uZ2V0SGVpZ2h0KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihoZWlnaHQgPiBtaW5IZWlnaHQpe1xuXHRcdFx0XHRcdG1pbkhlaWdodCA9IGhlaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbWluSGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGNvbHVtbi52ZXJ0aWNhbEFsaWduKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5IZWFkZXJWZXJ0QWxpZ24sIG1pbkhlaWdodCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLyBDb2x1bW4gRGV0YWlscyAvLy8vLy8vLy8vLy8vLy8vL1xuXHRmaW5kQ29sdW1uKHN1YmplY3Qpe1xuXHRcdHZhciBjb2x1bW5zO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBzdWJqZWN0ID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XG5cdFx0XHRpZihzdWJqZWN0IGluc3RhbmNlb2YgQ29sdW1uKXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIGNvbHVtbiBlbGVtZW50XG5cdFx0XHRcdHJldHVybiBzdWJqZWN0O1xuXHRcdFx0fWVsc2UgaWYoc3ViamVjdCBpbnN0YW5jZW9mIENvbHVtbkNvbXBvbmVudCl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyBwdWJsaWMgY29sdW1uIGNvbXBvbmVudFxuXHRcdFx0XHRyZXR1cm4gc3ViamVjdC5fZ2V0U2VsZigpIHx8IGZhbHNlO1xuXHRcdFx0fWVsc2UgaWYodHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHN1YmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb2x1bW5zID0gW107XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdFx0Y29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdFx0Y29sdW1ucyA9IGNvbHVtbnMuY29uY2F0KGNvbHVtbi5nZXRDb2x1bW5zKHRydWUpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL3N1YmplY3QgaXMgYSBIVE1MIGVsZW1lbnQgb2YgdGhlIGNvbHVtbiBoZWFkZXJcblx0XHRcdFx0bGV0IG1hdGNoID0gY29sdW1ucy5maW5kKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmVsZW1lbnQgPT09IHN1YmplY3Q7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIG1hdGNoIHx8IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly9zdWJqZWN0IHNob3VsZCBiZSB0cmVhdGVkIGFzIHRoZSBmaWVsZCBuYW1lIG9mIHRoZSBjb2x1bW5cblx0XHRcdHJldHVybiB0aGlzLmNvbHVtbnNCeUZpZWxkW3N1YmplY3RdIHx8IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHQvL2NhdGNoIGFsbCBmb3IgYW55IG90aGVyIHR5cGUgb2YgaW5wdXRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdGdldENvbHVtbkJ5RmllbGQoZmllbGQpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbnNCeUZpZWxkW2ZpZWxkXTtcblx0fVxuXHRcblx0Z2V0Q29sdW1uc0J5RmllbGRSb290KHJvb3Qpe1xuXHRcdHZhciBtYXRjaGVzID0gW107XG5cdFx0XG5cdFx0T2JqZWN0LmtleXModGhpcy5jb2x1bW5zQnlGaWVsZCkuZm9yRWFjaCgoZmllbGQpID0+IHtcblx0XHRcdHZhciBmaWVsZFJvb3QgPSB0aGlzLnRhYmxlLm9wdGlvbnMubmVzdGVkRmllbGRTZXBhcmF0b3IgPyBmaWVsZC5zcGxpdCh0aGlzLnRhYmxlLm9wdGlvbnMubmVzdGVkRmllbGRTZXBhcmF0b3IpWzBdIDogZmllbGQ7XG5cdFx0XHRpZihmaWVsZFJvb3QgPT09IHJvb3Qpe1xuXHRcdFx0XHRtYXRjaGVzLnB1c2godGhpcy5jb2x1bW5zQnlGaWVsZFtmaWVsZF0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9XG5cdFxuXHRnZXRDb2x1bW5CeUluZGV4KGluZGV4KXtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zQnlJbmRleFtpbmRleF07XG5cdH1cblx0XG5cdGdldEZpcnN0VmlzaWJsZUNvbHVtbigpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuY29sdW1uc0J5SW5kZXguZmluZEluZGV4KChjb2wpID0+IHtcblx0XHRcdHJldHVybiBjb2wudmlzaWJsZTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gaW5kZXggPiAtMSA/IHRoaXMuY29sdW1uc0J5SW5kZXhbaW5kZXhdIDogZmFsc2U7XG5cdH1cblx0XG5cdGdldFZpc2libGVDb2x1bW5zQnlJbmRleCgpIHtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zQnlJbmRleC5maWx0ZXIoKGNvbCkgPT4gY29sLnZpc2libGUpO1xuXHR9XG5cdFxuXHRnZXRDb2x1bW5zKCl7XG5cdFx0cmV0dXJuIHRoaXMuY29sdW1ucztcblx0fVxuXHRcblx0ZmluZENvbHVtbkluZGV4KGNvbHVtbil7XG5cdFx0cmV0dXJuIHRoaXMuY29sdW1uc0J5SW5kZXguZmluZEluZGV4KChjb2wpID0+IHtcblx0XHRcdHJldHVybiBjb2x1bW4gPT09IGNvbDtcblx0XHR9KTtcblx0fVxuXHRcblx0Ly9yZXR1cm4gYWxsIGNvbHVtbnMgdGhhdCBhcmUgbm90IGdyb3Vwc1xuXHRnZXRSZWFsQ29sdW1ucygpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbnNCeUluZGV4O1xuXHR9XG5cdFxuXHQvL3RyYXZlcnNlIGFjcm9zcyBjb2x1bW5zIGFuZCBjYWxsIGFjdGlvblxuXHR0cmF2ZXJzZShjYWxsYmFjayl7XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4saSkgPT57XG5cdFx0XHRjYWxsYmFjayhjb2x1bW4sIGkpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2dldCBkZWZpbml0aW9ucyBvZiBhY3R1YWwgY29sdW1uc1xuXHRnZXREZWZpbml0aW9ucyhhY3RpdmUpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0aWYoIWFjdGl2ZSB8fCAoYWN0aXZlICYmIGNvbHVtbi52aXNpYmxlKSl7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGNvbHVtbi5nZXREZWZpbml0aW9uKCkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdC8vZ2V0IGZ1bGwgbmVzdGVkIGRlZmluaXRpb24gdHJlZVxuXHRnZXREZWZpbml0aW9uVHJlZSgpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRvdXRwdXQucHVzaChjb2x1bW4uZ2V0RGVmaW5pdGlvbih0cnVlKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0Q29tcG9uZW50cyhzdHJ1Y3R1cmVkKXtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0Y29sdW1ucyA9IHN0cnVjdHVyZWQgPyB0aGlzLmNvbHVtbnMgOiB0aGlzLmNvbHVtbnNCeUluZGV4O1xuXHRcdFxuXHRcdGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRvdXRwdXQucHVzaChjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdldFdpZHRoKCl7XG5cdFx0dmFyIHdpZHRoID0gMDtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHR3aWR0aCArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gd2lkdGg7XG5cdH1cblx0XG5cdG1vdmVDb2x1bW4oZnJvbSwgdG8sIGFmdGVyKXtcblx0XHR0by5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZyb20uZWxlbWVudCwgdG8uZWxlbWVudCk7XG5cdFx0XG5cdFx0aWYoYWZ0ZXIpe1xuXHRcdFx0dG8uZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0by5lbGVtZW50LCBmcm9tLmVsZW1lbnQpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLm1vdmVDb2x1bW5BY3R1YWwoZnJvbSwgdG8sIGFmdGVyKTtcblx0XHRcblx0XHR0aGlzLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlaW5pdGlhbGl6ZSgpO1xuXHR9XG5cdFxuXHRtb3ZlQ29sdW1uQWN0dWFsKGZyb20sIHRvLCBhZnRlcil7XG5cdFx0aWYoZnJvbS5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHR0aGlzLl9tb3ZlQ29sdW1uSW5BcnJheShmcm9tLnBhcmVudC5jb2x1bW5zLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX21vdmVDb2x1bW5JbkFycmF5KHRoaXMuY29sdW1ucywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5fbW92ZUNvbHVtbkluQXJyYXkodGhpcy5jb2x1bW5zQnlJbmRleCwgZnJvbSwgdG8sIGFmdGVyLCB0cnVlKTtcblx0XHRcblx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucyh0cnVlKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLW1vdmVkXCIsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0XG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJjb2x1bW5Nb3ZlZFwiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5Nb3ZlZFwiLCBmcm9tLmdldENvbXBvbmVudCgpLCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29tcG9uZW50cygpKTtcblx0XHR9XG5cdH1cblx0XG5cdF9tb3ZlQ29sdW1uSW5BcnJheShjb2x1bW5zLCBmcm9tLCB0bywgYWZ0ZXIsIHVwZGF0ZVJvd3Mpe1xuXHRcdHZhclx0ZnJvbUluZGV4ID0gY29sdW1ucy5pbmRleE9mKGZyb20pLFxuXHRcdHRvSW5kZXgsIHJvd3MgPSBbXTtcblx0XHRcblx0XHRpZiAoZnJvbUluZGV4ID4gLTEpIHtcblx0XHRcdFxuXHRcdFx0Y29sdW1ucy5zcGxpY2UoZnJvbUluZGV4LCAxKTtcblx0XHRcdFxuXHRcdFx0dG9JbmRleCA9IGNvbHVtbnMuaW5kZXhPZih0byk7XG5cdFx0XHRcblx0XHRcdGlmICh0b0luZGV4ID4gLTEpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGFmdGVyKXtcblx0XHRcdFx0XHR0b0luZGV4ID0gdG9JbmRleCsxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0b0luZGV4ID0gZnJvbUluZGV4O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb2x1bW5zLnNwbGljZSh0b0luZGV4LCAwLCBmcm9tKTtcblx0XHRcdFxuXHRcdFx0aWYodXBkYXRlUm93cyl7XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dzID0gdGhpcy5jaGFpbihcImNvbHVtbi1tb3Zpbmctcm93c1wiLCBbZnJvbSwgdG8sIGFmdGVyXSwgbnVsbCwgW10pIHx8IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0cm93cyA9IHJvd3MuY29uY2F0KHRoaXMudGFibGUucm93TWFuYWdlci5yb3dzKTtcblx0XHRcdFx0XG5cdFx0XHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0XHRcdGlmKHJvdy5jZWxscy5sZW5ndGgpe1xuXHRcdFx0XHRcdFx0dmFyIGNlbGwgPSByb3cuY2VsbHMuc3BsaWNlKGZyb21JbmRleCwgMSlbMF07XG5cdFx0XHRcdFx0XHRyb3cuY2VsbHMuc3BsaWNlKHRvSW5kZXgsIDAsIGNlbGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0c2Nyb2xsVG9Db2x1bW4oY29sdW1uLCBwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHR2YXIgbGVmdCA9IDAsXG5cdFx0b2Zmc2V0ID0gY29sdW1uLmdldExlZnRPZmZzZXQoKSxcblx0XHRhZGp1c3QgPSAwLFxuXHRcdGNvbEVsID0gY29sdW1uLmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgcG9zaXRpb24gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMudGFibGUub3B0aW9ucy5zY3JvbGxUb0NvbHVtblBvc2l0aW9uO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgaWZWaXNpYmxlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0aWZWaXNpYmxlID0gdGhpcy50YWJsZS5vcHRpb25zLnNjcm9sbFRvQ29sdW1uSWZWaXNpYmxlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2FsaWduIHRvIGNvcnJlY3QgcG9zaXRpb25cblx0XHRcdFx0c3dpdGNoKHBvc2l0aW9uKXtcblx0XHRcdFx0XHRjYXNlIFwibWlkZGxlXCI6XG5cdFx0XHRcdFx0Y2FzZSBcImNlbnRlclwiOlxuXHRcdFx0XHRcdFx0YWRqdXN0ID0gLXRoaXMuZWxlbWVudC5jbGllbnRXaWR0aCAvIDI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdFx0XHRcdGFkanVzdCA9IGNvbEVsLmNsaWVudFdpZHRoIC0gdGhpcy5oZWFkZXJzRWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2NoZWNrIGNvbHVtbiB2aXNpYmlsaXR5XG5cdFx0XHRcdGlmKCFpZlZpc2libGUpe1xuXHRcdFx0XHRcdGlmKG9mZnNldCA+IDAgJiYgb2Zmc2V0ICsgY29sRWwub2Zmc2V0V2lkdGggPCB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGgpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly9jYWxjdWxhdGUgc2Nyb2xsIHBvc2l0aW9uXG5cdFx0XHRcdGxlZnQgPSBvZmZzZXQgKyBhZGp1c3Q7XG5cdFx0XHRcdFxuXHRcdFx0XHRsZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsV2lkdGggLSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aCksMCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdFx0dGhpcy5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0XHRcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJTY3JvbGwgRXJyb3IgLSBDb2x1bW4gbm90IHZpc2libGVcIik7XG5cdFx0XHRcdHJlamVjdChcIlNjcm9sbCBFcnJvciAtIENvbHVtbiBub3QgdmlzaWJsZVwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIENlbGwgTWFuYWdlbWVudCAvLy8vLy8vLy8vLy8vLy8vL1xuXHRnZW5lcmF0ZUNlbGxzKHJvdyl7XG5cdFx0dmFyIGNlbGxzID0gW107XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdGNlbGxzLnB1c2goY29sdW1uLmdlbmVyYXRlQ2VsbChyb3cpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gY2VsbHM7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gQ29sdW1uIE1hbmFnZW1lbnQgLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2V0RmxleEJhc2VXaWR0aCgpe1xuXHRcdHZhciB0b3RhbFdpZHRoID0gdGhpcy50YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoLCAvL3RhYmxlIGVsZW1lbnQgd2lkdGhcblx0XHRmaXhlZFdpZHRoID0gMDtcblx0XHRcblx0XHQvL2FkanVzdCBmb3IgdmVydGljYWwgc2Nyb2xsYmFyIGlmIHByZXNlbnRcblx0XHRpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxIZWlnaHQgPiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRIZWlnaHQpe1xuXHRcdFx0dG90YWxXaWR0aCAtPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5vZmZzZXRXaWR0aCAtIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmNvbHVtbnNCeUluZGV4LmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdHZhciB3aWR0aCwgbWluV2lkdGgsIGNvbFdpZHRoO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFxuXHRcdFx0XHR3aWR0aCA9IGNvbHVtbi5kZWZpbml0aW9uLndpZHRoIHx8IDA7XG5cdFx0XHRcdFxuXHRcdFx0XHRtaW5XaWR0aCA9IHBhcnNlSW50KGNvbHVtbi5taW5XaWR0aCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0eXBlb2Yod2lkdGgpID09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdGlmKHdpZHRoLmluZGV4T2YoXCIlXCIpID4gLTEpe1xuXHRcdFx0XHRcdFx0Y29sV2lkdGggPSAodG90YWxXaWR0aCAvIDEwMCkgKiBwYXJzZUludCh3aWR0aCkgO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbFdpZHRoID0gcGFyc2VJbnQod2lkdGgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbFdpZHRoID0gd2lkdGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGZpeGVkV2lkdGggKz0gY29sV2lkdGggPiBtaW5XaWR0aCA/IGNvbFdpZHRoIDogbWluV2lkdGg7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBmaXhlZFdpZHRoO1xuXHR9XG5cdFxuXHRhZGRDb2x1bW4oZGVmaW5pdGlvbiwgYmVmb3JlLCBuZXh0VG9Db2x1bW4pe1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgY29sdW1uID0gdGhpcy5fYWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgbmV4dFRvQ29sdW1uKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5fcmVJbmRleENvbHVtbnMoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1hZGRcIiwgZGVmaW5pdGlvbiwgYmVmb3JlLCBuZXh0VG9Db2x1bW4pO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmxheW91dE1vZGUoKSAhPSBcImZpdENvbHVtbnNcIil7XG5cdFx0XHRcdGNvbHVtbi5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZHJhdyh0cnVlKTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlaW5pdGlhbGl6ZSgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucygpO1xuXHRcdFx0XG5cdFx0XHRyZXNvbHZlKGNvbHVtbik7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vcmVtb3ZlIGNvbHVtbiBmcm9tIHN5c3RlbVxuXHRkZXJlZ2lzdGVyQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGZpZWxkID0gY29sdW1uLmdldEZpZWxkKCksXG5cdFx0aW5kZXg7XG5cdFx0XG5cdFx0Ly9yZW1vdmUgZnJvbSBmaWVsZCBsaXN0XG5cdFx0aWYoZmllbGQpe1xuXHRcdFx0ZGVsZXRlIHRoaXMuY29sdW1uc0J5RmllbGRbZmllbGRdO1xuXHRcdH1cblx0XHRcblx0XHQvL3JlbW92ZSBmcm9tIGluZGV4IGxpc3Rcblx0XHRpbmRleCA9IHRoaXMuY29sdW1uc0J5SW5kZXguaW5kZXhPZihjb2x1bW4pO1xuXHRcdFxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0XHRcblx0XHQvL3JlbW92ZSBmcm9tIGNvbHVtbiBsaXN0XG5cdFx0aW5kZXggPSB0aGlzLmNvbHVtbnMuaW5kZXhPZihjb2x1bW4pO1xuXHRcdFxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5jb2x1bW5zLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMudmVydGljYWxBbGlnbkhlYWRlcnMoKTtcblx0XHRcblx0XHR0aGlzLnJlZHJhdygpO1xuXHR9XG5cdFxuXHRyZXJlbmRlckNvbHVtbnModXBkYXRlLCBzaWxlbnQpe1xuXHRcdGlmKCF0aGlzLnJlZHJhd0Jsb2NrKXtcblx0XHRcdHRoaXMucmVuZGVyZXIucmVyZW5kZXJDb2x1bW5zKHVwZGF0ZSwgc2lsZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih1cGRhdGUgPT09IGZhbHNlIHx8ICh1cGRhdGUgPT09IHRydWUgJiYgdGhpcy5yZWRyYXdCbG9ja1VwZGF0ZSA9PT0gbnVsbCkpe1xuXHRcdFx0XHR0aGlzLnJlZHJhd0Jsb2NrVXBkYXRlID0gdXBkYXRlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0YmxvY2tSZWRyYXcoKXtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrID0gdHJ1ZTtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrVXBkYXRlID0gbnVsbDtcblx0fVxuXHRcblx0cmVzdG9yZVJlZHJhdygpe1xuXHRcdHRoaXMucmVkcmF3QmxvY2sgPSBmYWxzZTtcblx0XHR0aGlzLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cdFx0dGhpcy5yZW5kZXJlci5yZXJlbmRlckNvbHVtbnModGhpcy5yZWRyYXdCbG9ja1VwZGF0ZSk7XG5cdFx0XG5cdH1cblx0XG5cdC8vcmVkcmF3IGNvbHVtbnNcblx0cmVkcmF3KGZvcmNlKXtcblx0XHRpZihIZWxwZXJzLmVsVmlzaWJsZSh0aGlzLmVsZW1lbnQpKXtcblx0XHRcdHRoaXMudmVydGljYWxBbGlnbkhlYWRlcnMoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZm9yY2Upe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlc2V0U2Nyb2xsKCk7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVpbml0aWFsaXplKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCF0aGlzLmNvbmZpcm0oXCJ0YWJsZS1yZWRyYXdpbmdcIiwgZm9yY2UpKXtcblx0XHRcdHRoaXMubGF5b3V0UmVmcmVzaChmb3JjZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJ0YWJsZS1yZWRyYXdcIiwgZm9yY2UpO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5yZWRyYXcoKTtcblx0fVxufVxuXG5jbGFzcyBCYXNpY1ZlcnRpY2FsIGV4dGVuZHMgUmVuZGVyZXJ7XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy52ZXJ0aWNhbEZpbGxNb2RlID0gXCJmaWxsXCI7XG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdH1cblx0XG5cdGNsZWFyUm93cygpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZUVsZW1lbnQ7XG5cdFx0XG5cdFx0Ly8gZWxlbWVudC5jaGlsZHJlbi5kZXRhY2goKTtcblx0XHR3aGlsZShlbGVtZW50LmZpcnN0Q2hpbGQpIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcblx0XHRlbGVtZW50LnNjcm9sbFRvcCA9IDA7XG5cdFx0ZWxlbWVudC5zY3JvbGxMZWZ0ID0gMDtcblx0XHRcblx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCJcIjtcblx0XHRlbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcIlwiO1xuXHR9XG5cdFxuXHRyZW5kZXJSb3dzKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZUVsZW1lbnQsXG5cdFx0b25seUdyb3VwSGVhZGVycyA9IHRydWUsXG5cdFx0dGFibGVGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdHJvd3MgPSB0aGlzLnJvd3MoKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcblx0XHRcdHRoaXMuc3R5bGVSb3cocm93LCBpbmRleCk7XG5cdFx0XHRyb3cuaW5pdGlhbGl6ZShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGlmIChyb3cudHlwZSAhPT0gXCJncm91cFwiKSB7XG5cdFx0XHRcdG9ubHlHcm91cEhlYWRlcnMgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGFibGVGcmFnLmFwcGVuZENoaWxkKHJvdy5nZXRFbGVtZW50KCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQodGFibGVGcmFnKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0cm93LnJlbmRlcmVkKCk7XG5cdFx0XHRcblx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0cm93LmNhbGNIZWlnaHQodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0cm93LnNldENlbGxIZWlnaHQoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZihvbmx5R3JvdXBIZWFkZXJzKXtcblx0XHRcdGVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCJcIjtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRyZXJlbmRlclJvd3MoY2FsbGJhY2spe1x0XG5cdFx0dGhpcy5jbGVhclJvd3MoKTtcblx0XHRcblx0XHRpZihjYWxsYmFjayl7XG5cdFx0XHRjYWxsYmFjaygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlbmRlclJvd3MoKTtcblxuXHRcdGlmKCF0aGlzLnJvd3MoKS5sZW5ndGgpe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnRhYmxlRW1wdHkoKTtcblx0XHR9XG5cdH1cblx0XG5cdHNjcm9sbFRvUm93TmVhcmVzdFRvcChyb3cpe1xuXHRcdHZhciByb3dUb3AgPSBIZWxwZXJzLmVsT2Zmc2V0KHJvdy5nZXRFbGVtZW50KCkpLnRvcDtcblx0XHRcblx0XHRyZXR1cm4gIShNYXRoLmFicyh0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgLSByb3dUb3ApID4gTWF0aC5hYnModGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wICsgdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0IC0gcm93VG9wKSk7XG5cdH1cblx0XG5cdHNjcm9sbFRvUm93KHJvdyl7XG5cdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPSBIZWxwZXJzLmVsT2Zmc2V0KHJvd0VsKS50b3AgLSBIZWxwZXJzLmVsT2Zmc2V0KHRoaXMuZWxlbWVudFZlcnRpY2FsKS50b3AgKyB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3A7XG5cdH1cblx0XG5cdHZpc2libGVSb3dzKGluY2x1ZGluZ0J1ZmZlcil7XG5cdFx0cmV0dXJuIHRoaXMucm93cygpO1xuXHR9XG5cdFxufVxuXG5jbGFzcyBWaXJ0dWFsRG9tVmVydGljYWwgZXh0ZW5kcyBSZW5kZXJlcntcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMudmVydGljYWxGaWxsTW9kZSA9IFwiZmlsbFwiO1xuXG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cblx0XHR0aGlzLnZEb21Sb3dIZWlnaHQgPSAyMDsgLy9hcHByb3hpbWF0aW9uIG9mIHJvdyBoZWlnaHRzIGZvciBwYWRkaW5nXG5cblx0XHR0aGlzLnZEb21Ub3AgPSAwOyAvL2hvbGQgcG9zaXRpb24gZm9yIGZpcnN0IHJlbmRlcmVkIHJvdyBpbiB0aGUgdmlydHVhbCBET01cblx0XHR0aGlzLnZEb21Cb3R0b20gPSAwOyAvL2hvbGQgcG9zaXRpb24gZm9yIGxhc3QgcmVuZGVyZWQgcm93IGluIHRoZSB2aXJ0dWFsIERPTVxuXG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gMDsgLy9sYXN0IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgdkRvbSB0b3A7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zQm90dG9tID0gMDsgLy9sYXN0IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgdkRvbSBib3R0b207XG5cblx0XHR0aGlzLnZEb21Ub3BQYWQgPSAwOyAvL2hvbGQgdmFsdWUgb2YgcGFkZGluZyBmb3IgdG9wIG9mIHZpcnR1YWwgRE9NXG5cdFx0dGhpcy52RG9tQm90dG9tUGFkID0gMDsgLy9ob2xkIHZhbHVlIG9mIHBhZGRpbmcgZm9yIGJvdHRvbSBvZiB2aXJ0dWFsIERPTVxuXG5cdFx0dGhpcy52RG9tTWF4UmVuZGVyQ2hhaW4gPSA5MDsgLy90aGUgbWF4aW11bSBudW1iZXIgb2YgZG9tIGVsZW1lbnRzIHRoYXQgY2FuIGJlIHJlbmRlcmVkIGluIDEgZ29cblxuXHRcdHRoaXMudkRvbVdpbmRvd0J1ZmZlciA9IDA7IC8vd2luZG93IHJvdyBidWZmZXIgYmVmb3JlIHJlbW92aW5nIGVsZW1lbnRzLCB0byBzbW9vdGggc2Nyb2xsaW5nXG5cblx0XHR0aGlzLnZEb21XaW5kb3dNaW5Ub3RhbFJvd3MgPSAyMDsgLy9taW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGJlIGdlbmVyYXRlZCBpbiB2aXJ0dWFsIGRvbSAocHJldmVudCBidWZmZXJpbmcgaXNzdWVzIG9uIHRhYmxlcyB3aXRoIHRhbGwgcm93cylcblx0XHR0aGlzLnZEb21XaW5kb3dNaW5NYXJnaW5Sb3dzID0gNTsgLy9taW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGJlIGdlbmVyYXRlZCBpbiB2aXJ0dWFsIGRvbSBtYXJnaW5cblxuXHRcdHRoaXMudkRvbVRvcE5ld1Jvd3MgPSBbXTsgLy9yb3dzIHRvIG5vcm1hbGl6ZSBhZnRlciBhcHBlbmRpbmcgdG8gb3B0aW1pemUgcmVuZGVyIHNwZWVkXG5cdFx0dGhpcy52RG9tQm90dG9tTmV3Um93cyA9IFtdOyAvL3Jvd3MgdG8gbm9ybWFsaXplIGFmdGVyIGFwcGVuZGluZyB0byBvcHRpbWl6ZSByZW5kZXIgc3BlZWRcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBQdWJsaWMgRnVuY3Rpb25zIC8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Y2xlYXJSb3dzKCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLnRhYmxlRWxlbWVudDtcblxuXHRcdC8vIGVsZW1lbnQuY2hpbGRyZW4uZGV0YWNoKCk7XG5cdFx0d2hpbGUoZWxlbWVudC5maXJzdENoaWxkKSBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cblx0XHRlbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBcIlwiO1xuXHRcdGVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBcIlwiO1xuXHRcdGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJcIjtcblxuXHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsTGVmdCA9IDA7XG5cblx0XHR0aGlzLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gMDtcblxuXHRcdHRoaXMudkRvbVRvcCA9IDA7XG5cdFx0dGhpcy52RG9tQm90dG9tID0gMDtcblx0XHR0aGlzLnZEb21Ub3BQYWQgPSAwO1xuXHRcdHRoaXMudkRvbUJvdHRvbVBhZCA9IDA7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gMDtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gPSAwO1xuXHR9XG5cblx0cmVuZGVyUm93cygpe1xuXHRcdHRoaXMuX3ZpcnR1YWxSZW5kZXJGaWxsKCk7XG5cdH1cblxuXHRyZXJlbmRlclJvd3MoY2FsbGJhY2spe1xuXHRcdHZhciBzY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3A7XG5cdFx0dmFyIHRvcFJvdyA9IGZhbHNlO1xuXHRcdHZhciB0b3BPZmZzZXQgPSBmYWxzZTtcblxuXHRcdHZhciBsZWZ0ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbExlZnQ7XG5cblx0XHR2YXIgcm93cyA9IHRoaXMucm93cygpO1xuXG5cdFx0Zm9yKHZhciBpID0gdGhpcy52RG9tVG9wOyBpIDw9IHRoaXMudkRvbUJvdHRvbTsgaSsrKXtcblxuXHRcdFx0aWYocm93c1tpXSl7XG5cdFx0XHRcdHZhciBkaWZmID0gc2Nyb2xsVG9wIC0gcm93c1tpXS5nZXRFbGVtZW50KCkub2Zmc2V0VG9wO1xuXG5cdFx0XHRcdGlmKHRvcE9mZnNldCA9PT0gZmFsc2UgfHwgTWF0aC5hYnMoZGlmZikgPCB0b3BPZmZzZXQpe1xuXHRcdFx0XHRcdHRvcE9mZnNldCA9IGRpZmY7XG5cdFx0XHRcdFx0dG9wUm93ID0gaTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvdy5kZWluaXRpYWxpemVIZWlnaHQoKTtcblx0XHR9KTtcblxuXHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5yb3dzKCkubGVuZ3RoKXtcblx0XHRcdHRoaXMuX3ZpcnR1YWxSZW5kZXJGaWxsKCh0b3BSb3cgPT09IGZhbHNlID8gdGhpcy5yb3dzLmxlbmd0aCAtIDEgOiB0b3BSb3cpLCB0cnVlLCB0b3BPZmZzZXQgfHwgMCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnRhYmxlRW1wdHkoKTtcblx0XHR9XG5cblx0XHR0aGlzLnNjcm9sbENvbHVtbnMobGVmdCk7XG5cdH1cblxuXHRzY3JvbGxDb2x1bW5zKGxlZnQpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHR9XG5cblx0c2Nyb2xsUm93cyh0b3AsIGRpcil7XG5cdFx0dmFyIHRvcERpZmYgPSB0b3AgLSB0aGlzLnZEb21TY3JvbGxQb3NUb3A7XG5cdFx0dmFyIGJvdHRvbURpZmYgPSB0b3AgLSB0aGlzLnZEb21TY3JvbGxQb3NCb3R0b207XG5cdFx0dmFyIG1hcmdpbiA9IHRoaXMudkRvbVdpbmRvd0J1ZmZlciAqIDI7XG5cdFx0dmFyIHJvd3MgPSB0aGlzLnJvd3MoKTtcblxuXHRcdHRoaXMuc2Nyb2xsVG9wID0gdG9wO1xuXG5cdFx0aWYoLXRvcERpZmYgPiBtYXJnaW4gfHwgYm90dG9tRGlmZiA+IG1hcmdpbil7XG5cdFx0XHQvL2lmIGJpZyBzY3JvbGwgcmVkcmF3IHRhYmxlO1xuXHRcdFx0dmFyIGxlZnQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsTGVmdDtcblx0XHRcdHRoaXMuX3ZpcnR1YWxSZW5kZXJGaWxsKE1hdGguZmxvb3IoKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCAvIHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbEhlaWdodCkgKiByb3dzLmxlbmd0aCkpO1xuXHRcdFx0dGhpcy5zY3JvbGxDb2x1bW5zKGxlZnQpO1xuXHRcdH1lbHNlIHtcblxuXHRcdFx0aWYoZGlyKXtcblx0XHRcdFx0Ly9zY3JvbGxpbmcgdXBcblx0XHRcdFx0aWYodG9wRGlmZiA8IDApe1xuXHRcdFx0XHRcdHRoaXMuX2FkZFRvcFJvdyhyb3dzLCAtdG9wRGlmZik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihib3R0b21EaWZmIDwgMCl7XG5cdFx0XHRcdFx0Ly9oaWRlIGJvdHRvbSByb3cgaWYgbmVlZGVkXG5cdFx0XHRcdFx0aWYodGhpcy52RG9tU2Nyb2xsSGVpZ2h0IC0gdGhpcy5zY3JvbGxUb3AgPiB0aGlzLnZEb21XaW5kb3dCdWZmZXIpe1xuXHRcdFx0XHRcdFx0dGhpcy5fcmVtb3ZlQm90dG9tUm93KHJvd3MsIC1ib3R0b21EaWZmKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gPSB0aGlzLnNjcm9sbFRvcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblxuXHRcdFx0XHRpZihib3R0b21EaWZmID49IDApe1xuXHRcdFx0XHRcdHRoaXMuX2FkZEJvdHRvbVJvdyhyb3dzLCBib3R0b21EaWZmKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vc2Nyb2xsaW5nIGRvd25cblx0XHRcdFx0aWYodG9wRGlmZiA+PSAwKXtcblx0XHRcdFx0XHQvL2hpZGUgdG9wIHJvdyBpZiBuZWVkZWRcblx0XHRcdFx0XHRpZih0aGlzLnNjcm9sbFRvcCA+IHRoaXMudkRvbVdpbmRvd0J1ZmZlcil7XG5cdFx0XHRcdFx0XHR0aGlzLl9yZW1vdmVUb3BSb3cocm93cywgdG9wRGlmZik7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gdGhpcy5zY3JvbGxUb3A7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVzaXplKCl7XG5cdFx0dGhpcy52RG9tV2luZG93QnVmZmVyID0gdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlclZlcnRpY2FsQnVmZmVyIHx8IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodDtcblx0fVxuXG5cdHNjcm9sbFRvUm93TmVhcmVzdFRvcChyb3cpe1xuXHRcdHZhciByb3dJbmRleCA9IHRoaXMucm93cygpLmluZGV4T2Yocm93KTtcblxuXHRcdHJldHVybiAhKE1hdGguYWJzKHRoaXMudkRvbVRvcCAtIHJvd0luZGV4KSA+IE1hdGguYWJzKHRoaXMudkRvbUJvdHRvbSAtIHJvd0luZGV4KSk7XG5cdH1cblxuXHRzY3JvbGxUb1Jvdyhyb3cpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMucm93cygpLmluZGV4T2Yocm93KTtcblxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5fdmlydHVhbFJlbmRlckZpbGwoaW5kZXgsIHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdHZpc2libGVSb3dzKGluY2x1ZGluZ0J1ZmZlcil7XG5cdFx0dmFyIHRvcEVkZ2UgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AsXG5cdFx0Ym90dG9tRWRnZSA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCArIHRvcEVkZ2UsXG5cdFx0dG9wRm91bmQgPSBmYWxzZSxcblx0XHR0b3BSb3cgPSAwLFxuXHRcdGJvdHRvbVJvdyA9IDAsXG5cdFx0cm93cyA9IHRoaXMucm93cygpO1xuXG5cdFx0aWYoaW5jbHVkaW5nQnVmZmVyKXtcblx0XHRcdHRvcFJvdyA9IHRoaXMudkRvbVRvcDtcblx0XHRcdGJvdHRvbVJvdyA9IHRoaXMudkRvbUJvdHRvbTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRmb3IodmFyIGkgPSB0aGlzLnZEb21Ub3A7IGkgPD0gdGhpcy52RG9tQm90dG9tOyBpKyspe1xuXHRcdFx0XHRpZihyb3dzW2ldKXtcblx0XHRcdFx0XHRpZighdG9wRm91bmQpe1xuXHRcdFx0XHRcdFx0aWYoKHRvcEVkZ2UgLSByb3dzW2ldLmdldEVsZW1lbnQoKS5vZmZzZXRUb3ApID49IDApe1xuXHRcdFx0XHRcdFx0XHR0b3BSb3cgPSBpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0b3BGb3VuZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0aWYoYm90dG9tRWRnZSAtIHJvd3NbaV0uZ2V0RWxlbWVudCgpLm9mZnNldFRvcCA+PSAwKXtcblx0XHRcdFx0XHRcdFx0XHRib3R0b21Sb3cgPSBpO1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihib3R0b21FZGdlIC0gcm93c1tpXS5nZXRFbGVtZW50KCkub2Zmc2V0VG9wID49IDApe1xuXHRcdFx0XHRcdFx0XHRib3R0b21Sb3cgPSBpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcm93cy5zbGljZSh0b3BSb3csIGJvdHRvbVJvdyArIDEpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8gSW50ZXJuYWwgUmVuZGVyaW5nIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvL2Z1bGwgdmlydHVhbCByZW5kZXJcblx0X3ZpcnR1YWxSZW5kZXJGaWxsKHBvc2l0aW9uLCBmb3JjZU1vdmUsIG9mZnNldCkge1xuXHRcdHZhclx0ZWxlbWVudCA9IHRoaXMudGFibGVFbGVtZW50LFxuXHRcdGhvbGRlciA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLFxuXHRcdHRvcFBhZCA9IDAsXG5cdFx0cm93c0hlaWdodCA9IDAsXG5cdFx0cm93SGVpZ2h0ID0gMCxcblx0XHRoZWlnaHRPY2N1cGllZCA9IDAsXG5cdFx0dG9wUGFkSGVpZ2h0ID0gMCxcblx0XHRpID0gMCxcblx0XHRyb3dzID0gdGhpcy5yb3dzKCksXG5cdFx0cm93c0NvdW50ID0gcm93cy5sZW5ndGgsXG5cdFx0aW5kZXggPSAwLFxuXHRcdHJvdyxcblx0XHRyb3dGcmFnbWVudCxcblx0XHRyZW5kZXJlZFJvd3MgPSBbXSxcblx0XHR0b3RhbFJvd3NSZW5kZXJlZCA9IDAsXG5cdFx0cm93c1RvUmVuZGVyID0gMCxcblx0XHRmaXhlZEhlaWdodCA9IHRoaXMudGFibGUucm93TWFuYWdlci5maXhlZEhlaWdodCxcblx0XHRjb250YWluZXJIZWlnaHQgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQsIFxuXHRcdGF2Z1Jvd0hlaWdodCA9IHRoaXMudGFibGUub3B0aW9ucy5yb3dIZWlnaHQsIFxuXHRcdHJlc2l6ZWQgPSB0cnVlO1xuXG5cdFx0cG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwO1xuXG5cdFx0b2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cblx0XHRpZighcG9zaXRpb24pe1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHdoaWxlKGVsZW1lbnQuZmlyc3RDaGlsZCkgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuXG5cdFx0XHQvL2NoZWNrIGlmIHBvc2l0aW9uIGlzIHRvbyBjbG9zZSB0byBib3R0b20gb2YgdGFibGVcblx0XHRcdGhlaWdodE9jY3VwaWVkID0gKHJvd3NDb3VudCAtIHBvc2l0aW9uICsgMSkgKiB0aGlzLnZEb21Sb3dIZWlnaHQ7XG5cblx0XHRcdGlmKGhlaWdodE9jY3VwaWVkIDwgY29udGFpbmVySGVpZ2h0KXtcblx0XHRcdFx0cG9zaXRpb24gLT0gTWF0aC5jZWlsKChjb250YWluZXJIZWlnaHQgLSBoZWlnaHRPY2N1cGllZCkgLyB0aGlzLnZEb21Sb3dIZWlnaHQpO1xuXHRcdFx0XHRpZihwb3NpdGlvbiA8IDApe1xuXHRcdFx0XHRcdHBvc2l0aW9uID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL2NhbGN1bGF0ZSBpbml0aWFsIHBhZFxuXHRcdFx0dG9wUGFkID0gTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5mbG9vcih0aGlzLnZEb21XaW5kb3dCdWZmZXIgLyB0aGlzLnZEb21Sb3dIZWlnaHQpLCAgdGhpcy52RG9tV2luZG93TWluTWFyZ2luUm93cyksIHBvc2l0aW9uKTtcblx0XHRcdHBvc2l0aW9uIC09IHRvcFBhZDtcblx0XHR9XG5cblx0XHRpZihyb3dzQ291bnQgJiYgSGVscGVycy5lbFZpc2libGUodGhpcy5lbGVtZW50VmVydGljYWwpKXtcblx0XHRcdHRoaXMudkRvbVRvcCA9IHBvc2l0aW9uO1xuXHRcdFx0dGhpcy52RG9tQm90dG9tID0gcG9zaXRpb24gLTE7XG5cblx0XHRcdGlmKGZpeGVkSGVpZ2h0IHx8IHRoaXMudGFibGUub3B0aW9ucy5tYXhIZWlnaHQpIHtcblx0XHRcdFx0aWYoYXZnUm93SGVpZ2h0KSB7XG5cdFx0XHRcdFx0cm93c1RvUmVuZGVyID0gKGNvbnRhaW5lckhlaWdodCAvIGF2Z1Jvd0hlaWdodCkgKyAodGhpcy52RG9tV2luZG93QnVmZmVyIC8gYXZnUm93SGVpZ2h0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyb3dzVG9SZW5kZXIgPSBNYXRoLm1heCh0aGlzLnZEb21XaW5kb3dNaW5Ub3RhbFJvd3MsIE1hdGguY2VpbChyb3dzVG9SZW5kZXIpKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRyb3dzVG9SZW5kZXIgPSByb3dzQ291bnQ7XG5cdFx0XHR9XG5cblx0XHRcdHdoaWxlKCgocm93c1RvUmVuZGVyID09IHJvd3NDb3VudCB8fCByb3dzSGVpZ2h0IDw9IGNvbnRhaW5lckhlaWdodCArIHRoaXMudkRvbVdpbmRvd0J1ZmZlcikgfHwgdG90YWxSb3dzUmVuZGVyZWQgPCB0aGlzLnZEb21XaW5kb3dNaW5Ub3RhbFJvd3MpICYmIHRoaXMudkRvbUJvdHRvbSA8IHJvd3NDb3VudCAtMSkge1xuXHRcdFx0XHRyZW5kZXJlZFJvd3MgPSBbXTtcblx0XHRcdFx0cm93RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0d2hpbGUgKChpIDwgcm93c1RvUmVuZGVyKSAmJiB0aGlzLnZEb21Cb3R0b20gPCByb3dzQ291bnQgLTEpIHtcdFxuXHRcdFx0XHRcdGluZGV4ID0gdGhpcy52RG9tQm90dG9tICsgMSxcblx0XHRcdFx0XHRyb3cgPSByb3dzW2luZGV4XTtcblxuXHRcdFx0XHRcdHRoaXMuc3R5bGVSb3cocm93LCBpbmRleCk7XG5cblx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0aWYoIXJvdy5oZWlnaHRJbml0aWFsaXplZCAmJiAhdGhpcy50YWJsZS5vcHRpb25zLnJvd0hlaWdodCl7XG5cdFx0XHRcdFx0XHRyb3cuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cm93RnJhZ21lbnQuYXBwZW5kQ2hpbGQocm93LmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0cmVuZGVyZWRSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0XHR0aGlzLnZEb21Cb3R0b20gKys7XG5cdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIXJlbmRlcmVkUm93cy5sZW5ndGgpe1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbWVudC5hcHBlbmRDaGlsZChyb3dGcmFnbWVudCk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBOT1RFOiBUaGUgbmV4dCAzIGxvb3BzIGFyZSBzZXBhcmF0ZSBvbiBwdXJwb3NlXG5cdFx0XHRcdC8vIFRoaXMgaXMgdG8gYmF0Y2ggdXAgdGhlIGRvbSB3cml0ZXMgYW5kIHJlYWRzIHdoaWNoIGRyYXN0aWNhbGx5IGltcHJvdmVzIHBlcmZvcm1hbmNlIFxuXG5cdFx0XHRcdHJlbmRlcmVkUm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRyb3cucmVuZGVyZWQoKTtcblxuXHRcdFx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0XHRcdHJvdy5jYWxjSGVpZ2h0KHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmVuZGVyZWRSb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0XHRcdHJvdy5zZXRDZWxsSGVpZ2h0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZW5kZXJlZFJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHRvdGFsUm93c1JlbmRlcmVkIDwgdG9wUGFkKXtcblx0XHRcdFx0XHRcdHRvcFBhZEhlaWdodCArPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cm93c0hlaWdodCArPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYocm93SGVpZ2h0ID4gdGhpcy52RG9tV2luZG93QnVmZmVyKXtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVdpbmRvd0J1ZmZlciA9IHJvd0hlaWdodCAqIDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRvdGFsUm93c1JlbmRlcmVkKys7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJlc2l6ZWQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0XHRcdGNvbnRhaW5lckhlaWdodCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodDtcblx0XHRcdFx0aWYocmVzaXplZCAmJiAoZml4ZWRIZWlnaHQgfHwgdGhpcy50YWJsZS5vcHRpb25zLm1heEhlaWdodCkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhdmdSb3dIZWlnaHQgPSByb3dzSGVpZ2h0IC8gdG90YWxSb3dzUmVuZGVyZWQ7XG5cdFx0XHRcdFx0cm93c1RvUmVuZGVyID0gTWF0aC5tYXgodGhpcy52RG9tV2luZG93TWluVG90YWxSb3dzLCBNYXRoLmNlaWwoKGNvbnRhaW5lckhlaWdodCAvIGF2Z1Jvd0hlaWdodCkgKyAodGhpcy52RG9tV2luZG93QnVmZmVyIC8gYXZnUm93SGVpZ2h0KSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFwb3NpdGlvbil7XG5cdFx0XHRcdHRoaXMudkRvbVRvcFBhZCA9IDA7XG5cdFx0XHRcdC8vYWRqdXN0IHJvdyBoZWlnaHQgdG8gbWF0Y2ggYXZlcmFnZSBvZiByZW5kZXJlZCBlbGVtZW50c1xuXHRcdFx0XHR0aGlzLnZEb21Sb3dIZWlnaHQgPSBNYXRoLmZsb29yKChyb3dzSGVpZ2h0ICsgdG9wUGFkSGVpZ2h0KSAvIHRvdGFsUm93c1JlbmRlcmVkKTtcblx0XHRcdFx0dGhpcy52RG9tQm90dG9tUGFkID0gdGhpcy52RG9tUm93SGVpZ2h0ICogKHJvd3NDb3VudCAtIHRoaXMudkRvbUJvdHRvbSAtMSk7XG5cblx0XHRcdFx0dGhpcy52RG9tU2Nyb2xsSGVpZ2h0ID0gdG9wUGFkSGVpZ2h0ICsgcm93c0hlaWdodCArIHRoaXMudkRvbUJvdHRvbVBhZCAtIGNvbnRhaW5lckhlaWdodDtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy52RG9tVG9wUGFkID0gIWZvcmNlTW92ZSA/IHRoaXMuc2Nyb2xsVG9wIC0gdG9wUGFkSGVpZ2h0IDogKHRoaXMudkRvbVJvd0hlaWdodCAqIHRoaXMudkRvbVRvcCkgKyBvZmZzZXQ7XG5cdFx0XHRcdHRoaXMudkRvbUJvdHRvbVBhZCA9IHRoaXMudkRvbUJvdHRvbSA9PSByb3dzQ291bnQtMSA/IDAgOiBNYXRoLm1heCh0aGlzLnZEb21TY3JvbGxIZWlnaHQgLSB0aGlzLnZEb21Ub3BQYWQgLSByb3dzSGVpZ2h0IC0gdG9wUGFkSGVpZ2h0LCAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0ZWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gdGhpcy52RG9tVG9wUGFkK1wicHhcIjtcblx0XHRcdGVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IHRoaXMudkRvbUJvdHRvbVBhZCtcInB4XCI7XG5cblx0XHRcdGlmKGZvcmNlTW92ZSl7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVG9wID0gdGhpcy52RG9tVG9wUGFkICsgKHRvcFBhZEhlaWdodCkgKyBvZmZzZXQgLSAodGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsV2lkdGggPiB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRXaWR0aCA/IHRoaXMuZWxlbWVudFZlcnRpY2FsLm9mZnNldEhlaWdodCAtIGNvbnRhaW5lckhlaWdodCA6IDApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNjcm9sbFRvcCA9IE1hdGgubWluKHRoaXMuc2Nyb2xsVG9wLCB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxIZWlnaHQgLSBjb250YWluZXJIZWlnaHQpO1xuXG5cdFx0XHQvL2FkanVzdCBmb3IgaG9yaXpvbnRhbCBzY3JvbGxiYXIgaWYgcHJlc2VudCAoYW5kIG5vdCBhdCB0b3Agb2YgdGFibGUpXG5cdFx0XHRpZih0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxXaWR0aCA+IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudFdpZHRoICYmIGZvcmNlTW92ZSl7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVG9wICs9IHRoaXMuZWxlbWVudFZlcnRpY2FsLm9mZnNldEhlaWdodCAtIGNvbnRhaW5lckhlaWdodDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gdGhpcy5zY3JvbGxUb3A7XG5cdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gPSB0aGlzLnNjcm9sbFRvcDtcblxuXHRcdFx0aG9sZGVyLnNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsVG9wO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicmVuZGVyLXZpcnR1YWwtZmlsbFwiKTtcblx0XHR9XG5cdH1cblxuXHRfYWRkVG9wUm93KHJvd3MsIGZpbGxhYmxlU3BhY2Upe1xuXHRcdHZhciB0YWJsZSA9IHRoaXMudGFibGVFbGVtZW50LFxuXHRcdGFkZGVkUm93cyA9IFtdLFxuXHRcdHBhZGRpbmdBZGp1c3QgPSAwLFxuXHRcdGluZGV4ID0gdGhpcy52RG9tVG9wIC0xLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRpZih0aGlzLnZEb21Ub3Ape1xuXHRcdFx0XHRsZXQgcm93ID0gcm93c1tpbmRleF0sXG5cdFx0XHRcdHJvd0hlaWdodCwgaW5pdGlhbGl6ZWQ7XG5cblx0XHRcdFx0aWYocm93ICYmIGkgPCB0aGlzLnZEb21NYXhSZW5kZXJDaGFpbil7XG5cdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblx0XHRcdFx0XHRpbml0aWFsaXplZCA9IHJvdy5pbml0aWFsaXplZDtcblxuXHRcdFx0XHRcdGlmKGZpbGxhYmxlU3BhY2UgPj0gcm93SGVpZ2h0KXtcblxuXHRcdFx0XHRcdFx0dGhpcy5zdHlsZVJvdyhyb3csIGluZGV4KTtcblx0XHRcdFx0XHRcdHRhYmxlLmluc2VydEJlZm9yZShyb3cuZ2V0RWxlbWVudCgpLCB0YWJsZS5maXJzdENoaWxkKTtcblxuXHRcdFx0XHRcdFx0aWYoIXJvdy5pbml0aWFsaXplZCB8fCAhcm93LmhlaWdodEluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRcdFx0YWRkZWRSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cm93LmluaXRpYWxpemUoKTtcblxuXHRcdFx0XHRcdFx0aWYoIWluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEVsZW1lbnQoKS5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0XHRcdFx0aWYocm93SGVpZ2h0ID4gdGhpcy52RG9tV2luZG93QnVmZmVyKXtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnZEb21XaW5kb3dCdWZmZXIgPSByb3dIZWlnaHQgKiAyO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGZpbGxhYmxlU3BhY2UgLT0gcm93SGVpZ2h0O1xuXHRcdFx0XHRcdFx0cGFkZGluZ0FkanVzdCArPSByb3dIZWlnaHQ7XG5cblx0XHRcdFx0XHRcdHRoaXMudkRvbVRvcC0tO1xuXHRcdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0XHRcdGkrKztcblxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGxldCByb3cgb2YgYWRkZWRSb3dzKXtcblx0XHRcdHJvdy5jbGVhckNlbGxIZWlnaHQoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9xdWlja05vcm1hbGl6ZVJvd0hlaWdodChhZGRlZFJvd3MpO1xuXG5cdFx0aWYocGFkZGluZ0FkanVzdCl7XG5cdFx0XHR0aGlzLnZEb21Ub3BQYWQgLT0gcGFkZGluZ0FkanVzdDtcblxuXHRcdFx0aWYodGhpcy52RG9tVG9wUGFkIDwgMCl7XG5cdFx0XHRcdHRoaXMudkRvbVRvcFBhZCA9IGluZGV4ICogdGhpcy52RG9tUm93SGVpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZihpbmRleCA8IDEpe1xuXHRcdFx0XHR0aGlzLnZEb21Ub3BQYWQgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR0YWJsZS5zdHlsZS5wYWRkaW5nVG9wID0gdGhpcy52RG9tVG9wUGFkICsgXCJweFwiO1xuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wIC09IHBhZGRpbmdBZGp1c3Q7XG5cdFx0fVxuXHR9XG5cblx0X3JlbW92ZVRvcFJvdyhyb3dzLCBmaWxsYWJsZVNwYWNlKXtcblx0XHR2YXIgcmVtb3ZhYmxlUm93cyA9IFtdLFxuXHRcdHBhZGRpbmdBZGp1c3QgPSAwLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgcm93ID0gcm93c1t0aGlzLnZEb21Ub3BdLFxuXHRcdFx0cm93SGVpZ2h0O1xuXG5cdFx0XHRpZihyb3cgJiYgaSA8IHRoaXMudkRvbU1heFJlbmRlckNoYWluKXtcblx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblxuXHRcdFx0XHRpZihmaWxsYWJsZVNwYWNlID49IHJvd0hlaWdodCl7XG5cdFx0XHRcdFx0dGhpcy52RG9tVG9wKys7XG5cblx0XHRcdFx0XHRmaWxsYWJsZVNwYWNlIC09IHJvd0hlaWdodDtcblx0XHRcdFx0XHRwYWRkaW5nQWRqdXN0ICs9IHJvd0hlaWdodDtcblxuXHRcdFx0XHRcdHJlbW92YWJsZVJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgcm93IG9mIHJlbW92YWJsZVJvd3Mpe1xuXHRcdFx0bGV0IHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdFx0aWYocm93RWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93RWwpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHBhZGRpbmdBZGp1c3Qpe1xuXHRcdFx0dGhpcy52RG9tVG9wUGFkICs9IHBhZGRpbmdBZGp1c3Q7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gdGhpcy52RG9tVG9wUGFkICsgXCJweFwiO1xuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wICs9IHRoaXMudkRvbVRvcCA/IHBhZGRpbmdBZGp1c3QgOiBwYWRkaW5nQWRqdXN0ICsgdGhpcy52RG9tV2luZG93QnVmZmVyO1xuXHRcdH1cblx0fVxuXG5cdF9hZGRCb3R0b21Sb3cocm93cywgZmlsbGFibGVTcGFjZSl7XG5cdFx0dmFyIHRhYmxlID0gdGhpcy50YWJsZUVsZW1lbnQsXG5cdFx0YWRkZWRSb3dzID0gW10sXG5cdFx0cGFkZGluZ0FkanVzdCA9IDAsXG5cdFx0aW5kZXggPSB0aGlzLnZEb21Cb3R0b20gKyAxLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgcm93ID0gcm93c1tpbmRleF0sXG5cdFx0XHRyb3dIZWlnaHQsIGluaXRpYWxpemVkO1xuXG5cdFx0XHRpZihyb3cgJiYgaSA8IHRoaXMudkRvbU1heFJlbmRlckNoYWluKXtcblx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblx0XHRcdFx0aW5pdGlhbGl6ZWQgPSByb3cuaW5pdGlhbGl6ZWQ7XG5cblx0XHRcdFx0aWYoZmlsbGFibGVTcGFjZSA+PSByb3dIZWlnaHQpe1xuXG5cdFx0XHRcdFx0dGhpcy5zdHlsZVJvdyhyb3csIGluZGV4KTtcblx0XHRcdFx0XHR0YWJsZS5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblxuXHRcdFx0XHRcdGlmKCFyb3cuaW5pdGlhbGl6ZWQgfHwgIXJvdy5oZWlnaHRJbml0aWFsaXplZCl7XG5cdFx0XHRcdFx0XHRhZGRlZFJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJvdy5pbml0aWFsaXplKCk7XG5cblx0XHRcdFx0XHRpZighaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEVsZW1lbnQoKS5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0XHRcdGlmKHJvd0hlaWdodCA+IHRoaXMudkRvbVdpbmRvd0J1ZmZlcil7XG5cdFx0XHRcdFx0XHRcdHRoaXMudkRvbVdpbmRvd0J1ZmZlciA9IHJvd0hlaWdodCAqIDI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZmlsbGFibGVTcGFjZSAtPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0cGFkZGluZ0FkanVzdCArPSByb3dIZWlnaHQ7XG5cblx0XHRcdFx0XHR0aGlzLnZEb21Cb3R0b20rKztcblx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgcm93IG9mIGFkZGVkUm93cyl7XG5cdFx0XHRyb3cuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcXVpY2tOb3JtYWxpemVSb3dIZWlnaHQoYWRkZWRSb3dzKTtcblxuXHRcdGlmKHBhZGRpbmdBZGp1c3Qpe1xuXHRcdFx0dGhpcy52RG9tQm90dG9tUGFkIC09IHBhZGRpbmdBZGp1c3Q7XG5cblx0XHRcdGlmKHRoaXMudkRvbUJvdHRvbVBhZCA8IDAgfHwgaW5kZXggPT0gcm93cy5sZW5ndGggLTEpe1xuXHRcdFx0XHR0aGlzLnZEb21Cb3R0b21QYWQgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR0YWJsZS5zdHlsZS5wYWRkaW5nQm90dG9tID0gdGhpcy52RG9tQm90dG9tUGFkICsgXCJweFwiO1xuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zQm90dG9tICs9IHBhZGRpbmdBZGp1c3Q7XG5cdFx0fVxuXHR9XG5cblx0X3JlbW92ZUJvdHRvbVJvdyhyb3dzLCBmaWxsYWJsZVNwYWNlKXtcblx0XHR2YXIgcmVtb3ZhYmxlUm93cyA9IFtdLFxuXHRcdHBhZGRpbmdBZGp1c3QgPSAwLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgcm93ID0gcm93c1t0aGlzLnZEb21Cb3R0b21dLFxuXHRcdFx0cm93SGVpZ2h0O1xuXG5cdFx0XHRpZihyb3cgJiYgaSA8IHRoaXMudkRvbU1heFJlbmRlckNoYWluKXtcblx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblxuXHRcdFx0XHRpZihmaWxsYWJsZVNwYWNlID49IHJvd0hlaWdodCl7XG5cdFx0XHRcdFx0dGhpcy52RG9tQm90dG9tIC0tO1xuXG5cdFx0XHRcdFx0ZmlsbGFibGVTcGFjZSAtPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0cGFkZGluZ0FkanVzdCArPSByb3dIZWlnaHQ7XG5cblx0XHRcdFx0XHRyZW1vdmFibGVSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAobGV0IHJvdyBvZiByZW1vdmFibGVSb3dzKXtcblx0XHRcdGxldCByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRcdGlmKHJvd0VsLnBhcmVudE5vZGUpe1xuXHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvd0VsKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihwYWRkaW5nQWRqdXN0KXtcblx0XHRcdHRoaXMudkRvbUJvdHRvbVBhZCArPSBwYWRkaW5nQWRqdXN0O1xuXG5cdFx0XHRpZih0aGlzLnZEb21Cb3R0b21QYWQgPCAwKXtcblx0XHRcdFx0dGhpcy52RG9tQm90dG9tUGFkID0gMDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IHRoaXMudkRvbUJvdHRvbVBhZCArIFwicHhcIjtcblx0XHRcdHRoaXMudkRvbVNjcm9sbFBvc0JvdHRvbSAtPSBwYWRkaW5nQWRqdXN0O1xuXHRcdH1cblx0fVxuXG5cdF9xdWlja05vcm1hbGl6ZVJvd0hlaWdodChyb3dzKXtcblx0XHRmb3IobGV0IHJvdyBvZiByb3dzKXtcblx0XHRcdHJvdy5jYWxjSGVpZ2h0KCk7XG5cdFx0fVxuXG5cdFx0Zm9yKGxldCByb3cgb2Ygcm93cyl7XG5cdFx0XHRyb3cuc2V0Q2VsbEhlaWdodCgpO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBSb3dNYW5hZ2VyIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlSG9sZGVyRWxlbWVudCgpOyAvL2NvbnRhaW5pbmcgZWxlbWVudFxuXHRcdHRoaXMudGFibGVFbGVtZW50ID0gdGhpcy5jcmVhdGVUYWJsZUVsZW1lbnQoKTsgLy90YWJsZSBlbGVtZW50XG5cdFx0dGhpcy5oZWlnaHRGaXhlciA9IHRoaXMuY3JlYXRlVGFibGVFbGVtZW50KCk7IC8vdGFibGUgZWxlbWVudFxuXHRcdHRoaXMucGxhY2Vob2xkZXIgPSBudWxsOyAvL3BsYWNlaG9sZGVyIGVsZW1lbnRcblx0XHR0aGlzLnBsYWNlaG9sZGVyQ29udGVudHMgPSBudWxsOyAvL3BsYWNlaG9sZGVyIGVsZW1lbnRcblx0XHRcblx0XHR0aGlzLmZpcnN0UmVuZGVyID0gZmFsc2U7IC8vaGFuZGxlIGZpcnN0IHJlbmRlclxuXHRcdHRoaXMucmVuZGVyTW9kZSA9IFwidmlydHVhbFwiOyAvL2N1cnJlbnQgcmVuZGVyaW5nIG1vZGVcblx0XHR0aGlzLmZpeGVkSGVpZ2h0ID0gZmFsc2U7IC8vY3VycmVudCByZW5kZXJpbmcgbW9kZVxuXHRcdFxuXHRcdHRoaXMucm93cyA9IFtdOyAvL2hvbGQgcm93IGRhdGEgb2JqZWN0c1xuXHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lID0gW107IC8vaG9sZCBjYWxjdWxhdGlvbiBvZiBhY3RpdmUgcm93c1xuXHRcdHRoaXMuYWN0aXZlUm93cyA9IFtdOyAvL3Jvd3MgY3VycmVudGx5IGF2YWlsYWJsZSB0byBvbiBkaXNwbGF5IGluIHRoZSB0YWJsZVxuXHRcdHRoaXMuYWN0aXZlUm93c0NvdW50ID0gMDsgLy9jb3VudCBvZiBhY3RpdmUgcm93c1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheVJvd3MgPSBbXTsgLy9yb3dzIGN1cnJlbnRseSBvbiBkaXNwbGF5IGluIHRoZSB0YWJsZVxuXHRcdHRoaXMuZGlzcGxheVJvd3NDb3VudCA9IDA7IC8vY291bnQgb2YgZGlzcGxheSByb3dzXG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5yZWRyYXdCbG9jayA9IGZhbHNlOyAvL3ByZXZlbnQgcmVkcmF3cyB0byBhbGxvdyBtdWx0aXBsZSBkYXRhIG1hbmlwdWxhdGlvbnMgYmVmb3JlIGNvbnRpbnVpbmdcblx0XHR0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyA9IGZhbHNlOyAvL3N0b3JlIGxhdGVzdCByZWRyYXcgZnVuY3Rpb24gY2FsbHMgZm9yIHdoZW4gcmVkcmF3IGlzIG5lZWRlZFxuXHRcdHRoaXMucmVkcmF3QmxvY2tSZW5kZXJJblBvc2l0aW9uID0gZmFsc2U7IC8vc3RvcmUgbGF0ZXN0IHJlZHJhdyBmdW5jdGlvbiBjYWxscyBmb3Igd2hlbiByZWRyYXcgaXMgbmVlZGVkXG5cdFx0XG5cdFx0dGhpcy5kYXRhUGlwZWxpbmUgPSBbXTsgLy9ob2xkIGRhdGEgcGlwZWxpbmUgdGFza3Ncblx0XHR0aGlzLmRpc3BsYXlQaXBlbGluZSA9IFtdOyAvL2hvbGQgZGF0YSBkaXNwbGF5IHBpcGVsaW5lIHRhc2tzXG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxiYXJXaWR0aCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5yZW5kZXJlciA9IG51bGw7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gU2V0dXAgRnVuY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRjcmVhdGVIb2xkZXJFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10YWJsZWhvbGRlclwiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCAwKTtcblx0XHQvLyBlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93Z3JvdXBcIik7XG5cdFx0XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cdFxuXHRjcmVhdGVUYWJsZUVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXRhYmxlXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dncm91cFwiKTtcblx0XHRcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdGluaXRpYWxpemVQbGFjZWhvbGRlcigpe1xuXHRcdHZhciBwbGFjZWhvbGRlciA9IHRoaXMudGFibGUub3B0aW9ucy5wbGFjZWhvbGRlcjtcblx0XHRcblx0XHRpZih0eXBlb2YgcGxhY2Vob2xkZXIgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRwbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyLmNhbGwodGhpcy50YWJsZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHBsYWNlaG9sZGVyID0gdGhpcy5jaGFpbihcInBsYWNlaG9sZGVyXCIsIFtwbGFjZWhvbGRlcl0sIHBsYWNlaG9sZGVyLCBwbGFjZWhvbGRlcikgfHwgcGxhY2Vob2xkZXI7XG5cdFx0XG5cdFx0Ly9jb25maWd1cmUgcGxhY2Vob2xkZXIgZWxlbWVudFxuXHRcdGlmKHBsYWNlaG9sZGVyKXtcdFxuXHRcdFx0bGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGxhY2Vob2xkZXJcIik7XG5cdFx0XHRcblx0XHRcdGlmKHR5cGVvZiBwbGFjZWhvbGRlciA9PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0bGV0IGNvbnRlbnRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0Y29udGVudHMuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wbGFjZWhvbGRlci1jb250ZW50c1wiKTtcblx0XHRcdFx0Y29udGVudHMuaW5uZXJIVE1MID0gcGxhY2Vob2xkZXI7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChjb250ZW50cyk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnBsYWNlaG9sZGVyQ29udGVudHMgPSBjb250ZW50cztcblx0XHRcdFx0XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgcGxhY2Vob2xkZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXJDb250ZW50cyA9IHBsYWNlaG9sZGVyO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJJbnZhbGlkIHBsYWNlaG9sZGVyIHByb3ZpZGVkLCBtdXN0IGJlIHN0cmluZyBvciBIVE1MIEVsZW1lbnRcIiwgcGxhY2Vob2xkZXIpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5lbCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIgPSBlbDtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIGNvbnRhaW5pbmcgZWxlbWVudFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXHRcblx0Ly9yZXR1cm4gdGFibGUgZWxlbWVudFxuXHRnZXRUYWJsZUVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZUVsZW1lbnQ7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVQbGFjZWhvbGRlcigpO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZVJlbmRlcmVyKCk7XG5cdFx0XG5cdFx0Ly9pbml0aWFsaXplIG1hbmFnZXJcblx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50YWJsZUVsZW1lbnQpO1xuXHRcdFxuXHRcdHRoaXMuZmlyc3RSZW5kZXIgPSB0cnVlO1xuXHRcdFxuXHRcdC8vc2Nyb2xsIGhlYWRlciBhbG9uZyB3aXRoIHRhYmxlIGJvZHlcblx0XHR0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCAoKSA9PiB7XG5cdFx0XHR2YXIgbGVmdCA9IHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0LFxuXHRcdFx0bGVmdERpciA9IHRoaXMuc2Nyb2xsTGVmdCA+IGxlZnQsXG5cdFx0XHR0b3AgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wLFxuXHRcdFx0dG9wRGlyID0gdGhpcy5zY3JvbGxUb3AgPiB0b3A7XG5cdFx0XHRcblx0XHRcdC8vaGFuZGxlIGhvcml6b250YWwgc2Nyb2xsaW5nXG5cdFx0XHRpZih0aGlzLnNjcm9sbExlZnQgIT0gbGVmdCl7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwic2Nyb2xsLWhvcml6b250YWxcIiwgbGVmdCwgbGVmdERpcik7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNjcm9sbEhvcml6b250YWxcIiwgbGVmdCwgbGVmdERpcik7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLl9wb3NpdGlvblBsYWNlaG9sZGVyKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vaGFuZGxlIHZlcnRpY2FsIHNjcm9sbGluZ1xuXHRcdFx0aWYodGhpcy5zY3JvbGxUb3AgIT0gdG9wKXtcblx0XHRcdFx0dGhpcy5zY3JvbGxUb3AgPSB0b3A7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnJlbmRlcmVyLnNjcm9sbFJvd3ModG9wLCB0b3BEaXIpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChcInNjcm9sbC12ZXJ0aWNhbFwiLCB0b3AsIHRvcERpcik7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNjcm9sbFZlcnRpY2FsXCIsIHRvcCwgdG9wRGlyKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vIFJvdyBNYW5pcHVsYXRpb24gLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGZpbmRSb3coc3ViamVjdCl7XG5cdFx0aWYodHlwZW9mIHN1YmplY3QgPT0gXCJvYmplY3RcIil7XG5cdFx0XHRpZihzdWJqZWN0IGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIHJvdyBlbGVtZW50XG5cdFx0XHRcdHJldHVybiBzdWJqZWN0O1xuXHRcdFx0fWVsc2UgaWYoc3ViamVjdCBpbnN0YW5jZW9mIFJvd0NvbXBvbmVudCl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyBwdWJsaWMgcm93IGNvbXBvbmVudFxuXHRcdFx0XHRyZXR1cm4gc3ViamVjdC5fZ2V0U2VsZigpIHx8IGZhbHNlO1xuXHRcdFx0fWVsc2UgaWYodHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHN1YmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyBhIEhUTUwgZWxlbWVudCBvZiB0aGUgcm93XG5cdFx0XHRcdGxldCBtYXRjaCA9IHRoaXMucm93cy5maW5kKChyb3cpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gcm93LmdldEVsZW1lbnQoKSA9PT0gc3ViamVjdDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gbWF0Y2ggfHwgZmFsc2U7XG5cdFx0XHR9ZWxzZSBpZihzdWJqZWN0ID09PSBudWxsKXtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIGlmKHR5cGVvZiBzdWJqZWN0ID09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdC8vc3ViamVjdCBzaG91bGQgYmUgdHJlYXRlZCBhcyB0aGUgaW5kZXggb2YgdGhlIHJvd1xuXHRcdFx0bGV0IG1hdGNoID0gdGhpcy5yb3dzLmZpbmQoKHJvdykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gcm93LmRhdGFbdGhpcy50YWJsZS5vcHRpb25zLmluZGV4XSA9PSBzdWJqZWN0O1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHJldHVybiBtYXRjaCB8fCBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9jYXRjaCBhbGwgZm9yIGFueSBvdGhlciB0eXBlIG9mIGlucHV0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRnZXRSb3dGcm9tRGF0YU9iamVjdChkYXRhKXtcblx0XHR2YXIgbWF0Y2ggPSB0aGlzLnJvd3MuZmluZCgocm93KSA9PiB7XG5cdFx0XHRyZXR1cm4gcm93LmRhdGEgPT09IGRhdGE7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG1hdGNoIHx8IGZhbHNlO1xuXHR9XG5cdFxuXHRnZXRSb3dGcm9tUG9zaXRpb24ocG9zaXRpb24pe1xuXHRcdHJldHVybiB0aGlzLmdldERpc3BsYXlSb3dzKCkuZmluZCgocm93KSA9PiB7XG5cdFx0XHRyZXR1cm4gcm93LnR5cGUgPT09IFwicm93XCIgJiYgcm93LmdldFBvc2l0aW9uKCkgPT09IHBvc2l0aW9uICYmIHJvdy5pc0Rpc3BsYXllZCgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRzY3JvbGxUb1Jvdyhyb3csIHBvc2l0aW9uLCBpZlZpc2libGUpe1xuXHRcdHJldHVybiB0aGlzLnJlbmRlcmVyLnNjcm9sbFRvUm93UG9zaXRpb24ocm93LCBwb3NpdGlvbiwgaWZWaXNpYmxlKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vIERhdGEgSGFuZGxpbmcgLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHNldERhdGEoZGF0YSwgcmVuZGVySW5Qb3NpdGlvbiwgY29sdW1uc0NoYW5nZWQpe1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXHRcdFx0aWYocmVuZGVySW5Qb3NpdGlvbiAmJiB0aGlzLmdldERpc3BsYXlSb3dzKCkubGVuZ3RoKXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb24pe1xuXHRcdFx0XHRcdHRoaXMuX3NldERhdGFBY3R1YWwoZGF0YSwgdHJ1ZSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXREYXRhQWN0dWFsKGRhdGEpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hdXRvQ29sdW1ucyAmJiBjb2x1bW5zQ2hhbmdlZCAmJiB0aGlzLnRhYmxlLmluaXRpYWxpemVkKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2VuZXJhdGVDb2x1bW5zRnJvbVJvd0RhdGEoZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5yZXNldFNjcm9sbCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5fc2V0RGF0YUFjdHVhbChkYXRhKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRfc2V0RGF0YUFjdHVhbChkYXRhLCByZW5kZXJJblBvc2l0aW9uKXtcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhUHJvY2Vzc2luZ1wiLCBkYXRhKTtcblx0XHRcblx0XHR0aGlzLl93aXBlRWxlbWVudHMoKTtcblx0XHRcblx0XHRpZihBcnJheS5pc0FycmF5KGRhdGEpKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJkYXRhLXByb2Nlc3NpbmdcIiwgZGF0YSk7XG5cdFx0XHRcblx0XHRcdGRhdGEuZm9yRWFjaCgoZGVmLCBpKSA9PiB7XG5cdFx0XHRcdGlmKGRlZiAmJiB0eXBlb2YgZGVmID09PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0XHR2YXIgcm93ID0gbmV3IFJvdyhkZWYsIHRoaXMpO1xuXHRcdFx0XHRcdHRoaXMucm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJEYXRhIExvYWRpbmcgV2FybmluZyAtIEludmFsaWQgcm93IGRhdGEgZGV0ZWN0ZWQgYW5kIGlnbm9yZWQsIGV4cGVjdGluZyBvYmplY3QgYnV0IHJlY2VpdmVkOlwiLCBkZWYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZWZyZXNoQWN0aXZlRGF0YShmYWxzZSwgZmFsc2UsIHJlbmRlckluUG9zaXRpb24pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiZGF0YS1wcm9jZXNzZWRcIiwgZGF0YSk7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhUHJvY2Vzc2VkXCIsIGRhdGEpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJEYXRhIExvYWRpbmcgRXJyb3IgLSBVbmFibGUgdG8gcHJvY2VzcyBkYXRhIGR1ZSB0byBpbnZhbGlkIGRhdGEgdHlwZSBcXG5FeHBlY3Rpbmc6IGFycmF5IFxcblJlY2VpdmVkOiBcIiwgdHlwZW9mIGRhdGEsIFwiXFxuRGF0YTogICAgIFwiLCBkYXRhKTtcblx0XHR9XG5cdH1cblx0XG5cdF93aXBlRWxlbWVudHMoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93cy13aXBlXCIpO1xuXHRcdFxuXHRcdHRoaXMuZGVzdHJveSgpO1xuXHRcdFxuXHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvd3Mtd2lwZWRcIik7XG5cdH1cblx0XG5cdGRlc3Ryb3koKXtcblx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRyb3cud2lwZSgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMucm93cyA9IFtdO1xuXHRcdHRoaXMuYWN0aXZlUm93cyA9IFtdO1xuXHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lID0gW107XG5cdFx0dGhpcy5hY3RpdmVSb3dzQ291bnQgPSAwO1xuXHRcdHRoaXMuZGlzcGxheVJvd3MgPSBbXTtcblx0XHR0aGlzLmRpc3BsYXlSb3dzQ291bnQgPSAwO1xuXHR9XG5cdFxuXHRkZWxldGVSb3cocm93LCBibG9ja1JlZHJhdyl7XG5cdFx0dmFyIGFsbEluZGV4ID0gdGhpcy5yb3dzLmluZGV4T2Yocm93KSxcblx0XHRhY3RpdmVJbmRleCA9IHRoaXMuYWN0aXZlUm93cy5pbmRleE9mKHJvdyk7XG5cdFx0XG5cdFx0aWYoYWN0aXZlSW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLmFjdGl2ZVJvd3Muc3BsaWNlKGFjdGl2ZUluZGV4LCAxKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoYWxsSW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLnJvd3Muc3BsaWNlKGFsbEluZGV4LCAxKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5zZXRBY3RpdmVSb3dzKHRoaXMuYWN0aXZlUm93cyk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93SXRlcmF0b3IoKHJvd3MpID0+IHtcblx0XHRcdHZhciBkaXNwbGF5SW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcblx0XHRcdFxuXHRcdFx0aWYoZGlzcGxheUluZGV4ID4gLTEpe1xuXHRcdFx0XHRyb3dzLnNwbGljZShkaXNwbGF5SW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdGlmKCFibG9ja1JlZHJhdyl7XG5cdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMoKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dEZWxldGVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XG5cdFx0aWYoIXRoaXMuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHR0aGlzLnRhYmxlRW1wdHkoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiLCB0aGlzLmdldERhdGEoKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRSb3coZGF0YSwgcG9zLCBpbmRleCwgYmxvY2tSZWRyYXcpe1xuXHRcdHZhciByb3cgPSB0aGlzLmFkZFJvd0FjdHVhbChkYXRhLCBwb3MsIGluZGV4LCBibG9ja1JlZHJhdyk7XG5cdFx0cmV0dXJuIHJvdztcblx0fVxuXHRcblx0Ly9hZGQgbXVsdGlwbGUgcm93c1xuXHRhZGRSb3dzKGRhdGEsIHBvcywgaW5kZXgsIHJlZnJlc2hEaXNwbGF5T25seSl7XG5cdFx0dmFyIHJvd3MgPSBbXTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0cG9zID0gdGhpcy5maW5kQWRkUm93UG9zKHBvcyk7XG5cdFx0XHRcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGRhdGEpKXtcblx0XHRcdFx0ZGF0YSA9IFtkYXRhXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoKHR5cGVvZiBpbmRleCA9PSBcInVuZGVmaW5lZFwiICYmIHBvcykgfHwgKHR5cGVvZiBpbmRleCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhcG9zKSl7XG5cdFx0XHRcdGRhdGEucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRkYXRhLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcblx0XHRcdFx0dmFyIHJvdyA9IHRoaXMuYWRkUm93KGl0ZW0sIHBvcywgaW5kZXgsIHRydWUpO1xuXHRcdFx0XHRyb3dzLnB1c2gocm93KTtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1hZGRlZFwiLCByb3csIGl0ZW0sIHBvcywgaW5kZXgpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVmcmVzaEFjdGl2ZURhdGEocmVmcmVzaERpc3BsYXlPbmx5ID8gXCJkaXNwbGF5UGlwZWxpbmVcIiA6IGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucygpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmRpc3BsYXlSb3dzQ291bnQpe1xuXHRcdFx0XHR0aGlzLl9jbGVhclBsYWNlaG9sZGVyKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJlc29sdmUocm93cyk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdGZpbmRBZGRSb3dQb3MocG9zKXtcblx0XHRpZih0eXBlb2YgcG9zID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHBvcyA9IHRoaXMudGFibGUub3B0aW9ucy5hZGRSb3dQb3M7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHBvcyA9PT0gXCJwb3NcIil7XG5cdFx0XHRwb3MgPSB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRpZihwb3MgPT09IFwiYm90dG9tXCIpe1xuXHRcdFx0cG9zID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBwb3M7XG5cdH1cblx0XG5cdGFkZFJvd0FjdHVhbChkYXRhLCBwb3MsIGluZGV4LCBibG9ja1JlZHJhdyl7XG5cdFx0dmFyIHJvdyA9IGRhdGEgaW5zdGFuY2VvZiBSb3cgPyBkYXRhIDogbmV3IFJvdyhkYXRhIHx8IHt9LCB0aGlzKSxcblx0XHR0b3AgPSB0aGlzLmZpbmRBZGRSb3dQb3MocG9zKSxcblx0XHRhbGxJbmRleCA9IC0xLFxuXHRcdGFjdGl2ZUluZGV4LCBjaGFpblJlc3VsdDtcblx0XHRcblx0XHRpZighaW5kZXgpe1xuXHRcdFx0Y2hhaW5SZXN1bHQgPSB0aGlzLmNoYWluKFwicm93LWFkZGluZy1wb3NpdGlvblwiLCBbcm93LCB0b3BdLCBudWxsLCB7aW5kZXgsIHRvcH0pO1xuXHRcdFx0XG5cdFx0XHRpbmRleCA9IGNoYWluUmVzdWx0LmluZGV4O1xuXHRcdFx0dG9wID0gY2hhaW5SZXN1bHQudG9wO1xuXHRcdH1cblx0XHRcblx0XHRpZih0eXBlb2YgaW5kZXggIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0aW5kZXggPSB0aGlzLmZpbmRSb3coaW5kZXgpO1xuXHRcdH1cblx0XHRcblx0XHRpbmRleCA9IHRoaXMuY2hhaW4oXCJyb3ctYWRkaW5nLWluZGV4XCIsIFtyb3csIGluZGV4LCB0b3BdLCBudWxsLCBpbmRleCk7XG5cdFx0XG5cdFx0aWYoaW5kZXgpe1xuXHRcdFx0YWxsSW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZihpbmRleCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGluZGV4ICYmIGFsbEluZGV4ID4gLTEpe1xuXHRcdFx0YWN0aXZlSW5kZXggPSB0aGlzLmFjdGl2ZVJvd3MuaW5kZXhPZihpbmRleCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGxheVJvd0l0ZXJhdG9yKGZ1bmN0aW9uKHJvd3Mpe1xuXHRcdFx0XHR2YXIgZGlzcGxheUluZGV4ID0gcm93cy5pbmRleE9mKGluZGV4KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGRpc3BsYXlJbmRleCA+IC0xKXtcblx0XHRcdFx0XHRyb3dzLnNwbGljZSgodG9wID8gZGlzcGxheUluZGV4IDogZGlzcGxheUluZGV4ICsgMSksIDAsIHJvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihhY3RpdmVJbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5hY3RpdmVSb3dzLnNwbGljZSgodG9wID8gYWN0aXZlSW5kZXggOiBhY3RpdmVJbmRleCArIDEpLCAwLCByb3cpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJvd3Muc3BsaWNlKCh0b3AgPyBhbGxJbmRleCA6IGFsbEluZGV4ICsgMSksIDAsIHJvdyk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRcblx0XHRcdGlmKHRvcCl7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BsYXlSb3dJdGVyYXRvcihmdW5jdGlvbihyb3dzKXtcblx0XHRcdFx0XHRyb3dzLnVuc2hpZnQocm93KTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmFjdGl2ZVJvd3MudW5zaGlmdChyb3cpO1xuXHRcdFx0XHR0aGlzLnJvd3MudW5zaGlmdChyb3cpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRpc3BsYXlSb3dJdGVyYXRvcihmdW5jdGlvbihyb3dzKXtcblx0XHRcdFx0XHRyb3dzLnB1c2gocm93KTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmFjdGl2ZVJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHR0aGlzLnJvd3MucHVzaChyb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLnNldEFjdGl2ZVJvd3ModGhpcy5hY3RpdmVSb3dzKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dBZGRlZFwiLCByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YUNoYW5nZWRcIikpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YUNoYW5nZWRcIiwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERhdGEoKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFibG9ja1JlZHJhdyl7XG5cdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcm93O1xuXHR9XG5cdFxuXHRtb3ZlUm93KGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1tb3ZlXCIsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0XG5cdFx0dGhpcy5tb3ZlUm93QWN0dWFsKGZyb20sIHRvLCBhZnRlcik7XG5cdFx0XG5cdFx0dGhpcy5yZWdlbmVyYXRlUm93UG9zaXRpb25zKCk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1tb3ZlZFwiLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd01vdmVkXCIsIGZyb20uZ2V0Q29tcG9uZW50KCkpO1xuXHR9XG5cdFxuXHRtb3ZlUm93QWN0dWFsKGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dGhpcy5tb3ZlUm93SW5BcnJheSh0aGlzLnJvd3MsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0dGhpcy5tb3ZlUm93SW5BcnJheSh0aGlzLmFjdGl2ZVJvd3MsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93SXRlcmF0b3IoKHJvd3MpID0+IHtcblx0XHRcdHRoaXMubW92ZVJvd0luQXJyYXkocm93cywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LW1vdmluZ1wiLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHR9XG5cdFxuXHRtb3ZlUm93SW5BcnJheShyb3dzLCBmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHZhclx0ZnJvbUluZGV4LCB0b0luZGV4LCBzdGFydCwgZW5kO1xuXHRcdFxuXHRcdGlmKGZyb20gIT09IHRvKXtcblx0XHRcdFxuXHRcdFx0ZnJvbUluZGV4ID0gcm93cy5pbmRleE9mKGZyb20pO1xuXHRcdFx0XG5cdFx0XHRpZiAoZnJvbUluZGV4ID4gLTEpIHtcblx0XHRcdFx0XG5cdFx0XHRcdHJvd3Muc3BsaWNlKGZyb21JbmRleCwgMSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0b0luZGV4ID0gcm93cy5pbmRleE9mKHRvKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmICh0b0luZGV4ID4gLTEpIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihhZnRlcil7XG5cdFx0XHRcdFx0XHRyb3dzLnNwbGljZSh0b0luZGV4KzEsIDAsIGZyb20pO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHJvd3Muc3BsaWNlKHRvSW5kZXgsIDAsIGZyb20pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJvd3Muc3BsaWNlKGZyb21JbmRleCwgMCwgZnJvbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9yZXN0eWxlIHJvd3Ncblx0XHRcdGlmKHJvd3MgPT09IHRoaXMuZ2V0RGlzcGxheVJvd3MoKSl7XG5cdFx0XHRcdFxuXHRcdFx0XHRzdGFydCA9IGZyb21JbmRleCA8IHRvSW5kZXggPyBmcm9tSW5kZXggOiB0b0luZGV4O1xuXHRcdFx0XHRlbmQgPSB0b0luZGV4ID4gZnJvbUluZGV4ID8gdG9JbmRleCA6IGZyb21JbmRleCArMTtcblx0XHRcdFx0XG5cdFx0XHRcdGZvcihsZXQgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKXtcblx0XHRcdFx0XHRpZihyb3dzW2ldKXtcblx0XHRcdFx0XHRcdHRoaXMuc3R5bGVSb3cocm93c1tpXSwgaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRjbGVhckRhdGEoKXtcblx0XHR0aGlzLnNldERhdGEoW10pO1xuXHR9XG5cdFxuXHRnZXRSb3dJbmRleChyb3cpe1xuXHRcdHJldHVybiB0aGlzLmZpbmRSb3dJbmRleChyb3csIHRoaXMucm93cyk7XG5cdH1cblx0XG5cdGdldERpc3BsYXlSb3dJbmRleChyb3cpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuZ2V0RGlzcGxheVJvd3MoKS5pbmRleE9mKHJvdyk7XG5cdFx0cmV0dXJuIGluZGV4ID4gLTEgPyBpbmRleCA6IGZhbHNlO1xuXHR9XG5cdFxuXHRuZXh0RGlzcGxheVJvdyhyb3csIHJvd09ubHkpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuZ2V0RGlzcGxheVJvd0luZGV4KHJvdyksXG5cdFx0bmV4dFJvdyA9IGZhbHNlO1xuXHRcdFxuXHRcdFxuXHRcdGlmKGluZGV4ICE9PSBmYWxzZSAmJiBpbmRleCA8IHRoaXMuZGlzcGxheVJvd3NDb3VudCAtMSl7XG5cdFx0XHRuZXh0Um93ID0gdGhpcy5nZXREaXNwbGF5Um93cygpW2luZGV4KzFdO1xuXHRcdH1cblx0XHRcblx0XHRpZihuZXh0Um93ICYmICghKG5leHRSb3cgaW5zdGFuY2VvZiBSb3cpIHx8IG5leHRSb3cudHlwZSAhPSBcInJvd1wiKSl7XG5cdFx0XHRyZXR1cm4gdGhpcy5uZXh0RGlzcGxheVJvdyhuZXh0Um93LCByb3dPbmx5KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG5leHRSb3c7XG5cdH1cblx0XG5cdHByZXZEaXNwbGF5Um93KHJvdywgcm93T25seSl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5nZXREaXNwbGF5Um93SW5kZXgocm93KSxcblx0XHRwcmV2Um93ID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoaW5kZXgpe1xuXHRcdFx0cHJldlJvdyA9IHRoaXMuZ2V0RGlzcGxheVJvd3MoKVtpbmRleC0xXTtcblx0XHR9XG5cdFx0XG5cdFx0aWYocm93T25seSAmJiBwcmV2Um93ICYmICghKHByZXZSb3cgaW5zdGFuY2VvZiBSb3cpIHx8IHByZXZSb3cudHlwZSAhPSBcInJvd1wiKSl7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcmV2RGlzcGxheVJvdyhwcmV2Um93LCByb3dPbmx5KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHByZXZSb3c7XG5cdH1cblx0XG5cdGZpbmRSb3dJbmRleChyb3csIGxpc3Qpe1xuXHRcdHZhciByb3dJbmRleDtcblx0XHRcblx0XHRyb3cgPSB0aGlzLmZpbmRSb3cocm93KTtcblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0cm93SW5kZXggPSBsaXN0LmluZGV4T2Yocm93KTtcblx0XHRcdFxuXHRcdFx0aWYocm93SW5kZXggPiAtMSl7XG5cdFx0XHRcdHJldHVybiByb3dJbmRleDtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRnZXREYXRhKGFjdGl2ZSwgdHJhbnNmb3JtKXtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0cm93cyA9IHRoaXMuZ2V0Um93cyhhY3RpdmUpO1xuXHRcdFxuXHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0aWYocm93LnR5cGUgPT0gXCJyb3dcIil7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHJvdy5nZXREYXRhKHRyYW5zZm9ybSB8fCBcImRhdGFcIikpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdldENvbXBvbmVudHMoYWN0aXZlKXtcblx0XHR2YXJcdG91dHB1dCA9IFtdLFxuXHRcdHJvd3MgPSB0aGlzLmdldFJvd3MoYWN0aXZlKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdG91dHB1dC5wdXNoKHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0RGF0YUNvdW50KGFjdGl2ZSl7XG5cdFx0dmFyIHJvd3MgPSB0aGlzLmdldFJvd3MoYWN0aXZlKTtcblx0XHRcblx0XHRyZXR1cm4gcm93cy5sZW5ndGg7XG5cdH1cblx0XG5cdHNjcm9sbEhvcml6b250YWwobGVmdCl7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gbGVmdDtcblx0XHR0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInNjcm9sbC1ob3Jpem9udGFsXCIsIGxlZnQpO1xuXHR9XG5cdFxuXHRyZWdpc3RlckRhdGFQaXBlbGluZUhhbmRsZXIoaGFuZGxlciwgcHJpb3JpdHkpe1xuXHRcdGlmKHR5cGVvZiBwcmlvcml0eSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHR0aGlzLmRhdGFQaXBlbGluZS5wdXNoKHtoYW5kbGVyLCBwcmlvcml0eX0pO1xuXHRcdFx0dGhpcy5kYXRhUGlwZWxpbmUuc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRGF0YSBwaXBlbGluZSBoYW5kbGVycyBtdXN0IGhhdmUgYSBwcmlvcml0eSBpbiBvcmRlciB0byBiZSByZWdpc3RlcmVkXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVnaXN0ZXJEaXNwbGF5UGlwZWxpbmVIYW5kbGVyKGhhbmRsZXIsIHByaW9yaXR5KXtcblx0XHRpZih0eXBlb2YgcHJpb3JpdHkgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy5kaXNwbGF5UGlwZWxpbmUucHVzaCh7aGFuZGxlciwgcHJpb3JpdHl9KTtcblx0XHRcdHRoaXMuZGlzcGxheVBpcGVsaW5lLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdFx0cmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkRpc3BsYXkgcGlwZWxpbmUgaGFuZGxlcnMgbXVzdCBoYXZlIGEgcHJpb3JpdHkgaW4gb3JkZXIgdG8gYmUgcmVnaXN0ZXJlZFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc2V0IGFjdGl2ZSBkYXRhIHNldFxuXHRyZWZyZXNoQWN0aXZlRGF0YShoYW5kbGVyLCBza2lwU3RhZ2UsIHJlbmRlckluUG9zaXRpb24pe1xuXHRcdHZhciB0YWJsZSA9IHRoaXMudGFibGUsXG5cdFx0c3RhZ2UgPSBcIlwiLFxuXHRcdGluZGV4ID0gMCxcblx0XHRjYXNjYWRlT3JkZXIgPSBbXCJhbGxcIiwgXCJkYXRhUGlwZWxpbmVcIiwgXCJkaXNwbGF5XCIsIFwiZGlzcGxheVBpcGVsaW5lXCIsIFwiZW5kXCJdO1xuXHRcdFxuXHRcdGlmKCF0aGlzLnRhYmxlLmRlc3Ryb3llZCl7XG5cdFx0XHRpZih0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0aW5kZXggPSB0aGlzLmRhdGFQaXBlbGluZS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbS5oYW5kbGVyID09PSBoYW5kbGVyO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdHN0YWdlID0gXCJkYXRhUGlwZWxpbmVcIjtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihza2lwU3RhZ2Upe1xuXHRcdFx0XHRcdFx0aWYoaW5kZXggPT0gdGhpcy5kYXRhUGlwZWxpbmUubGVuZ3RoIC0gMSl7XG5cdFx0XHRcdFx0XHRcdHN0YWdlID0gXCJkaXNwbGF5XCI7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aW5kZXggPSB0aGlzLmRpc3BsYXlQaXBlbGluZS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiBpdGVtLmhhbmRsZXIgPT09IGhhbmRsZXI7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdFx0XHRzdGFnZSA9IFwiZGlzcGxheVBpcGVsaW5lXCI7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHNraXBTdGFnZSl7XG5cdFx0XHRcdFx0XHRcdGlmKGluZGV4ID09IHRoaXMuZGlzcGxheVBpcGVsaW5lLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRcdFx0XHRcdHN0YWdlID0gXCJlbmRcIjtcblx0XHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHJlZnJlc2ggZGF0YSwgaW52YWxpZCBoYW5kbGVyIHByb3ZpZGVkXCIsIGhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRzdGFnZSA9IGhhbmRsZXIgfHwgXCJhbGxcIjtcblx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnJlZHJhd0Jsb2NrKXtcblx0XHRcdFx0aWYoIXRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnIHx8ICh0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyAmJiAoKHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnLnN0YWdlID09PSBzdGFnZSAmJiBpbmRleCA8IHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnLmluZGV4KSB8fCAoY2FzY2FkZU9yZGVyLmluZGV4T2Yoc3RhZ2UpIDwgY2FzY2FkZU9yZGVyLmluZGV4T2YodGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcuc3RhZ2UpKSkpKXtcblx0XHRcdFx0XHR0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyA9IHtcblx0XHRcdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdFx0XHRza2lwU3RhZ2U6IHNraXBTdGFnZSxcblx0XHRcdFx0XHRcdHJlbmRlckluUG9zaXRpb246IHJlbmRlckluUG9zaXRpb24sXG5cdFx0XHRcdFx0XHRzdGFnZTpzdGFnZSxcblx0XHRcdFx0XHRcdGluZGV4OmluZGV4LFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoSGVscGVycy5lbFZpc2libGUodGhpcy5lbGVtZW50KSl7XG5cdFx0XHRcdFx0aWYocmVuZGVySW5Qb3NpdGlvbil7XG5cdFx0XHRcdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbih0aGlzLnJlZnJlc2hQaXBlbGluZXMuYmluZCh0aGlzLCBoYW5kbGVyLCBzdGFnZSwgaW5kZXgsIHJlbmRlckluUG9zaXRpb24pKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJlZnJlc2hQaXBlbGluZXMoaGFuZGxlciwgc3RhZ2UsIGluZGV4LCByZW5kZXJJblBvc2l0aW9uKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoIWhhbmRsZXIpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIucmVuZGVyQ29sdW1ucygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR0aGlzLnJlbmRlclRhYmxlKCk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRhYmxlLm9wdGlvbnMubGF5b3V0Q29sdW1uc09uTmV3RGF0YSl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZWRyYXcodHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5yZWZyZXNoUGlwZWxpbmVzKGhhbmRsZXIsIHN0YWdlLCBpbmRleCwgcmVuZGVySW5Qb3NpdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2goXCJkYXRhLXJlZnJlc2hlZFwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHJlZnJlc2hQaXBlbGluZXMoaGFuZGxlciwgc3RhZ2UsIGluZGV4LCByZW5kZXJJblBvc2l0aW9uKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwiZGF0YS1yZWZyZXNoaW5nXCIpO1xuXHRcdFxuXHRcdGlmKCFoYW5kbGVyIHx8ICF0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVswXSl7XG5cdFx0XHR0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVswXSA9IHRoaXMucm93cy5zbGljZSgwKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9jYXNjYWRlIHRocm91Z2ggZGF0YSByZWZyZXNoIHN0YWdlc1xuXHRcdHN3aXRjaChzdGFnZSl7XG5cdFx0XHRjYXNlIFwiYWxsXCI6XG5cdFx0XHQvL2hhbmRsZSBjYXNlIHdoZXJlIGFsbCBkYXRhIG5lZWRzIHJlZnJlc2hpbmdcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImRhdGFQaXBlbGluZVwiOlxuXHRcdFx0XHRmb3IobGV0IGkgPSBpbmRleDsgaSA8IHRoaXMuZGF0YVBpcGVsaW5lLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0XHRsZXQgcmVzdWx0ID0gdGhpcy5kYXRhUGlwZWxpbmVbaV0uaGFuZGxlcih0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVtpXS5zbGljZSgwKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lW2kgKyAxXSA9IHJlc3VsdCB8fCB0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVtpXS5zbGljZSgwKTtcblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRcdHRoaXMuc2V0QWN0aXZlUm93cyh0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVt0aGlzLmRhdGFQaXBlbGluZS5sZW5ndGhdKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImRpc3BsYXlcIjpcblx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0XHR0aGlzLnJlc2V0RGlzcGxheVJvd3MoKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImRpc3BsYXlQaXBlbGluZVwiOlxuXHRcdFx0XHRmb3IobGV0IGkgPSBpbmRleDsgaSA8IHRoaXMuZGlzcGxheVBpcGVsaW5lLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0XHRsZXQgcmVzdWx0ID0gdGhpcy5kaXNwbGF5UGlwZWxpbmVbaV0uaGFuZGxlcigoaSA/IHRoaXMuZ2V0RGlzcGxheVJvd3MoaSAtIDEpIDogdGhpcy5hY3RpdmVSb3dzKS5zbGljZSgwKSwgcmVuZGVySW5Qb3NpdGlvbik7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuc2V0RGlzcGxheVJvd3MocmVzdWx0IHx8IHRoaXMuZ2V0RGlzcGxheVJvd3MoaSAtIDEpLnNsaWNlKDApLCBpKTtcblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZW5kXCI6XG5cdFx0XHQvL2Nhc2UgdG8gaGFuZGxlIHNjZW5hcmlvIHdoZW4gdHJ5aW5nIHRvIHNraXAgcGFzdCBlbmQgc3RhZ2Vcblx0XHRcdFx0dGhpcy5yZWdlbmVyYXRlUm93UG9zaXRpb25zKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuZ2V0RGlzcGxheVJvd3MoKS5sZW5ndGgpe1xuXHRcdFx0dGhpcy5fY2xlYXJQbGFjZWhvbGRlcigpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZWdlbmVyYXRlIHJvdyBwb3NpdGlvbnNcblx0cmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucygpe1xuXHRcdHZhciByb3dzID0gdGhpcy5nZXREaXNwbGF5Um93cygpO1xuXHRcdHZhciBpbmRleCA9IDE7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmIChyb3cudHlwZSA9PT0gXCJyb3dcIil7XG5cdFx0XHRcdHJvdy5zZXRQb3NpdGlvbihpbmRleCk7XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHNldEFjdGl2ZVJvd3MoYWN0aXZlUm93cyl7XG5cdFx0dGhpcy5hY3RpdmVSb3dzID0gdGhpcy5hY3RpdmVSb3dzID0gT2JqZWN0LmFzc2lnbihbXSwgYWN0aXZlUm93cyk7XG5cdFx0dGhpcy5hY3RpdmVSb3dzQ291bnQgPSB0aGlzLmFjdGl2ZVJvd3MubGVuZ3RoO1xuXHR9XG5cdFxuXHQvL3Jlc2V0IGRpc3BsYXkgcm93cyBhcnJheVxuXHRyZXNldERpc3BsYXlSb3dzKCl7XG5cdFx0dGhpcy5kaXNwbGF5Um93cyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheVJvd3MucHVzaCh0aGlzLmFjdGl2ZVJvd3Muc2xpY2UoMCkpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheVJvd3NDb3VudCA9IHRoaXMuZGlzcGxheVJvd3NbMF0ubGVuZ3RoO1xuXHR9XG5cdFxuXHQvL3NldCBkaXNwbGF5IHJvdyBwaXBlbGluZSBkYXRhXG5cdHNldERpc3BsYXlSb3dzKGRpc3BsYXlSb3dzLCBpbmRleCl7XG5cdFx0dGhpcy5kaXNwbGF5Um93c1tpbmRleF0gPSBkaXNwbGF5Um93cztcblx0XHRcblx0XHRpZihpbmRleCA9PSB0aGlzLmRpc3BsYXlSb3dzLmxlbmd0aCAtMSl7XG5cdFx0XHR0aGlzLmRpc3BsYXlSb3dzQ291bnQgPSB0aGlzLmRpc3BsYXlSb3dzW3RoaXMuZGlzcGxheVJvd3MubGVuZ3RoIC0xXS5sZW5ndGg7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXREaXNwbGF5Um93cyhpbmRleCl7XG5cdFx0aWYodHlwZW9mIGluZGV4ID09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRoaXMuZGlzcGxheVJvd3MubGVuZ3RoID8gdGhpcy5kaXNwbGF5Um93c1t0aGlzLmRpc3BsYXlSb3dzLmxlbmd0aCAtMV0gOiBbXTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kaXNwbGF5Um93c1tpbmRleF0gfHwgW107XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRWaXNpYmxlUm93cyhjaGFpbiwgdmlld2FibGUpe1xuXHRcdHZhciByb3dzID0gIE9iamVjdC5hc3NpZ24oW10sIHRoaXMucmVuZGVyZXIudmlzaWJsZVJvd3MoIXZpZXdhYmxlKSk7XG5cdFx0XG5cdFx0aWYoY2hhaW4pe1xuXHRcdFx0cm93cyA9IHRoaXMuY2hhaW4oXCJyb3dzLXZpc2libGVcIiwgW3ZpZXdhYmxlXSwgcm93cywgcm93cyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cdFxuXHQvL3JlcGVhdCBhY3Rpb24gYWNyb3NzIGRpc3BsYXkgcm93c1xuXHRkaXNwbGF5Um93SXRlcmF0b3IoY2FsbGJhY2spe1xuXHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lLmZvckVhY2goY2FsbGJhY2spO1xuXHRcdHRoaXMuZGlzcGxheVJvd3MuZm9yRWFjaChjYWxsYmFjayk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93c0NvdW50ID0gdGhpcy5kaXNwbGF5Um93c1t0aGlzLmRpc3BsYXlSb3dzLmxlbmd0aCAtMV0ubGVuZ3RoO1xuXHR9XG5cdFxuXHQvL3JldHVybiBvbmx5IGFjdHVhbCByb3dzIChub3QgZ3JvdXAgaGVhZGVycyBldGMpXG5cdGdldFJvd3ModHlwZSl7XG5cdFx0dmFyIHJvd3MgPSBbXTtcblx0XHRcblx0XHRzd2l0Y2godHlwZSl7XG5cdFx0XHRjYXNlIFwiYWN0aXZlXCI6XG5cdFx0XHRcdHJvd3MgPSB0aGlzLmFjdGl2ZVJvd3M7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZGlzcGxheVwiOlxuXHRcdFx0XHRyb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwidmlzaWJsZVwiOlxuXHRcdFx0XHRyb3dzID0gdGhpcy5nZXRWaXNpYmxlUm93cyhmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyb3dzID0gdGhpcy5jaGFpbihcInJvd3MtcmV0cmlldmVcIiwgdHlwZSwgbnVsbCwgdGhpcy5yb3dzKSB8fCB0aGlzLnJvd3M7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLyBUYWJsZSBSZW5kZXJpbmcgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly90cmlnZ2VyIHJlcmVuZGVyIG9mIHRhYmxlIGluIGN1cnJlbnQgcG9zaXRpb25cblx0cmVSZW5kZXJJblBvc2l0aW9uKGNhbGxiYWNrKXtcblx0XHRpZih0aGlzLnJlZHJhd0Jsb2NrKXtcblx0XHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yZWRyYXdCbG9ja1JlbmRlckluUG9zaXRpb24gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJlbmRlclN0YXJ0ZWRcIik7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVuZGVyZXIucmVyZW5kZXJSb3dzKGNhbGxiYWNrKTtcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMuZml4ZWRIZWlnaHQpe1xuXHRcdFx0XHR0aGlzLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnNjcm9sbEJhckNoZWNrKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJlbmRlckNvbXBsZXRlXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0c2Nyb2xsQmFyQ2hlY2soKXtcblx0XHR2YXIgc2Nyb2xsYmFyV2lkdGggPSAwO1xuXHRcdFxuXHRcdC8vYWRqdXN0IGZvciB2ZXJ0aWNhbCBzY3JvbGxiYXIgbW92aW5nIHRhYmxlIHdoZW4gcHJlc2VudFxuXHRcdGlmKHRoaXMuZWxlbWVudC5zY3JvbGxIZWlnaHQgPiB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0KXtcblx0XHRcdHNjcm9sbGJhcldpZHRoID0gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoIC0gdGhpcy5lbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdH1cblx0XHRcblx0XHRpZihzY3JvbGxiYXJXaWR0aCAhPT0gdGhpcy5zY3JvbGxiYXJXaWR0aCl7XG5cdFx0XHR0aGlzLnNjcm9sbGJhcldpZHRoID0gc2Nyb2xsYmFyV2lkdGg7XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwic2Nyb2xsYmFyLXZlcnRpY2FsXCIsIHNjcm9sbGJhcldpZHRoKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVSZW5kZXJlcigpe1xuXHRcdHZhciByZW5kZXJDbGFzcztcblx0XHRcblx0XHR2YXIgcmVuZGVyZXJzID0ge1xuXHRcdFx0XCJ2aXJ0dWFsXCI6IFZpcnR1YWxEb21WZXJ0aWNhbCxcblx0XHRcdFwiYmFzaWNcIjogQmFzaWNWZXJ0aWNhbCxcblx0XHR9O1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVyVmVydGljYWwgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0cmVuZGVyQ2xhc3MgPSByZW5kZXJlcnNbdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlclZlcnRpY2FsXTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZW5kZXJDbGFzcyA9IHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJWZXJ0aWNhbDtcblx0XHR9XG5cdFx0XG5cdFx0aWYocmVuZGVyQ2xhc3Mpe1xuXHRcdFx0dGhpcy5yZW5kZXJNb2RlID0gdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlclZlcnRpY2FsO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlbmRlcmVyID0gbmV3IHJlbmRlckNsYXNzKHRoaXMudGFibGUsIHRoaXMuZWxlbWVudCwgdGhpcy50YWJsZUVsZW1lbnQpO1xuXHRcdFx0dGhpcy5yZW5kZXJlci5pbml0aWFsaXplKCk7XG5cdFx0XHRcblx0XHRcdGlmKCh0aGlzLnRhYmxlLmVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHRoaXMudGFibGUub3B0aW9ucy5oZWlnaHQpICYmICEodGhpcy50YWJsZS5vcHRpb25zLm1pbkhlaWdodCAmJiB0aGlzLnRhYmxlLm9wdGlvbnMubWF4SGVpZ2h0KSl7XG5cdFx0XHRcdHRoaXMuZml4ZWRIZWlnaHQgPSB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmZpeGVkSGVpZ2h0ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIG1hdGNoaW5nIHJlbmRlcmVyOlwiLCB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVyVmVydGljYWwpO1xuXHRcdH1cblx0fVxuXHRcblx0Z2V0UmVuZGVyTW9kZSgpe1xuXHRcdHJldHVybiB0aGlzLnJlbmRlck1vZGU7XG5cdH1cblx0XG5cdHJlbmRlclRhYmxlKCl7XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicmVuZGVyU3RhcnRlZFwiKTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcblx0XHRcblx0XHR0aGlzLl9jbGVhclRhYmxlKCk7XG5cdFx0XG5cdFx0aWYodGhpcy5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdHRoaXMucmVuZGVyZXIucmVuZGVyUm93cygpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmZpcnN0UmVuZGVyKXtcblx0XHRcdFx0dGhpcy5maXJzdFJlbmRlciA9IGZhbHNlO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIXRoaXMuZml4ZWRIZWlnaHQpe1xuXHRcdFx0XHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMubGF5b3V0UmVmcmVzaCh0cnVlKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnJlbmRlckVtcHR5U2Nyb2xsKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCF0aGlzLmZpeGVkSGVpZ2h0KXtcblx0XHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJ0YWJsZS1sYXlvdXRcIik7XG5cdFx0XG5cdFx0aWYoIXRoaXMuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHR0aGlzLl9zaG93UGxhY2Vob2xkZXIoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxCYXJDaGVjaygpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJlbmRlckNvbXBsZXRlXCIpO1xuXHR9XG5cdFxuXHQvL3Nob3cgc2Nyb2xsYmFycyBvbiBlbXB0eSB0YWJsZSBkaXZcblx0cmVuZGVyRW1wdHlTY3JvbGwoKXtcblx0XHRpZih0aGlzLnBsYWNlaG9sZGVyKXtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRXaWR0aCgpICsgXCJweFwiO1xuXHRcdFx0Ly8gdGhpcy50YWJsZUVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdC8vIHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHRcdH1cblx0fVxuXHRcblx0X2NsZWFyVGFibGUoKXtcdFxuXHRcdHRoaXMuX2NsZWFyUGxhY2Vob2xkZXIoKTtcblx0XHRcblx0XHR0aGlzLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gMDtcblx0XHRcblx0XHR0aGlzLnJlbmRlcmVyLmNsZWFyUm93cygpO1xuXHR9XG5cdFxuXHR0YWJsZUVtcHR5KCl7XG5cdFx0dGhpcy5yZW5kZXJFbXB0eVNjcm9sbCgpO1xuXHRcdHRoaXMuX3Nob3dQbGFjZWhvbGRlcigpO1xuXHR9XG5cblx0Y2hlY2tQbGFjZWhvbGRlcigpe1xuXHRcdGlmKHRoaXMuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHR0aGlzLl9jbGVhclBsYWNlaG9sZGVyKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy50YWJsZUVtcHR5KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfc2hvd1BsYWNlaG9sZGVyKCl7XG5cdFx0aWYodGhpcy5wbGFjZWhvbGRlcil7XG5cdFx0XHRpZih0aGlzLnBsYWNlaG9sZGVyICYmIHRoaXMucGxhY2Vob2xkZXIucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5pbml0aWFsaXplUGxhY2Vob2xkZXIoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5zZXRBdHRyaWJ1dGUoXCJ0YWJ1bGF0b3ItcmVuZGVyLW1vZGVcIiwgdGhpcy5yZW5kZXJNb2RlKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5nZXRFbGVtZW50KCkuYXBwZW5kQ2hpbGQodGhpcy5wbGFjZWhvbGRlcik7XG5cdFx0XHR0aGlzLl9wb3NpdGlvblBsYWNlaG9sZGVyKCk7XG5cblx0XHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfY2xlYXJQbGFjZWhvbGRlcigpe1xuXHRcdGlmKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gY2xlYXIgZW1wdHkgdGFibGUgcGxhY2Vob2xkZXIgbWluXG5cdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBcIlwiO1xuXHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHR9XG5cdFxuXHRfcG9zaXRpb25QbGFjZWhvbGRlcigpe1xuXHRcdGlmKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIuc3R5bGUud2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHRcdHRoaXMucGxhY2Vob2xkZXJDb250ZW50cy5zdHlsZS53aWR0aCA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoICsgXCJweFwiO1xuXHRcdFx0dGhpcy5wbGFjZWhvbGRlckNvbnRlbnRzLnN0eWxlLm1hcmdpbkxlZnQgPSB0aGlzLnNjcm9sbExlZnQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRzdHlsZVJvdyhyb3csIGluZGV4KXtcblx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdGlmKGluZGV4ICUgMil7XG5cdFx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1ldmVuXCIpO1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1yb3ctb2RkXCIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LW9kZFwiKTtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3Itcm93LWV2ZW5cIik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL25vcm1hbGl6ZSBoZWlnaHQgb2YgYWN0aXZlIHJvd3Ncblx0bm9ybWFsaXplSGVpZ2h0KGZvcmNlKXtcblx0XHR0aGlzLmFjdGl2ZVJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93Lm5vcm1hbGl6ZUhlaWdodChmb3JjZSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vYWRqdXN0IHRoZSBoZWlnaHQgb2YgdGhlIHRhYmxlIGhvbGRlciB0byBmaXQgaW4gdGhlIFRhYnVsYXRvciBlbGVtZW50XG5cdGFkanVzdFRhYmxlU2l6ZSgpe1xuXHRcdGxldCBpbml0aWFsSGVpZ2h0ID0gdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCwgbWluSGVpZ2h0O1xuXHRcdGxldCByZXNpemVkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5yZW5kZXJlci52ZXJ0aWNhbEZpbGxNb2RlID09PSBcImZpbGxcIil7XG5cdFx0XHRsZXQgb3RoZXJIZWlnaHQgPSAgTWF0aC5mbG9vcih0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0RWxlbWVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCArICh0aGlzLnRhYmxlLmZvb3Rlck1hbmFnZXIgJiYgdGhpcy50YWJsZS5mb290ZXJNYW5hZ2VyLmFjdGl2ZSAmJiAhdGhpcy50YWJsZS5mb290ZXJNYW5hZ2VyLmV4dGVybmFsID8gdGhpcy50YWJsZS5mb290ZXJNYW5hZ2VyLmdldEVsZW1lbnQoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgOiAwKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuZml4ZWRIZWlnaHQpe1xuXHRcdFx0XHRtaW5IZWlnaHQgPSBpc05hTih0aGlzLnRhYmxlLm9wdGlvbnMubWluSGVpZ2h0KSA/IHRoaXMudGFibGUub3B0aW9ucy5taW5IZWlnaHQgOiB0aGlzLnRhYmxlLm9wdGlvbnMubWluSGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29uc3QgaGVpZ2h0ID0gXCJjYWxjKDEwMCUgLSBcIiArIG90aGVySGVpZ2h0ICsgXCJweClcIjtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IG1pbkhlaWdodCB8fCBcImNhbGMoMTAwJSAtIFwiICsgb3RoZXJIZWlnaHQgKyBcInB4KVwiO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiXCI7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPVxuXHRcdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gb3RoZXJIZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0aGlzLnNjcm9sbFRvcDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5yZW5kZXJlci5yZXNpemUoKTtcblx0XHRcdFxuXHRcdFx0Ly9jaGVjayBpZiB0aGUgdGFibGUgaGFzIGNoYW5nZWQgc2l6ZSB3aGVuIGRlYWxpbmcgd2l0aCB2YXJpYWJsZSBoZWlnaHQgdGFibGVzXG5cdFx0XHRpZighdGhpcy5maXhlZEhlaWdodCAmJiBpbml0aWFsSGVpZ2h0ICE9IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQpe1xuXHRcdFx0XHRyZXNpemVkID0gdHJ1ZTtcblx0XHRcdFx0aWYodGhpcy5zdWJzY3JpYmVkKFwidGFibGUtcmVzaXplXCIpKXtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwidGFibGUtcmVzaXplXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5yZWRyYXcoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnNjcm9sbEJhckNoZWNrKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuX3Bvc2l0aW9uUGxhY2Vob2xkZXIoKTtcblx0XHRyZXR1cm4gcmVzaXplZDtcblx0fVxuXHRcblx0Ly9yZWluaXRpYWxpemUgYWxsIHJvd3Ncblx0cmVpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdHJvdy5yZWluaXRpYWxpemUodHJ1ZSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vcHJldmVudCB0YWJsZSBmcm9tIGJlaW5nIHJlZHJhd25cblx0YmxvY2tSZWRyYXcgKCl7XG5cdFx0dGhpcy5yZWRyYXdCbG9jayA9IHRydWU7XG5cdFx0dGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcgPSBmYWxzZTtcblx0fVxuXHRcblx0Ly9yZXN0b3JlIHRhYmxlIHJlZHJhd2luZ1xuXHRyZXN0b3JlUmVkcmF3ICgpe1xuXHRcdHRoaXMucmVkcmF3QmxvY2sgPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyl7XG5cdFx0XHR0aGlzLnJlZnJlc2hBY3RpdmVEYXRhKHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnLmhhbmRsZXIsIHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnLnNraXBTdGFnZSwgdGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcucmVuZGVySW5Qb3NpdGlvbik7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnID0gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5yZWRyYXdCbG9ja1JlbmRlckluUG9zaXRpb24pe1xuXHRcdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlZHJhd0Jsb2NrUmVuZGVySW5Qb3NpdGlvbiA9IGZhbHNlO1xuXHR9XG5cdFxuXHQvL3JlZHJhdyB0YWJsZVxuXHRyZWRyYXcgKGZvcmNlKXtcblx0XHR0aGlzLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdHRoaXMudGFibGUudGFibGVXaWR0aCA9IHRoaXMudGFibGUuZWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcblx0XHRpZighZm9yY2Upe1x0XG5cdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHRcdFx0dGhpcy5zY3JvbGxIb3Jpem9udGFsKHRoaXMuc2Nyb2xsTGVmdCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5yZW5kZXJUYWJsZSgpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVzZXRTY3JvbGwoKXtcblx0XHR0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0dGhpcy5lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5icm93c2VyID09PSBcImllXCIpe1xuXHRcdFx0dmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcblx0XHRcdGV2ZW50LmluaXRFdmVudChcInNjcm9sbFwiLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdzY3JvbGwnKSk7XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIEZvb3Rlck1hbmFnZXIgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoKTsgLy9jb250YWluaW5nIGVsZW1lbnRcblx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQgPSB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoKTsgLy9jb250YWluaW5nIGVsZW1lbnRcblx0XHR0aGlzLmV4dGVybmFsID0gZmFsc2U7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5pbml0aWFsaXplRWxlbWVudCgpO1xuXHR9XG5cblx0Y3JlYXRlRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWZvb3RlclwiKTtcblxuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdFxuXHRjcmVhdGVDb250YWluZXJFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZm9vdGVyLWNvbnRlbnRzXCIpO1xuXG5cdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGVsKTtcblxuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdGluaXRpYWxpemVFbGVtZW50KCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZvb3RlckVsZW1lbnQpe1xuXG5cdFx0XHRzd2l0Y2godHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5mb290ZXJFbGVtZW50KXtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5mb290ZXJFbGVtZW50WzBdID09PSBcIjxcIil7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy50YWJsZS5vcHRpb25zLmZvb3RlckVsZW1lbnQ7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5leHRlcm5hbCA9IHRydWU7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMudGFibGUub3B0aW9ucy5mb290ZXJFbGVtZW50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLnRhYmxlLm9wdGlvbnMuZm9vdGVyRWxlbWVudDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXG5cdGFwcGVuZChlbGVtZW50KXtcblx0XHR0aGlzLmFjdGl2YXRlKCk7XG5cblx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHR9XG5cblx0cHJlcGVuZChlbGVtZW50KXtcblx0XHR0aGlzLmFjdGl2YXRlKCk7XG5cblx0XHR0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cdH1cblxuXHRyZW1vdmUoZWxlbWVudCl7XG5cdFx0ZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuXHRcdHRoaXMuZGVhY3RpdmF0ZSgpO1xuXHR9XG5cblx0ZGVhY3RpdmF0ZShmb3JjZSl7XG5cdFx0aWYoIXRoaXMuZWxlbWVudC5maXJzdENoaWxkIHx8IGZvcmNlKXtcblx0XHRcdGlmKCF0aGlzLmV4dGVybmFsKXtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0YWN0aXZhdGUoKXtcblx0XHRpZighdGhpcy5hY3RpdmUpe1xuXHRcdFx0dGhpcy5hY3RpdmUgPSB0cnVlO1xuXHRcdFx0aWYoIXRoaXMuZXh0ZXJuYWwpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJlZHJhdygpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJmb290ZXItcmVkcmF3XCIpO1xuXHR9XG59XG5cbmNsYXNzIEludGVyYWN0aW9uTWFuYWdlciBleHRlbmRzIENvcmVGZWF0dXJlIHtcblx0XG5cdGNvbnN0cnVjdG9yICh0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuZWwgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuYWJvcnRDbGFzc2VzID0gW1widGFidWxhdG9yLWhlYWRlcnNcIiwgXCJ0YWJ1bGF0b3ItdGFibGVcIl07XG5cdFx0XG5cdFx0dGhpcy5wcmV2aW91c1RhcmdldHMgPSB7fTtcblx0XHRcblx0XHR0aGlzLmxpc3RlbmVycyA9IFtcblx0XHRcdFwiY2xpY2tcIixcblx0XHRcdFwiZGJsY2xpY2tcIixcblx0XHRcdFwiY29udGV4dG1lbnVcIixcblx0XHRcdFwibW91c2VlbnRlclwiLFxuXHRcdFx0XCJtb3VzZWxlYXZlXCIsXG5cdFx0XHRcIm1vdXNlb3ZlclwiLFxuXHRcdFx0XCJtb3VzZW91dFwiLFxuXHRcdFx0XCJtb3VzZW1vdmVcIixcblx0XHRcdFwibW91c2V1cFwiLFxuXHRcdFx0XCJtb3VzZWRvd25cIixcblx0XHRcdFwidG91Y2hzdGFydFwiLFxuXHRcdFx0XCJ0b3VjaGVuZFwiLFxuXHRcdF07XG5cdFx0XG5cdFx0dGhpcy5jb21wb25lbnRNYXAgPSB7XG5cdFx0XHRcInRhYnVsYXRvci1jZWxsXCI6XCJjZWxsXCIsXG5cdFx0XHRcInRhYnVsYXRvci1yb3dcIjpcInJvd1wiLFxuXHRcdFx0XCJ0YWJ1bGF0b3ItZ3JvdXBcIjpcImdyb3VwXCIsXG5cdFx0XHRcInRhYnVsYXRvci1jb2xcIjpcImNvbHVtblwiLFxuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5wc2V1ZG9UcmFja2VycyA9IHtcblx0XHRcdFwicm93XCI6e1xuXHRcdFx0XHRzdWJzY3JpYmVyOm51bGwsXG5cdFx0XHRcdHRhcmdldDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdFwiY2VsbFwiOntcblx0XHRcdFx0c3Vic2NyaWJlcjpudWxsLFxuXHRcdFx0XHR0YXJnZXQ6bnVsbCxcblx0XHRcdH0sXG5cdFx0XHRcImdyb3VwXCI6e1xuXHRcdFx0XHRzdWJzY3JpYmVyOm51bGwsXG5cdFx0XHRcdHRhcmdldDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdFwiY29sdW1uXCI6e1xuXHRcdFx0XHRzdWJzY3JpYmVyOm51bGwsXG5cdFx0XHRcdHRhcmdldDpudWxsLFxuXHRcdFx0fSxcblx0XHR9O1xuXHRcdFxuXHRcdHRoaXMucHNldWRvVHJhY2tpbmcgPSBmYWxzZTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuZWwgPSB0aGlzLnRhYmxlLmVsZW1lbnQ7XG5cdFx0XG5cdFx0dGhpcy5idWlsZExpc3RlbmVyTWFwKCk7XG5cdFx0dGhpcy5iaW5kU3Vic2NyaXB0aW9uV2F0Y2hlcnMoKTtcblx0fVxuXHRcblx0YnVpbGRMaXN0ZW5lck1hcCgpe1xuXHRcdHZhciBsaXN0ZW5lck1hcCA9IHt9O1xuXHRcdFxuXHRcdHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG5cdFx0XHRsaXN0ZW5lck1hcFtsaXN0ZW5lcl0gPSB7XG5cdFx0XHRcdGhhbmRsZXI6bnVsbCxcblx0XHRcdFx0Y29tcG9uZW50czpbXSxcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5saXN0ZW5lcnMgPSBsaXN0ZW5lck1hcDtcblx0fVxuXHRcblx0YmluZFBzZXVkb0V2ZW50cygpe1xuXHRcdE9iamVjdC5rZXlzKHRoaXMucHNldWRvVHJhY2tlcnMpLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdFx0dGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnN1YnNjcmliZXIgPSB0aGlzLnBzZXVkb01vdXNlRW50ZXIuYmluZCh0aGlzLCBrZXkpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoa2V5ICsgXCItbW91c2VvdmVyXCIsIHRoaXMucHNldWRvVHJhY2tlcnNba2V5XS5zdWJzY3JpYmVyKTtcblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLnBzZXVkb1RyYWNraW5nID0gdHJ1ZTtcblx0fVxuXHRcblx0cHNldWRvTW91c2VFbnRlcihrZXksIGUsIHRhcmdldCl7XG5cdFx0aWYodGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCAhPT0gdGFyZ2V0KXtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2goa2V5ICsgXCItbW91c2VsZWF2ZVwiLCBlLCB0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0udGFyZ2V0KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wc2V1ZG9Nb3VzZUxlYXZlKGtleSwgZSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucHNldWRvVHJhY2tlcnNba2V5XS50YXJnZXQgPSB0YXJnZXQ7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goa2V5ICsgXCItbW91c2VlbnRlclwiLCBlLCB0YXJnZXQpO1xuXHRcdH1cblx0fVxuXHRcblx0cHNldWRvTW91c2VMZWF2ZShrZXksIGUpe1xuXHRcdHZhciBsZWF2ZUxpc3QgPSBPYmplY3Qua2V5cyh0aGlzLnBzZXVkb1RyYWNrZXJzKSxcblx0XHRsaW5rZWRLZXlzID0ge1xuXHRcdFx0XCJyb3dcIjpbXCJjZWxsXCJdLFxuXHRcdFx0XCJjZWxsXCI6W1wicm93XCJdLFxuXHRcdH07XG5cdFx0XG5cdFx0bGVhdmVMaXN0ID0gbGVhdmVMaXN0LmZpbHRlcigoaXRlbSkgPT4ge1xuXHRcdFx0dmFyIGxpbmtzID0gbGlua2VkS2V5c1trZXldO1xuXHRcdFx0cmV0dXJuIGl0ZW0gIT09IGtleSAmJiAoIWxpbmtzIHx8IChsaW5rcyAmJiAhbGlua3MuaW5jbHVkZXMoaXRlbSkpKTtcblx0XHR9KTtcblx0XHRcblx0XHRcblx0XHRsZWF2ZUxpc3QuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHR2YXIgdGFyZ2V0ID0gdGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldDtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2goa2V5ICsgXCItbW91c2VsZWF2ZVwiLCBlLCB0YXJnZXQpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdFxuXHRiaW5kU3Vic2NyaXB0aW9uV2F0Y2hlcnMoKXtcblx0XHR2YXIgbGlzdGVuZXJzID0gT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpLFxuXHRcdGNvbXBvbmVudHMgPSBPYmplY3QudmFsdWVzKHRoaXMuY29tcG9uZW50TWFwKTtcblx0XHRcblx0XHRmb3IobGV0IGNvbXAgb2YgY29tcG9uZW50cyl7XG5cdFx0XHRmb3IobGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycyl7XG5cdFx0XHRcdGxldCBrZXkgPSBjb21wICsgXCItXCIgKyBsaXN0ZW5lcjtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuc3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgdGhpcy5zdWJzY3JpcHRpb25DaGFuZ2VkLmJpbmQodGhpcywgY29tcCwgbGlzdGVuZXIpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuY2xlYXJXYXRjaGVycy5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0c3Vic2NyaXB0aW9uQ2hhbmdlZChjb21wb25lbnQsIGtleSwgYWRkZWQpe1xuXHRcdHZhciBsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2tleV0uY29tcG9uZW50cyxcblx0XHRpbmRleCA9IGxpc3RlbmVyLmluZGV4T2YoY29tcG9uZW50KSxcblx0XHRjaGFuZ2VkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoYWRkZWQpe1xuXHRcdFx0aWYoaW5kZXggPT09IC0xKXtcblx0XHRcdFx0bGlzdGVuZXIucHVzaChjb21wb25lbnQpO1xuXHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZighdGhpcy5zdWJzY3JpYmVkKGNvbXBvbmVudCArIFwiLVwiICsga2V5KSl7XG5cdFx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdGxpc3RlbmVyLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoKGtleSA9PT0gXCJtb3VzZWVudGVyXCIgfHwga2V5ID09PSBcIm1vdXNlbGVhdmVcIikgJiYgIXRoaXMucHNldWRvVHJhY2tpbmcpe1xuXHRcdFx0dGhpcy5iaW5kUHNldWRvRXZlbnRzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoYW5nZWQpe1xuXHRcdFx0dGhpcy51cGRhdGVFdmVudExpc3RlbmVycygpO1xuXHRcdH1cblx0fVxuXHRcblx0dXBkYXRlRXZlbnRMaXN0ZW5lcnMoKXtcblx0XHRmb3IobGV0IGtleSBpbiB0aGlzLmxpc3RlbmVycyl7XG5cdFx0XHRsZXQgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1trZXldO1xuXHRcdFx0XG5cdFx0XHRpZihsaXN0ZW5lci5jb21wb25lbnRzLmxlbmd0aCl7XG5cdFx0XHRcdGlmKCFsaXN0ZW5lci5oYW5kbGVyKXtcblx0XHRcdFx0XHRsaXN0ZW5lci5oYW5kbGVyID0gdGhpcy50cmFjay5iaW5kKHRoaXMsIGtleSk7XG5cdFx0XHRcdFx0dGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXIuaGFuZGxlcik7XG5cdFx0XHRcdFx0Ly8gdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXIuaGFuZGxlciwge3Bhc3NpdmU6IHRydWV9KVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKGxpc3RlbmVyLmhhbmRsZXIpe1xuXHRcdFx0XHRcdHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyLmhhbmRsZXIpO1xuXHRcdFx0XHRcdGxpc3RlbmVyLmhhbmRsZXIgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHR0cmFjayh0eXBlLCBlKXtcblx0XHR2YXIgcGF0aCA9IChlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpKSB8fCBlLnBhdGg7XG5cdFx0XG5cdFx0dmFyIHRhcmdldHMgPSB0aGlzLmZpbmRUYXJnZXRzKHBhdGgpO1xuXHRcdHRhcmdldHMgPSB0aGlzLmJpbmRDb21wb25lbnRzKHR5cGUsIHRhcmdldHMpO1xuXHRcdFxuXHRcdHRoaXMudHJpZ2dlckV2ZW50cyh0eXBlLCBlLCB0YXJnZXRzKTtcblx0XHRcblx0XHRpZih0aGlzLnBzZXVkb1RyYWNraW5nICYmICh0eXBlID09IFwibW91c2VvdmVyXCIgfHwgdHlwZSA9PSBcIm1vdXNlbGVhdmVcIikgJiYgIU9iamVjdC5rZXlzKHRhcmdldHMpLmxlbmd0aCl7XG5cdFx0XHR0aGlzLnBzZXVkb01vdXNlTGVhdmUoXCJub25lXCIsIGUpO1xuXHRcdH1cblx0fVxuXHRcblx0ZmluZFRhcmdldHMocGF0aCl7XG5cdFx0dmFyIHRhcmdldHMgPSB7fTtcblx0XHRcblx0XHRsZXQgY29tcG9uZW50TWFwID0gT2JqZWN0LmtleXModGhpcy5jb21wb25lbnRNYXApO1xuXHRcdFxuXHRcdGZvciAobGV0IGVsIG9mIHBhdGgpIHtcblx0XHRcdGxldCBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3QgPyBbLi4uZWwuY2xhc3NMaXN0XSA6IFtdO1xuXHRcdFx0XG5cdFx0XHRsZXQgYWJvcnQgPSBjbGFzc0xpc3QuZmlsdGVyKChpdGVtKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmFib3J0Q2xhc3Nlcy5pbmNsdWRlcyhpdGVtKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihhYm9ydC5sZW5ndGgpe1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bGV0IGVsVGFyZ2V0cyA9IGNsYXNzTGlzdC5maWx0ZXIoKGl0ZW0pID0+IHtcblx0XHRcdFx0cmV0dXJuIGNvbXBvbmVudE1hcC5pbmNsdWRlcyhpdGVtKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRmb3IgKGxldCB0YXJnZXQgb2YgZWxUYXJnZXRzKSB7XG5cdFx0XHRcdGlmKCF0YXJnZXRzW3RoaXMuY29tcG9uZW50TWFwW3RhcmdldF1dKXtcblx0XHRcdFx0XHR0YXJnZXRzW3RoaXMuY29tcG9uZW50TWFwW3RhcmdldF1dID0gZWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZih0YXJnZXRzLmdyb3VwICYmIHRhcmdldHMuZ3JvdXAgPT09IHRhcmdldHMucm93KXtcblx0XHRcdGRlbGV0ZSB0YXJnZXRzLnJvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0cztcblx0fVxuXHRcblx0YmluZENvbXBvbmVudHModHlwZSwgdGFyZ2V0cyl7XG5cdFx0Ly9lbnN1cmUgcm93IGNvbXBvbmVudCBpcyBsb29rZWQgdXAgYmVmb3JlIGNlbGxcblx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldHMpLnJldmVyc2UoKSxcblx0XHRsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW3R5cGVdLFxuXHRcdG1hdGNoZXMgPSB7fSxcblx0XHRvdXRwdXQgPSB7fSxcblx0XHR0YXJnZXRNYXRjaGVzID0ge307XG5cdFxuXHRcdGZvcihsZXQga2V5IG9mIGtleXMpe1xuXHRcdFx0bGV0IGNvbXBvbmVudCxcblx0XHRcdHRhcmdldCA9IHRhcmdldHNba2V5XSxcblx0XHRcdHByZXZpb3VzVGFyZ2V0ID0gdGhpcy5wcmV2aW91c1RhcmdldHNba2V5XTtcblx0XHRcdFxuXHRcdFx0aWYocHJldmlvdXNUYXJnZXQgJiYgcHJldmlvdXNUYXJnZXQudGFyZ2V0ID09PSB0YXJnZXQpe1xuXHRcdFx0XHRjb21wb25lbnQgPSBwcmV2aW91c1RhcmdldC5jb21wb25lbnQ7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHN3aXRjaChrZXkpe1xuXHRcdFx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0XHRcdGlmKGxpc3RlbmVyLmNvbXBvbmVudHMuaW5jbHVkZXMoXCJyb3dcIikgfHwgbGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImNlbGxcIikgfHwgbGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImdyb3VwXCIpKXtcblx0XHRcdFx0XHRcdFx0bGV0IHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VmlzaWJsZVJvd3ModHJ1ZSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0Y29tcG9uZW50ID0gcm93cy5maW5kKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcm93LmdldEVsZW1lbnQoKSA9PT0gdGFyZ2V0O1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZih0YXJnZXRzW1wicm93XCJdICYmIHRhcmdldHNbXCJyb3dcIl0ucGFyZW50Tm9kZSAmJiB0YXJnZXRzW1wicm93XCJdLnBhcmVudE5vZGUuY2xvc2VzdChcIi50YWJ1bGF0b3Itcm93XCIpKXtcblx0XHRcdFx0XHRcdFx0XHR0YXJnZXRzW2tleV0gPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcImNvbHVtblwiOlxuXHRcdFx0XHRcdFx0aWYobGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImNvbHVtblwiKSl7XG5cdFx0XHRcdFx0XHRcdGNvbXBvbmVudCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKHRhcmdldCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwiY2VsbFwiOlxuXHRcdFx0XHRcdFx0aWYobGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImNlbGxcIikpe1xuXHRcdFx0XHRcdFx0XHRpZihtYXRjaGVzW1wicm93XCJdIGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0XHRcdFx0XHRjb21wb25lbnQgPSBtYXRjaGVzW1wicm93XCJdLmZpbmRDZWxsKHRhcmdldCk7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcdFxuXHRcdFx0XHRcdFx0XHRcdGlmKHRhcmdldHNbXCJyb3dcIl0pe1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRXZlbnQgVGFyZ2V0IExvb2t1cCBFcnJvciAtIFRoZSByb3cgdGhpcyBjZWxsIGlzIGF0dGFjaGVkIHRvIGNhbm5vdCBiZSBmb3VuZCwgaGFzIHRoZSB0YWJsZSBiZWVuIHJlaW5pdGlhbGl6ZWQgd2l0aG91dCBiZWluZyBkZXN0cm95ZWQgZmlyc3Q/XCIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29tcG9uZW50KXtcblx0XHRcdFx0bWF0Y2hlc1trZXldID0gY29tcG9uZW50O1xuXHRcdFx0XHR0YXJnZXRNYXRjaGVzW2tleV0gPSB7XG5cdFx0XHRcdFx0dGFyZ2V0OnRhcmdldCxcblx0XHRcdFx0XHRjb21wb25lbnQ6Y29tcG9uZW50LFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLnByZXZpb3VzVGFyZ2V0cyA9IHRhcmdldE1hdGNoZXM7XG5cblx0XHQvL3JldmVyc2Ugb3JkZXIga2V5cyBhcmUgc2V0IGluIHNvIGV2ZW50cyB0cmlnZ2VyIGluIGNvcnJlY3Qgc2VxdWVuY2Vcblx0XHRPYmplY3Qua2V5cyh0YXJnZXRzKS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdGxldCB2YWx1ZSA9IG1hdGNoZXNba2V5XTtcblx0XHRcdG91dHB1dFtrZXldID0gdmFsdWU7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0dHJpZ2dlckV2ZW50cyh0eXBlLCBlLCB0YXJnZXRzKXtcblx0XHR2YXIgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXTtcblxuXHRcdGZvcihsZXQga2V5IGluIHRhcmdldHMpe1xuXHRcdFx0aWYodGFyZ2V0c1trZXldICYmIGxpc3RlbmVyLmNvbXBvbmVudHMuaW5jbHVkZXMoa2V5KSl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2goa2V5ICsgXCItXCIgKyB0eXBlLCBlLCB0YXJnZXRzW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Y2xlYXJXYXRjaGVycygpe1xuXHRcdGZvcihsZXQga2V5IGluIHRoaXMubGlzdGVuZXJzKXtcblx0XHRcdGxldCBsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2tleV07XG5cdFx0XHRcblx0XHRcdGlmKGxpc3RlbmVyLmhhbmRsZXIpe1xuXHRcdFx0XHR0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lci5oYW5kbGVyKTtcblx0XHRcdFx0bGlzdGVuZXIuaGFuZGxlciA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIENvbXBvbmVudEZ1bmN0aW9uQmluZGVye1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHR0aGlzLnRhYmxlID0gdGFibGU7XG5cblx0XHR0aGlzLmJpbmRpbmdzID0ge307XG5cdH1cblxuXHRiaW5kKHR5cGUsIGZ1bmNOYW1lLCBoYW5kbGVyKXtcblx0XHRpZighdGhpcy5iaW5kaW5nc1t0eXBlXSl7XG5cdFx0XHR0aGlzLmJpbmRpbmdzW3R5cGVdID0ge307XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5iaW5kaW5nc1t0eXBlXVtmdW5jTmFtZV0pe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGJpbmQgY29tcG9uZW50IGhhbmRsZXIsIGEgbWF0Y2hpbmcgZnVuY3Rpb24gbmFtZSBpcyBhbHJlYWR5IGJvdW5kXCIsIHR5cGUsIGZ1bmNOYW1lLCBoYW5kbGVyKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmJpbmRpbmdzW3R5cGVdW2Z1bmNOYW1lXSA9IGhhbmRsZXI7XG5cdFx0fVxuXHR9XG5cblx0aGFuZGxlKHR5cGUsIGNvbXBvbmVudCwgbmFtZSl7XG5cdFx0aWYodGhpcy5iaW5kaW5nc1t0eXBlXSAmJiB0aGlzLmJpbmRpbmdzW3R5cGVdW25hbWVdICYmIHR5cGVvZiB0aGlzLmJpbmRpbmdzW3R5cGVdW25hbWVdLmJpbmQgPT09ICdmdW5jdGlvbicpe1xuXHRcdFx0cmV0dXJuIHRoaXMuYmluZGluZ3NbdHlwZV1bbmFtZV0uYmluZChudWxsLCBjb21wb25lbnQpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKG5hbWUgIT09IFwidGhlblwiICYmIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmICFuYW1lLnN0YXJ0c1dpdGgoXCJfXCIpKXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRlYnVnSW52YWxpZENvbXBvbmVudEZ1bmNzKXtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVGhlIFwiICsgdHlwZSArIFwiIGNvbXBvbmVudCBkb2VzIG5vdCBoYXZlIGEgXCIgKyBuYW1lICsgXCIgZnVuY3Rpb24sIGhhdmUgeW91IGNoZWNrZWQgdGhhdCB5b3UgaGF2ZSB0aGUgY29ycmVjdCBUYWJ1bGF0b3IgbW9kdWxlIGluc3RhbGxlZD9cIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgRGF0YUxvYWRlciBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMucmVxdWVzdE9yZGVyID0gMDsgLy9wcmV2ZW50IHJlcXVlc3RzIGNvbWluZyBvdXQgb2Ygc2VxdWVuY2UgaWYgb3ZlcnJpZGRlbiBieSBhbm90aGVyIGxvYWQgcmVxdWVzdFxuXHRcdHRoaXMubG9hZGluZyA9IGZhbHNlO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7fVxuXHRcblx0bG9hZChkYXRhLCBwYXJhbXMsIGNvbmZpZywgcmVwbGFjZSwgc2lsZW50LCBjb2x1bW5zQ2hhbmdlZCl7XG5cdFx0dmFyIHJlcXVlc3RObyA9ICsrdGhpcy5yZXF1ZXN0T3JkZXI7XG5cblx0XHRpZih0aGlzLnRhYmxlLmRlc3Ryb3llZCl7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFMb2FkaW5nXCIsIGRhdGEpO1xuXHRcdFxuXHRcdC8vcGFyc2UganNvbiBkYXRhIHRvIGFycmF5XG5cdFx0aWYgKGRhdGEgJiYgKGRhdGEuaW5kZXhPZihcIntcIikgPT0gMCB8fCBkYXRhLmluZGV4T2YoXCJbXCIpID09IDApKXtcblx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLmNvbmZpcm0oXCJkYXRhLWxvYWRpbmdcIiwgW2RhdGEsIHBhcmFtcywgY29uZmlnLCBzaWxlbnRdKSl7XG5cdFx0XHR0aGlzLmxvYWRpbmcgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0dGhpcy5hbGVydExvYWRlcigpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvL2dldCBwYXJhbXMgZm9yIHJlcXVlc3Rcblx0XHRcdHBhcmFtcyA9IHRoaXMuY2hhaW4oXCJkYXRhLXBhcmFtc1wiLCBbZGF0YSwgY29uZmlnLCBzaWxlbnRdLCBwYXJhbXMgfHwge30sIHBhcmFtcyB8fCB7fSk7XG5cdFx0XHRcblx0XHRcdHBhcmFtcyA9IHRoaXMubWFwUGFyYW1zKHBhcmFtcywgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFTZW5kUGFyYW1zKTtcblx0XHRcdFxuXHRcdFx0dmFyIHJlc3VsdCA9IHRoaXMuY2hhaW4oXCJkYXRhLWxvYWRcIiwgW2RhdGEsIHBhcmFtcywgY29uZmlnLCBzaWxlbnRdLCBmYWxzZSwgUHJvbWlzZS5yZXNvbHZlKFtdKSk7XG5cdFx0XHRcblx0XHRcdHJldHVybiByZXN1bHQudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRcdFx0aWYoIXRoaXMudGFibGUuZGVzdHJveWVkKXtcblx0XHRcdFx0XHRpZighQXJyYXkuaXNBcnJheShyZXNwb25zZSkgJiYgdHlwZW9mIHJlc3BvbnNlID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSB0aGlzLm1hcFBhcmFtcyhyZXNwb25zZSwgdGhpcy5vYmplY3RJbnZlcnQodGhpcy50YWJsZS5vcHRpb25zLmRhdGFSZWNlaXZlUGFyYW1zKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHZhciByb3dEYXRhID0gdGhpcy5jaGFpbihcImRhdGEtbG9hZGVkXCIsIFtyZXNwb25zZV0sIG51bGwsIHJlc3BvbnNlKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihyZXF1ZXN0Tm8gPT0gdGhpcy5yZXF1ZXN0T3JkZXIpe1xuXHRcdFx0XHRcdFx0dGhpcy5jbGVhckFsZXJ0KCk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHJvd0RhdGEgIT09IGZhbHNlKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YUxvYWRlZFwiLCByb3dEYXRhKTtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNldERhdGEocm93RGF0YSwgIHJlcGxhY2UsIHR5cGVvZiBjb2x1bW5zQ2hhbmdlZCA9PT0gXCJ1bmRlZmluZWRcIiA/ICFyZXBsYWNlIDogY29sdW1uc0NoYW5nZWQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkRhdGEgTG9hZCBSZXNwb25zZSBCbG9ja2VkIC0gQW4gYWN0aXZlIGRhdGEgbG9hZCByZXF1ZXN0IHdhcyBibG9ja2VkIGJ5IGFuIGF0dGVtcHQgdG8gY2hhbmdlIHRhYmxlIGRhdGEgd2hpbGUgdGhlIHJlcXVlc3Qgd2FzIGJlaW5nIG1hZGVcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRGF0YSBMb2FkIFJlc3BvbnNlIEJsb2NrZWQgLSBUYWJsZSBoYXMgYmVlbiBkZXN0cm95ZWRcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pLmNhdGNoKChlcnJvcikgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRGF0YSBMb2FkIEVycm9yOiBcIiwgZXJyb3IpO1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhTG9hZEVycm9yXCIsIGVycm9yKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHRcdHRoaXMuYWxlcnRFcnJvcigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLmNsZWFyQWxlcnQoKTtcblx0XHRcdFx0fSwgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXJFcnJvclRpbWVvdXQpO1xuXHRcdFx0fSlcblx0XHRcdFx0LmZpbmFsbHkoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMubG9hZGluZyA9IGZhbHNlO1xuXHRcdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhTG9hZGVkXCIsIGRhdGEpO1xuXHRcdFx0XG5cdFx0XHRpZighZGF0YSl7XG5cdFx0XHRcdGRhdGEgPSBbXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNldERhdGEoZGF0YSwgcmVwbGFjZSwgdHlwZW9mIGNvbHVtbnNDaGFuZ2VkID09PSBcInVuZGVmaW5lZFwiID8gIXJlcGxhY2UgOiBjb2x1bW5zQ2hhbmdlZCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRtYXBQYXJhbXMocGFyYW1zLCBtYXApe1xuXHRcdHZhciBvdXRwdXQgPSB7fTtcblx0XHRcblx0XHRmb3IobGV0IGtleSBpbiBwYXJhbXMpe1xuXHRcdFx0b3V0cHV0W21hcC5oYXNPd25Qcm9wZXJ0eShrZXkpID8gbWFwW2tleV0gOiBrZXldID0gcGFyYW1zW2tleV07XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdG9iamVjdEludmVydChvYmope1xuXHRcdHZhciBvdXRwdXQgPSB7fTtcblx0XHRcblx0XHRmb3IobGV0IGtleSBpbiBvYmope1xuXHRcdFx0b3V0cHV0W29ialtrZXldXSA9IGtleTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0YmxvY2tBY3RpdmVMb2FkKCl7XG5cdFx0dGhpcy5yZXF1ZXN0T3JkZXIrKztcblx0fVxuXHRcblx0YWxlcnRMb2FkZXIoKXtcblx0XHR2YXIgc2hvdWxkTG9hZCA9IHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YUxvYWRlciA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXIoKSA6IHRoaXMudGFibGUub3B0aW9ucy5kYXRhTG9hZGVyO1xuXHRcdFxuXHRcdGlmKHNob3VsZExvYWQpe1xuXHRcdFx0dGhpcy50YWJsZS5hbGVydE1hbmFnZXIuYWxlcnQodGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXJMb2FkaW5nIHx8IHRoaXMubGFuZ1RleHQoXCJkYXRhfGxvYWRpbmdcIikpO1xuXHRcdH1cblx0fVxuXHRcblx0YWxlcnRFcnJvcigpe1xuXHRcdHRoaXMudGFibGUuYWxlcnRNYW5hZ2VyLmFsZXJ0KHRoaXMudGFibGUub3B0aW9ucy5kYXRhTG9hZGVyRXJyb3IgfHwgdGhpcy5sYW5nVGV4dChcImRhdGF8ZXJyb3JcIiksIFwiZXJyb3JcIik7XG5cdH1cblx0XG5cdGNsZWFyQWxlcnQoKXtcblx0XHR0aGlzLnRhYmxlLmFsZXJ0TWFuYWdlci5jbGVhcigpO1xuXHR9XG59XG5cbmNsYXNzIEV4dGVybmFsRXZlbnRCdXMge1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zTGlzdCwgZGVidWcpe1xuXHRcdHRoaXMudGFibGUgPSB0YWJsZTtcblx0XHR0aGlzLmV2ZW50cyA9IHt9O1xuXHRcdHRoaXMub3B0aW9uc0xpc3QgPSBvcHRpb25zTGlzdCB8fCB7fTtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbk5vdGlmaWVycyA9IHt9O1xuXG5cdFx0dGhpcy5kaXNwYXRjaCA9IGRlYnVnID8gdGhpcy5fZGVidWdEaXNwYXRjaC5iaW5kKHRoaXMpIDogdGhpcy5fZGlzcGF0Y2guYmluZCh0aGlzKTtcblx0XHR0aGlzLmRlYnVnID0gZGVidWc7XG5cdH1cblxuXHRzdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCBjYWxsYmFjayl7XG5cdFx0aWYoIXRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0pe1xuXHRcdFx0dGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0ucHVzaChjYWxsYmFjayk7XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWQoa2V5KSl7XG5cdFx0XHR0aGlzLl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXHRzdWJzY3JpYmUoa2V5LCBjYWxsYmFjayl7XG5cdFx0aWYoIXRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuZXZlbnRzW2tleV0ucHVzaChjYWxsYmFjayk7XG5cblx0XHR0aGlzLl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCB0cnVlKTtcblx0fVxuXG5cdHVuc3Vic2NyaWJlKGtleSwgY2FsbGJhY2spe1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGlmKHRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0XHRpbmRleCA9IHRoaXMuZXZlbnRzW2tleV0uZmluZEluZGV4KChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW0gPT09IGNhbGxiYWNrO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0XHR0aGlzLmV2ZW50c1trZXldLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJDYW5ub3QgcmVtb3ZlIGV2ZW50LCBubyBtYXRjaGluZyBldmVudCBmb3VuZDpcIiwga2V5LCBjYWxsYmFjayk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmV2ZW50c1trZXldO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNhbm5vdCByZW1vdmUgZXZlbnQsIG5vIGV2ZW50cyBzZXQgb246XCIsIGtleSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fbm90aWZ5U3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgZmFsc2UpO1xuXHR9XG5cblx0c3Vic2NyaWJlZChrZXkpe1xuXHRcdHJldHVybiB0aGlzLmV2ZW50c1trZXldICYmIHRoaXMuZXZlbnRzW2tleV0ubGVuZ3RoO1xuXHR9XG5cblx0X25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIHN1YnNjcmliZWQpe1xuXHRcdHZhciBub3RpZmllcnMgPSB0aGlzLnN1YnNjcmlwdGlvbk5vdGlmaWVyc1trZXldO1xuXG5cdFx0aWYobm90aWZpZXJzKXtcblx0XHRcdG5vdGlmaWVycy5mb3JFYWNoKChjYWxsYmFjayk9Pntcblx0XHRcdFx0Y2FsbGJhY2soc3Vic2NyaWJlZCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRfZGlzcGF0Y2goKXtcblx0XHR2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKSxcblx0XHRrZXkgPSBhcmdzLnNoaWZ0KCksXG5cdFx0cmVzdWx0O1xuXG5cdFx0aWYodGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHR0aGlzLmV2ZW50c1trZXldLmZvckVhY2goKGNhbGxiYWNrLCBpKSA9PiB7XG5cdFx0XHRcdGxldCBjYWxsUmVzdWx0ID0gY2FsbGJhY2suYXBwbHkodGhpcy50YWJsZSwgYXJncyk7XG5cblx0XHRcdFx0aWYoIWkpe1xuXHRcdFx0XHRcdHJlc3VsdCA9IGNhbGxSZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRfZGVidWdEaXNwYXRjaCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3NbMF07XG5cblx0XHRhcmdzWzBdID0gXCJFeHRlcm5hbEV2ZW50OlwiICsgYXJnc1swXTtcblxuXHRcdGlmKHRoaXMuZGVidWcgPT09IHRydWUgfHwgdGhpcy5kZWJ1Zy5pbmNsdWRlcyhrZXkpKXtcblx0XHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9kaXNwYXRjaCguLi5hcmd1bWVudHMpO1xuXHR9XG59XG5cbmNsYXNzIEludGVybmFsRXZlbnRCdXMge1xuXG5cdGNvbnN0cnVjdG9yKGRlYnVnKXtcblx0XHR0aGlzLmV2ZW50cyA9IHt9O1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzID0ge307XG5cblx0XHR0aGlzLmRpc3BhdGNoID0gZGVidWcgPyB0aGlzLl9kZWJ1Z0Rpc3BhdGNoLmJpbmQodGhpcykgOiB0aGlzLl9kaXNwYXRjaC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuY2hhaW4gPSBkZWJ1ZyA/IHRoaXMuX2RlYnVnQ2hhaW4uYmluZCh0aGlzKSA6IHRoaXMuX2NoYWluLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5jb25maXJtID0gZGVidWcgPyB0aGlzLl9kZWJ1Z0NvbmZpcm0uYmluZCh0aGlzKSA6IHRoaXMuX2NvbmZpcm0uYmluZCh0aGlzKTtcblx0XHR0aGlzLmRlYnVnID0gZGVidWc7XG5cdH1cblxuXHRzdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCBjYWxsYmFjayl7XG5cdFx0aWYoIXRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0pe1xuXHRcdFx0dGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0ucHVzaChjYWxsYmFjayk7XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWQoa2V5KSl7XG5cdFx0XHR0aGlzLl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXHRzdWJzY3JpYmUoa2V5LCBjYWxsYmFjaywgcHJpb3JpdHkgPSAxMDAwMCl7XG5cdFx0aWYoIXRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuZXZlbnRzW2tleV0ucHVzaCh7Y2FsbGJhY2ssIHByaW9yaXR5fSk7XG5cblx0XHR0aGlzLmV2ZW50c1trZXldLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcblx0XHR9KTtcblxuXHRcdHRoaXMuX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIHRydWUpO1xuXHR9XG5cblx0dW5zdWJzY3JpYmUoa2V5LCBjYWxsYmFjayl7XG5cdFx0dmFyIGluZGV4O1xuXG5cdFx0aWYodGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHRpZihjYWxsYmFjayl7XG5cdFx0XHRcdGluZGV4ID0gdGhpcy5ldmVudHNba2V5XS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbS5jYWxsYmFjayA9PT0gY2FsbGJhY2s7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNhbm5vdCByZW1vdmUgZXZlbnQsIG5vIG1hdGNoaW5nIGV2ZW50IGZvdW5kOlwiLCBrZXksIGNhbGxiYWNrKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDYW5ub3QgcmVtb3ZlIGV2ZW50LCBubyBldmVudHMgc2V0IG9uOlwiLCBrZXkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIGZhbHNlKTtcblx0fVxuXG5cdHN1YnNjcmliZWQoa2V5KXtcblx0XHRyZXR1cm4gdGhpcy5ldmVudHNba2V5XSAmJiB0aGlzLmV2ZW50c1trZXldLmxlbmd0aDtcblx0fVxuXG5cdF9jaGFpbihrZXksIGFyZ3MsIGluaXRpYWxWYWx1ZSwgZmFsbGJhY2spe1xuXHRcdHZhciB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGFyZ3MpKXtcblx0XHRcdGFyZ3MgPSBbYXJnc107XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkKGtleSkpe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XS5mb3JFYWNoKChzdWJzY3JpYmVyLCBpKSA9PiB7XG5cdFx0XHRcdHZhbHVlID0gc3Vic2NyaWJlci5jYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChbdmFsdWVdKSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0eXBlb2YgZmFsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGZhbGxiYWNrKCkgOiBmYWxsYmFjaztcblx0XHR9XG5cdH1cblxuXHRfY29uZmlybShrZXksIGFyZ3Mpe1xuXHRcdHZhciBjb25maXJtZWQgPSBmYWxzZTtcblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGFyZ3MpKXtcblx0XHRcdGFyZ3MgPSBbYXJnc107XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkKGtleSkpe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XS5mb3JFYWNoKChzdWJzY3JpYmVyLCBpKSA9PiB7XG5cdFx0XHRcdGlmKHN1YnNjcmliZXIuY2FsbGJhY2suYXBwbHkodGhpcywgYXJncykpe1xuXHRcdFx0XHRcdGNvbmZpcm1lZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb25maXJtZWQ7XG5cdH1cblxuXHRfbm90aWZ5U3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgc3Vic2NyaWJlZCl7XG5cdFx0dmFyIG5vdGlmaWVycyA9IHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV07XG5cblx0XHRpZihub3RpZmllcnMpe1xuXHRcdFx0bm90aWZpZXJzLmZvckVhY2goKGNhbGxiYWNrKT0+e1xuXHRcdFx0XHRjYWxsYmFjayhzdWJzY3JpYmVkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdF9kaXNwYXRjaCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3Muc2hpZnQoKTtcblxuXHRcdGlmKHRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XS5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PiB7XG5cdFx0XHRcdHN1YnNjcmliZXIuY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRfZGVidWdEaXNwYXRjaCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3NbMF07XG5cblx0XHRhcmdzWzBdID0gXCJJbnRlcm5hbEV2ZW50OlwiICsga2V5O1xuXG5cdFx0aWYodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSB8fCB0aGlzLmRlYnVnLmluY2x1ZGVzKGtleSkpe1xuXHRcdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2Rpc3BhdGNoKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRfZGVidWdDaGFpbigpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3NbMF07XG5cblx0XHRhcmdzWzBdID0gXCJJbnRlcm5hbEV2ZW50OlwiICsga2V5O1xuXG5cdFx0aWYodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSB8fCB0aGlzLmRlYnVnLmluY2x1ZGVzKGtleSkpe1xuXHRcdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2NoYWluKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRfZGVidWdDb25maXJtKCl7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0a2V5ID0gYXJnc1swXTtcblxuXHRcdGFyZ3NbMF0gPSBcIkludGVybmFsRXZlbnQ6XCIgKyBrZXk7XG5cblx0XHRpZih0aGlzLmRlYnVnID09PSB0cnVlIHx8IHRoaXMuZGVidWcuaW5jbHVkZXMoa2V5KSl7XG5cdFx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fY29uZmlybSguLi5hcmd1bWVudHMpO1xuXHR9XG59XG5cbmNsYXNzIERlcHJlY2F0aW9uQWR2aXNvciBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0fVxuXHRcblx0X3dhcm5Vc2VyKCl7XG5cdFx0aWYodGhpcy5vcHRpb25zKFwiZGVidWdEZXByZWNhdGlvblwiKSl7XG5cdFx0XHRjb25zb2xlLndhcm4oLi4uYXJndW1lbnRzKTtcblx0XHR9XG5cdH1cblx0XG5cdGNoZWNrKG9sZE9wdGlvbiwgbmV3T3B0aW9uLCBjb252ZXJ0KXtcblx0XHR2YXIgbXNnID0gXCJcIjtcblx0XHRcblx0XHRpZih0eXBlb2YgdGhpcy5vcHRpb25zKG9sZE9wdGlvbikgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0bXNnID0gXCJEZXByZWNhdGVkIFNldHVwIE9wdGlvbiAtIFVzZSBvZiB0aGUgJWNcIiArIG9sZE9wdGlvbiArIFwiJWMgb3B0aW9uIGlzIG5vdyBkZXByZWNhdGVkXCI7XG5cdFx0XHRcblx0XHRcdGlmKG5ld09wdGlvbil7XG5cdFx0XHRcdG1zZyA9IG1zZyArIFwiLCBQbGVhc2UgdXNlIHRoZSAlY1wiICsgbmV3T3B0aW9uICsgXCIlYyBvcHRpb24gaW5zdGVhZFwiO1xuXHRcdFx0XHR0aGlzLl93YXJuVXNlcihtc2csICdmb250LXdlaWdodDogYm9sZDsnLCAnZm9udC13ZWlnaHQ6IG5vcm1hbDsnLCAnZm9udC13ZWlnaHQ6IGJvbGQ7JywgJ2ZvbnQtd2VpZ2h0OiBub3JtYWw7Jyk7XG5cblx0XHRcdFx0aWYoY29udmVydCl7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zW25ld09wdGlvbl0gPSB0aGlzLnRhYmxlLm9wdGlvbnNbb2xkT3B0aW9uXTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLl93YXJuVXNlcihtc2csICdmb250LXdlaWdodDogYm9sZDsnLCAnZm9udC13ZWlnaHQ6IG5vcm1hbDsnKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0Y2hlY2tNc2cob2xkT3B0aW9uLCBtc2cpe1xuXHRcdGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMob2xkT3B0aW9uKSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHR0aGlzLl93YXJuVXNlcihcIiVjRGVwcmVjYXRlZCBTZXR1cCBPcHRpb24gLSBVc2Ugb2YgdGhlICVjXCIgKyBvbGRPcHRpb24gKyBcIiAlYyBvcHRpb24gaXMgbm93IGRlcHJlY2F0ZWQsIFwiICsgbXNnLCAnZm9udC13ZWlnaHQ6IG5vcm1hbDsnLCAnZm9udC13ZWlnaHQ6IGJvbGQ7JywgJ2ZvbnQtd2VpZ2h0OiBub3JtYWw7Jyk7XG5cdFx0XHRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdG1zZyhtc2cpe1xuXHRcdHRoaXMuX3dhcm5Vc2VyKG1zZyk7XG5cdH1cbn1cblxuY2xhc3MgRGVwZW5kZW5jeVJlZ2lzdHJ5IGV4dGVuZHMgQ29yZUZlYXR1cmV7XHJcblx0XHJcblx0Y29uc3RydWN0b3IodGFibGUpe1xyXG5cdFx0c3VwZXIodGFibGUpO1xyXG5cdFx0XHJcblx0XHR0aGlzLmRlcHMgPSB7fTtcclxuXHRcdFxyXG5cdFx0dGhpcy5wcm9wcyA9IHtcclxuXHRcdFx0XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRpbml0aWFsaXplKCl7XHJcblx0XHR0aGlzLmRlcHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMoXCJkZXBlbmRlbmNpZXNcIikpO1xyXG5cdH1cclxuXHRcclxuXHRsb29rdXAoa2V5LCBwcm9wLCBzaWxlbnQpe1xyXG5cdFx0aWYoQXJyYXkuaXNBcnJheShrZXkpKXtcclxuXHRcdFx0Zm9yIChjb25zdCBpdGVtIG9mIGtleSkge1xyXG5cdFx0XHRcdHZhciBtYXRjaCA9IHRoaXMubG9va3VwKGl0ZW0sIHByb3AsIHRydWUpO1xyXG5cclxuXHRcdFx0XHRpZihtYXRjaCl7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKG1hdGNoKXtcclxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XHJcblx0XHRcdH1lbHNlIHtcclxuXHRcdFx0XHR0aGlzLmVycm9yKGtleSk7XHJcblx0XHRcdH1cclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0aWYocHJvcCl7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMubG9va3VwUHJvcChrZXksIHByb3AsIHNpbGVudCk7XHJcblx0XHRcdH1lbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5sb29rdXBLZXkoa2V5LCBzaWxlbnQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGxvb2t1cFByb3Aoa2V5LCBwcm9wLCBzaWxlbnQpe1xyXG5cdFx0dmFyIGRlcGVuZGVuY3k7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMucHJvcHNba2V5XSAmJiB0aGlzLnByb3BzW2tleV1bcHJvcF0pe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9wc1trZXldW3Byb3BdO1xyXG5cdFx0fWVsc2Uge1xyXG5cdFx0XHRkZXBlbmRlbmN5ID0gdGhpcy5sb29rdXBLZXkoa2V5LCBzaWxlbnQpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoZGVwZW5kZW5jeSl7XHJcblx0XHRcdFx0aWYoIXRoaXMucHJvcHNba2V5XSl7XHJcblx0XHRcdFx0XHR0aGlzLnByb3BzW2tleV0gPSB7fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dGhpcy5wcm9wc1trZXldW3Byb3BdID0gZGVwZW5kZW5jeVtwcm9wXSB8fCBkZXBlbmRlbmN5O1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnByb3BzW2tleV1bcHJvcF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0bG9va3VwS2V5KGtleSwgc2lsZW50KXtcclxuXHRcdHZhciBkZXBlbmRlbmN5O1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLmRlcHNba2V5XSl7XHJcblx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmRlcHNba2V5XTtcclxuXHRcdH1lbHNlIGlmKHdpbmRvd1trZXldKXtcclxuXHRcdFx0dGhpcy5kZXBzW2tleV0gPSB3aW5kb3dba2V5XTtcclxuXHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMuZGVwc1trZXldO1xyXG5cdFx0fWVsc2Uge1xyXG5cdFx0XHRpZighc2lsZW50KXtcclxuXHRcdFx0XHR0aGlzLmVycm9yKGtleSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cmV0dXJuIGRlcGVuZGVuY3k7XHJcblx0fVxyXG5cclxuXHRlcnJvcihrZXkpe1xyXG5cdFx0Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIGRlcGVuZGVuY3lcIiwga2V5LCBcIlBsZWFzZSBjaGVjayBkb2N1bWVudGF0aW9uIGFuZCBlbnN1cmUgeW91IGhhdmUgaW1wb3J0ZWQgdGhlIHJlcXVpcmVkIGxpYnJhcnkgaW50byB5b3VyIHByb2plY3RcIik7XHJcblx0fVxyXG59XG5cbi8vcmVzaXplIGNvbHVtbnMgdG8gZml0IGRhdGEgdGhleSBjb250YWluXG5mdW5jdGlvbiBmaXREYXRhKGNvbHVtbnMsIGZvcmNlZCl7XG5cdGlmKGZvcmNlZCl7XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlbmRlcmVyLnJlaW5pdGlhbGl6ZUNvbHVtbldpZHRocyhjb2x1bW5zKTtcblx0fVxuXHRcblx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJyZXNwb25zaXZlTGF5b3V0XCIsIHRydWUpKXtcblx0XHR0aGlzLnRhYmxlLm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC51cGRhdGUoKTtcblx0fVxufVxuXG4vL3Jlc2l6ZSBjb2x1bW5zIHRvIGZpdCBkYXRhIHRoZXkgY29udGFpbiBhbmQgc3RyZXRjaCByb3cgdG8gZmlsbCB0YWJsZSwgYWxzbyB1c2VkIGZvciBmaXREYXRhVGFibGVcbmZ1bmN0aW9uIGZpdERhdGFHZW5lcmFsKGNvbHVtbnMsIGZvcmNlZCl7XG5cdGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdGNvbHVtbi5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHR9KTtcblxuXHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dCAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcInJlc3BvbnNpdmVMYXlvdXRcIiwgdHJ1ZSkpe1xuXHRcdHRoaXMudGFibGUubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0LnVwZGF0ZSgpO1xuXHR9XG59XG5cbi8vcmVzaXplIGNvbHVtbnMgdG8gZml0IGRhdGEgdGhlIGNvbnRhaW4gYW5kIHN0cmV0Y2ggbGFzdCBjb2x1bW4gdG8gZmlsbCB0YWJsZVxuZnVuY3Rpb24gZml0RGF0YVN0cmV0Y2goY29sdW1ucywgZm9yY2VkKXtcblx0dmFyIGNvbHNXaWR0aCA9IDAsXG5cdHRhYmxlV2lkdGggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aCxcblx0Z2FwID0gMCxcblx0bGFzdENvbCA9IGZhbHNlO1xuXG5cdGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uLCBpKSA9PiB7XG5cdFx0aWYoIWNvbHVtbi53aWR0aEZpeGVkKXtcblx0XHRcdGNvbHVtbi5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0ID8gY29sdW1uLm1vZHVsZXMucmVzcG9uc2l2ZS52aXNpYmxlIDogY29sdW1uLnZpc2libGUpe1xuXHRcdFx0bGFzdENvbCA9IGNvbHVtbjtcblx0XHR9XG5cblx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRjb2xzV2lkdGggKz0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZihsYXN0Q29sKXtcblx0XHRnYXAgPSB0YWJsZVdpZHRoIC0gY29sc1dpZHRoICsgbGFzdENvbC5nZXRXaWR0aCgpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJyZXNwb25zaXZlTGF5b3V0XCIsIHRydWUpKXtcblx0XHRcdGxhc3RDb2wuc2V0V2lkdGgoMCk7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC51cGRhdGUoKTtcblx0XHR9XG5cblx0XHRpZihnYXAgPiAwKXtcblx0XHRcdGxhc3RDb2wuc2V0V2lkdGgoZ2FwKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRsYXN0Q29sLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0fVxuXHR9ZWxzZSB7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJyZXNwb25zaXZlTGF5b3V0XCIsIHRydWUpKXtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0LnVwZGF0ZSgpO1xuXHRcdH1cblx0fVxufVxuXG4vL3Jlc2l6ZSBjb2x1bW5zIHRvIGZpdFxuZnVuY3Rpb24gZml0Q29sdW1ucyhjb2x1bW5zLCBmb3JjZWQpe1xuXHR2YXIgdG90YWxXaWR0aCA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoOyAvL3RhYmxlIGVsZW1lbnQgd2lkdGhcblx0dmFyIGZpeGVkV2lkdGggPSAwOyAvL3RvdGFsIHdpZHRoIG9mIGNvbHVtbnMgd2l0aCBhIGRlZmluZWQgd2lkdGhcblx0dmFyIGZsZXhXaWR0aCA9IDA7IC8vdG90YWwgd2lkdGggYXZhaWxhYmxlIHRvIGZsZXhpYmxlIGNvbHVtbnNcblx0dmFyIGZsZXhHcm93VW5pdHMgPSAwOyAvL3RvdGFsIG51bWJlciBvZiB3aWR0aEdyb3cgYmxvY2tzIGFjcm9zcyBhbGwgY29sdW1uc1xuXHR2YXIgZmxleENvbFdpZHRoID0gMDsgLy9kZXNpcmVkIHdpZHRoIG9mIGZsZXhpYmxlIGNvbHVtbnNcblx0dmFyIGZsZXhDb2x1bW5zID0gW107IC8vYXJyYXkgb2YgZmxleGlibGUgd2lkdGggY29sdW1uc1xuXHR2YXIgZml4ZWRTaHJpbmtDb2x1bW5zID0gW107IC8vYXJyYXkgb2YgZml4ZWQgd2lkdGggY29sdW1ucyB0aGF0IGNhbiBzaHJpbmtcblx0dmFyIGZsZXhTaHJpbmtVbml0cyA9IDA7IC8vdG90YWwgbnVtYmVyIG9mIHdpZHRoU2hyaW5rIGJsb2NrcyBhY3Jvc3MgYWxsIGNvbHVtbnNcblx0dmFyIG92ZXJmbG93V2lkdGggPSAwOyAvL2hvcml6b250YWwgb3ZlcmZsb3cgd2lkdGhcblx0dmFyIGdhcEZpbGwgPSAwOyAvL251bWJlciBvZiBwaXhlbHMgdG8gYmUgYWRkZWQgdG8gZmluYWwgY29sdW1uIHRvIGNsb3NlIGFuZCBoYWxmIHBpeGVsIGdhcHNcblxuXHRmdW5jdGlvbiBjYWxjV2lkdGgod2lkdGgpe1xuXHRcdHZhciBjb2xXaWR0aDtcblxuXHRcdGlmKHR5cGVvZih3aWR0aCkgPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRpZih3aWR0aC5pbmRleE9mKFwiJVwiKSA+IC0xKXtcblx0XHRcdFx0Y29sV2lkdGggPSAodG90YWxXaWR0aCAvIDEwMCkgKiBwYXJzZUludCh3aWR0aCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbFdpZHRoID0gcGFyc2VJbnQod2lkdGgpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbFdpZHRoID0gd2lkdGg7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbFdpZHRoO1xuXHR9XG5cblx0Ly9lbnN1cmUgY29sdW1ucyByZXNpemUgdG8gdGFrZSB1cCB0aGUgY29ycmVjdCBhbW91bnQgb2Ygc3BhY2Vcblx0ZnVuY3Rpb24gc2NhbGVDb2x1bW5zKGNvbHVtbnMsIGZyZWVTcGFjZSwgY29sV2lkdGgsIHNocmlua0NvbHMpe1xuXHRcdHZhciBvdmVyc2l6ZUNvbHMgPSBbXSxcblx0XHRvdmVyc2l6ZVNwYWNlID0gMCxcblx0XHRyZW1haW5pbmdTcGFjZSA9IDAsXG5cdFx0bmV4dENvbFdpZHRoID0gMCxcblx0XHRyZW1haW5pbmdGbGV4R3Jvd1VuaXRzID0gZmxleEdyb3dVbml0cyxcblx0XHRnYXAgPSAwLFxuXHRcdGNoYW5nZVVuaXRzID0gMCxcblx0XHR1bmRlcnNpemVDb2xzID0gW107XG5cblx0XHRmdW5jdGlvbiBjYWxjR3Jvdyhjb2wpe1xuXHRcdFx0cmV0dXJuIChjb2xXaWR0aCAqIChjb2wuY29sdW1uLmRlZmluaXRpb24ud2lkdGhHcm93IHx8IDEpKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjYWxjU2hyaW5rKGNvbCl7XG5cdFx0XHRyZXR1cm4gIChjYWxjV2lkdGgoY29sLndpZHRoKSAtIChjb2xXaWR0aCAqIChjb2wuY29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbmsgfHwgMCkpKTtcblx0XHR9XG5cblx0XHRjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sLCBpKXtcblx0XHRcdHZhciB3aWR0aCA9IHNocmlua0NvbHMgPyBjYWxjU2hyaW5rKGNvbCkgOiBjYWxjR3Jvdyhjb2wpO1xuXHRcdFx0aWYoY29sLmNvbHVtbi5taW5XaWR0aCA+PSB3aWR0aCl7XG5cdFx0XHRcdG92ZXJzaXplQ29scy5wdXNoKGNvbCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKGNvbC5jb2x1bW4ubWF4V2lkdGggJiYgY29sLmNvbHVtbi5tYXhXaWR0aCA8IHdpZHRoKXtcblx0XHRcdFx0XHRjb2wud2lkdGggPSBjb2wuY29sdW1uLm1heFdpZHRoO1xuXHRcdFx0XHRcdGZyZWVTcGFjZSAtPSBjb2wuY29sdW1uLm1heFdpZHRoO1xuXG5cdFx0XHRcdFx0cmVtYWluaW5nRmxleEdyb3dVbml0cyAtPSBzaHJpbmtDb2xzID8gKGNvbC5jb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluayB8fCAxKSA6IChjb2wuY29sdW1uLmRlZmluaXRpb24ud2lkdGhHcm93IHx8IDEpO1xuXG5cdFx0XHRcdFx0aWYocmVtYWluaW5nRmxleEdyb3dVbml0cyl7XG5cdFx0XHRcdFx0XHRjb2xXaWR0aCA9IE1hdGguZmxvb3IoZnJlZVNwYWNlL3JlbWFpbmluZ0ZsZXhHcm93VW5pdHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHVuZGVyc2l6ZUNvbHMucHVzaChjb2wpO1xuXHRcdFx0XHRcdGNoYW5nZVVuaXRzICs9IHNocmlua0NvbHMgPyAoY29sLmNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rIHx8IDEpIDogKGNvbC5jb2x1bW4uZGVmaW5pdGlvbi53aWR0aEdyb3cgfHwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmKG92ZXJzaXplQ29scy5sZW5ndGgpe1xuXHRcdFx0b3ZlcnNpemVDb2xzLmZvckVhY2goZnVuY3Rpb24oY29sKXtcblx0XHRcdFx0b3ZlcnNpemVTcGFjZSArPSBzaHJpbmtDb2xzID8gIGNvbC53aWR0aCAtIGNvbC5jb2x1bW4ubWluV2lkdGggOiBjb2wuY29sdW1uLm1pbldpZHRoO1xuXHRcdFx0XHRjb2wud2lkdGggPSBjb2wuY29sdW1uLm1pbldpZHRoO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJlbWFpbmluZ1NwYWNlID0gZnJlZVNwYWNlIC0gb3ZlcnNpemVTcGFjZTtcblxuXHRcdFx0bmV4dENvbFdpZHRoID0gY2hhbmdlVW5pdHMgPyBNYXRoLmZsb29yKHJlbWFpbmluZ1NwYWNlL2NoYW5nZVVuaXRzKSA6IHJlbWFpbmluZ1NwYWNlO1xuXG5cdFx0XHRnYXAgPSBzY2FsZUNvbHVtbnModW5kZXJzaXplQ29scywgcmVtYWluaW5nU3BhY2UsIG5leHRDb2xXaWR0aCwgc2hyaW5rQ29scyk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Z2FwID0gY2hhbmdlVW5pdHMgPyBmcmVlU3BhY2UgLSAoTWF0aC5mbG9vcihmcmVlU3BhY2UvY2hhbmdlVW5pdHMpICogY2hhbmdlVW5pdHMpIDogZnJlZVNwYWNlO1xuXG5cdFx0XHR1bmRlcnNpemVDb2xzLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0Y29sdW1uLndpZHRoID0gc2hyaW5rQ29scyA/IGNhbGNTaHJpbmsoY29sdW1uKSA6IGNhbGNHcm93KGNvbHVtbik7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZ2FwO1xuXHR9XG5cblx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJyZXNwb25zaXZlTGF5b3V0XCIsIHRydWUpKXtcblx0XHR0aGlzLnRhYmxlLm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC51cGRhdGUoKTtcblx0fVxuXG5cdC8vYWRqdXN0IGZvciB2ZXJ0aWNhbCBzY3JvbGxiYXIgaWYgcHJlc2VudFxuXHRpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxIZWlnaHQgPiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRIZWlnaHQpe1xuXHRcdHRvdGFsV2lkdGggLT0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aDtcblx0fVxuXG5cdGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdHZhciB3aWR0aCwgbWluV2lkdGgsIGNvbFdpZHRoO1xuXG5cdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXG5cdFx0XHR3aWR0aCA9IGNvbHVtbi5kZWZpbml0aW9uLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSAgcGFyc2VJbnQoY29sdW1uLm1pbldpZHRoKTtcblxuXHRcdFx0aWYod2lkdGgpe1xuXG5cdFx0XHRcdGNvbFdpZHRoID0gY2FsY1dpZHRoKHdpZHRoKTtcblxuXHRcdFx0XHRmaXhlZFdpZHRoICs9IGNvbFdpZHRoID4gbWluV2lkdGggPyBjb2xXaWR0aCA6IG1pbldpZHRoO1xuXG5cdFx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rKXtcblx0XHRcdFx0XHRmaXhlZFNocmlua0NvbHVtbnMucHVzaCh7XG5cdFx0XHRcdFx0XHRjb2x1bW46Y29sdW1uLFxuXHRcdFx0XHRcdFx0d2lkdGg6Y29sV2lkdGggPiBtaW5XaWR0aCA/IGNvbFdpZHRoIDogbWluV2lkdGhcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRmbGV4U2hyaW5rVW5pdHMgKz0gY29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbms7XG5cdFx0XHRcdH1cblxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRmbGV4Q29sdW1ucy5wdXNoKHtcblx0XHRcdFx0XHRjb2x1bW46Y29sdW1uLFxuXHRcdFx0XHRcdHdpZHRoOjAsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmbGV4R3Jvd1VuaXRzICs9IGNvbHVtbi5kZWZpbml0aW9uLndpZHRoR3JvdyB8fCAxO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly9jYWxjdWxhdGUgYXZhaWxhYmxlIHNwYWNlXG5cdGZsZXhXaWR0aCA9IHRvdGFsV2lkdGggLSBmaXhlZFdpZHRoO1xuXG5cdC8vY2FsY3VsYXRlIGNvcnJlY3QgY29sdW1uIHNpemVcblx0ZmxleENvbFdpZHRoID0gTWF0aC5mbG9vcihmbGV4V2lkdGggLyBmbGV4R3Jvd1VuaXRzKTtcblxuXHQvL2dlbmVyYXRlIGNvbHVtbiB3aWR0aHNcblx0Z2FwRmlsbCA9IHNjYWxlQ29sdW1ucyhmbGV4Q29sdW1ucywgZmxleFdpZHRoLCBmbGV4Q29sV2lkdGgsIGZhbHNlKTtcblxuXHQvL2luY3JlYXNlIHdpZHRoIG9mIGxhc3QgY29sdW1uIHRvIGFjY291bnQgZm9yIHJvdW5kaW5nIGVycm9yc1xuXHRpZihmbGV4Q29sdW1ucy5sZW5ndGggJiYgZ2FwRmlsbCA+IDApe1xuXHRcdGZsZXhDb2x1bW5zW2ZsZXhDb2x1bW5zLmxlbmd0aC0xXS53aWR0aCArPSBnYXBGaWxsO1xuXHR9XG5cblx0Ly9jYWxjdWxhdGUgc3BhY2UgZm9yIGNvbHVtbnMgdG8gYmUgc2hydW5rIGludG9cblx0ZmxleENvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2wpe1xuXHRcdGZsZXhXaWR0aCAtPSBjb2wud2lkdGg7XG5cdH0pO1xuXG5cdG92ZXJmbG93V2lkdGggPSBNYXRoLmFicyhnYXBGaWxsKSArIGZsZXhXaWR0aDtcblxuXHQvL3NocmluayBvdmVyc2l6ZSBjb2x1bW5zIGlmIHRoZXJlIGlzIG5vIGF2YWlsYWJsZSBzcGFjZVxuXHRpZihvdmVyZmxvd1dpZHRoID4gMCAmJiBmbGV4U2hyaW5rVW5pdHMpe1xuXHRcdGdhcEZpbGwgPSBzY2FsZUNvbHVtbnMoZml4ZWRTaHJpbmtDb2x1bW5zLCBvdmVyZmxvd1dpZHRoLCBNYXRoLmZsb29yKG92ZXJmbG93V2lkdGggLyBmbGV4U2hyaW5rVW5pdHMpLCB0cnVlKTtcblx0fVxuXG5cdC8vZGVjcmVhc2Ugd2lkdGggb2YgbGFzdCBjb2x1bW4gdG8gYWNjb3VudCBmb3Igcm91bmRpbmcgZXJyb3JzXG5cdGlmKGdhcEZpbGwgJiYgZml4ZWRTaHJpbmtDb2x1bW5zLmxlbmd0aCl7XG5cdFx0Zml4ZWRTaHJpbmtDb2x1bW5zW2ZpeGVkU2hyaW5rQ29sdW1ucy5sZW5ndGgtMV0ud2lkdGggLT0gZ2FwRmlsbDtcblx0fVxuXG5cdGZsZXhDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sKXtcblx0XHRjb2wuY29sdW1uLnNldFdpZHRoKGNvbC53aWR0aCk7XG5cdH0pO1xuXG5cdGZpeGVkU2hyaW5rQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCl7XG5cdFx0Y29sLmNvbHVtbi5zZXRXaWR0aChjb2wud2lkdGgpO1xuXHR9KTtcbn1cblxudmFyIGRlZmF1bHRNb2RlcyA9IHtcblx0Zml0RGF0YTpmaXREYXRhLFxuXHRmaXREYXRhRmlsbDpmaXREYXRhR2VuZXJhbCxcblx0Zml0RGF0YVRhYmxlOmZpdERhdGFHZW5lcmFsLFxuXHRmaXREYXRhU3RyZXRjaDpmaXREYXRhU3RyZXRjaCxcblx0Zml0Q29sdW1uczpmaXRDb2x1bW5zICxcbn07XG5cbmNsYXNzIExheW91dCBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwibGF5b3V0XCI7XG5cblx0Ly9sb2FkIGRlZmF1bHRzXG5cdHN0YXRpYyBtb2RlcyA9IGRlZmF1bHRNb2RlcztcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUsIFwibGF5b3V0XCIpO1xuXG5cdFx0dGhpcy5tb2RlID0gbnVsbDtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImxheW91dFwiLCBcImZpdERhdGFcIik7IC8vbGF5b3V0IHR5cGVcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJsYXlvdXRDb2x1bW5zT25OZXdEYXRhXCIsIGZhbHNlKTsgLy91cGRhdGUgY29sdW1uIHdpZHRocyBvbiBzZXREYXRhXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwid2lkdGhHcm93XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ3aWR0aFNocmlua1wiKTtcblx0fVxuXG5cdC8vaW5pdGlhbGl6ZSBsYXlvdXQgc3lzdGVtXG5cdGluaXRpYWxpemUoKXtcblx0XHR2YXIgbGF5b3V0ID0gdGhpcy50YWJsZS5vcHRpb25zLmxheW91dDtcblxuXHRcdGlmKExheW91dC5tb2Rlc1tsYXlvdXRdKXtcblx0XHRcdHRoaXMubW9kZSA9IGxheW91dDtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJMYXlvdXQgRXJyb3IgLSBpbnZhbGlkIG1vZGUgc2V0LCBkZWZhdWx0aW5nIHRvICdmaXREYXRhJyA6IFwiICsgbGF5b3V0KTtcblx0XHRcdHRoaXMubW9kZSA9ICdmaXREYXRhJztcblx0XHR9XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGFidWxhdG9yLWxheW91dFwiLCB0aGlzLm1vZGUpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLndpZHRoR3Jvdyl7XG5cdFx0XHRjb2x1bW4uZGVmaW5pdGlvbi53aWR0aEdyb3cgPSBOdW1iZXIoY29sdW1uLmRlZmluaXRpb24ud2lkdGhHcm93KTtcblx0XHR9XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbmspe1xuXHRcdFx0Y29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbmsgPSBOdW1iZXIoY29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbmspO1xuXHRcdH1cblx0fVxuXG5cdGdldE1vZGUoKXtcblx0XHRyZXR1cm4gdGhpcy5tb2RlO1xuXHR9XG5cblx0Ly90cmlnZ2VyIHRhYmxlIGxheW91dFxuXHRsYXlvdXQoZGF0YUNoYW5nZWQpe1xuXG5cdFx0dmFyIHZhcmlhYmxlSGVpZ2h0ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZpbmQoKGNvbHVtbikgPT4gY29sdW1uLmRlZmluaXRpb24udmFyaWFibGVIZWlnaHQgfHwgY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyID09PSBcInRleHRhcmVhXCIpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJsYXlvdXQtcmVmcmVzaGluZ1wiKTtcblx0XHRMYXlvdXQubW9kZXNbdGhpcy5tb2RlXS5jYWxsKHRoaXMsIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleCwgZGF0YUNoYW5nZWQpO1xuXG5cdFx0aWYodmFyaWFibGVIZWlnaHQpe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm5vcm1hbGl6ZUhlaWdodCh0cnVlKTtcblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwibGF5b3V0LXJlZnJlc2hlZFwiKTtcblx0fVxufVxuXG52YXIgZGVmYXVsdExhbmdzID0ge1xuXHRcImRlZmF1bHRcIjp7IC8vaG9sZCBkZWZhdWx0IGxvY2FsZSB0ZXh0XG5cdFx0XCJncm91cHNcIjp7XG5cdFx0XHRcIml0ZW1cIjpcIml0ZW1cIixcblx0XHRcdFwiaXRlbXNcIjpcIml0ZW1zXCIsXG5cdFx0fSxcblx0XHRcImNvbHVtbnNcIjp7XG5cdFx0fSxcblx0XHRcImRhdGFcIjp7XG5cdFx0XHRcImxvYWRpbmdcIjpcIkxvYWRpbmdcIixcblx0XHRcdFwiZXJyb3JcIjpcIkVycm9yXCIsXG5cdFx0fSxcblx0XHRcInBhZ2luYXRpb25cIjp7XG5cdFx0XHRcInBhZ2Vfc2l6ZVwiOlwiUGFnZSBTaXplXCIsXG5cdFx0XHRcInBhZ2VfdGl0bGVcIjpcIlNob3cgUGFnZVwiLFxuXHRcdFx0XCJmaXJzdFwiOlwiRmlyc3RcIixcblx0XHRcdFwiZmlyc3RfdGl0bGVcIjpcIkZpcnN0IFBhZ2VcIixcblx0XHRcdFwibGFzdFwiOlwiTGFzdFwiLFxuXHRcdFx0XCJsYXN0X3RpdGxlXCI6XCJMYXN0IFBhZ2VcIixcblx0XHRcdFwicHJldlwiOlwiUHJldlwiLFxuXHRcdFx0XCJwcmV2X3RpdGxlXCI6XCJQcmV2IFBhZ2VcIixcblx0XHRcdFwibmV4dFwiOlwiTmV4dFwiLFxuXHRcdFx0XCJuZXh0X3RpdGxlXCI6XCJOZXh0IFBhZ2VcIixcblx0XHRcdFwiYWxsXCI6XCJBbGxcIixcblx0XHRcdFwiY291bnRlclwiOntcblx0XHRcdFx0XCJzaG93aW5nXCI6IFwiU2hvd2luZ1wiLFxuXHRcdFx0XHRcIm9mXCI6IFwib2ZcIixcblx0XHRcdFx0XCJyb3dzXCI6IFwicm93c1wiLFxuXHRcdFx0XHRcInBhZ2VzXCI6IFwicGFnZXNcIixcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiaGVhZGVyRmlsdGVyc1wiOntcblx0XHRcdFwiZGVmYXVsdFwiOlwiZmlsdGVyIGNvbHVtbi4uLlwiLFxuXHRcdFx0XCJjb2x1bW5zXCI6e31cblx0XHR9XG5cdH0sXG59O1xuXG5jbGFzcyBMb2NhbGl6ZSBleHRlbmRzIE1vZHVsZXtcblxuXHRzdGF0aWMgbW9kdWxlTmFtZSA9IFwibG9jYWxpemVcIjtcblxuXHQvL2xvYWQgZGVmYXVsdHNcblx0c3RhdGljIGxhbmdzID0gZGVmYXVsdExhbmdzO1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmxvY2FsZSA9IFwiZGVmYXVsdFwiOyAvL2N1cnJlbnQgbG9jYWxlXG5cdFx0dGhpcy5sYW5nID0gZmFsc2U7IC8vY3VycmVudCBsYW5ndWFnZVxuXHRcdHRoaXMuYmluZGluZ3MgPSB7fTsgLy91cGRhdGUgZXZlbnRzIHRvIGNhbGwgd2hlbiBsb2NhbGUgaXMgY2hhbmdlZFxuXHRcdHRoaXMubGFuZ0xpc3QgPSB7fTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImxvY2FsZVwiLCBmYWxzZSk7IC8vY3VycmVudCBzeXN0ZW0gbGFuZ3VhZ2Vcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJsYW5nc1wiLCB7fSk7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5sYW5nTGlzdCA9IEhlbHBlcnMuZGVlcENsb25lKExvY2FsaXplLmxhbmdzKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5EZWZhdWx0cy5oZWFkZXJGaWx0ZXJQbGFjZWhvbGRlciAhPT0gZmFsc2Upe1xuXHRcdFx0dGhpcy5zZXRIZWFkZXJGaWx0ZXJQbGFjZWhvbGRlcih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uRGVmYXVsdHMuaGVhZGVyRmlsdGVyUGxhY2Vob2xkZXIpO1xuXHRcdH1cblxuXHRcdGZvcihsZXQgbG9jYWxlIGluIHRoaXMudGFibGUub3B0aW9ucy5sYW5ncyl7XG5cdFx0XHR0aGlzLmluc3RhbGxMYW5nKGxvY2FsZSwgdGhpcy50YWJsZS5vcHRpb25zLmxhbmdzW2xvY2FsZV0pO1xuXHRcdH1cblxuXHRcdHRoaXMuc2V0TG9jYWxlKHRoaXMudGFibGUub3B0aW9ucy5sb2NhbGUpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRMb2NhbGVcIiwgdGhpcy5zZXRMb2NhbGUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRMb2NhbGVcIiwgdGhpcy5nZXRMb2NhbGUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRMYW5nXCIsIHRoaXMuZ2V0TGFuZy5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdC8vc2V0IGhlYWRlciBwbGFjZWhvbGRlclxuXHRzZXRIZWFkZXJGaWx0ZXJQbGFjZWhvbGRlcihwbGFjZWhvbGRlcil7XG5cdFx0dGhpcy5sYW5nTGlzdC5kZWZhdWx0LmhlYWRlckZpbHRlcnMuZGVmYXVsdCA9IHBsYWNlaG9sZGVyO1xuXHR9XG5cblx0Ly9zZXR1cCBhIGxhbmcgZGVzY3JpcHRpb24gb2JqZWN0XG5cdGluc3RhbGxMYW5nKGxvY2FsZSwgbGFuZyl7XG5cdFx0aWYodGhpcy5sYW5nTGlzdFtsb2NhbGVdKXtcblx0XHRcdHRoaXMuX3NldExhbmdQcm9wKHRoaXMubGFuZ0xpc3RbbG9jYWxlXSwgbGFuZyk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5sYW5nTGlzdFtsb2NhbGVdID0gbGFuZztcblx0XHR9XG5cdH1cblxuXHRfc2V0TGFuZ1Byb3AobGFuZywgdmFsdWVzKXtcblx0XHRmb3IobGV0IGtleSBpbiB2YWx1ZXMpe1xuXHRcdFx0aWYobGFuZ1trZXldICYmIHR5cGVvZiBsYW5nW2tleV0gPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdHRoaXMuX3NldExhbmdQcm9wKGxhbmdba2V5XSwgdmFsdWVzW2tleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRsYW5nW2tleV0gPSB2YWx1ZXNba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL3NldCBjdXJyZW50IGxvY2FsZVxuXHRzZXRMb2NhbGUoZGVzaXJlZExvY2FsZSl7XG5cdFx0ZGVzaXJlZExvY2FsZSA9IGRlc2lyZWRMb2NhbGUgfHwgXCJkZWZhdWx0XCI7XG5cblx0XHQvL2ZpbGwgaW4gYW55IG1hdGNoaW5nIGxhbmd1YWdlIHZhbHVlc1xuXHRcdGZ1bmN0aW9uIHRyYXZlcnNlTGFuZyh0cmFucywgcGF0aCl7XG5cdFx0XHRmb3IodmFyIHByb3AgaW4gdHJhbnMpe1xuXHRcdFx0XHRpZih0eXBlb2YgdHJhbnNbcHJvcF0gPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdFx0aWYoIXBhdGhbcHJvcF0pe1xuXHRcdFx0XHRcdFx0cGF0aFtwcm9wXSA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0cmF2ZXJzZUxhbmcodHJhbnNbcHJvcF0sIHBhdGhbcHJvcF0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cGF0aFtwcm9wXSA9IHRyYW5zW3Byb3BdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly9kZXRlcm1pbmluZyBjb3JyZWN0IGxvY2FsZSB0byBsb2FkXG5cdFx0aWYoZGVzaXJlZExvY2FsZSA9PT0gdHJ1ZSAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2Upe1xuXHRcdFx0Ly9nZXQgbG9jYWwgZnJvbSBzeXN0ZW1cblx0XHRcdGRlc2lyZWRMb2NhbGUgPSBuYXZpZ2F0b3IubGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcblx0XHR9XG5cblx0XHRpZihkZXNpcmVkTG9jYWxlKXtcblx0XHRcdC8vaWYgbG9jYWxlIGlzIG5vdCBzZXQsIGNoZWNrIGZvciBtYXRjaGluZyB0b3AgbGV2ZWwgbG9jYWxlIGVsc2UgdXNlIGRlZmF1bHRcblx0XHRcdGlmKCF0aGlzLmxhbmdMaXN0W2Rlc2lyZWRMb2NhbGVdKXtcblx0XHRcdFx0bGV0IHByZWZpeCA9IGRlc2lyZWRMb2NhbGUuc3BsaXQoXCItXCIpWzBdO1xuXG5cdFx0XHRcdGlmKHRoaXMubGFuZ0xpc3RbcHJlZml4XSl7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTG9jYWxpemF0aW9uIEVycm9yIC0gRXhhY3QgbWF0Y2hpbmcgbG9jYWxlIG5vdCBmb3VuZCwgdXNpbmcgY2xvc2VzdCBtYXRjaDogXCIsIGRlc2lyZWRMb2NhbGUsIHByZWZpeCk7XG5cdFx0XHRcdFx0ZGVzaXJlZExvY2FsZSA9IHByZWZpeDtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkxvY2FsaXphdGlvbiBFcnJvciAtIE1hdGNoaW5nIGxvY2FsZSBub3QgZm91bmQsIHVzaW5nIGRlZmF1bHQ6IFwiLCBkZXNpcmVkTG9jYWxlKTtcblx0XHRcdFx0XHRkZXNpcmVkTG9jYWxlID0gXCJkZWZhdWx0XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmxvY2FsZSA9IGRlc2lyZWRMb2NhbGU7XG5cblx0XHQvL2xvYWQgZGVmYXVsdCBsYW5nIHRlbXBsYXRlXG5cdFx0dGhpcy5sYW5nID0gSGVscGVycy5kZWVwQ2xvbmUodGhpcy5sYW5nTGlzdC5kZWZhdWx0IHx8IHt9KTtcblxuXHRcdGlmKGRlc2lyZWRMb2NhbGUgIT0gXCJkZWZhdWx0XCIpe1xuXHRcdFx0dHJhdmVyc2VMYW5nKHRoaXMubGFuZ0xpc3RbZGVzaXJlZExvY2FsZV0sIHRoaXMubGFuZyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibG9jYWxpemVkXCIsIHRoaXMubG9jYWxlLCB0aGlzLmxhbmcpO1xuXG5cdFx0dGhpcy5fZXhlY3V0ZUJpbmRpbmdzKCk7XG5cdH1cblxuXHQvL2dldCBjdXJyZW50IGxvY2FsZVxuXHRnZXRMb2NhbGUobG9jYWxlKXtcblx0XHRyZXR1cm4gdGhpcy5sb2NhbGU7XG5cdH1cblxuXHQvL2dldCBsYW5nIG9iamVjdCBmb3IgZ2l2ZW4gbG9jYWwgb3IgY3VycmVudCBpZiBub25lIHByb3ZpZGVkXG5cdGdldExhbmcobG9jYWxlKXtcblx0XHRyZXR1cm4gbG9jYWxlID8gdGhpcy5sYW5nTGlzdFtsb2NhbGVdIDogdGhpcy5sYW5nO1xuXHR9XG5cblx0Ly9nZXQgdGV4dCBmb3IgY3VycmVudCBsb2NhbGVcblx0Z2V0VGV4dChwYXRoLCB2YWx1ZSl7XG5cdFx0dmFyIGZpbGxQYXRoID0gdmFsdWUgPyBwYXRoICsgXCJ8XCIgKyB2YWx1ZSA6IHBhdGgsXG5cdFx0cGF0aEFycmF5ID0gZmlsbFBhdGguc3BsaXQoXCJ8XCIpLFxuXHRcdHRleHQgPSB0aGlzLl9nZXRMYW5nRWxlbWVudChwYXRoQXJyYXksIHRoaXMubG9jYWxlKTtcblxuXHRcdC8vIGlmKHRleHQgPT09IGZhbHNlKXtcblx0XHQvLyBcdGNvbnNvbGUud2FybihcIkxvY2FsaXphdGlvbiBFcnJvciAtIE1hdGNoaW5nIGxvY2FsaXplZCB0ZXh0IG5vdCBmb3VuZCBmb3IgZ2l2ZW4gcGF0aDogXCIsIHBhdGgpO1xuXHRcdC8vIH1cblxuXHRcdHJldHVybiB0ZXh0IHx8IFwiXCI7XG5cdH1cblxuXHQvL3RyYXZlcnNlIGxhbmdzIG9iamVjdCBhbmQgZmluZCBsb2NhbGl6ZWQgY29weVxuXHRfZ2V0TGFuZ0VsZW1lbnQocGF0aCwgbG9jYWxlKXtcblx0XHR2YXIgcm9vdCA9IHRoaXMubGFuZztcblxuXHRcdHBhdGguZm9yRWFjaChmdW5jdGlvbihsZXZlbCl7XG5cdFx0XHR2YXIgcm9vdFBhdGg7XG5cblx0XHRcdGlmKHJvb3Qpe1xuXHRcdFx0XHRyb290UGF0aCA9IHJvb3RbbGV2ZWxdO1xuXG5cdFx0XHRcdGlmKHR5cGVvZiByb290UGF0aCAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRyb290ID0gcm9vdFBhdGg7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyb290ID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiByb290O1xuXHR9XG5cblx0Ly9zZXQgdXBkYXRlIGJpbmRpbmdcblx0YmluZChwYXRoLCBjYWxsYmFjayl7XG5cdFx0aWYoIXRoaXMuYmluZGluZ3NbcGF0aF0pe1xuXHRcdFx0dGhpcy5iaW5kaW5nc1twYXRoXSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuYmluZGluZ3NbcGF0aF0ucHVzaChjYWxsYmFjayk7XG5cblx0XHRjYWxsYmFjayh0aGlzLmdldFRleHQocGF0aCksIHRoaXMubGFuZyk7XG5cdH1cblxuXHQvL2l0ZXJhdGUgdGhyb3VnaCBiaW5kaW5ncyBhbmQgdHJpZ2dlciB1cGRhdGVzXG5cdF9leGVjdXRlQmluZGluZ3MoKXtcblx0XHRmb3IobGV0IHBhdGggaW4gdGhpcy5iaW5kaW5ncyl7XG5cdFx0XHR0aGlzLmJpbmRpbmdzW3BhdGhdLmZvckVhY2goKGJpbmRpbmcpID0+IHtcblx0XHRcdFx0YmluZGluZyh0aGlzLmdldFRleHQocGF0aCksIHRoaXMubGFuZyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgQ29tbXMgZXh0ZW5kcyBNb2R1bGV7XG5cblx0c3RhdGljIG1vZHVsZU5hbWUgPSBcImNvbW1zXCI7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInRhYmxlQ29tbXNcIiwgdGhpcy5yZWNlaXZlLmJpbmQodGhpcykpO1xuXHR9XG5cblx0Z2V0Q29ubmVjdGlvbnMoc2VsZWN0b3JzKXtcblx0XHR2YXIgY29ubmVjdGlvbnMgPSBbXSxcblx0XHRjb25uZWN0aW9uO1xuXG5cdFx0Y29ubmVjdGlvbiA9IHRoaXMudGFibGUuY29uc3RydWN0b3IucmVnaXN0cnkubG9va3VwVGFibGUoc2VsZWN0b3JzKTtcblxuXHRcdGNvbm5lY3Rpb24uZm9yRWFjaCgoY29uKSA9Pntcblx0XHRcdGlmKHRoaXMudGFibGUgIT09IGNvbil7XG5cdFx0XHRcdGNvbm5lY3Rpb25zLnB1c2goY29uKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBjb25uZWN0aW9ucztcblx0fVxuXG5cdHNlbmQoc2VsZWN0b3JzLCBtb2R1bGUsIGFjdGlvbiwgZGF0YSl7XG5cdFx0dmFyIGNvbm5lY3Rpb25zID0gdGhpcy5nZXRDb25uZWN0aW9ucyhzZWxlY3RvcnMpO1xuXG5cdFx0Y29ubmVjdGlvbnMuZm9yRWFjaCgoY29ubmVjdGlvbikgPT4ge1xuXHRcdFx0Y29ubmVjdGlvbi50YWJsZUNvbW1zKHRoaXMudGFibGUuZWxlbWVudCwgbW9kdWxlLCBhY3Rpb24sIGRhdGEpO1xuXHRcdH0pO1xuXG5cdFx0aWYoIWNvbm5lY3Rpb25zLmxlbmd0aCAmJiBzZWxlY3RvcnMpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVGFibGUgQ29ubmVjdGlvbiBFcnJvciAtIE5vIHRhYmxlcyBtYXRjaGluZyBzZWxlY3RvciBmb3VuZFwiLCBzZWxlY3RvcnMpO1xuXHRcdH1cblx0fVxuXG5cdHJlY2VpdmUodGFibGUsIG1vZHVsZSwgYWN0aW9uLCBkYXRhKXtcblx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhtb2R1bGUpKXtcblx0XHRcdHJldHVybiB0aGlzLnRhYmxlLm1vZHVsZXNbbW9kdWxlXS5jb21tc1JlY2VpdmVkKHRhYmxlLCBhY3Rpb24sIGRhdGEpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkludGVyLXRhYmxlIENvbW1zIEVycm9yIC0gbm8gc3VjaCBtb2R1bGU6XCIsIG1vZHVsZSk7XG5cdFx0fVxuXHR9XG59XG5cbnZhciBjb3JlTW9kdWxlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRDb21tc01vZHVsZTogQ29tbXMsXG5cdExheW91dE1vZHVsZTogTGF5b3V0LFxuXHRMb2NhbGl6ZU1vZHVsZTogTG9jYWxpemVcbn0pO1xuXG5jbGFzcyBUYWJsZVJlZ2lzdHJ5IHtcblx0c3RhdGljIHJlZ2lzdHJ5ID0ge1xuXHRcdHRhYmxlczpbXSxcblx0XHRcblx0XHRyZWdpc3Rlcih0YWJsZSl7XG5cdFx0XHRUYWJsZVJlZ2lzdHJ5LnJlZ2lzdHJ5LnRhYmxlcy5wdXNoKHRhYmxlKTtcblx0XHR9LFxuXHRcdFxuXHRcdGRlcmVnaXN0ZXIodGFibGUpe1xuXHRcdFx0dmFyIGluZGV4ID0gVGFibGVSZWdpc3RyeS5yZWdpc3RyeS50YWJsZXMuaW5kZXhPZih0YWJsZSk7XG5cdFx0XHRcblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRUYWJsZVJlZ2lzdHJ5LnJlZ2lzdHJ5LnRhYmxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XG5cdFx0bG9va3VwVGFibGUocXVlcnksIHNpbGVudCl7XG5cdFx0XHR2YXIgcmVzdWx0cyA9IFtdLFxuXHRcdFx0bWF0Y2hlcywgbWF0Y2g7XG5cdFx0XHRcblx0XHRcdGlmKHR5cGVvZiBxdWVyeSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdG1hdGNoZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKG1hdGNoZXMubGVuZ3RoKXtcblx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0XHRtYXRjaCA9IFRhYmxlUmVnaXN0cnkucmVnaXN0cnkubWF0Y2hFbGVtZW50KG1hdGNoZXNbaV0pO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaChtYXRjaCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2UgaWYoKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBxdWVyeSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB8fCBxdWVyeSBpbnN0YW5jZW9mIFRhYmxlUmVnaXN0cnkpe1xuXHRcdFx0XHRtYXRjaCA9IFRhYmxlUmVnaXN0cnkucmVnaXN0cnkubWF0Y2hFbGVtZW50KHF1ZXJ5KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKG1hdGNoKXtcblx0XHRcdFx0XHRyZXN1bHRzLnB1c2gobWF0Y2gpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSBpZihBcnJheS5pc0FycmF5KHF1ZXJ5KSl7XG5cdFx0XHRcdHF1ZXJ5LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRcdFx0cmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KFRhYmxlUmVnaXN0cnkucmVnaXN0cnkubG9va3VwVGFibGUoaXRlbSkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiVGFibGUgQ29ubmVjdGlvbiBFcnJvciAtIEludmFsaWQgU2VsZWN0b3JcIiwgcXVlcnkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH0sXG5cdFx0XG5cdFx0bWF0Y2hFbGVtZW50KGVsZW1lbnQpe1xuXHRcdFx0cmV0dXJuIFRhYmxlUmVnaXN0cnkucmVnaXN0cnkudGFibGVzLmZpbmQoZnVuY3Rpb24odGFibGUpe1xuXHRcdFx0XHRyZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIFRhYmxlUmVnaXN0cnkgPyB0YWJsZSA9PT0gZWxlbWVudCA6IHRhYmxlLmVsZW1lbnQgPT09IGVsZW1lbnQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0XHRcblx0c3RhdGljIGZpbmRUYWJsZShxdWVyeSl7XG5cdFx0dmFyIHJlc3VsdHMgPSBUYWJsZVJlZ2lzdHJ5LnJlZ2lzdHJ5Lmxvb2t1cFRhYmxlKHF1ZXJ5LCB0cnVlKTtcblx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShyZXN1bHRzKSAmJiAhcmVzdWx0cy5sZW5ndGggPyBmYWxzZSA6IHJlc3VsdHM7XG5cdH1cbn1cblxuY2xhc3MgTW9kdWxlQmluZGVyIGV4dGVuZHMgVGFibGVSZWdpc3RyeSB7XG5cdFxuXHRzdGF0aWMgbW9kdWxlQmluZGluZ3MgPSB7fTtcblx0c3RhdGljIG1vZHVsZUV4dGVuc2lvbnMgPSB7fTtcblx0c3RhdGljIG1vZHVsZXNSZWdpc3RlcmVkID0gZmFsc2U7XG5cdFxuXHRzdGF0aWMgZGVmYXVsdE1vZHVsZXMgPSBmYWxzZTtcblx0XG5cdGNvbnN0cnVjdG9yKCl7XG5cdFx0c3VwZXIoKTtcblx0fVxuXHRcblx0c3RhdGljIGluaXRpYWxpemVNb2R1bGVCaW5kZXIoZGVmYXVsdE1vZHVsZXMpe1xuXHRcdGlmKCFNb2R1bGVCaW5kZXIubW9kdWxlc1JlZ2lzdGVyZWQpe1xuXHRcdFx0TW9kdWxlQmluZGVyLm1vZHVsZXNSZWdpc3RlcmVkID0gdHJ1ZTtcblx0XHRcdE1vZHVsZUJpbmRlci5fcmVnaXN0ZXJNb2R1bGVzKGNvcmVNb2R1bGVzLCB0cnVlKTtcblx0XHRcdFxuXHRcdFx0aWYoZGVmYXVsdE1vZHVsZXMpe1xuXHRcdFx0XHRNb2R1bGVCaW5kZXIuX3JlZ2lzdGVyTW9kdWxlcyhkZWZhdWx0TW9kdWxlcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRzdGF0aWMgX2V4dGVuZE1vZHVsZShuYW1lLCBwcm9wZXJ0eSwgdmFsdWVzKXtcblx0XHRpZihNb2R1bGVCaW5kZXIubW9kdWxlQmluZGluZ3NbbmFtZV0pe1xuXHRcdFx0dmFyIHNvdXJjZSA9IE1vZHVsZUJpbmRlci5tb2R1bGVCaW5kaW5nc1tuYW1lXVtwcm9wZXJ0eV07XG5cdFx0XHRcblx0XHRcdGlmKHNvdXJjZSl7XG5cdFx0XHRcdGlmKHR5cGVvZiB2YWx1ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdFx0Zm9yKGxldCBrZXkgaW4gdmFsdWVzKXtcblx0XHRcdFx0XHRcdHNvdXJjZVtrZXldID0gdmFsdWVzW2tleV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTW9kdWxlIEVycm9yIC0gSW52YWxpZCB2YWx1ZSB0eXBlLCBpdCBtdXN0IGJlIGFuIG9iamVjdFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJNb2R1bGUgRXJyb3IgLSBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdDpcIiwgcHJvcGVydHkpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vZHVsZSBFcnJvciAtIG1vZHVsZSBkb2VzIG5vdCBleGlzdDpcIiwgbmFtZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRzdGF0aWMgX3JlZ2lzdGVyTW9kdWxlcyhtb2R1bGVzLCBjb3JlKXtcblx0XHR2YXIgbW9kcyA9IE9iamVjdC52YWx1ZXMobW9kdWxlcyk7XG5cdFx0XG5cdFx0aWYoY29yZSl7XG5cdFx0XHRtb2RzLmZvckVhY2goKG1vZCkgPT4ge1xuXHRcdFx0XHRtb2QucHJvdG90eXBlLm1vZHVsZUNvcmUgPSB0cnVlO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdE1vZHVsZUJpbmRlci5fcmVnaXN0ZXJNb2R1bGUobW9kcyk7XG5cdH1cblx0XG5cdHN0YXRpYyBfcmVnaXN0ZXJNb2R1bGUobW9kdWxlcyl7XG5cdFx0aWYoIUFycmF5LmlzQXJyYXkobW9kdWxlcykpe1xuXHRcdFx0bW9kdWxlcyA9IFttb2R1bGVzXTtcblx0XHR9XG5cdFx0XG5cdFx0bW9kdWxlcy5mb3JFYWNoKChtb2QpID0+IHtcblx0XHRcdE1vZHVsZUJpbmRlci5fcmVnaXN0ZXJNb2R1bGVCaW5kaW5nKG1vZCk7XG5cdFx0XHRNb2R1bGVCaW5kZXIuX3JlZ2lzdGVyTW9kdWxlRXh0ZW5zaW9ucyhtb2QpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRzdGF0aWMgX3JlZ2lzdGVyTW9kdWxlQmluZGluZyhtb2Qpe1xuXHRcdGlmKG1vZC5tb2R1bGVOYW1lKXtcblx0XHRcdE1vZHVsZUJpbmRlci5tb2R1bGVCaW5kaW5nc1ttb2QubW9kdWxlTmFtZV0gPSBtb2Q7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBiaW5kIG1vZHVsZSwgbm8gbW9kdWxlTmFtZSBkZWZpbmVkXCIsIG1vZC5tb2R1bGVOYW1lKTtcblx0XHR9XG5cdH1cblx0XG5cdHN0YXRpYyBfcmVnaXN0ZXJNb2R1bGVFeHRlbnNpb25zKG1vZCl7XG5cdFx0dmFyIGV4dGVuc2lvbnMgPSBtb2QubW9kdWxlRXh0ZW5zaW9ucztcblx0XHRcblx0XHRpZihtb2QubW9kdWxlRXh0ZW5zaW9ucyl7XG5cdFx0XHRmb3IgKGxldCBtb2RLZXkgaW4gZXh0ZW5zaW9ucykge1xuXHRcdFx0XHRsZXQgZXh0ID0gZXh0ZW5zaW9uc1ttb2RLZXldO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoTW9kdWxlQmluZGVyLm1vZHVsZUJpbmRpbmdzW21vZEtleV0pe1xuXHRcdFx0XHRcdGZvciAobGV0IHByb3BLZXkgaW4gZXh0KSB7XG5cdFx0XHRcdFx0XHRNb2R1bGVCaW5kZXIuX2V4dGVuZE1vZHVsZShtb2RLZXksIHByb3BLZXksIGV4dFtwcm9wS2V5XSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYoIU1vZHVsZUJpbmRlci5tb2R1bGVFeHRlbnNpb25zW21vZEtleV0pe1xuXHRcdFx0XHRcdFx0TW9kdWxlQmluZGVyLm1vZHVsZUV4dGVuc2lvbnNbbW9kS2V5XSA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRmb3IgKGxldCBwcm9wS2V5IGluIGV4dCkge1xuXHRcdFx0XHRcdFx0aWYoIU1vZHVsZUJpbmRlci5tb2R1bGVFeHRlbnNpb25zW21vZEtleV1bcHJvcEtleV0pe1xuXHRcdFx0XHRcdFx0XHRNb2R1bGVCaW5kZXIubW9kdWxlRXh0ZW5zaW9uc1ttb2RLZXldW3Byb3BLZXldID0ge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdE9iamVjdC5hc3NpZ24oTW9kdWxlQmluZGVyLm1vZHVsZUV4dGVuc2lvbnNbbW9kS2V5XVtwcm9wS2V5XSwgZXh0W3Byb3BLZXldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRNb2R1bGVCaW5kZXIuX2V4dGVuZE1vZHVsZUZyb21RdWV1ZShtb2QpO1xuXHR9XG5cdFxuXHRzdGF0aWMgX2V4dGVuZE1vZHVsZUZyb21RdWV1ZShtb2Qpe1xuXHRcdHZhciBleHRlbnNpb25zID0gTW9kdWxlQmluZGVyLm1vZHVsZUV4dGVuc2lvbnNbbW9kLm1vZHVsZU5hbWVdO1xuXHRcdFxuXHRcdGlmKGV4dGVuc2lvbnMpe1xuXHRcdFx0Zm9yIChsZXQgcHJvcEtleSBpbiBleHRlbnNpb25zKSB7XG5cdFx0XHRcdE1vZHVsZUJpbmRlci5fZXh0ZW5kTW9kdWxlKG1vZC5tb2R1bGVOYW1lLCBwcm9wS2V5LCBleHRlbnNpb25zW3Byb3BLZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vZW5zdXJlIHRoYXQgbW9kdWxlIGFyZSBib3VuZCB0byBpbnN0YW50aWF0ZWQgZnVuY3Rpb25cblx0X2JpbmRNb2R1bGVzKCl7XG5cdFx0dmFyIG9yZGVyZWRTdGFydE1vZHMgPSBbXSxcblx0XHRvcmRlcmVkRW5kTW9kcyA9IFtdLFxuXHRcdHVuT3JkZXJlZE1vZHMgPSBbXTtcblx0XHRcblx0XHR0aGlzLm1vZHVsZXMgPSB7fTtcblx0XHRcblx0XHRmb3IodmFyIG5hbWUgaW4gTW9kdWxlQmluZGVyLm1vZHVsZUJpbmRpbmdzKXtcblx0XHRcdGxldCBtb2QgPSBNb2R1bGVCaW5kZXIubW9kdWxlQmluZGluZ3NbbmFtZV07XG5cdFx0XHRsZXQgbW9kdWxlID0gbmV3IG1vZCh0aGlzKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuXHRcdFx0XG5cdFx0XHRpZihtb2QucHJvdG90eXBlLm1vZHVsZUNvcmUpe1xuXHRcdFx0XHR0aGlzLm1vZHVsZXNDb3JlLnB1c2gobW9kdWxlKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYobW9kLm1vZHVsZUluaXRPcmRlcil7XG5cdFx0XHRcdFx0aWYobW9kLm1vZHVsZUluaXRPcmRlciA8IDApe1xuXHRcdFx0XHRcdFx0b3JkZXJlZFN0YXJ0TW9kcy5wdXNoKG1vZHVsZSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0b3JkZXJlZEVuZE1vZHMucHVzaChtb2R1bGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHVuT3JkZXJlZE1vZHMucHVzaChtb2R1bGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdG9yZGVyZWRTdGFydE1vZHMuc29ydCgoYSwgYikgPT4gYS5tb2R1bGVJbml0T3JkZXIgPiBiLm1vZHVsZUluaXRPcmRlciA/IDEgOiAtMSk7XG5cdFx0b3JkZXJlZEVuZE1vZHMuc29ydCgoYSwgYikgPT4gYS5tb2R1bGVJbml0T3JkZXIgPiBiLm1vZHVsZUluaXRPcmRlciA/IDEgOiAtMSk7XG5cdFx0XG5cdFx0dGhpcy5tb2R1bGVzUmVndWxhciA9IG9yZGVyZWRTdGFydE1vZHMuY29uY2F0KHVuT3JkZXJlZE1vZHMuY29uY2F0KG9yZGVyZWRFbmRNb2RzKSk7XG5cdH1cbn1cblxuY2xhc3MgQWxlcnQgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcbiAgICAgICAgXG5cdFx0dGhpcy5lbGVtZW50ID0gdGhpcy5fY3JlYXRlQWxlcnRFbGVtZW50KCk7XG5cdFx0dGhpcy5tc2dFbGVtZW50ID0gdGhpcy5fY3JlYXRlTXNnRWxlbWVudCgpO1xuXHRcdHRoaXMudHlwZSA9IG51bGw7XG4gICAgICAgIFxuXHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLm1zZ0VsZW1lbnQpO1xuXHR9XG4gICAgXG5cdF9jcmVhdGVBbGVydEVsZW1lbnQoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItYWxlcnRcIik7XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG4gICAgXG5cdF9jcmVhdGVNc2dFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWFsZXJ0LW1zZ1wiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYWxlcnRcIik7XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG4gICAgXG5cdF90eXBlQ2xhc3MoKXtcblx0XHRyZXR1cm4gXCJ0YWJ1bGF0b3ItYWxlcnQtc3RhdGUtXCIgKyB0aGlzLnR5cGU7XG5cdH1cbiAgICBcblx0YWxlcnQoY29udGVudCwgdHlwZSA9IFwibXNnXCIpe1xuXHRcdGlmKGNvbnRlbnQpe1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiYWxlcnQtc2hvd1wiLCB0eXBlKTtcbiAgICAgICAgICAgIFxuXHRcdFx0dGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIFxuXHRcdFx0d2hpbGUodGhpcy5tc2dFbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMubXNnRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLm1zZ0VsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICBcblx0XHRcdHRoaXMubXNnRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3R5cGVDbGFzcygpKTtcbiAgICAgICAgICAgIFxuXHRcdFx0aWYodHlwZW9mIGNvbnRlbnQgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGNvbnRlbnQgPSBjb250ZW50KCk7XG5cdFx0XHR9XG4gICAgICAgICAgICBcblx0XHRcdGlmKGNvbnRlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdHRoaXMubXNnRWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5tc2dFbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG5cdFx0XHR9XG4gICAgICAgICAgICBcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuICAgIFxuXHRjbGVhcigpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJhbGVydC1oaWRlXCIsIHRoaXMudHlwZSk7XG5cblx0XHRpZih0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cbiAgICAgICAgXG5cdFx0dGhpcy5tc2dFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fdHlwZUNsYXNzKCkpO1xuXHR9XG59XG5cbmNsYXNzIFRhYnVsYXRvciBleHRlbmRzIE1vZHVsZUJpbmRlcntcblxuXHQvL2RlZmF1bHQgc2V0dXAgb3B0aW9uc1xuXHRzdGF0aWMgZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcblxuXHRzdGF0aWMgZXh0ZW5kTW9kdWxlKCl7XG5cdFx0VGFidWxhdG9yLmluaXRpYWxpemVNb2R1bGVCaW5kZXIoKTtcblx0XHRUYWJ1bGF0b3IuX2V4dGVuZE1vZHVsZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0c3RhdGljIHJlZ2lzdGVyTW9kdWxlKCl7XG5cdFx0VGFidWxhdG9yLmluaXRpYWxpemVNb2R1bGVCaW5kZXIoKTtcblx0XHRUYWJ1bGF0b3IuX3JlZ2lzdGVyTW9kdWxlKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zLCBtb2R1bGVzKXtcblx0XHRzdXBlcigpO1xuXG5cdFx0VGFidWxhdG9yLmluaXRpYWxpemVNb2R1bGVCaW5kZXIobW9kdWxlcyk7XG5cblx0XHR0aGlzLm9wdGlvbnMgPSB7fTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbk1hbmFnZXIgPSBudWxsOyAvLyBob2xkIENvbHVtbiBNYW5hZ2VyXG5cdFx0dGhpcy5yb3dNYW5hZ2VyID0gbnVsbDsgLy9ob2xkIFJvdyBNYW5hZ2VyXG5cdFx0dGhpcy5mb290ZXJNYW5hZ2VyID0gbnVsbDsgLy9ob2xkZXIgRm9vdGVyIE1hbmFnZXJcblx0XHR0aGlzLmFsZXJ0TWFuYWdlciA9IG51bGw7IC8vaG9sZCBBbGVydCBNYW5hZ2VyXG5cdFx0dGhpcy52ZG9tSG96ICA9IG51bGw7IC8vaG9sZGVyIGhvcml6b250YWwgdmlydHVhbCBkb21cblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzID0gbnVsbDsgLy9oYW5kbGUgZXh0ZXJuYWwgZXZlbnQgbWVzc2FnaW5nXG5cdFx0dGhpcy5ldmVudEJ1cyA9IG51bGw7IC8vaGFuZGxlIGludGVybmFsIGV2ZW50IG1lc3NhZ2luZ1xuXHRcdHRoaXMuaW50ZXJhY3Rpb25Nb25pdG9yID0gZmFsc2U7IC8vdHJhY2sgdXNlciBpbnRlcmFjdGlvblxuXHRcdHRoaXMuYnJvd3NlciA9IFwiXCI7IC8vaG9sZCBjdXJyZW50IGJyb3dzZXIgdHlwZVxuXHRcdHRoaXMuYnJvd3NlclNsb3cgPSBmYWxzZTsgLy9oYW5kbGUgcmVkdWNlZCBmdW5jdGlvbmFsaXR5IGZvciBzbG93ZXIgYnJvd3NlcnNcblx0XHR0aGlzLmJyb3dzZXJNb2JpbGUgPSBmYWxzZTsgLy9jaGVjayBpZiBydW5uaW5nIG9uIG1vYmlsZSwgcHJldmVudCByZXNpemUgY2FuY2VsbGluZyBlZGl0IG9uIGtleWJvYXJkIGFwcGVhcmFuY2Vcblx0XHR0aGlzLnJ0bCA9IGZhbHNlOyAvL2NoZWNrIGlmIHRoZSB0YWJsZSBpcyBpbiBSVEwgbW9kZVxuXHRcdHRoaXMub3JpZ2luYWxFbGVtZW50ID0gbnVsbDsgLy9ob2xkIG9yaWdpbmFsIHRhYmxlIGVsZW1lbnQgaWYgaXQgaGFzIGJlZW4gcmVwbGFjZWRcblx0XHRcblx0XHR0aGlzLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyID0gbmV3IENvbXBvbmVudEZ1bmN0aW9uQmluZGVyKHRoaXMpOyAvL2JpbmQgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdHRoaXMuZGF0YUxvYWRlciA9IGZhbHNlOyAvL2JpbmQgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdFxuXHRcdHRoaXMubW9kdWxlcyA9IHt9OyAvL2hvbGQgYWxsIG1vZHVsZXMgYm91bmQgdG8gdGhpcyB0YWJsZVxuXHRcdHRoaXMubW9kdWxlc0NvcmUgPSBbXTsgLy9ob2xkIGNvcmUgbW9kdWxlcyBib3VuZCB0byB0aGlzIHRhYmxlIChmb3IgaW5pdGlhbGl6YXRpb24gcHVycG9zZXMpXG5cdFx0dGhpcy5tb2R1bGVzUmVndWxhciA9IFtdOyAvL2hvbGQgcmVndWxhciBtb2R1bGVzIGJvdW5kIHRvIHRoaXMgdGFibGUgKGZvciBpbml0aWFsaXphdGlvbiBwdXJwb3Nlcylcblx0XHRcblx0XHR0aGlzLmRlcHJlY2F0aW9uQWR2aXNvciA9IG5ldyBEZXByZWNhdGlvbkFkdmlzb3IodGhpcyk7XG5cdFx0dGhpcy5vcHRpb25zTGlzdCA9IG5ldyBPcHRpb25zTGlzdCh0aGlzLCBcInRhYmxlIGNvbnN0cnVjdG9yXCIpO1xuXG5cdFx0dGhpcy5kZXBlbmRlbmN5UmVnaXN0cnkgPSBuZXcgRGVwZW5kZW5jeVJlZ2lzdHJ5KHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMuaW5pdGlhbGl6ZUVsZW1lbnQoZWxlbWVudCkpe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb3JlU3lzdGVtcyhvcHRpb25zKTtcblx0XHRcdFxuXHRcdFx0Ly9kZWxheSB0YWJsZSBjcmVhdGlvbiB0byBhbGxvdyBldmVudCBiaW5kaW5ncyBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29uc3RydWN0b3Jcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9jcmVhdGUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmNvbnN0cnVjdG9yLnJlZ2lzdHJ5LnJlZ2lzdGVyKHRoaXMpOyAvL3JlZ2lzdGVyIHRhYmxlIGZvciBpbnRlci1kZXZpY2UgY29tbXVuaWNhdGlvblxuXHR9XG5cdFxuXHRpbml0aWFsaXplRWxlbWVudChlbGVtZW50KXtcblx0XHRpZih0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSBpZih0eXBlb2YgZWxlbWVudCA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmVsZW1lbnQpe1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlRhYnVsYXRvciBDcmVhdGlvbiBFcnJvciAtIG5vIGVsZW1lbnQgZm91bmQgbWF0Y2hpbmcgc2VsZWN0b3I6IFwiLCBlbGVtZW50KTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJUYWJ1bGF0b3IgQ3JlYXRpb24gRXJyb3IgLSBJbnZhbGlkIGVsZW1lbnQgcHJvdmlkZWQ6XCIsIGVsZW1lbnQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvcmVTeXN0ZW1zKG9wdGlvbnMpe1xuXHRcdHRoaXMuY29sdW1uTWFuYWdlciA9IG5ldyBDb2x1bW5NYW5hZ2VyKHRoaXMpO1xuXHRcdHRoaXMucm93TWFuYWdlciA9IG5ldyBSb3dNYW5hZ2VyKHRoaXMpO1xuXHRcdHRoaXMuZm9vdGVyTWFuYWdlciA9IG5ldyBGb290ZXJNYW5hZ2VyKHRoaXMpO1xuXHRcdHRoaXMuZGF0YUxvYWRlciA9IG5ldyBEYXRhTG9hZGVyKHRoaXMpO1xuXHRcdHRoaXMuYWxlcnRNYW5hZ2VyID0gbmV3IEFsZXJ0KHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMuX2JpbmRNb2R1bGVzKCk7XG5cdFx0XG5cdFx0dGhpcy5vcHRpb25zID0gdGhpcy5vcHRpb25zTGlzdC5nZW5lcmF0ZShUYWJ1bGF0b3IuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXHRcdFxuXHRcdHRoaXMuX2NsZWFyT2JqZWN0UG9pbnRlcnMoKTtcblx0XHRcblx0XHR0aGlzLl9tYXBEZXByZWNhdGVkRnVuY3Rpb25hbGl0eSgpO1xuXHRcdFxuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMgPSBuZXcgRXh0ZXJuYWxFdmVudEJ1cyh0aGlzLCB0aGlzLm9wdGlvbnMsIHRoaXMub3B0aW9ucy5kZWJ1Z0V2ZW50c0V4dGVybmFsKTtcblx0XHR0aGlzLmV2ZW50QnVzID0gbmV3IEludGVybmFsRXZlbnRCdXModGhpcy5vcHRpb25zLmRlYnVnRXZlbnRzSW50ZXJuYWwpO1xuXHRcdFxuXHRcdHRoaXMuaW50ZXJhY3Rpb25Nb25pdG9yID0gbmV3IEludGVyYWN0aW9uTWFuYWdlcih0aGlzKTtcblx0XHRcblx0XHR0aGlzLmRhdGFMb2FkZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdHRoaXMuZm9vdGVyTWFuYWdlci5pbml0aWFsaXplKCk7XG5cblx0XHR0aGlzLmRlcGVuZGVuY3lSZWdpc3RyeS5pbml0aWFsaXplKCk7XG5cdH1cblx0XG5cdC8vY29udmVydCBkZXByZWNhdGVkIGZ1bmN0aW9uYWxpdHkgdG8gbmV3IGZ1bmN0aW9uc1xuXHRfbWFwRGVwcmVjYXRlZEZ1bmN0aW9uYWxpdHkoKXtcblx0XHQvL2FsbCBwcmV2aW91c2x5IGRlcHJlY2F0ZWQgZnVuY3Rpb25hbGl0eSByZW1vdmVkIGluIHRoZSA2LjAgcmVsZWFzZVxuXHR9XG5cdFxuXHRfY2xlYXJTZWxlY3Rpb24oKXtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cdFx0XG5cdFx0aWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcblx0XHRcdGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkpIHsgIC8vIENocm9tZVxuXHRcdFx0XHR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkoKTtcblx0XHRcdH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcykgeyAgLy8gRmlyZWZveFxuXHRcdFx0XHR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHsgIC8vIElFP1xuXHRcdFx0ZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblx0fVxuXHRcblx0Ly9jcmVhdGUgdGFibGVcblx0X2NyZWF0ZSgpe1xuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJ0YWJsZUJ1aWxkaW5nXCIpO1xuXHRcdHRoaXMuZXZlbnRCdXMuZGlzcGF0Y2goXCJ0YWJsZS1idWlsZGluZ1wiKTtcblx0XHRcblx0XHR0aGlzLl9ydGxDaGVjaygpO1xuXHRcdFxuXHRcdHRoaXMuX2J1aWxkRWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMuX2luaXRpYWxpemVUYWJsZSgpO1xuXG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy5fbG9hZEluaXRpYWxEYXRhKClcblx0XHRcdC5maW5hbGx5KCgpID0+IHtcblx0XHRcdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInRhYmxlLWluaXRpYWxpemVkXCIpO1xuXHRcdFx0XHR0aGlzLmV4dGVybmFsRXZlbnRzLmRpc3BhdGNoKFwidGFibGVCdWlsdFwiKTtcblx0XHRcdH0pO1x0XG5cdH1cblx0XG5cdF9ydGxDaGVjaygpe1xuXHRcdHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCk7XG5cdFx0XG5cdFx0c3dpdGNoKHRoaXMub3B0aW9ucy50ZXh0RGlyZWN0aW9uKXtcblx0XHRcdGNhc2VcImF1dG9cIjpcblx0XHRcdFx0aWYoc3R5bGUuZGlyZWN0aW9uICE9PSBcInJ0bFwiKXtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjYXNlIFwicnRsXCI6XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJ0bFwiKTtcblx0XHRcdFx0dGhpcy5ydGwgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImx0clwiOlxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1sdHJcIik7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMucnRsID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2NsZWFyIHBvaW50ZXJzIHRvIG9iamVjdHMgaW4gZGVmYXVsdCBjb25maWcgb2JqZWN0XG5cdF9jbGVhck9iamVjdFBvaW50ZXJzKCl7XG5cdFx0dGhpcy5vcHRpb25zLmNvbHVtbnMgPSB0aGlzLm9wdGlvbnMuY29sdW1ucy5zbGljZSgwKTtcblx0XHRcblx0XHRpZihBcnJheS5pc0FycmF5KHRoaXMub3B0aW9ucy5kYXRhKSAmJiAhdGhpcy5vcHRpb25zLnJlYWN0aXZlRGF0YSl7XG5cdFx0XHR0aGlzLm9wdGlvbnMuZGF0YSA9IHRoaXMub3B0aW9ucy5kYXRhLnNsaWNlKDApO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9idWlsZCB0YWJ1bGF0b3IgZWxlbWVudFxuXHRfYnVpbGRFbGVtZW50KCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG5cdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRuZXdFbGVtZW50O1xuXHRcdFxuXHRcdGlmKGVsZW1lbnQudGFnTmFtZSA9PT0gXCJUQUJMRVwiKXtcblx0XHRcdHRoaXMub3JpZ2luYWxFbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFx0bmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcblx0XHRcdC8vdHJhbnNmZXIgYXR0cmlidXRlcyB0byBuZXcgZWxlbWVudFxuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG5cdFx0XHRcblx0XHRcdC8vIGxvb3AgdGhyb3VnaCBhdHRyaWJ1dGVzIGFuZCBhcHBseSB0aGVtIG9uIGRpdlxuXHRcdFx0Zm9yKHZhciBpIGluIGF0dHJpYnV0ZXMpe1xuXHRcdFx0XHRpZih0eXBlb2YgYXR0cmlidXRlc1tpXSA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0XHRuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzW2ldLm5hbWUsIGF0dHJpYnV0ZXNbaV0udmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIHJlcGxhY2UgdGFibGUgd2l0aCBkaXYgZWxlbWVudFxuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdFbGVtZW50LCBlbGVtZW50KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5lbGVtZW50ID0gZWxlbWVudCA9IG5ld0VsZW1lbnQ7XG5cdFx0fVxuXHRcdFxuXHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvclwiKTtcblx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJncmlkXCIpO1xuXHRcdFxuXHRcdC8vZW1wdHkgZWxlbWVudFxuXHRcdHdoaWxlKGVsZW1lbnQuZmlyc3RDaGlsZCkgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdC8vc2V0IHRhYmxlIGhlaWdodFxuXHRcdGlmKG9wdGlvbnMuaGVpZ2h0KXtcblx0XHRcdG9wdGlvbnMuaGVpZ2h0ID0gaXNOYU4ob3B0aW9ucy5oZWlnaHQpID8gb3B0aW9ucy5oZWlnaHQgOiBvcHRpb25zLmhlaWdodCArIFwicHhcIjtcblx0XHRcdGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG5cdFx0fVxuXHRcdFxuXHRcdC8vc2V0IHRhYmxlIG1pbiBoZWlnaHRcblx0XHRpZihvcHRpb25zLm1pbkhlaWdodCAhPT0gZmFsc2Upe1xuXHRcdFx0b3B0aW9ucy5taW5IZWlnaHQgPSBpc05hTihvcHRpb25zLm1pbkhlaWdodCkgPyBvcHRpb25zLm1pbkhlaWdodCA6IG9wdGlvbnMubWluSGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0ZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBvcHRpb25zLm1pbkhlaWdodDtcblx0XHR9XG5cdFx0XG5cdFx0Ly9zZXQgdGFibGUgbWF4SGVpZ2h0XG5cdFx0aWYob3B0aW9ucy5tYXhIZWlnaHQgIT09IGZhbHNlKXtcblx0XHRcdG9wdGlvbnMubWF4SGVpZ2h0ID0gaXNOYU4ob3B0aW9ucy5tYXhIZWlnaHQpID8gb3B0aW9ucy5tYXhIZWlnaHQgOiBvcHRpb25zLm1heEhlaWdodCArIFwicHhcIjtcblx0XHRcdGVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gb3B0aW9ucy5tYXhIZWlnaHQ7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgY29yZSBzeXN0ZW1zIGFuZCBtb2R1bGVzXG5cdF9pbml0aWFsaXplVGFibGUoKXtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcblx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdFxuXHRcdHRoaXMuaW50ZXJhY3Rpb25Nb25pdG9yLmluaXRpYWxpemUoKTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbk1hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdHRoaXMucm93TWFuYWdlci5pbml0aWFsaXplKCk7XG5cdFx0XG5cdFx0dGhpcy5fZGV0ZWN0QnJvd3NlcigpO1xuXHRcdFxuXHRcdC8vaW5pdGlhbGl6ZSBjb3JlIG1vZHVsZXNcblx0XHR0aGlzLm1vZHVsZXNDb3JlLmZvckVhY2goKG1vZCkgPT4ge1xuXHRcdFx0bW9kLmluaXRpYWxpemUoKTtcblx0XHR9KTtcblx0XHRcblx0XHQvL2J1aWxkIHRhYmxlIGVsZW1lbnRzXG5cdFx0ZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbHVtbk1hbmFnZXIuZ2V0RWxlbWVudCgpKTtcblx0XHRlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucm93TWFuYWdlci5nZXRFbGVtZW50KCkpO1xuXHRcdFxuXHRcdGlmKG9wdGlvbnMuZm9vdGVyRWxlbWVudCl7XG5cdFx0XHR0aGlzLmZvb3Rlck1hbmFnZXIuYWN0aXZhdGUoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYob3B0aW9ucy5hdXRvQ29sdW1ucyAmJiBvcHRpb25zLmRhdGEpe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNvbHVtbk1hbmFnZXIuZ2VuZXJhdGVDb2x1bW5zRnJvbVJvd0RhdGEodGhpcy5vcHRpb25zLmRhdGEpO1xuXHRcdH1cblx0XHRcblx0XHQvL2luaXRpYWxpemUgcmVndWxhciBtb2R1bGVzXG5cdFx0dGhpcy5tb2R1bGVzUmVndWxhci5mb3JFYWNoKChtb2QpID0+IHtcblx0XHRcdG1vZC5pbml0aWFsaXplKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLnNldENvbHVtbnMob3B0aW9ucy5jb2x1bW5zKTtcblx0XHRcblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwidGFibGUtYnVpbHRcIik7XG5cdH1cblx0XG5cdF9sb2FkSW5pdGlhbERhdGEoKXtcblx0XHRyZXR1cm4gdGhpcy5kYXRhTG9hZGVyLmxvYWQodGhpcy5vcHRpb25zLmRhdGEpXG5cdFx0XHQuZmluYWxseSgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuY29sdW1uTWFuYWdlci52ZXJ0aWNhbEFsaWduSGVhZGVycygpO1xuXHRcdFx0fSk7XHRcdFxuXHR9XG5cdFxuXHQvL2RlY29uc3RydWN0b3Jcblx0ZGVzdHJveSgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFxuXHRcdHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLmNvbnN0cnVjdG9yLnJlZ2lzdHJ5LmRlcmVnaXN0ZXIodGhpcyk7IC8vZGVyZWdpc3RlciB0YWJsZSBmcm9tIGludGVyLWRldmljZSBjb21tdW5pY2F0aW9uXG5cdFx0XG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInRhYmxlLWRlc3Ryb3lcIik7XG5cdFx0XG5cdFx0Ly9jbGVhciByb3cgZGF0YVxuXHRcdHRoaXMucm93TWFuYWdlci5kZXN0cm95KCk7XG5cdFx0XG5cdFx0Ly9jbGVhciBET01cblx0XHR3aGlsZShlbGVtZW50LmZpcnN0Q2hpbGQpIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3JcIik7XG5cblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzLmRpc3BhdGNoKFwidGFibGVEZXN0cm95ZWRcIik7XG5cdH1cblx0XG5cdF9kZXRlY3RCcm93c2VyKCl7XG5cdFx0dmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhO1xuXHRcdFxuXHRcdGlmKHVhLmluZGV4T2YoXCJUcmlkZW50XCIpID4gLTEpe1xuXHRcdFx0dGhpcy5icm93c2VyID0gXCJpZVwiO1xuXHRcdFx0dGhpcy5icm93c2VyU2xvdyA9IHRydWU7XG5cdFx0fWVsc2UgaWYodWEuaW5kZXhPZihcIkVkZ2VcIikgPiAtMSl7XG5cdFx0XHR0aGlzLmJyb3dzZXIgPSBcImVkZ2VcIjtcblx0XHRcdHRoaXMuYnJvd3NlclNsb3cgPSB0cnVlO1xuXHRcdH1lbHNlIGlmKHVhLmluZGV4T2YoXCJGaXJlZm94XCIpID4gLTEpe1xuXHRcdFx0dGhpcy5icm93c2VyID0gXCJmaXJlZm94XCI7XG5cdFx0XHR0aGlzLmJyb3dzZXJTbG93ID0gZmFsc2U7XG5cdFx0fWVsc2UgaWYodWEuaW5kZXhPZihcIk1hYyBPU1wiKSA+IC0xKXtcblx0XHRcdHRoaXMuYnJvd3NlciA9IFwic2FmYXJpXCI7XG5cdFx0XHR0aGlzLmJyb3dzZXJTbG93ID0gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5icm93c2VyID0gXCJvdGhlclwiO1xuXHRcdFx0dGhpcy5icm93c2VyU2xvdyA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmJyb3dzZXJNb2JpbGUgPSAvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2kudGVzdCh1YSl8fC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3LShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtLXxjZWxsfGNodG18Y2xkY3xjbWQtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8LWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseSgtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmLTV8Zy1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkLShtfHB8dCl8aGVpLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzLWN8aHQoYygtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aS0oMjB8Z298bWEpfGkyMzB8aWFjKCB8LXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHwtW2Etd10pfGxpYnd8bHlueHxtMS13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bS1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dCgtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSktfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3wtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdC1nfHFhLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8LVsyLTddfGktKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aC18b298cC0pfHNka1xcL3xzZShjKC18MHwxKXw0N3xtY3xuZHxyaSl8c2doLXxzaGFyfHNpZSgtfG0pfHNrLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aC18di18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2wtfHRkZy18dGVsKGl8bSl8dGltLXx0LW1vfHRvKHBsfHNoKXx0cyg3MHxtLXxtM3xtNSl8dHgtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118LXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhcy18eW91cnx6ZXRvfHp0ZS0vaS50ZXN0KHVhLnNsaWNlKDAsNCkpO1xuXHR9XG5cdFxuXHRpbml0R3VhcmQoZnVuYywgbXNnKXtcblx0XHR2YXIgc3RhY2ssIGxpbmU7XG5cdFx0XG5cdFx0aWYodGhpcy5vcHRpb25zLmRlYnVnSW5pdGlhbGl6YXRpb24gJiYgIXRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0aWYoIWZ1bmMpe1xuXHRcdFx0XHRzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0bGluZSA9IHN0YWNrWzBdID09IFwiRXJyb3JcIiA/IHN0YWNrWzJdIDogc3RhY2tbMV07XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihsaW5lWzBdID09IFwiIFwiKXtcblx0XHRcdFx0XHRmdW5jID0gbGluZS50cmltKCkuc3BsaXQoXCIgXCIpWzFdLnNwbGl0KFwiLlwiKVsxXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGZ1bmMgPSBsaW5lLnRyaW0oKS5zcGxpdChcIkBcIilbMF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29uc29sZS53YXJuKFwiVGFibGUgTm90IEluaXRpYWxpemVkIC0gQ2FsbGluZyB0aGUgXCIgKyBmdW5jICsgXCIgZnVuY3Rpb24gYmVmb3JlIHRoZSB0YWJsZSBpcyBpbml0aWFsaXplZCBtYXkgcmVzdWx0IGluIGluY29uc2lzdGVudCBiZWhhdmlvciwgUGxlYXNlIHdhaXQgZm9yIHRoZSBgdGFibGVCdWlsdGAgZXZlbnQgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cIiArIChtc2cgPyBcIiBcIiArIG1zZyA6IFwiXCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuaW5pdGlhbGl6ZWQ7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLyBEYXRhIEhhbmRsaW5nIC8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL2Jsb2NrIHRhYmxlIHJlZHJhd2luZ1xuXHRibG9ja1JlZHJhdygpe1xuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwicmVkcmF3LWJsb2NraW5nXCIpO1xuXHRcdFxuXHRcdHRoaXMucm93TWFuYWdlci5ibG9ja1JlZHJhdygpO1xuXHRcdHRoaXMuY29sdW1uTWFuYWdlci5ibG9ja1JlZHJhdygpO1xuXG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInJlZHJhdy1ibG9ja2VkXCIpO1xuXHR9XG5cdFxuXHQvL3Jlc3RvcmUgdGFibGUgcmVkcmF3aW5nXG5cdHJlc3RvcmVSZWRyYXcoKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInJlZHJhdy1yZXN0b3JpbmdcIik7XG5cblx0XHR0aGlzLnJvd01hbmFnZXIucmVzdG9yZVJlZHJhdygpO1xuXHRcdHRoaXMuY29sdW1uTWFuYWdlci5yZXN0b3JlUmVkcmF3KCk7XG5cblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwicmVkcmF3LXJlc3RvcmVkXCIpO1xuXHR9XG5cdFxuXHQvL2xvYWQgZGF0YVxuXHRzZXREYXRhKGRhdGEsIHBhcmFtcywgY29uZmlnKXtcblx0XHR0aGlzLmluaXRHdWFyZChmYWxzZSwgXCJUbyBzZXQgaW5pdGlhbCBkYXRhIHBsZWFzZSB1c2UgdGhlICdkYXRhJyBwcm9wZXJ0eSBpbiB0aGUgdGFibGUgY29uc3RydWN0b3IuXCIpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmRhdGFMb2FkZXIubG9hZChkYXRhLCBwYXJhbXMsIGNvbmZpZywgZmFsc2UpO1xuXHR9XG5cdFxuXHQvL2NsZWFyIGRhdGFcblx0Y2xlYXJEYXRhKCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHR0aGlzLmRhdGFMb2FkZXIuYmxvY2tBY3RpdmVMb2FkKCk7XG5cdFx0dGhpcy5yb3dNYW5hZ2VyLmNsZWFyRGF0YSgpO1xuXHR9XG5cdFxuXHQvL2dldCB0YWJsZSBkYXRhIGFycmF5XG5cdGdldERhdGEoYWN0aXZlKXtcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldERhdGEoYWN0aXZlKTtcblx0fVxuXHRcblx0Ly9nZXQgdGFibGUgZGF0YSBhcnJheSBjb3VudFxuXHRnZXREYXRhQ291bnQoYWN0aXZlKXtcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldERhdGFDb3VudChhY3RpdmUpO1xuXHR9XG5cdFxuXHQvL3JlcGxhY2UgZGF0YSwga2VlcGluZyB0YWJsZSBpbiBwb3NpdGlvbiB3aXRoIHNhbWUgc29ydFxuXHRyZXBsYWNlRGF0YShkYXRhLCBwYXJhbXMsIGNvbmZpZyl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5kYXRhTG9hZGVyLmxvYWQoZGF0YSwgcGFyYW1zLCBjb25maWcsIHRydWUsIHRydWUpO1xuXHR9XG5cdFxuXHQvL3VwZGF0ZSB0YWJsZSBkYXRhXG5cdHVwZGF0ZURhdGEoZGF0YSl7XG5cdFx0dmFyIHJlc3BvbnNlcyA9IDA7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5kYXRhTG9hZGVyLmJsb2NrQWN0aXZlTG9hZCgpO1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihkYXRhICYmIGRhdGEubGVuZ3RoID4gMCl7XG5cdFx0XHRcdGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpdGVtW3RoaXMub3B0aW9ucy5pbmRleF0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0XHRyZXNwb25zZXMrKztcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0cm93LnVwZGF0ZURhdGEoaXRlbSlcblx0XHRcdFx0XHRcdFx0LnRoZW4oKCk9Pntcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMtLTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0aWYoIXJlc3BvbnNlcyl7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHQuY2F0Y2goKGUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBVbmFibGUgdG8gdXBkYXRlIHJvd1wiLCBpdGVtLCBlKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cmVqZWN0KFwiVXBkYXRlIEVycm9yIC0gVW5hYmxlIHRvIGZpbmQgcm93XCIsIGl0ZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlVwZGF0ZSBFcnJvciAtIE5vIGRhdGEgcHJvdmlkZWRcIik7XG5cdFx0XHRcdHJlamVjdChcIlVwZGF0ZSBFcnJvciAtIE5vIGRhdGEgcHJvdmlkZWRcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdGFkZERhdGEoZGF0YSwgcG9zLCBpbmRleCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5kYXRhTG9hZGVyLmJsb2NrQWN0aXZlTG9hZCgpO1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihkYXRhKXtcblx0XHRcdFx0dGhpcy5yb3dNYW5hZ2VyLmFkZFJvd3MoZGF0YSwgcG9zLCBpbmRleClcblx0XHRcdFx0XHQudGhlbigocm93cykgPT4ge1xuXHRcdFx0XHRcdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0cm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHJlc29sdmUob3V0cHV0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVXBkYXRlIEVycm9yIC0gTm8gZGF0YSBwcm92aWRlZFwiKTtcblx0XHRcdFx0cmVqZWN0KFwiVXBkYXRlIEVycm9yIC0gTm8gZGF0YSBwcm92aWRlZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly91cGRhdGUgdGFibGUgZGF0YVxuXHR1cGRhdGVPckFkZERhdGEoZGF0YSl7XG5cdFx0dmFyIHJvd3MgPSBbXSxcblx0XHRyZXNwb25zZXMgPSAwO1xuXHRcdFxuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cdFx0XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHRoaXMuZGF0YUxvYWRlci5ibG9ja0FjdGl2ZUxvYWQoKTtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApe1xuXHRcdFx0XHRkYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0XHR2YXIgcm93ID0gdGhpcy5yb3dNYW5hZ2VyLmZpbmRSb3coaXRlbVt0aGlzLm9wdGlvbnMuaW5kZXhdKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXNwb25zZXMrKztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdFx0cm93LnVwZGF0ZURhdGEoaXRlbSlcblx0XHRcdFx0XHRcdFx0LnRoZW4oKCk9Pntcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMtLTtcblx0XHRcdFx0XHRcdFx0XHRyb3dzLnB1c2gocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0aWYoIXJlc3BvbnNlcyl7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKHJvd3MpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5yb3dNYW5hZ2VyLmFkZFJvd3MoaXRlbSlcblx0XHRcdFx0XHRcdFx0LnRoZW4oKG5ld1Jvd3MpPT57XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VzLS07XG5cdFx0XHRcdFx0XHRcdFx0cm93cy5wdXNoKG5ld1Jvd3NbMF0uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRpZighcmVzcG9uc2VzKXtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUocm93cyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJVcGRhdGUgRXJyb3IgLSBObyBkYXRhIHByb3ZpZGVkXCIpO1xuXHRcdFx0XHRyZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBObyBkYXRhIHByb3ZpZGVkXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2dldCByb3cgb2JqZWN0XG5cdGdldFJvdyhpbmRleCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGluZGV4KTtcblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0cmV0dXJuIHJvdy5nZXRDb21wb25lbnQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGaW5kIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2dldCByb3cgb2JqZWN0XG5cdGdldFJvd0Zyb21Qb3NpdGlvbihwb3NpdGlvbil7XG5cdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5nZXRSb3dGcm9tUG9zaXRpb24ocG9zaXRpb24pO1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRyZXR1cm4gcm93LmdldENvbXBvbmVudCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZpbmQgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIHBvc2l0aW9uKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdC8vZGVsZXRlIHJvdyBmcm9tIHRhYmxlXG5cdGRlbGV0ZVJvdyhpbmRleCl7XG5cdFx0dmFyIGZvdW5kUm93cyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cdFx0XG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoaW5kZXgpKXtcblx0XHRcdGluZGV4ID0gW2luZGV4XTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9maW5kIG1hdGNoaW5nIHJvd3Ncblx0XHRmb3IobGV0IGl0ZW0gb2YgaW5kZXgpe1xuXHRcdFx0bGV0IHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGl0ZW0sIHRydWUpO1xuXHRcdFx0XG5cdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRmb3VuZFJvd3MucHVzaChyb3cpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRGVsZXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpdGVtKTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFwiRGVsZXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvL3NvcnQgcm93cyBpbnRvIGNvcnJlY3Qgb3JkZXIgdG8gZW5zdXJlIHNtb290aCBkZWxldGUgZnJvbSB0YWJsZVxuXHRcdGZvdW5kUm93cy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLnJvd3MuaW5kZXhPZihhKSA+IHRoaXMucm93TWFuYWdlci5yb3dzLmluZGV4T2YoYikgPyAxIDogLTE7XG5cdFx0fSk7XG5cdFx0XG5cdFx0Ly9kZWxldGUgcm93c1xuXHRcdGZvdW5kUm93cy5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0cm93LmRlbGV0ZSgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMucm93TWFuYWdlci5yZVJlbmRlckluUG9zaXRpb24oKTtcblx0XHRcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblx0XG5cdC8vYWRkIHJvdyB0byB0YWJsZVxuXHRhZGRSb3coZGF0YSwgcG9zLCBpbmRleCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMucm93TWFuYWdlci5hZGRSb3dzKGRhdGEsIHBvcywgaW5kZXgsIHRydWUpXG5cdFx0XHQudGhlbigocm93cyk9Pntcblx0XHRcdFx0cmV0dXJuIHJvd3NbMF0uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHR9KTtcblx0fVxuXHRcblx0Ly91cGRhdGUgYSByb3cgaWYgaXQgZXhpc3RzIG90aGVyd2lzZSBjcmVhdGUgaXRcblx0dXBkYXRlT3JBZGRSb3coaW5kZXgsIGRhdGEpe1xuXHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpbmRleCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiByb3cudXBkYXRlRGF0YShkYXRhKVxuXHRcdFx0XHQudGhlbigoKT0+e1xuXHRcdFx0XHRcdHJldHVybiByb3cuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLnJvd01hbmFnZXIuYWRkUm93cyhkYXRhKVxuXHRcdFx0XHQudGhlbigocm93cyk9Pntcblx0XHRcdFx0XHRyZXR1cm4gcm93c1swXS5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3VwZGF0ZSByb3cgZGF0YVxuXHR1cGRhdGVSb3coaW5kZXgsIGRhdGEpe1xuXHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpbmRleCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiByb3cudXBkYXRlRGF0YShkYXRhKVxuXHRcdFx0XHQudGhlbigoKT0+e1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVXBkYXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmRcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3Njcm9sbCB0byByb3cgaW4gRE9NXG5cdHNjcm9sbFRvUm93KGluZGV4LCBwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHR2YXIgcm93ID0gdGhpcy5yb3dNYW5hZ2VyLmZpbmRSb3coaW5kZXgpO1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHJvdywgcG9zaXRpb24sIGlmVmlzaWJsZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiU2Nyb2xsIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJTY3JvbGwgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmRcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRtb3ZlUm93KGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dmFyIGZyb21Sb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhmcm9tKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGZyb21Sb3cpe1xuXHRcdFx0ZnJvbVJvdy5tb3ZlVG9Sb3codG8sIGFmdGVyKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBmcm9tKTtcblx0XHR9XG5cdH1cblx0XG5cdGdldFJvd3MoYWN0aXZlKXtcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldENvbXBvbmVudHMoYWN0aXZlKTtcdFxuXHR9XG5cdFxuXHQvL2dldCBwb3NpdGlvbiBvZiByb3cgaW4gdGFibGVcblx0Z2V0Um93UG9zaXRpb24oaW5kZXgpe1xuXHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpbmRleCk7XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiByb3cuZ2V0UG9zaXRpb24oKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJQb3NpdGlvbiBFcnJvciAtIE5vIG1hdGNoaW5nIHJvdyBmb3VuZDpcIiwgaW5kZXgpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vIENvbHVtbiBGdW5jdGlvbnMgIC8vLy8vLy8vLy8vLy8vL1xuXHRzZXRDb2x1bW5zKGRlZmluaXRpb24pe1xuXHRcdHRoaXMuaW5pdEd1YXJkKGZhbHNlLCBcIlRvIHNldCBpbml0aWFsIGNvbHVtbnMgcGxlYXNlIHVzZSB0aGUgJ2NvbHVtbnMnIHByb3BlcnR5IGluIHRoZSB0YWJsZSBjb25zdHJ1Y3RvclwiKTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbk1hbmFnZXIuc2V0Q29sdW1ucyhkZWZpbml0aW9uKTtcblx0fVxuXHRcblx0Z2V0Q29sdW1ucyhzdHJ1Y3R1cmVkKXtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5NYW5hZ2VyLmdldENvbXBvbmVudHMoc3RydWN0dXJlZCk7XG5cdH1cblx0XG5cdGdldENvbHVtbihmaWVsZCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGaW5kIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRDb2x1bW5EZWZpbml0aW9ucygpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbk1hbmFnZXIuZ2V0RGVmaW5pdGlvblRyZWUoKTtcblx0fVxuXHRcblx0c2hvd0NvbHVtbihmaWVsZCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRjb2x1bW4uc2hvdygpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBTaG93IEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRoaWRlQ29sdW1uKGZpZWxkKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpOyBcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRjb2x1bW4uaGlkZSgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBIaWRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHR0b2dnbGVDb2x1bW4oZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRjb2x1bW4uaGlkZSgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb2x1bW4uc2hvdygpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBWaXNpYmlsaXR5IFRvZ2dsZSBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgZmllbGQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0YWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5NYW5hZ2VyLmFkZENvbHVtbihkZWZpbml0aW9uLCBiZWZvcmUsIGNvbHVtbilcblx0XHRcdC50aGVuKChjb2x1bW4pID0+IHtcblx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdH0pO1xuXHR9XG5cdFxuXHRkZWxldGVDb2x1bW4oZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0cmV0dXJuIGNvbHVtbi5kZWxldGUoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRGVsZXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdHVwZGF0ZUNvbHVtbkRlZmluaXRpb24oZmllbGQsIGRlZmluaXRpb24pe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0cmV0dXJuIGNvbHVtbi51cGRhdGVEZWZpbml0aW9uKGRlZmluaXRpb24pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBVcGRhdGUgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0bW92ZUNvbHVtbihmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHZhciBmcm9tQ29sdW1uID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZnJvbSksXG5cdFx0dG9Db2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbih0byk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihmcm9tQ29sdW1uKXtcblx0XHRcdGlmKHRvQ29sdW1uKXtcblx0XHRcdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLm1vdmVDb2x1bW4oZnJvbUNvbHVtbiwgdG9Db2x1bW4sIGFmdGVyKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiTW92ZSBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgdG9Db2x1bW4pO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZyb20pO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zY3JvbGwgdG8gY29sdW1uIGluIERPTVxuXHRzY3JvbGxUb0NvbHVtbihmaWVsZCwgcG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbHVtbk1hbmFnZXIuc2Nyb2xsVG9Db2x1bW4oY29sdW1uLCBwb3NpdGlvbiwgaWZWaXNpYmxlKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiU2Nyb2xsIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIlNjcm9sbCBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vIEdlbmVyYWwgUHVibGljIEZ1bmN0aW9ucyAvLy8vLy8vLy8vLy9cblx0Ly9yZWRyYXcgbGlzdCB3aXRob3V0IHVwZGF0aW5nIGRhdGFcblx0cmVkcmF3KGZvcmNlKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLnJlZHJhdyhmb3JjZSk7XG5cdFx0dGhpcy5yb3dNYW5hZ2VyLnJlZHJhdyhmb3JjZSk7XG5cdH1cblx0XG5cdHNldEhlaWdodChoZWlnaHQpe1xuXHRcdHRoaXMub3B0aW9ucy5oZWlnaHQgPSBpc05hTihoZWlnaHQpID8gaGVpZ2h0IDogaGVpZ2h0ICsgXCJweFwiO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLm9wdGlvbnMuaGVpZ2h0O1xuXHRcdHRoaXMucm93TWFuYWdlci5pbml0aWFsaXplUmVuZGVyZXIoKTtcblx0XHR0aGlzLnJvd01hbmFnZXIucmVkcmF3KHRydWUpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLyBFdmVudCBCdXMgLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0b24oa2V5LCBjYWxsYmFjayl7XG5cdFx0dGhpcy5leHRlcm5hbEV2ZW50cy5zdWJzY3JpYmUoa2V5LCBjYWxsYmFjayk7XG5cdH1cblx0XG5cdG9mZihrZXksIGNhbGxiYWNrKXtcblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzLnVuc3Vic2NyaWJlKGtleSwgY2FsbGJhY2spO1xuXHR9XG5cdFxuXHRkaXNwYXRjaEV2ZW50KCl7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyk7XG5cdFx0YXJncy5zaGlmdCgpO1xuXHRcdFxuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vIEFsZXJ0cyAvLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0YWxlcnQoY29udGVudHMsIHR5cGUpe1xuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cblx0XHR0aGlzLmFsZXJ0TWFuYWdlci5hbGVydChjb250ZW50cywgdHlwZSk7XG5cdH1cblxuXHRjbGVhckFsZXJ0KCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblxuXHRcdHRoaXMuYWxlcnRNYW5hZ2VyLmNsZWFyKCk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vIEV4dGVuc2lvbiBNYW5hZ2VtZW50IC8vLy8vLy8vLy8vLy8vXG5cdG1vZEV4aXN0cyhwbHVnaW4sIHJlcXVpcmVkKXtcblx0XHRpZih0aGlzLm1vZHVsZXNbcGx1Z2luXSl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihyZXF1aXJlZCl7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJUYWJ1bGF0b3IgTW9kdWxlIE5vdCBJbnN0YWxsZWQ6IFwiICsgcGx1Z2luKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdG1vZHVsZShrZXkpe1xuXHRcdHZhciBtb2QgPSB0aGlzLm1vZHVsZXNba2V5XTtcblx0XHRcblx0XHRpZighbW9kKXtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJUYWJ1bGF0b3IgbW9kdWxlIG5vdCBpbnN0YWxsZWQ6IFwiICsga2V5KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG1vZDtcblx0fVxufVxuXG52YXIgVGFidWxhdG9yJDEgPSBUYWJ1bGF0b3I7XG5cbi8vdGFidWxhdG9yIHdpdGggYWxsIG1vZHVsZXMgaW5zdGFsbGVkXG5cbmNsYXNzIFRhYnVsYXRvckZ1bGwgZXh0ZW5kcyBUYWJ1bGF0b3IkMSB7XG5cdHN0YXRpYyBleHRlbmRNb2R1bGUoKXtcblx0XHRUYWJ1bGF0b3IkMS5pbml0aWFsaXplTW9kdWxlQmluZGVyKGFsbE1vZHVsZXMpO1xuXHRcdFRhYnVsYXRvciQxLl9leHRlbmRNb2R1bGUoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdHN0YXRpYyByZWdpc3Rlck1vZHVsZSgpe1xuXHRcdFRhYnVsYXRvciQxLmluaXRpYWxpemVNb2R1bGVCaW5kZXIoYWxsTW9kdWxlcyk7XG5cdFx0VGFidWxhdG9yJDEuX3JlZ2lzdGVyTW9kdWxlKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zLCBtb2R1bGVzKXtcblx0XHRzdXBlcihlbGVtZW50LCBvcHRpb25zLCBhbGxNb2R1bGVzKTtcblx0fVxufVxuXG52YXIgVGFidWxhdG9yRnVsbCQxID0gVGFidWxhdG9yRnVsbDtcblxuY2xhc3MgUHNldWRvUm93IHtcblxuXHRjb25zdHJ1Y3RvciAodHlwZSl7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLl9jcmVhdGVFbGVtZW50KCk7XG5cdH1cblxuXHRfY3JlYXRlRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3dcIik7XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH1cblxuXHRnZXRDb21wb25lbnQoKXtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRnZXREYXRhKCl7XG5cdFx0cmV0dXJuIHt9O1xuXHR9XG5cblx0Z2V0SGVpZ2h0KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudC5vdXRlckhlaWdodDtcblx0fVxuXG5cdGluaXRpYWxpemUoKXt9XG5cblx0cmVpbml0aWFsaXplKCl7fVxuXG5cdG5vcm1hbGl6ZUhlaWdodCgpe31cblxuXHRnZW5lcmF0ZUNlbGxzKCl7fVxuXG5cdHJlaW5pdGlhbGl6ZUhlaWdodCgpe31cblxuXHRjYWxjSGVpZ2h0KCl7fVxuXG5cdHNldENlbGxIZWlnaHQoKXt9XG5cblx0Y2xlYXJDZWxsSGVpZ2h0KCl7fVxuXG5cdHJlbmRlcmVkKCl7fVxufVxuXG5leHBvcnQgeyBBY2Nlc3NvciBhcyBBY2Nlc3Nvck1vZHVsZSwgQWpheCBhcyBBamF4TW9kdWxlLCBDYWxjQ29tcG9uZW50LCBDZWxsQ29tcG9uZW50LCBDbGlwYm9hcmQgYXMgQ2xpcGJvYXJkTW9kdWxlLCBDb2x1bW5DYWxjcyBhcyBDb2x1bW5DYWxjc01vZHVsZSwgQ29sdW1uQ29tcG9uZW50LCBEYXRhVHJlZSBhcyBEYXRhVHJlZU1vZHVsZSwgRG93bmxvYWQgYXMgRG93bmxvYWRNb2R1bGUsIEVkaXQgYXMgRWRpdE1vZHVsZSwgRXhwb3J0IGFzIEV4cG9ydE1vZHVsZSwgRmlsdGVyIGFzIEZpbHRlck1vZHVsZSwgRm9ybWF0IGFzIEZvcm1hdE1vZHVsZSwgRnJvemVuQ29sdW1ucyBhcyBGcm96ZW5Db2x1bW5zTW9kdWxlLCBGcm96ZW5Sb3dzIGFzIEZyb3plblJvd3NNb2R1bGUsIEdyb3VwQ29tcG9uZW50LCBHcm91cFJvd3MgYXMgR3JvdXBSb3dzTW9kdWxlLCBIaXN0b3J5IGFzIEhpc3RvcnlNb2R1bGUsIEh0bWxUYWJsZUltcG9ydCBhcyBIdG1sVGFibGVJbXBvcnRNb2R1bGUsIEltcG9ydCBhcyBJbXBvcnRNb2R1bGUsIEludGVyYWN0aW9uIGFzIEludGVyYWN0aW9uTW9kdWxlLCBLZXliaW5kaW5ncyBhcyBLZXliaW5kaW5nc01vZHVsZSwgTWVudSBhcyBNZW51TW9kdWxlLCBNb2R1bGUsIE1vdmVDb2x1bW5zIGFzIE1vdmVDb2x1bW5zTW9kdWxlLCBNb3ZlUm93cyBhcyBNb3ZlUm93c01vZHVsZSwgTXV0YXRvciBhcyBNdXRhdG9yTW9kdWxlLCBQYWdlIGFzIFBhZ2VNb2R1bGUsIFBlcnNpc3RlbmNlIGFzIFBlcnNpc3RlbmNlTW9kdWxlLCBQb3B1cCBhcyBQb3B1cE1vZHVsZSwgUHJpbnQgYXMgUHJpbnRNb2R1bGUsIFBzZXVkb1JvdywgUmFuZ2VDb21wb25lbnQsIFJlYWN0aXZlRGF0YSBhcyBSZWFjdGl2ZURhdGFNb2R1bGUsIFJlbmRlcmVyLCBSZXNpemVDb2x1bW5zIGFzIFJlc2l6ZUNvbHVtbnNNb2R1bGUsIFJlc2l6ZVJvd3MgYXMgUmVzaXplUm93c01vZHVsZSwgUmVzaXplVGFibGUgYXMgUmVzaXplVGFibGVNb2R1bGUsIFJlc3BvbnNpdmVMYXlvdXQgYXMgUmVzcG9uc2l2ZUxheW91dE1vZHVsZSwgUm93Q29tcG9uZW50LCBTZWxlY3RSYW5nZSBhcyBTZWxlY3RSYW5nZU1vZHVsZSwgU2VsZWN0Um93IGFzIFNlbGVjdFJvd01vZHVsZSwgU2hlZXRDb21wb25lbnQsIFNvcnQgYXMgU29ydE1vZHVsZSwgU3ByZWFkc2hlZXQgYXMgU3ByZWFkc2hlZXRNb2R1bGUsIFRhYnVsYXRvciQxIGFzIFRhYnVsYXRvciwgVGFidWxhdG9yRnVsbCQxIGFzIFRhYnVsYXRvckZ1bGwsIFRvb2x0aXAgYXMgVG9vbHRpcE1vZHVsZSwgVmFsaWRhdGUgYXMgVmFsaWRhdGVNb2R1bGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhYnVsYXRvcl9lc20ubWpzLm1hcFxuIiwiaW1wb3J0IGNsaWVudCBmcm9tICdndzJhcGktY2xpZW50JztcclxuaW1wb3J0IGNhY2hlTWVtb3J5IGZyb20gJ2d3MmFwaS1jbGllbnQvc3JjL2NhY2hlL21lbW9yeS5qcyc7XHJcbmltcG9ydCBjYWNoZUJyb3dzZXJTdG9yYWdlIGZyb20gJ2d3MmFwaS1jbGllbnQvc3JjL2NhY2hlL2Jyb3dzZXIuanMnO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50KGtleSkge1xyXG4gICAgY29uc3QgYyA9IGNsaWVudCgpO1xyXG4gICAgYy5zY2hlbWEoXCIyMDI0LTA3LTIwVDAxOjAwOjAwLjAwMFpcIik7XHJcbiAgICBjLmxhbmd1YWdlKFwiZW5cIik7XHJcbiAgICBpZihrZXkpIGMuYXV0aGVudGljYXRlKGtleSk7XHJcbiAgICBjLmNhY2hlU3RvcmFnZShbXHJcbiAgICAgICAgY2FjaGVNZW1vcnkoeyBnY1RpY2s6IDUgKiA2MCAqIDEwMDAgfSksXHJcbiAgICAgICAgY2FjaGVCcm93c2VyU3RvcmFnZSh7XHJcbiAgICAgICAgICAgIHN0b3JhZ2VLZXk6IGBndzJhcGktY2FjaGVfJHtrZXl9YCxcclxuICAgICAgICAgICAgZ2NUaWNrOiAzICogNjAgKiAxMDAwXHJcbiAgICAgICAgfSlcclxuICAgIF0pO1xyXG4gICAgcmV0dXJuIGM7XHJcbn1cclxuXHJcbmNsYXNzIFBsYXllciB7XHJcbiAgICBhcGk7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBlbW9qaSwgaWNvblVybCwga2V5KSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmVtb2ppID0gZW1vamk7XHJcbiAgICAgICAgdGhpcy5pY29uVXJsID0gaWNvblVybDtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICBcclxuICAgICAgICBpZighbmFtZSkgdGhyb3cgXCJQbGVhc2UgbmFtZSB0aGUgcGxheWVyc1wiO1xyXG4gICAgICAgIGlmKCFlbW9qaSkgdGhyb3cgYCR7bmFtZX0gbmVlZHMgZW1vamlgO1xyXG4gICAgICAgIGlmKCFrZXkpIHRocm93IGAke25hbWV9IG5lZWRzIGtleWA7XHJcblxyXG4gICAgICAgIHRoaXMuYXBpID0gY3JlYXRlQ2xpZW50KGtleSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFwaUhvbGRlcigpIHtcclxuICAgIGlmKCF3aW5kb3cuYXBpSG9sZGVyKSB7XHJcbiAgICAgICAgY29uc3QgcGxheWVycyA9IHJlYWRQbGF5ZXJzKCk7XHJcbiAgICAgICAgd2luZG93LmFwaUhvbGRlciA9IHtcclxuICAgICAgICAgICAgcGxheWVyczogcGxheWVycyxcclxuICAgICAgICAgICAgYXBpOiBjcmVhdGVDbGllbnQobnVsbClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHdpbmRvdy5hcGlIb2xkZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRQbGF5ZXJzKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJ0b2RvIHJlYWRwbGF5ZXJzXCIpO1xyXG4gICAgdmFyIHBsYXllcnMgPSBbXTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IHN0b3JlZFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJndzItbm8tbnVhbmNlLXBsYXllcnNcIik7XHJcbiAgICAgICAgaWYoc3RvcmVkVmFsdWUpXHJcbiAgICAgICAgICAgIGZvcih2YXIgcCBvZiBKU09OLnBhcnNlKHN0b3JlZFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcGxheWVycy5wdXNoKG5ldyBQbGF5ZXIocC5uYW1lLCBwLmVtb2ppLCBwLmljb25VcmwsIHAua2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgIGFsZXJ0KGUpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2cocGxheWVycyk7XHJcbiAgICByZXR1cm4gcGxheWVycztcclxufVxyXG5cclxuZnVuY3Rpb24gd3JpdGVQbGF5ZXJzKHBsYXllcnMpIHtcclxuICAgIGNvbnNvbGUubG9nKFwic2F2ZXBsYXllcnMgdG9kb1wiKTtcclxuICAgIGNvbnNvbGUubG9nKHBsYXllcnMpO1xyXG4gICAgbGV0IHN0b3JlZFZhbHVlID0gSlNPTi5zdHJpbmdpZnkocGxheWVycywgKGtleSx2YWx1ZSkgPT4geyBpZiAoa2V5PT1cImFwaVwiKSByZXR1cm4gdW5kZWZpbmVkOyBlbHNlIHJldHVybiB2YWx1ZTsgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdG9yZWRWYWx1ZSk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImd3Mi1uby1udWFuY2UtcGxheWVyc1wiLCBzdG9yZWRWYWx1ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwaUhvbGRlclNldHVwSHRtbChlbGVtZW50SWQpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xyXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xyXG5cclxuICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xyXG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZCh0YWJsZSk7XHJcblxyXG4gICAgLy9jb25zdCB0aGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoZWFkZXJcIik7XHJcbiAgICBjb25zdCB0aGVhZGVyUm93ID0gIHRhYmxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKSk7XHJcbiAgICB0aGVhZGVyUm93LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKSkuaW5uZXJUZXh0ID0gXCJQbGF5ZXIgbmFtZVwiO1xyXG4gICAgdGhlYWRlclJvdy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIikpLmlubmVyVGV4dCA9IFwiRW1vamlcIjtcclxuICAgIHRoZWFkZXJSb3cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpKS5pbm5lclRleHQgPSBcIkljb24gVVJMXCI7XHJcbiAgICB0aGVhZGVyUm93LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKSkuaW5uZXJUZXh0ID0gXCJBUEkgS2V5XCI7XHJcbiAgICB0aGVhZGVyUm93LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKSkuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgIC8vdGFibGUuYXBwZW5kQ2hpbGQodGhlYWRlcik7XHJcblxyXG4gICAgY29uc3QgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIik7XHJcbiAgICB0YWJsZS5hcHBlbmRDaGlsZCh0Ym9keSk7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uQWRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbkFkZC5pbm5lclRleHQgPSBcIkFkZCByb3dcIjtcclxuICAgIGNvbnN0IGJ1dHRvblNhdmU9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidXR0b25TYXZlLmlubmVyVGV4dCA9IFwiU2F2ZVwiO1xyXG5cclxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uQWRkKTtcclxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uU2F2ZSk7XHJcblxyXG4gICAgY29uc3QgYWRkUm93ID0gZnVuY3Rpb24ocGxheWVyKSB7XHJcbiAgICAgICAgY29uc3Qgcm93ID0gdGFibGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHJvdyBmb3IgcGxheWVyOlwiKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhwbGF5ZXIpO1xyXG4gICAgICAgIHJvdy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIikpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkudmFsdWUgPSBwbGF5ZXI/Lm5hbWUgICAgPz8gXCJcIjtcclxuICAgICAgICByb3cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnZhbHVlID0gcGxheWVyPy5lbW9qaSAgID8/IFwiXCI7XHJcbiAgICAgICAgcm93LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKSkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS52YWx1ZSA9IHBsYXllcj8uaWNvblVybCA/PyBcIlwiO1xyXG4gICAgICAgIHJvdy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIikpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkudmFsdWUgPSBwbGF5ZXI/LmtleSAgICAgPz8gXCJcIjtcclxuICAgICAgICBjb25zdCBkZWwgPSByb3cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpKTtcclxuICAgICAgICBkZWwuaW5uZXJUZXh0ID0gXCLinYxcIlxyXG4gICAgICAgIGRlbC5vbmNsaWNrID0gKCkgPT4geyByb3cucmVtb3ZlKCk7IH07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKHZhciBwbGF5ZXIgb2YgcmVhZFBsYXllcnMoKSkge1xyXG4gICAgICAgIGFkZFJvdyhwbGF5ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbkFkZC5vbmNsaWNrID0gKCkgPT4geyBhZGRSb3cobnVsbCk7IH07XHJcbiAgICBidXR0b25TYXZlLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGxheWVycyA9IFtdO1xyXG4gICAgICAgIGZvcih2YXIgaSBpbiB0YWJsZS5yb3dzKSB7XHJcbiAgICAgICAgICAgIGlmKGk9PTApIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjb25zdCB0ciA9IHRhYmxlLnJvd3NbaV07XHJcbiAgICAgICAgICAgIGlmKHRyLmxvY2FsTmFtZSE9XCJ0clwiKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgaTAgPSB0ci5jZWxsc1swXS5jaGlsZHJlblswXS52YWx1ZVxyXG4gICAgICAgICAgICBjb25zdCBpMSA9IHRyLmNlbGxzWzFdLmNoaWxkcmVuWzBdLnZhbHVlXHJcbiAgICAgICAgICAgIGNvbnN0IGkyID0gdHIuY2VsbHNbMl0uY2hpbGRyZW5bMF0udmFsdWVcclxuICAgICAgICAgICAgY29uc3QgaTMgPSB0ci5jZWxsc1szXS5jaGlsZHJlblswXS52YWx1ZVxyXG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2gobmV3IFBsYXllcihpMCxpMSxpMixpMykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3cml0ZVBsYXllcnMocGxheWVycyk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBnZXRBcGlIb2xkZXI6IGdldEFwaUhvbGRlcixcclxuICAgIGFwaUhvbGRlclNldHVwSHRtbDogYXBpSG9sZGVyU2V0dXBIdG1sLFxyXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJpbnRNZSgpIHtcclxuICBjb25zb2xlLmxvZygnSSBnZXQgY2FsbGVkIGZyb20gcHJpbnQuanMhJyk7XHJcbn1cclxuIiwiLy8gaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9tYW51YWwvaW5zdGFsbGF0aW9uXHJcblxyXG5pbXBvcnQge1RhYnVsYXRvciwgSHRtbFRhYmxlSW1wb3J0TW9kdWxlLCBGaWx0ZXJNb2R1bGUsIEVkaXRNb2R1bGUsIEZvcm1hdE1vZHVsZSwgQ29sdW1uQ2FsY3NNb2R1bGUsIE11dGF0b3JNb2R1bGUsIEdyb3VwUm93c01vZHVsZX0gZnJvbSAndGFidWxhdG9yLXRhYmxlcyc7XHJcbmltcG9ydCBhcGlIb2xkZXIgZnJvbSAnLi9hcGktaG9sZGVyLmpzJztcclxuXHJcblRhYnVsYXRvci5yZWdpc3Rlck1vZHVsZShbSHRtbFRhYmxlSW1wb3J0TW9kdWxlLCBGaWx0ZXJNb2R1bGUsIEVkaXRNb2R1bGUsIEZvcm1hdE1vZHVsZSwgQ29sdW1uQ2FsY3NNb2R1bGUsIE11dGF0b3JNb2R1bGUsIEdyb3VwUm93c01vZHVsZV0pO1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGFibGVFbGVtZW50IFxyXG4gKiBAcGFyYW0gY29sdW1ucyBTZWUgaHR0cHM6Ly90YWJ1bGF0b3IuaW5mby9kb2NzLzYuMy9jb2x1bW5zLCBUTDtEUjogYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCBzaG91bGQgaGF2ZSBcInRpdGxlXCIgKyBcImZpZWxkXCJcclxuICogQHBhcmFtIHRhYmxlRGF0YSBhcnJheSBvZiBvYmplY3RzXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlVGFibGVGcm9tRGF0YShcclxuICAgIHRhYmxlRWxlbWVudCxcclxuICAgIGNvbHVtbnMsXHJcbiAgICB0YWJsZURhdGEsXHJcbikge1xyXG4gICAgbGV0IHRhYmxlID0gbmV3IFRhYnVsYXRvcih0YWJsZUVsZW1lbnQsIHtcclxuICAgICAgICBsYXlvdXQ6IFwiZml0RGF0YUZpbGxcIixcclxuICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLFxyXG4gICAgICAgIGRhdGE6IHRhYmxlRGF0YVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRhYmxlO1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIENyZWF0ZXMgYSB0YWJsZSBmcm9tIGFuIEhUTUwgdGFibGUgZWxlbWVudCwgYW5kIGFkZHMgYSBjb2x1bW4gZm9yIGVhY2ggcGxheWVyLlxyXG4gKiBUaGUgZWxlbWVudCBNVVNUIGhhdmUgYW4gaWQgY29sdW1uLlxyXG4gKiBcclxuICogQHBhcmFtIHsqfSB0YWJsZUVsZW1lbnQgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlVGFibGVXaXRoUGxheWVyQ29sdW1ucyhcclxuICAgIHRhYmxlRWxlbWVudCxcclxuXHJcbikge1xyXG4gICAgbGV0IHRhYmxlID0gbmV3IFRhYnVsYXRvcih0YWJsZUVsZW1lbnQsIHtcclxuICAgICAgICBsYXlvdXQ6IFwiZml0RGF0YUZpbGxcIixcclxuICAgIH0pO1xyXG5cclxuICAgIHRhYmxlLm9uKFwidGFibGVCdWlsdFwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIC8vIHRvZG8gaGlkZSBpZCBjb2x1bW5cclxuICAgICAgICBmb3IobGV0IHBsYXllciBvZiBhcGlIb2xkZXIuZ2V0QXBpSG9sZGVyKCkucGxheWVycykge1xyXG4gICAgICAgICAgICB0YWJsZS5hZGRDb2x1bW4oe1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHBsYXllci5lbW9qaSxcclxuICAgICAgICAgICAgICAgIGZpZWxkOiBwbGF5ZXIubmFtZSxcclxuICAgICAgICAgICAgICAgIGhlYWRlckhvekFsaWduOiBcImNlbnRlclwiLFxyXG4gICAgICAgICAgICAgICAgaG96QWxpZ246IFwiY2VudGVyXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJGaWx0ZXI6XCJpbnB1dFwiLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcGxheWVyLmFwaS5hY2NvdW50KCkuYWNoaWV2ZW1lbnRzKCkuZ2V0KCkudGhlbigoYWNjb3VudEFjaGlldmVtZW50cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGFhID0gYWNjb3VudEFjaGlldmVtZW50cy5yZWR1Y2UoKG1hcCxvYmopPT57IG1hcFtvYmouaWRdID0gb2JqOyByZXR1cm4gbWFwOyB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IHIgb2YgdGFibGUuZ2V0RGF0YSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBhYVtyLmlkXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHh0ID0gXCItXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYT8uZG9uZSkgdHh0ID0gXCLinIVcIlxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihhPy5tYXgpIHR4dCA9IGAke2E/LmN1cnJlbnQ/PzB9LyR7YT8ubWF4fWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBkW3BsYXllci5uYW1lXSA9IHR4dDtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS51cGRhdGVSb3coci5pZCwgZClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0YWJsZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRGF0YVRhYmxlKHRhYmxlRWxlbWVudCkge1xyXG4gICAgbGV0IHRhYmxlID0gbmV3IFRhYnVsYXRvcih0YWJsZUVsZW1lbnQsIHtcclxuICAgICAgICBsYXlvdXQ6IFwiZml0RGF0YUZpbGxcIixcclxuICAgIH0pO1xyXG5cclxuICAgIHRhYmxlLm9uKFwidGFibGVCdWlsdFwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIGZvcihsZXQgcGxheWVyIG9mIGFwaUhvbGRlci5nZXRBcGlIb2xkZXIoKS5wbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIHRhYmxlLmFkZENvbHVtbih7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogcGxheWVyLmVtb2ppLFxyXG4gICAgICAgICAgICAgICAgZmllbGQ6IHBsYXllci5uYW1lLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVySG96QWxpZ246IFwiY2VudGVyXCIsXHJcbiAgICAgICAgICAgICAgICBob3pBbGlnbjogXCJjZW50ZXJcIixcclxuICAgICAgICAgICAgICAgIGhlYWRlckZpbHRlcjpcImlucHV0XCIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwbGF5ZXIuYXBpLmFjY291bnQoKS5hY2hpZXZlbWVudHMoKS5nZXQoKS50aGVuKChhY2NvdW50QWNoaWV2ZW1lbnRzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWEgPSBhY2NvdW50QWNoaWV2ZW1lbnRzLnJlZHVjZSgobWFwLG9iaik9PnsgbWFwW29iai5pZF0gPSBvYmo7IHJldHVybiBtYXA7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgciBvZiB0YWJsZS5nZXREYXRhKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IGFhW3IuaWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0eHQgPSBcIi1cIjtcclxuICAgICAgICAgICAgICAgICAgICBpZihhPy5kb25lKSB0eHQgPSBcIuKchVwiXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGE/Lm1heCkgdHh0ID0gYCR7YT8uY3VycmVudD8/MH0vJHthPy5tYXh9YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRbcGxheWVyLm5hbWVdID0gdHh0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnVwZGF0ZVJvdyhyLmlkLCBkKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRhYmxlO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICB0YWJ1bGF0b3I6IFRhYnVsYXRvcixcclxuICAgIGNyZWF0ZURhdGFUYWJsZTogY3JlYXRlRGF0YVRhYmxlLFxyXG4gICAgY3JlYXRlVGFibGVGcm9tRGF0YTogY3JlYXRlVGFibGVGcm9tRGF0YSxcclxufVxyXG4iLCJcclxuY2xhc3MgQ29pbnMge1xyXG4gICAgZztcclxuICAgIHM7XHJcbiAgICBjO1xyXG4gICAgLy8gdXNlIG4gaW4gY2FsY3VsYXRpb25zXHJcbiAgICBuO1xyXG4gICAgLy8gbiwgYnV0IGFic29sdXRlXHJcbiAgICBuQWJzb2x1dGU7XHJcbiAgICBzaWduO1xyXG4gICAgY29uc3RydWN0b3Iobikge1xyXG4gICAgICAgIHRoaXMubiAgICAgICAgID0gbjtcclxuICAgICAgICB0aGlzLm5BYnNvbHV0ZSA9IE1hdGguYWJzKG4pO1xyXG4gICAgICAgIHRoaXMuc2lnbiAgICAgID0gTWF0aC5zaWduKG4pO1xyXG4gICAgICAgIHRoaXMuZyA9IE1hdGguZmxvb3IodGhpcy5uQWJzb2x1dGUgLyAxMDAwMCk7XHJcbiAgICAgICAgdGhpcy5zID0gTWF0aC5mbG9vcih0aGlzLm5BYnNvbHV0ZSAvIDEwMCkgJSAxMDA7XHJcbiAgICAgICAgdGhpcy5jID0gdGhpcy5uQWJzb2x1dGUgJSAxMDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHR4dFNpZ24gPSBcIlwiO1xyXG4gICAgICAgIGxldCB0eHRHID0gXCJcIjtcclxuICAgICAgICBsZXQgdHh0UyA9IFwiXCI7XHJcbiAgICAgICAgaWYodGhpcy5zaWduIDwgMCkgICAgICB0eHRTaWduID0gXCItXCI7XHJcbiAgICAgICAgaWYodGhpcy5nPjApICAgICAgICAgICB0eHRHID0gYCR7dGhpcy5nffCfn6EgYDtcclxuICAgICAgICBpZih0aGlzLmc+MHx8dGhpcy5zPjApIHR4dFMgPSBgJHt0aGlzLnN94pqqIGA7XHJcbiAgICAgICAgbGV0ICAgICAgICAgICAgICAgICAgICB0eHRDID0gYCR7dGhpcy5jffCfn6BgO1xyXG5cclxuICAgICAgICB0aGlzLnR4dCA9IGAke3R4dFNpZ259JHt0eHRHfSR7dHh0U30ke3R4dEN9YDtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU3Bpbm5lcigpIHtcclxuICAgIGxldCBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XHJcbiAgICBpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZmFzIGZhLXNwaW5uZXIgZmEtcHVsc2VcIik7XHJcbiAgICByZXR1cm4gaTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgaW50MmNvaW5zOiAobik9Pm5ldyBDb2lucyhuKSxcclxuICAgIGNyZWF0ZVNwaW5uZXI6IGNyZWF0ZVNwaW5uZXIsXHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCBwcmludE1lIGZyb20gJy4vcHJpbnQuanMnO1xyXG5cclxuaW1wb3J0ICcuL2FwaS1ob2xkZXIuanMnO1xyXG5pbXBvcnQgYXBpSG9sZGVyIGZyb20gJy4vYXBpLWhvbGRlci5qcyc7XHJcbmltcG9ydCB0YWJsZXMgZnJvbSAnLi90YWJsZXMuanMnO1xyXG5pbXBvcnQgdXRpbCBmcm9tICcuL3V0aWwuanMnO1xyXG5cclxuY29uc29sZS5sb2coXCJIRUxMTyFcIik7XHJcblxyXG5mdW5jdGlvbiBoZWxsbygpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiSGVsbG8gZnJvbSBmdW5jdGlvbiFcIik7XHJcbn1cclxuXHJcbndpbmRvdy5ndzIgPSB7XHJcbiAgICBhcGlIb2xkZXI6IGFwaUhvbGRlcixcclxuICAgIHRhYmxlczogdGFibGVzLFxyXG4gICAgdXRpbDogdXRpbCxcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=